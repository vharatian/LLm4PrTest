/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 03:44:52 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-70);
      byteArray0[0] = (byte) (-70);
      char char0 = '+';
      int int0 = 51;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '+', 51, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      String string0 = StringUtils.rightPad("mbkz7W#", 71, "%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals("mbkz7W#%s was not annotated with @ArgumentsSource but should have been.", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "%s was not annotated with @ArgumentsSource but should have been.";
      charSequenceArray0[1] = (CharSequence) "mbkz7W#";
      charSequenceArray0[2] = (CharSequence) "%s was not annotated with @ArgumentsSource but should have been.";
      charSequenceArray0[3] = (CharSequence) "mbkz7W#%s was not annotated with @ArgumentsSource but should have been.";
      charSequenceArray0[4] = (CharSequence) "mbkz7W#";
      charSequenceArray0[5] = (CharSequence) "mbkz7W#";
      String string1 = StringUtils.replace("mbkz7W#%s was not annotated with @ArgumentsSource but should have been.", "mbkz7W#%s was not annotated with @ArgumentsSource but should have been.", "b,Edtbga<Yod7\"kZe8g...", 71);
      assertFalse(string1.equals((Object)string0));
      assertEquals("b,Edtbga<Yod7\"kZe8g...", string1);
      assertNotNull(string1);
      
      charSequenceArray0[6] = (CharSequence) "b,Edtbga<Yod7\"kZe8g...";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Never disable parameterized test method itself", 46, 15);
      assertEquals("...ethod itself", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("KJX}", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("KJX}");
      assertEquals(4, int0);
      
      String string0 = StringUtils.unwrap("", "KJX}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "KJX}", (CharSequence) "", 4);
      assertTrue(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("KJX}", "KJX}", 1);
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("KJX}", "KJX}", 1);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "KJX}", 1);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfterLast("GMT", "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("[*{*P{J,)=rr2%vy3");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[*{*P{J,)=rr2%vy3", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("Minimum abbreviation width is %d");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "KJX}");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rotate("Mc'tP4Hx&", 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Mc'tP4Hx&", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.Charsets", 'a');
      assertEquals("aorg.apache.commons.lang3.Charsetsa", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "org.apache.commons.lang3.Charsets");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat("aorg.apache.commons.lang3.Charsetsa", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("B-DwIUi");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("B-DwIUi", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'r';
      charArray0[2] = 'a';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "aorg.apache.commons.lang3.Charsetsa", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'r', '\u0000', 'a'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(1, int1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "aorg.apache.commons.lang3.Charsetsa";
      objectArray0[1] = (Object) 'a';
      objectArray0[2] = (Object) "org.apache.commons.lang3.Charsets";
      objectArray0[3] = (Object) "B-DwIUi";
      objectArray0[4] = (Object) 'r';
      objectArray0[5] = (Object) "aorg.apache.commons.lang3.Charsetsa";
      objectArray0[6] = (Object) "org.apache.commons.lang3.Charsets";
      objectArray0[7] = (Object) 'r';
      objectArray0[8] = (Object) "B-DwIUi";
      String string3 = StringUtils.join(objectArray0, '`', (-1), (-862));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, objectArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("/1wlO)}LL+nT/<xl");
      assertEquals("/1wlO)}LL+nT/<xl", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "/1wlO)}LL+nT/<xl", (CharSequence) "/1wlO)}LL+nT/<xl");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("/1wlO)}LL+nT/<xl", supplier0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("/1wlO)}LL+nT/<xl", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterator<?>) null, 'R');
      assertNull(string2);
      
      // Undeclared exception!
      StringUtils.leftPad("/1wlO)}LL+nT/<xl", 65536, "1JU1@");
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("org.apache.commons.lang3.CharSequenceUtils", 64);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Ht_Ds^QhN", 13);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ht_Ds^QhN", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string0, "org.apache.commons.lang3.CharSequenceUtils");
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.stripAccents("oC8<7py%[");
      assertEquals("oC8<7py%[", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("\n", 8192, "\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "oC8<7py%[";
      stringArray0[1] = "oC8<7py%[";
      stringArray0[2] = string1;
      stringArray0[3] = "g6 v|?!Q!$4h8IfN:";
      stringArray0[4] = "\n";
      stringArray0[5] = "\n";
      stringArray0[6] = "oC8<7py%[";
      stringArray0[7] = string1;
      stringArray0[8] = "\n";
      // Undeclared exception!
      StringUtils.stripAll(stringArray0, "\n");
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      objectArray0[3] = (Object) 'K';
      objectArray0[4] = (Object) ":I)L";
      String string0 = StringUtils.join(objectArray0, '%', 4, (int) (byte)10);
      assertEquals(10, objectArray0.length);
      assertEquals(":I)L%%%%%", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad(":I)L", (int) (byte)10, "%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("%s was:I)L", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance(":I)L%%%%%", ":I)L");
      assertEquals(0.89, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = "\r";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\r";
      char char0 = '1';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '1', 2192, 2040109465);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      String string1 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 2494);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.isAsciiPrintable(string1);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String string0 = StringUtils.repeat("h", 8192);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string0, ")_JyVR");
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.normalizeSpace("maxWith cannot^be\"negative");
      assertEquals("maxWith cannot^be\"negative", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "maxWith cannot^be\"negative", (CharSequence) "maxWith cannot^be\"negative");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "maxWith cannot^be\"negative", (CharSequence) "maxWith cannot^be\"negative");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot^be\"negative";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot^be\"negative";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot^be\"negative";
      charSequenceArray0[3] = (CharSequence) "maxWith cannot^be\"negative";
      charSequenceArray0[4] = (CharSequence) "maxWith cannot^be\"negative";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot^be\"negative";
      charSequenceArray0[6] = (CharSequence) "maxWith cannot^be\"negative";
      // Undeclared exception!
      try { 
        Charset.forName("];%p;Fh%enhBHCnB;=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ];%p;Fh%enhBHCnB;=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ", " ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " ");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = '7';
      charArray0[2] = 'L';
      charArray0[3] = '^';
      charArray0[4] = 'x';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {' ', '7', 'L', '^', 'x'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      String string0 = StringUtils.rightPad("GCnB;c", 8202);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Canada", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.getFuzzyDistance(string0, string0, locale0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, ';');
      assertEquals(250, stringArray0.length);
      assertEquals("AD;AE;AF;AG;AI;AL;AM;AN;AO;AQ;AR;AS;AT;AU;AW;AX;AZ;BA;BB;BD;BE;BF;BG;BH;BI;BJ;BL;BM;BN;BO;BQ;BR;BS;BT;BV;BW;BY;BZ;CA;CC;CD;CF;CG;CH;CI;CK;CL;CM;CN;CO;CR;CU;CV;CW;CX;CY;CZ;DE;DJ;DK;DM;DO;DZ;EC;EE;EG;EH;ER;ES;ET;FI;FJ;FK;FM;FO;FR;GA;GB;GD;GE;GF;GG;GH;GI;GL;GM;GN;GP;GQ;GR;GS;GT;GU;GW;GY;HK;HM;HN;HR;HT;HU;ID;IE;IL;IM;IN;IO;IQ;IR;IS;IT;JE;JM;JO;JP;KE;KG;KH;KI;KM;KN;KP;KR;KW;KY;KZ;LA;LB;LC;LI;LK;LR;LS;LT;LU;LV;LY;MA;MC;MD;ME;MF;MG;MH;MK;ML;MM;MN;MO;MP;MQ;MR;MS;MT;MU;MV;MW;MX;MY;MZ;NA;NC;NE;NF;NG;NI;NL;NO;NP;NR;NU;NZ;OM;PA;PE;PF;PG;PH;PK;PL;PM;PN;PR;PS;PT;PW;PY;QA;RE;RO;RS;RU;RW;SA;SB;SC;SD;SE;SG;SH;SI;SJ;SK;SL;SM;SN;SO;SR;SS;ST;SV;SX;SY;SZ;TC;TD;TF;TG;TH;TJ;TK;TL;TM;TN;TO;TR;TT;TV;TW;TZ;UA;UG;UM;US;UY;UZ;VA;VC;VE;VG;VI;VN;VU;WF;WS;YE;YT;ZA;ZM;ZW", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "AD;AE;AF;AG;AI;AL;AM;AN;AO;AQ;AR;AS;AT;AU;AW;AX;AZ;BA;BB;BD;BE;BF;BG;BH;BI;BJ;BL;BM;BN;BO;BQ;BR;BS;BT;BV;BW;BY;BZ;CA;CC;CD;CF;CG;CH;CI;CK;CL;CM;CN;CO;CR;CU;CV;CW;CX;CY;CZ;DE;DJ;DK;DM;DO;DZ;EC;EE;EG;EH;ER;ES;ET;FI;FJ;FK;FM;FO;FR;GA;GB;GD;GE;GF;GG;GH;GI;GL;GM;GN;GP;GQ;GR;GS;GT;GU;GW;GY;HK;HM;HN;HR;HT;HU;ID;IE;IL;IM;IN;IO;IQ;IR;IS;IT;JE;JM;JO;JP;KE;KG;KH;KI;KM;KN;KP;KR;KW;KY;KZ;LA;LB;LC;LI;LK;LR;LS;LT;LU;LV;LY;MA;MC;MD;ME;MF;MG;MH;MK;ML;MM;MN;MO;MP;MQ;MR;MS;MT;MU;MV;MW;MX;MY;MZ;NA;NC;NE;NF;NG;NI;NL;NO;NP;NR;NU;NZ;OM;PA;PE;PF;PG;PH;PK;PL;PM;PN;PR;PS;PT;PW;PY;QA;RE;RO;RS;RU;RW;SA;SB;SC;SD;SE;SG;SH;SI;SJ;SK;SL;SM;SN;SO;SR;SS;ST;SV;SX;SY;SZ;TC;TD;TF;TG;TH;TJ;TK;TL;TM;TN;TO;TR;TT;TV;TW;TZ;UA;UG;UM;US;UY;UZ;VA;VC;VE;VG;VI;VN;VU;WF;WS;YE;YT;ZA;ZM;ZW", (CharSequence) "AD;AE;AF;AG;AI;AL;AM;AN;AO;AQ;AR;AS;AT;AU;AW;AX;AZ;BA;BB;BD;BE;BF;BG;BH;BI;BJ;BL;BM;BN;BO;BQ;BR;BS;BT;BV;BW;BY;BZ;CA;CC;CD;CF;CG;CH;CI;CK;CL;CM;CN;CO;CR;CU;CV;CW;CX;CY;CZ;DE;DJ;DK;DM;DO;DZ;EC;EE;EG;EH;ER;ES;ET;FI;FJ;FK;FM;FO;FR;GA;GB;GD;GE;GF;GG;GH;GI;GL;GM;GN;GP;GQ;GR;GS;GT;GU;GW;GY;HK;HM;HN;HR;HT;HU;ID;IE;IL;IM;IN;IO;IQ;IR;IS;IT;JE;JM;JO;JP;KE;KG;KH;KI;KM;KN;KP;KR;KW;KY;KZ;LA;LB;LC;LI;LK;LR;LS;LT;LU;LV;LY;MA;MC;MD;ME;MF;MG;MH;MK;ML;MM;MN;MO;MP;MQ;MR;MS;MT;MU;MV;MW;MX;MY;MZ;NA;NC;NE;NF;NG;NI;NL;NO;NP;NR;NU;NZ;OM;PA;PE;PF;PG;PH;PK;PL;PM;PN;PR;PS;PT;PW;PY;QA;RE;RO;RS;RU;RW;SA;SB;SC;SD;SE;SG;SH;SI;SJ;SK;SL;SM;SN;SO;SR;SS;ST;SV;SX;SY;SZ;TC;TD;TF;TG;TH;TJ;TK;TL;TM;TN;TO;TR;TT;TV;TW;TZ;UA;UG;UM;US;UY;UZ;VA;VC;VE;VG;VI;VN;VU;WF;WS;YE;YT;ZA;ZM;ZW");
      assertEquals(1, int0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance("AD;AE;AF;AG;AI;AL;AM;AN;AO;AQ;AR;AS;AT;AU;AW;AX;AZ;BA;BB;BD;BE;BF;BG;BH;BI;BJ;BL;BM;BN;BO;BQ;BR;BS;BT;BV;BW;BY;BZ;CA;CC;CD;CF;CG;CH;CI;CK;CL;CM;CN;CO;CR;CU;CV;CW;CX;CY;CZ;DE;DJ;DK;DM;DO;DZ;EC;EE;EG;EH;ER;ES;ET;FI;FJ;FK;FM;FO;FR;GA;GB;GD;GE;GF;GG;GH;GI;GL;GM;GN;GP;GQ;GR;GS;GT;GU;GW;GY;HK;HM;HN;HR;HT;HU;ID;IE;IL;IM;IN;IO;IQ;IR;IS;IT;JE;JM;JO;JP;KE;KG;KH;KI;KM;KN;KP;KR;KW;KY;KZ;LA;LB;LC;LI;LK;LR;LS;LT;LU;LV;LY;MA;MC;MD;ME;MF;MG;MH;MK;ML;MM;MN;MO;MP;MQ;MR;MS;MT;MU;MV;MW;MX;MY;MZ;NA;NC;NE;NF;NG;NI;NL;NO;NP;NR;NU;NZ;OM;PA;PE;PF;PG;PH;PK;PL;PM;PN;PR;PS;PT;PW;PY;QA;RE;RO;RS;RU;RW;SA;SB;SC;SD;SE;SG;SH;SI;SJ;SK;SL;SM;SN;SO;SR;SS;ST;SV;SX;SY;SZ;TC;TD;TF;TG;TH;TJ;TK;TL;TM;TN;TO;TR;TT;TV;TW;TZ;UA;UG;UM;US;UY;UZ;VA;VC;VE;VG;VI;VN;VU;WF;WS;YE;YT;ZA;ZM;ZW", "AD;AE;AF;AG;AI;AL;AM;AN;AO;AQ;AR;AS;AT;AU;AW;AX;AZ;BA;BB;BD;BE;BF;BG;BH;BI;BJ;BL;BM;BN;BO;BQ;BR;BS;BT;BV;BW;BY;BZ;CA;CC;CD;CF;CG;CH;CI;CK;CL;CM;CN;CO;CR;CU;CV;CW;CX;CY;CZ;DE;DJ;DK;DM;DO;DZ;EC;EE;EG;EH;ER;ES;ET;FI;FJ;FK;FM;FO;FR;GA;GB;GD;GE;GF;GG;GH;GI;GL;GM;GN;GP;GQ;GR;GS;GT;GU;GW;GY;HK;HM;HN;HR;HT;HU;ID;IE;IL;IM;IN;IO;IQ;IR;IS;IT;JE;JM;JO;JP;KE;KG;KH;KI;KM;KN;KP;KR;KW;KY;KZ;LA;LB;LC;LI;LK;LR;LS;LT;LU;LV;LY;MA;MC;MD;ME;MF;MG;MH;MK;ML;MM;MN;MO;MP;MQ;MR;MS;MT;MU;MV;MW;MX;MY;MZ;NA;NC;NE;NF;NG;NI;NL;NO;NP;NR;NU;NZ;OM;PA;PE;PF;PG;PH;PK;PL;PM;PN;PR;PS;PT;PW;PY;QA;RE;RO;RS;RU;RW;SA;SB;SC;SD;SE;SG;SH;SI;SJ;SK;SL;SM;SN;SO;SR;SS;ST;SV;SX;SY;SZ;TC;TD;TF;TG;TH;TJ;TK;TL;TM;TN;TO;TR;TT;TV;TW;TZ;UA;UG;UM;US;UY;UZ;VA;VC;VE;VG;VI;VN;VU;WF;WS;YE;YT;ZA;ZM;ZW");
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.chomp("cgQ:'j)G.L<U`Sz<D1FUDuuds0rivu\r");
      assertEquals("cgQ:'j)G.L<U`Sz<D1FUDuuds0rivu", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfEmpty("cgQ:'j)G.L<U`Sz<D1FUDuuds0rivu\r", (Supplier<String>) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("cgQ:'j)G.L<U`Sz<D1FUDuuds0rivu\r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "cgQ:'j)G.L<U`Sz<D1FUDuuds0rivu", (CharSequence) "cgQ:'j)G.L<U`Sz<D1FUDuuds0rivu\r");
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'D';
      intArray0[1] = (int) 'D';
      intArray0[2] = (int) 'D';
      intArray0[3] = 1354;
      String string0 = StringUtils.join(intArray0, 'D');
      assertArrayEquals(new int[] {68, 68, 68, 1354}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("68D68D68D1354", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("V9c^5Xlykg3E489", "V9c^5Xlykg3E489");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.chomp("cgQ:'nj)G.L<U`Sz<D1FUDuuds0rivu\r");
      assertFalse(string1.equals((Object)string0));
      assertEquals("cgQ:'nj)G.L<U`Sz<D1FUDuuds0rivu", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'i';
      charArray0[2] = 'J';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cgQ:'nj)G.L<U`Sz<D1FUDuuds0rivu", charArray0);
      assertArrayEquals(new char[] {'D', 'i', 'J', 'D', 'D'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string0 = StringUtils.wrapIfMissing("Search ad Replace aKray lengthdo't match: ", "Search ad Replace aKray lengthdo't match: ");
      assertEquals("Search ad Replace aKray lengthdo't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Search ad Replace aKray lengthdo't match: ", "#nMr,=vI9GM5S>1");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Search ad Replace aKray lengthdo't match: ", ' ');
      assertFalse(string1.equals((Object)string0));
      assertEquals(" Search ad Replace aKray lengthdo't match: ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Search ad Replace aKray lengthdo't match: ";
      charSequenceArray0[1] = (CharSequence) "Search ad Replace aKray lengthdo't match: ";
      charSequenceArray0[2] = (CharSequence) "Search ad Replace aKray lengthdo't match: ";
      charSequenceArray0[3] = (CharSequence) " Search ad Replace aKray lengthdo't match: ";
      charSequenceArray0[4] = (CharSequence) "Search ad Replace aKray lengthdo't match: ";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "1+Q,Gm<!pyq@gxBg");
      assertEquals(5, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERING1+Q,Gm<!pyq@gxBgEXTENDED_FILTERING1+Q,Gm<!pyq@gxBgIGNORE_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgMAP_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgREJECT_EXTENDED_RANGES", string0);
      assertNotNull(string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = enumSet0.add(locale_FilteringMode0);
      assertEquals(5, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("1+Q,Gm<!pyq@gxBg");
      assertEquals(16, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("AUTOSELECT_FILTERING1+Q,Gm<!pyq@gxBgEXTENDED_FILTERING1+Q,Gm<!pyq@gxBgIGNORE_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgMAP_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgREJECT_EXTENDED_RANGES");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringBetween("AUTOSELECT_FILTERING1+Q,Gm<!pyq@gxBgEXTENDED_FILTERING1+Q,Gm<!pyq@gxBgIGNORE_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgMAP_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgREJECT_EXTENDED_RANGES", "1+Q,Gm<!pyq@gxBg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("EXTENDED_FILTERING", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "AUTOSELECT_FILTERING1+Q,Gm<!pyq@gxBgEXTENDED_FILTERING1+Q,Gm<!pyq@gxBgIGNORE_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgMAP_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgREJECT_EXTENDED_RANGES", (CharSequence) "AUTOSELECT_FILTERING1+Q,Gm<!pyq@gxBgEXTENDED_FILTERING1+Q,Gm<!pyq@gxBgIGNORE_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgMAP_EXTENDED_RANGES1+Q,Gm<!pyq@gxBgREJECT_EXTENDED_RANGES");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "GBPG {!u#h^C>^O";
      stringArray0[2] = "";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "/<v\"7[b=?D";
      stringArray1[1] = "GBPG {!u#h^C>^O";
      stringArray1[2] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("GBPG {!u#h^C>^O", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("-a!e\" >)<E>#.  ?]Ng", "-a!e\" >)<E>#.  ?]Ng", (-7));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      StringUtils.repeat('g', 32767);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("P($9h+6q:s]", "P($9h+6q:s]");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "P($9h+6q:s]", (-1308));
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "P($9h+6q:s]", 80);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.swapCase("*pjg{S|?c");
      assertEquals("*PJG{s|?C", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*pjg{S|?c";
      stringArray0[1] = "*PJG{s|?C";
      stringArray0[2] = "*pjg{S|?c";
      stringArray0[3] = "*pjg{S|?c";
      stringArray0[4] = "*PJG{s|?C";
      stringArray0[5] = "*pjg{S|?c";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("*", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = StringUtils.abbreviate("P($9h+6q:s]", "l", 7);
      assertEquals("P($9h+l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("P($9h+6q:s]");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p($9h+6q:s]", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("\n\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("P($9h+6q:s]", '<');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("<P($9h+6q:s]<", string3);
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("<P($9h+6q:s]<");
      assertEquals(13, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.getDigits("\n\n");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "P($9h+l";
      charSequenceArray0[1] = (CharSequence) "<P($9h+6q:s]<";
      charSequenceArray0[2] = (CharSequence) "P($9h+l";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.normalizeSpace("Strings must not be null");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '<';
      floatArray0[0] = (float) 7;
      floatArray0[2] = (float) 7;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3432.171F;
      floatArray0[6] = (float) '<';
      String string6 = StringUtils.join(floatArray0, '3', 1, 5);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new float[] {7.0F, 0.0F, 7.0F, 0.0F, 0.0F, 3432.171F, 60.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals("0.037.030.030.0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripEnd((String) null, "qJ@m&( 3");
      assertNull(string7);
      
      boolean boolean1 = StringUtils.isNumericSpace("P($9h+l");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        StringUtils.getBytes("l", "offset cannot be negativeGCnB;c");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", "Q8SII)[");
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", "", 114, 5);
      assertEquals("org.j", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", 114);
      assertEquals(37, int0);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap(", Length: 0", '1');
      assertFalse(string1.equals((Object)string0));
      assertEquals("1, Length: 01", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2431;
      intArray0[1] = (int) '1';
      intArray0[2] = (int) '1';
      intArray0[3] = (int) '1';
      intArray0[4] = (int) '1';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'z', (-232), 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -232
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String string0 = StringUtils.rightPad("8y4pe[2QifAP<F", 2985, 'O');
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("8y4pe[2QifAP<F", '0');
      assertFalse(string1.equals((Object)string0));
      assertEquals("08y4pe[2QifAP<F0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd((String) null, "je^\"cgZhJn*[");
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", (CharSequence) "1+Q,Gm<!pyq@gxBg");
      assertEquals(0, int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "1+Q,Gm<!pyq@gxBg";
      String string4 = StringUtils.join(objectArray0, "08y4pe[2QifAP<F0", 1, 3);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(3, objectArray0.length);
      assertEquals("08y4pe[2QifAP<F01+Q,Gm<!pyq@gxBg", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, (String) null, 160, 1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("/f+nl.RB0HKTT=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("/f+nl.RB0HKTT=", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("/f+nl.RB0HKTT=", 8192, "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(1777);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1777, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1777, charBuffer0.remaining());
      assertEquals(1777, charBuffer0.capacity());
      assertEquals(1777, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '}';
      charArray0[2] = '%';
      charArray0[3] = '}';
      charArray0[4] = 'K';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) charBuffer0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The character ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The character ", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove("", ' ');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '\\';
      String string1 = StringUtils.join(intArray0, '\\', 92, 9);
      assertArrayEquals(new int[] {92, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((char[]) null, 'I', 171, 2);
      assertNull(string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)2;
      String string3 = StringUtils.join(byteArray0, '\\', (int) (byte)2, (int) (byte)4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-90), (byte)4, (byte)113, (byte)7, (byte)57, (byte)5, (byte) (-38), (byte)4, (byte)2}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("113\\7", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 9995;
      char char0 = '_';
      String string1 = StringUtils.rightPad(" vs ", 9995, '_');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "nt,pz8p,+B+]F";
      String string3 = StringUtils.repeat("nt,pz8p,+B+]F", 16);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("nt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]Fnt,pz8p,+B+]F", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumeric(" vs ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.uncapitalize("zubpzubp");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("zubpzubp", string4);
      assertNotNull(string4);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '_', 12, 9995);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.wrap("+pc|_dXmC4=1>m", '\u0002');
      assertEquals("\u0002+pc|_dXmC4=1>m\u0002", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)33;
      shortArray0[1] = (short)98;
      shortArray0[2] = (short)3898;
      String string1 = StringUtils.substringAfter("+pc|_dXmC4=1>m", "B ws4{%q%F[xA<G`a_3");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("\u0002+pc|_dXmC4=1>m\u0002", '\u0002');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+pc|_dXmC4=1>m", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(160);
      assertEquals(160, charBuffer0.remaining());
      assertEquals(160, charBuffer0.capacity());
      assertEquals(160, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(160, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      int int0 = StringUtils.lastIndexOfAny(charBuffer0, (CharSequence[]) null);
      assertEquals(160, charBuffer0.remaining());
      assertEquals(160, charBuffer0.capacity());
      assertEquals(160, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(160, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", "RI4xStx7;i", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charBuffer0);
      assertEquals(160, charBuffer0.remaining());
      assertEquals(160, charBuffer0.capacity());
      assertEquals(160, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(160, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[2] = "vc";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'B', (int) (byte)0, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Iw;eih8bYgT", "Iw;eih8bYgT", "!11.}}5Y");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'I';
      charArray0[2] = '0';
      charArray0[3] = 'S';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Iw;eih8bYgT", charArray0);
      assertArrayEquals(new char[] {'\'', 'I', '0', 'S'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 171;
      intArray0[1] = 0;
      intArray0[2] = 9;
      intArray0[3] = 171;
      intArray0[4] = 0;
      String string2 = StringUtils.join(intArray0, '}', 1, 3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {171, 0, 9, 171, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("0}9", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)108;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {(byte)5, (byte)101, (byte)108}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("\u0005el", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\u0005el");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)5, (byte)101, (byte)108}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("\u0005el", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = StringUtils.mid("org.junitpioneer.jupiter.params.LongRange", 29, 36);
      assertEquals("ms.LongRange", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.junitpioneer.jupiter.params.LongRange", (CharSequence) "ms.LongRange");
      assertEquals(29, int0);
      
      String string1 = StringUtils.rightPad((String) null, 2743, 'F');
      assertNull(string1);
      
      String string2 = StringUtils.wrap((String) null, 'V');
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd(".*{[0-9]+}.*", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertEquals(".*{[0-9]+}.*", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("_;_qU$aSM7C(:z");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("_;_qU$aSM7C(:z", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.LongRange";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.LongRange";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("org.junitpioneer.jupiter.params.LongRange", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "_;_qU$aSM7C(:z", (CharSequence) "org.junitpioneer.jupiter.params.LongRange");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "_;_qU$aSM7C(:z", 3073, 29);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = StringUtils.rightPad("dWA>]]IO#6", 8202);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "dWA>]]IO#6";
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "dWA>]]IO#6";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(10, int0);
      
      String string1 = StringUtils.deleteWhitespace(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dWA>]]IO#6", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "*)&U>rr!+y|EZ%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("T2tgTUx", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "T");
      assertEquals(0, priorityQueue0.size());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "*)&U>rr!+y|EZ%";
      charSequenceArray0[5] = (CharSequence) "Display name '%s' %s";
      charSequenceArray0[6] = (CharSequence) "Locale must not be null";
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[8] = (CharSequence) "*)&U>rr!+y|EZ%";
      int int0 = StringUtils.indexOfAny((CharSequence) "Display name '%s' %s", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.right("28#BcEumO@[,^$", 108);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("28#BcEumO@[,^$", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("28#BcEumO@[,^$");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[5], 108);
      assertFalse(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add("`W7m]g");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("`W7m]g"));
      assertTrue(boolean0);
      
      char char0 = 'd';
      boolean boolean1 = StringUtils.isAlphanumeric("`W7m]g");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'q', 1, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("!wY3i<+;$WhsR=", 'S');
      assertFalse(string1.equals((Object)string0));
      assertEquals("!wY3i<+;$WhsR=", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 'S';
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 'S';
      String string2 = StringUtils.join(floatArray0, '$', 2620, 2620);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertArrayEquals(new float[] {16.0F, 1.0F, 83.0F, 16.0F, 16.0F, 0.0F, 1.0F, 83.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1);
      assertEquals(1, int0);
      
      String string3 = StringUtils.trimToEmpty("bwIb>j|H@}QO^a}#`");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bwIb>j|H@}QO^a}#`", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      float[] floatArray0 = new float[9];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("MUST NOT BE NULL", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits(" [k_kW[}kU");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(locale_FilteringMode0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      
      stack0.trimToSize();
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertEquals(1, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      String string4 = StringUtils.leftPad("", (-796), 'C');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string5 = StringUtils.leftPad("org.junitpioneer.jupiter.DefaultLocaleExtension", (-796), "&");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string5);
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      String string6 = StringUtils.substringAfter("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", 11);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string7 = StringUtils.reverse("/hkPTK:4*oGZ`mM&");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("&Mm`ZGo*4:KTPkh/", string7);
      assertNotNull(string7);
      
      charSequenceArray0[0] = (CharSequence) "&Mm`ZGo*4:KTPkh/";
      charSequenceArray0[3] = (CharSequence) " [k_kW[}kU";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "F+RYZ';X{T4|Li";
      boolean boolean1 = StringUtils.startsWithAny("must not be null", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string8 = StringUtils.leftPad("7j+y2.@[f6g@mq'[", 11);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("7j+y2.@[f6g@mq'[", string8);
      assertNotNull(string8);
      
      int int0 = StringUtils.ordinalIndexOf("7j+y2.@[f6g@mq'[", charSequenceArray0[2], 39);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = "\n";
      String string2 = StringUtils.defaultString("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "\n");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", 'C');
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 171;
      intArray0[1] = (int) 'C';
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("\n"));
      assertNotNull(vector0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("\n"));
      
      int int0 = Integer.MIN_VALUE;
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains("\n"));
      assertNotNull(hashSet0);
      
      boolean boolean0 = vector0.removeAll(hashSet0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(vector0.contains("\n"));
      assertFalse(hashSet0.contains("\n"));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "\n", 1780, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1780) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "m3bkz7e)", "S0vujjg,J");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.wrapIfMissing("S0vujjg,J", 'J');
      assertEquals("JS0vujjg,J", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = "Display name '%s' %s";
      String string1 = StringUtils.trimToNull("Display name '%s' %s");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Display name '%s' %s", string1);
      assertNotNull(string1);
      
      String string2 = "Locale must not be null";
      String string3 = StringUtils.substringAfter("Locale must not be null", "Display name '%s' %s");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = "\"rj$XfyA\">EB@)";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("The rharacter mustcnot He Xu", "The rharacter mustcnot He Xu", "\"rj$XfyA\">EB@)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", "Gwd");
      assertFalse(boolean0);
      
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",s zZ0(Lg$|Z8", (CharSequence) ",s zZ0(Lg$|Z8", 2147483641);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("l*K7d46-j)~wSv[4", ")");
      assertEquals("~wSv[4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("|BYk<pn", supplier0);
      assertEquals("|BYk<pn", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd("|BYk<pn", "Minimum abbreviation width is %d");
      assertTrue(string1.equals((Object)string0));
      assertEquals("|BYk<pn", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "W");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("hen not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8", "8", 8192);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultIfEmpty("Cannot clear and set the following entries at the same time: ", "Nu");
      assertEquals("Cannot clear and set the following entries at the same time: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("Nu", "", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("Nu", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("h", 8192);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 8192;
      String string3 = StringUtils.join(floatArray0, '!', 3, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new float[] {8192.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "h", (CharSequence) "", 8192);
      assertEquals(1, int0);
      
      String string4 = StringUtils.center("{Ud2Rd1hr>@mY}dp", 3, "Qeb1Z[ -NuQu!wJ#>) StdIoExtension is active but no %s annotation was found.|BYk<pn");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("{Ud2Rd1hr>@mY}dp", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("8");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringAfter("Locale must not be null", (-734));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("FsH-vXDUFfJ:c", '!');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("FsH-vXDUFfJ:c", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((byte[]) null, 'W', 1, 1923);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("RB7j?W>,a$u+", (String) null);
      assertEquals("RB7j?W>,a$u+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("6U2buz\u0006KVe]5");
      assertFalse(string1.equals((Object)string0));
      assertEquals("6u2BUZ\u0006kvE]5", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("6U2buz\u0006KVe]5", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6U2buz\u0006KVe]5", string2);
      assertNotNull(string2);
      
      String string3 = "x a*jqj.2fY#kow";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[2] = (Object) "6U2buz\u0006KVe]5";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "6U2buz\u0006KVe]5";
      objectArray0[5] = (Object) "x a*jqj.2fY#kow";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "6U2buz\u0006KVe]5", 0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear ad set the following entries at the same time: ", "Cannot clear ad set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("Cannot clear ad set the following entries at the same time: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("CANNOT CLEAR AD SET THE FOLLOWING ENTRIES AT THE SAME TIME: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("CANNOT CLEAR AD SET THE FOLLOWING ENTRIES AT THE SAME TIME: ", "", "CANNOT CLEAR AD SET THE FOLLOWING ENTRIES AT THE SAME TIME: ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("Cannot clear ad set the following entries at the same time: ");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("CANNOT CLEAR AD SET THE FOLLOWING ENTRIES AT THE SAME TIME: ", "IWC_7$!YFTj");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("CANNOT CLEAR AD SET THE FOLLOWING ENTRIES AT THE SAME TIME: ", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("doesn' math any regular expression.", "Timeout for vintage @Test must be positive.", 34);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("IWC_7$!YFTj");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Cannot clear ad set the following entries at the same time: "));
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "", 34, 160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 160
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("NYyP*T,7UoAS>c", "Minimum abbreviation width is %d");
      assertFalse(string1.equals((Object)string0));
      assertEquals("NYyP*T,7UoAS>c", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "NYyP*T,7UoAS>c");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", 8192, ')');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[3] = "2k~0XIllegal range. The step cannot be zero.";
      stringArray0[2] = "\r";
      stringArray0[3] = "2k~0XIllegal range. The step cannot be zero.";
      stringArray0[4] = "NYyP*T,7UoAS>c";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "\r");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      String string0 = StringUtils.leftPad("$X", 1590, "$X");
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "$X";
      stringArray0[1] = "){oIj Xngy~J{Pr3Rm";
      stringArray0[2] = "$X";
      stringArray0[3] = "$X";
      stringArray0[4] = "";
      stringArray0[5] = string0;
      // Undeclared exception!
      StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.trimToNull("^Th");
      assertEquals("^Th", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", ")yv_$S1E<Tf[[", (-1706));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "^Th");
      assertEquals(3, int0);
      
      String string1 = StringUtils.right((String) null, 1145);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("R");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ")yv_$S1E<Tf[[", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.substring(")yv_$S1E<Tf[[", 6, 4);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("DzS5VsBb.F'$j*)Z  K");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("DZS5VSBB.F'$J*)Z  K", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("DZS5VSBB.F'$J*)Z  K");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove("", 'J');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart(" ", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("[", (-484));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("[", (-812), (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("[", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("2YmEy");
      assertEquals("2YmEy", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat((String) null, 3);
      assertNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(3);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("2YmEy"));
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) arrayList0, locale_FilteringMode0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayList0.contains("2YmEy"));
      assertFalse(list0.contains("2YmEy"));
      assertNotNull(list0);
      
      String string2 = StringUtils.join(list0, "a+IGNwn1Y_mld=+`lXa+IGNwn1Y_mld=+`lX", 3, (-753));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertFalse(arrayList0.contains("2YmEy"));
      assertFalse(list0.contains("2YmEy"));
      assertEquals("", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "a+IGNwn1Y_mld=+`lXa+IGNwn1Y_mld=+`lX");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.deleteWhitespace("2YmEy");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("2YmEy", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.leftPad("2YmEy", 32767, 'v');
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.rightPad("=<y{", (-1));
      assertEquals("=<y{", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.trimToEmpty("=<y{");
      assertTrue(string1.equals((Object)string0));
      assertEquals("=<y{", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "=<y{";
      charSequenceArray0[1] = (CharSequence) "=<y{";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("_?shs|&Ygr$k<E", 9, 9);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...r$k<E", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "{[0-9]+}", (-1), 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("1");
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("xW bX6Bm7D--yN('-;^");
      assertFalse(string1.equals((Object)string0));
      assertEquals("xW bX6Bm7D--yN('-;^", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("xW bX6Bm7D--yN('-;^");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripStart("1", "1");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "xW bX6Bm7D--yN('-;^");
      assertEquals(0, int0);
      
      String string3 = StringUtils.truncate("1", 0, 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-3032));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.defaultIfBlank("", "1");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("1", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-3032));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.substringAfter("Illegal range. There's no way to get from %s to %s with a step of %s.", "1");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-3032);
      String string6 = StringUtils.join(intArray0, 'p', 8192, 8192);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new int[] {0, (-3032)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "xW bX6Bm7D--yN('-;^";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "1";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "1";
      charSequenceArray0[7] = (CharSequence) "xW bX6Bm7D--yN('-;^";
      int int3 = StringUtils.lastIndexOfAny("Illegal range. There's no way to get from %s to %s with a step of %s.", charSequenceArray0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(69, int3);
      
      boolean boolean2 = StringUtils.isNumeric(charSequenceArray0[6]);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xW bX6Bm7D--yN('-;^";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      stringArray0[5] = "";
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals(6, stringArray0.length);
      assertEquals("xW bX6Bm7D--yN('-;^", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '$');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":30GY!Fj8", (CharSequence) "", 71);
      assertEquals(9, int0);
      
      String string2 = StringUtils.substring("FnIEi0}/Yd@EH", 126, (-2273));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "<]D5y,-vhn&UMwer";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "FnIEi0}/Yd@EH");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("FnIEi0}/Yd@EH", charSequence0);
      assertNotNull(charSequence0);
      
      charSequenceArray0[3] = (CharSequence) "FnIEi0}/Yd@EH";
      charSequenceArray0[4] = (CharSequence) "FnIEi0}/Yd@EH";
      charSequenceArray0[5] = (CharSequence) null;
      String string3 = StringUtils.appendIfMissing("<]D5y,-vhn&UMwer", "", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("<]D5y,-vhn&UMwer", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "<]D5y,-vhn&UMwer", (CharSequence) ":30GY!Fj8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "<]D5y,-vhn&UMwer", "[.6cX^+[QMw]$~ke }");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviate("`H^{JQ1<&uY(`>>", "ebkwfW", (-2870), 9);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("`H^ebkwfW", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = "|uv!kUU6;aE";
      String string1 = StringUtils.wrapIfMissing("|uv!kUU6;aE", 'r');
      assertFalse(string1.equals((Object)string0));
      assertEquals("r|uv!kUU6;aEr", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("|uv!kUU6;aE", "r|uv!kUU6;aEr");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      String string2 = StringUtils.join(shortArray0, 'u');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.right("|uv!kUU6;aE", 20);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("|uv!kUU6;aE", string3);
      assertNotNull(string3);
      
      String string4 = "org.junitpioneer.jupiter.EnvironmentVariableExtension";
      String string5 = StringUtils.getDigits("org.junitpioneer.jupiter.EnvironmentVariableExtension");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[0];
      String string6 = StringUtils.join(doubleArray0, 'u');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = "zK#E3S@.";
      String string8 = StringUtils.removeStartIgnoreCase("r|uv!kUU6;aEr", "szBb!g8Tc7?1+Q,Gm<!pyq@gxBg");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("r|uv!kUU6;aEr", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.swapCase("r|uv!kUU6;aEr");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertEquals("R|UV!Kuu6;AeR", string9);
      assertNotNull(string9);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "zK#E3S@.", (CharSequence) "r|uv!kUU6;aEr", 2035);
      assertEquals(13, int0);
      
      String string10 = StringUtils.trimToNull("|uv!kUU6;aE");
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertEquals("|uv!kUU6;aE", string10);
      assertNotNull(string10);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "R|UV!Kuu6;AeR", (CharSequence) "r|uv!kUU6;aEr");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "R|UV!Kuu6;AeR";
      charSequenceArray0[1] = (CharSequence) "zK#E3S@.";
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (long) 'u';
      longArray0[2] = (long) 13;
      longArray0[3] = (long) 'u';
      longArray0[4] = (long) 2035;
      longArray0[5] = (long) 13;
      longArray0[6] = 2744L;
      longArray0[7] = (long) 'r';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'r', (-865), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -865
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean0);
      
      boolean boolean1 = arrayDeque0.add("");
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean1);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(""));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'z');
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains(""));
      assertEquals("z", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("z", 'z');
      assertTrue(string1.equals((Object)string0));
      assertEquals("z", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "z");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'X');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.stripToNull("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("search and replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '%', 2, 706);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = StringUtils.wrap("\r", 'U');
      assertEquals("U\rU", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('U', 15);
      assertFalse(string1.equals((Object)string0));
      assertEquals("UUUUUUUUUUUUUUU", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("U\rU");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.difference(" be zero.Illegal range. The step cannot", "Ft981A=yHtQ?Uk");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ft981A=yHtQ?Uk", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Ft981A=yHtQ?Uk", charArray0);
      assertArrayEquals(new char[] {'U', 'U'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'z');
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", 'z');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "%ht[i0StdIoExtension is active but no %s annotation was found.");
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)31;
      shortArray0[1] = (short)23;
      shortArray0[2] = (short) (-94);
      shortArray0[3] = (short)1582;
      String string3 = StringUtils.join(shortArray0, '-', (int) (short) (-94), (int) (short) (-94));
      assertTrue(string3.equals((Object)string1));
      assertArrayEquals(new short[] {(short)31, (short)23, (short) (-94), (short)1582}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = StringUtils.stripAccents("-GO^zsokQTfN7");
      assertEquals("-GO^zsokQTfN7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("-GO^zsokQTfN7", "-GO^zsokQTfN7");
      assertTrue(boolean0);
      
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("-GO^zsokQTfN7", "-GO^zsokQTfN7");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("', '");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String string0 = StringUtils.rightPad("Minimum abbreviation wid", 8202);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation wid";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(24, int0);
      
      String string1 = StringUtils.deleteWhitespace(string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwid", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-1WDn_:gDhdp&5";
      objectArray0[1] = (Object) "-1WDn_:gDhdp&5";
      objectArray0[2] = (Object) "-1WDn_:gDhdp&5";
      objectArray0[3] = (Object) "-1WDn_:gDhdp&5";
      String string1 = StringUtils.join(objectArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, objectArray0.length);
      assertEquals("-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5";
      charSequenceArray0[1] = (CharSequence) "-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5";
      charSequenceArray0[2] = (CharSequence) "-1WDn_:gDhdp&5";
      charSequenceArray0[3] = (CharSequence) "-1WDn_:gDhdp&5";
      charSequenceArray0[4] = (CharSequence) "-1WDn_:gDhdp&5";
      String string2 = StringUtils.wrap("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5", string2);
      assertNotNull(string2);
      
      charSequenceArray0[5] = (CharSequence) "-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5-1WDn_:gDhdp&5";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(14, int0);
      
      String string3 = StringUtils.chop("-1WDn_:gDhdp&5");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-1WDn_:gDhdp&", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = 'J';
      int int1 = StringUtils.indexOfAny(charSequenceArray0[4], charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'Q', 'J'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.rightPad("~ LbYAw][Slf=", 4, "-1WDn_:gDhdp&5");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("~ LbYAw][Slf=", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("aaU/HL]*4caVi");
      assertEquals("aaU/HL]*4caVi", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "aaU/HL]*4caVi", 1598);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("aaU/HL]*4caVi", "...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "aaU/HL]*4caVi";
      charSequenceArray0[1] = (CharSequence) "aaU/HL]*4caVi";
      charSequenceArray0[2] = (CharSequence) "aaU/HL]*4caVi";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) "aaU/HL]*4caVi";
      charSequenceArray0[5] = (CharSequence) "...";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "aaU/HL]*4caVi";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string2 = StringUtils.center("", (-875), "...");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripEnd("aaU/HL]*4caVi", "a+IG!wnwY_mld=+`lXX~");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("aaU/HL]*4caVi", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[6], (-1), 10);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsNone((CharSequence) "...", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", "aaU/HL]*4caVi", 64, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("%WeLgb[][HO`g", "%WeLgb[][HO`g", 13);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("e", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 13;
      longArray0[1] = (long) 13;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'y', 13, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", 1954);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0007R76i(BW8ACq", (CharSequence) "\u0007R76i(BW8ACq", (-2147483617));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '.';
      int int1 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'#', '.'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(3, int1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("\u0007R76i(BW8ACq"));
      assertNotNull(vector0);
      
      String string2 = StringUtils.join((List<?>) vector0, '_', 3, 1);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(vector0.contains(3));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.swapCase(" ");
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("0W", (-582));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear ad set the following entries at the same time: ", "Cannot clear ad set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Cannot clear ad set the following entries at the same time: ", "", 1145);
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("Cannot clear ad set the following entries at the same time: ", 1145);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cannot clear ad set the following entries at the same time: ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("R");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "R", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substring("5M", 1145, 1145);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "5M");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)91;
      shortArray0[2] = (short) (-3723);
      shortArray0[3] = (short)484;
      shortArray0[4] = (short) (-402);
      shortArray0[5] = (short)39;
      shortArray0[6] = (short) (-2679);
      String string3 = StringUtils.join(shortArray0, '\'');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new short[] {(short)8, (short)91, (short) (-3723), (short)484, (short) (-402), (short)39, (short) (-2679)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertEquals("8'91'-3723'484'-402'39'-2679", string3);
      assertNotNull(string3);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("8'91'-3723'484'-402'39'-2679", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("1Be0]_ewVc8-{Ph", 66);
      assertEquals("e0]_ewVc8-{Ph", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("1Be0]_ewVc8-{Ph");
      assertFalse(string1.equals((Object)string0));
      assertEquals("1Be0]_ewVc8-{Ph", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "B";
      stringArray0[5] = "_i&|";
      String string0 = StringUtils.wrapIfMissing("1+Q,Gm<!pyq@gxBg", '<');
      assertEquals("<1+Q,Gm<!pyq@gxBg<", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("', is neither of type Map.Entry nor an Array", "<1+Q,Gm<!pyq@gxBg<", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("', is neither of type Map.Entry nor an Array<1+Q,Gm<!pyq@gxBg<", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("', is neither of type Map.Entry nor an Array", "_i&|", 10, 10);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_i&|he_i&|", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" A<K%JjesweTv+");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((double[]) null, 'x', 774, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals(5, enumSet0.size());
      assertEquals("AUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "AUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", (CharSequence) "AUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", 1935);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\u0007R76i(BW8ACq";
      objectArray0[1] = (Object) string0;
      String string1 = StringUtils.join(objectArray0, 'R');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("{}", (String) null, true);
      assertEquals(1, int0);
      
      String[] stringArray1 = StringUtils.split("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) string1, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, objectArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.prependIfMissing("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", "{}", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", string3);
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, (CharSequence) "org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", 2);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(2, objectArray0.length);
      assertEquals(13, int1);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase(" ", "Ux+ -hLSLk51-,hRjm7", "Ux+ -hLSLk51-,hRjm7");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Ux+ -hLSLk51-,hRjm7", " ");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Gwd", ')');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "?r\"7E2?53z]qH[B", "Q8SII)[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviate("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", "", 114, 5);
      assertEquals("org.j", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("org.apache.commons.lang3.exception.CloneFailedException", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", 35, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String string0 = "";
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(string0));
      assertTrue(boolean0);
      
      boolean boolean1 = arrayDeque0.add("");
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains(string0));
      assertTrue(boolean1);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(string0));
      assertNotNull(iterator0);
      
      boolean boolean2 = arrayDeque0.add("");
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(arrayDeque0.contains(string0));
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'z');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque$DeqIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", "", 6);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.repeat("7A/2X0nO", 28);
      assertEquals("7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO", "7A/2X0nO", 28);
      assertEquals(28, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(28, stringArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.normalizeSpace("7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO");
      assertTrue(string1.equals((Object)string0));
      assertEquals("7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("+", 12);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("++++++++++++", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertTrue(int1 == int0);
      assertEquals(28, stringArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("\r", "Illegal range. The step cannot be zero.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripEnd("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.replaceIgnoreCase(" ", "o", "o");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars((String) null, "", ":30GY!Fj8");
      assertNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) ":30GY!Fj8", 1624);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.unwrap((String) null, '|');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.repeat("!g^)1", 8192);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(string1, 'k');
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) string0;
      String string3 = StringUtils.join(objectArray0, 'u', 13, 13);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, objectArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = 'u';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string1, charArray0);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.repeat("h", 8192);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "h", string0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = 'k';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = '\"';
      charArray0[5] = '';
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((Object[]) null, ')');
      assertNull(string0);
      
      String string1 = "}fZa";
      String string2 = null;
      int int0 = StringUtils.compare("}fZa", (String) null, true);
      assertEquals(1, int0);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeStart("", "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are");
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString((String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("}fZa"));
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        stack0.remove(1160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1160
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String string0 = "nB7;c";
      String string1 = StringUtils.rightPad("nB7;c", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "R";
      CharSequence charSequence0 = null;
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string1, (CharSequence) "R");
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "+pc|_dXmC4=1>m";
      String string0 = StringUtils.chomp("+pc|_dXmC4=1>m", "+pc|_dXmC4=1>m");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'f', 1363, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("B", ' ');
      assertEquals(" B ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace(" B ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("B", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.stripToNull(":I)L");
      assertEquals(":I)L", string0);
      assertNotNull(string0);
      
      char char0 = 'M';
      String string1 = StringUtils.lowerCase("maxWith cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxwith cannot be negative", string1);
      assertNotNull(string1);
      
      byte byte0 = (byte)10;
      Object[] objectArray0 = new Object[8];
      objectArray0[6] = (Object) ":I)L";
      objectArray0[1] = (Object) "maxWith cannot be negative";
      objectArray0[2] = (Object) "maxWith cannot be negative";
      objectArray0[3] = (Object) 'M';
      objectArray0[4] = (Object) "maxwith cannot be negative";
      objectArray0[5] = (Object) (byte)10;
      objectArray0[6] = (Object) "maxWith cannot be negative";
      char char1 = '%';
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '%', 4, (int) (byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.rightPad((String) null, 29);
      assertNull(string0);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.right("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|", 29);
      assertEquals("\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, 29);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.unwrap(" ", 't');
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars((String) null, (String) null, " ");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("^-YYw+Fy ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^-yyW+fY ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^-YYw+Fy ", (CharSequence) "^-YYw+Fy ", 2465);
      assertEquals(0, int0);
      
      String string2 = StringUtils.getDigits("&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, 'F');
      assertNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("^-YYw+Fy ");
      assertArrayEquals(new int[] {94, 45, 89, 89, 119, 43, 70, 121, 32}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.getDigits(" [k_kW[}kU");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("&", (-796));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)8;
      shortArray0[1] = (short)256;
      shortArray0[2] = (short)38;
      shortArray0[3] = (short) (-200);
      shortArray0[4] = (short)26;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'F', 1, (int) (short)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      int int0 = StringUtils.compare("uH,{T`]18%LCP=", (String) null, true);
      assertEquals(1, int0);
      
      String string0 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Search and Replace array lengths don't match:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = "DefaultTimeZone";
      // Undeclared exception!
      StringUtils.center("ZS,_0cdE -U+xL", 65536, "DefaultTimeZone");
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Search and Replace array lengths don't match: ", 'D');
      assertEquals("DSearch and Replace array lengths don't match: D", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "DSearch and Replace array lengths don't match: D", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeStart("DSearch and Replace array lengths don't match: D", "jI~");
      assertTrue(string1.equals((Object)string0));
      assertEquals("DSearch and Replace array lengths don't match: D", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "7K5}&X`fEN");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "DSearch and Replace array lengths don't match: D", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 1043, 'G');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf("DSearch and Replace array lengths don't match: D", "Search and Replace array lengths don't match: ", 2057);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", 1190);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("Illegal range. The step cannot be zero.", 126);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" be zero.Illegal range. The step cannot", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(" be zero.Illegal range. The step cannot", "Illegal range. The step cannot be zero.");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" be zero.Illegal range. The step cannot", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Qg?w%R/$!s6", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Illegal range. The step cannot be zero."));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.substring("F@E+=Bd0@NEI", 126);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad(" ", (-1644));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("@mk[e>m2)", "2!WQAjyO{Yp8");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("@mk[e>m2)", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfAny("@mk[e>m2)", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("eRIkJyw k^e0[AxI+q", " ", 1335);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", " ", (-1));
      assertEquals(21, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("7B*K]9&!t+wte&q");
      assertEquals("7b*k]9&!t+wte&q", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("7B*K]9&!t+wte&q");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("7B*K]9&!t+wte&q");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("7b*k]9&!t+wte&q", "7b*k]9&!t+wte&q");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric("7B*K]9&!t+wte&q");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string1 = StringUtils.lowerCase("*");
      assertFalse(string1.equals((Object)string0));
      assertEquals("*", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(" ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("7B*K]9&!t+wte&q", "7B*K]9&!t+wte&q", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "*");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Qd+@?5i//A";
      stringArray0[1] = "lLu";
      stringArray0[2] = "Pe|OX_L{fi/";
      stringArray0[3] = " ";
      stringArray0[4] = "+pc|_dXmC4=1>m";
      stringArray0[5] = "*";
      stringArray0[6] = " ";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(7, stringArray0.length);
      assertEquals("Qd+@?5i//A", string3);
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isNumeric(" ");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate(" ", 1062);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter((String) null, 457);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "8<=g2Nqn%", "[8;PN5<KI+0");
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf(" ", " ", 8192);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha(" ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+", 457);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('g', 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("gggggggggggggggg", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("gggggggggggggggg", "Execution of '%s' took [%d] ms.", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringBetween("gggggggggggggggg", "gggggggggggggggg");
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("gggggggggggggggg");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (int) 'g', (int) 'g');
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("%>#u8Ex\"");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("8", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("%>#u8Ex\"");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "gggggggggggggggg", 7);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isWhitespace("%>#u8Ex\"");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAllLowerCase("gggggggggggggggg");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.isAlphanumeric("gggggggggggggggg");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      boolean boolean6 = StringUtils.contains((CharSequence) " ", (-2926));
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6);
      
      String string5 = StringUtils.wrap("8", 'R');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("R8R", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.difference("Arguments cannot both be null", "%>#u8Ex\"");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("%>#u8Ex\"", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'g';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "gggggggggggggggg", charArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'g', 'g', 'R', 'R', 'g', 'R', 'R'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.repeat("Yb", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", '@');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("ZqeMj#q#9jV*FaV~Lsx", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZqeMj#q#9jV*FaV~Lsx", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("1]", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("1]", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("org.junitpioneer.jupiter.AbstractEntryBasedExtension");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtensio", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("&: ", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Ux+ -hLSLk51-,hRjm7", 5, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "B";
      stringArray0[5] = "_i&|";
      int int0 = StringUtils.lastIndexOf((CharSequence) "1+Q,Gm<!pyq@gxBg", (CharSequence) "B", 990);
      assertEquals(14, int0);
      
      String string0 = StringUtils.substring("1+Q,Gm<!pyq@gxBg", (-357));
      assertEquals("1+Q,Gm<!pyq@gxBg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("B", "_i&|", "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ");
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("\n", "K&oCTcNgPhGvUP.}");
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("1+Q,Gm<!pyq@gxBg", "B");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Arguments cannot both be null", ":", 1595);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      int int0 = 8192;
      String string0 = StringUtils.rightPad("nB7;c", 8192);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("P_", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      String string2 = StringUtils.center(string0, 8192, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.split(string1, string2);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      int int0 = 126;
      String string1 = StringUtils.rotate("Illegal range. The step cannot be zero.", 126);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" be zero.Illegal range. The step cannot", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(" be zero.Illegal range. The step cannot", "Illegal range. The step cannot be zero.");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" be zero.Illegal range. The step cannot", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Qg?w%R/$!s6", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Illegal range. The step cannot be zero."));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.substring("F@E+=Bd0@NEI", 126);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("Qg?w%R/$!s6", (-1644));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Qg?w%R/$!s6", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripEnd("@mk[e>m2)", "2!WQAjyO{Yp8");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("@mk[e>m2)", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripStart("@mk[e>m2)", "+_v(0)^Ad");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("@mk[e>m2)", string7);
      assertNotNull(string7);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("v*9^WlJ5iWeePiLocale must not be null", "Qg?w%R/$!s6", (-1417));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'e', Integer.MAX_VALUE, (-1644));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("\n");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("\n"));
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("\n"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, 'z');
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertTrue(arrayDeque0.contains("\n"));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      int int0 = StringUtils.lastIndexOfAny("\n", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charSequenceArray0[3]);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("minimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getIfBlank("-/n3TO?B6", (Supplier<String>) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("-/n3TO?B6", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.rightPad("Iw;eih8bYgT", 8192);
      assertNotNull(string0);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.right("/ANtz j$", 8192);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/ANtz j$", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'A');
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.prependIfMissing(">P<\u0001CFOzauyl", "\u0007R76i(BW8ACq", charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("\u0007R76i(BW8ACq>P<\u0001CFOzauyl", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0007R76i(BW8ACq>P<\u0001CFOzauyl", (CharSequence) ">P<\u0001CFOzauyl");
      assertEquals(12, int0);
      
      String string4 = StringUtils.rightPad(string0, 2357);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string4, (-2480));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.abbreviateMiddle("0d*Q'd~PVOWx&h", "Iw;eih8bYgT", 160);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("0d*Q'd~PVOWx&h", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "0d*Q'd~PVOWx&h", "/ANtz j$");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[0];
      String string6 = StringUtils.join(longArray0, '0');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultIfBlank("Iw;eih8bYgT", "0d*Q'd~PVOWx&h");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Iw;eih8bYgT", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("c=]Ic", 1463, 'A');
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("=c*t6`)M5RGCM|\"");
      assertEquals("=c*t6`)M5RGCM|\"", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", 21, 21);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "=c*t6`)M5RGCM|\"");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("=c*t6`)M5RGCM|\"", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("`7");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrap("J1Fj>ggi-9q#_Ux", "StdIo_System_In");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('g', 1);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("g", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("=c*t6`)M5RGCM|\"", "7");
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("=c*t6`)M5RGCM|\"", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      int int1 = StringUtils.indexOfAny((CharSequence) "g", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', 'g', 'g', 'g'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "StdIo_System_In", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'g', 'g', 'g'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      
      String string7 = StringUtils.stripEnd("p:4:}K|NyWK1L", "rB#MnR(=v?jln ");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("p:4:}K|NyWK1L", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.stripStart("ov6 nE^<h[,.'", (String) null);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("ov6 nE^<h[,.'", string8);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isNotBlank("7");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isMixedCase("`7");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.strip("]k*V#:6SiSq", (String) null);
      assertEquals("]k*V#:6SiSq", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("RB7j?W>,a$u+", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("RB7j?W>,a$u+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("6U2buz\u0006KVe]5");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6u2BUZ\u0006kvE]5", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]k*V#:6SiSq", (CharSequence) "6U2buz\u0006KVe]5", 50);
      assertEquals(12, int0);
      
      String[] stringArray0 = StringUtils.split("RB7j?W>,a$u+", "6U2buz\u0006KVe]5");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.stripStart("6U2buz\u0006KVe]5", "Object varargs must not be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("6U2buz\u0006KVe]5", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ", Length: ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[2] = (Object) "6U2buz\u0006KVe]5";
      String string4 = StringUtils.abbreviate("Object varargs must not be null", 12, 11);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...gs mu...", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("@CartesianProductTest not found.", 9, 9);
      assertEquals("...nPr...", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      String string0 = StringUtils.replace("9", "9", "G vs ", 14);
      assertEquals("G vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("x+ -hLSk51-,Rjm7", "V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("x+ -hLSk51-,Rjm7", string1);
      assertNotNull(string1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertNotNull(enumSet0);
      
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.complementOf(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(4, enumSet1.size());
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet1.contains(locale_FilteringMode0));
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      assertEquals(1, enumSet0.size());
      assertEquals(4, enumSet1.size());
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet1.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      String string2 = StringUtils.join(iterator0, "Search and Replace array lengths don't match: ");
      assertEquals(1, enumSet0.size());
      assertEquals(4, enumSet1.size());
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet1.contains(locale_FilteringMode0));
      assertEquals("EXTENDED_FILTERINGSearch and Replace array lengths don't match: IGNORE_EXTENDED_RANGESSearch and Replace array lengths don't match: MAP_EXTENDED_RANGESSearch and Replace array lengths don't match: REJECT_EXTENDED_RANGES", string2);
      assertNotNull(string2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      
      String string3 = StringUtils.rightPad("EXTENDED_FILTERINGSearch and Replace array lengths don't match: IGNORE_EXTENDED_RANGESSearch and Replace array lengths don't match: MAP_EXTENDED_RANGESSearch and Replace array lengths don't match: REJECT_EXTENDED_RANGES", 14, "V");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("EXTENDED_FILTERINGSearch and Replace array lengths don't match: IGNORE_EXTENDED_RANGESSearch and Replace array lengths don't match: MAP_EXTENDED_RANGESSearch and Replace array lengths don't match: REJECT_EXTENDED_RANGES", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("EXTENDED_FILTERINGSearch and Replace array lengths don't match: IGNORE_EXTENDED_RANGESSearch and Replace array lengths don't match: MAP_EXTENDED_RANGESSearch and Replace array lengths don't match: REJECT_EXTENDED_RANGES");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.wrapIfMissing("", '@');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ZqeMj#q#9jV*FaV~Lsx", "ZqeMj#q#9jV*FaV~Lsx", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultIfEmpty("ZqeMj#q#9jV*FaV~Lsx", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ZqeMj#q#9jV*FaV~Lsx", string2);
      assertNotNull(string2);
      
      String string3 = "";
      String string4 = StringUtils.prependIfMissingIgnoreCase("1]", "", stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertEquals("1]", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = '9';
      charArray0[2] = 'g';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = '@';
      int int1 = StringUtils.indexOfAny((CharSequence) "ZqeMj#q#9jV*FaV~Lsx", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'T', '9', 'g', '@', '@', '@', '@'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(8, int1);
      
      String string5 = StringUtils.reverseDelimited("Th0Ihh{^3F8#", 'T');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("h0Ihh{^3F8#", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("1]", 13);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("1]1]1]1]1]1]1]1]1]1]1]1]1]", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.trimToEmpty("fb(+H?t");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("fb(+H?t", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfterLast("", 1061);
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", string8);
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("ZqeMj#q#9jV*FaV~Lsx", "fb(+H?t", "fb(+H?t");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 3
         // fb(+H?t
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString(">hr(a]~i&a9V~lpT");
      assertTrue(string1.equals((Object)string0));
      assertEquals(">hr(a]~i&a9V~lpT", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, 56, "s^B6m>");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("&>V8<d8)Jl8oTB>S");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrap("-7;", '1');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("1-7;1", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string4 = StringUtils.repeat(">hr(a]~i&a9V~lpT", (String) null, 56);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(">hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(">hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT>hr(a]~i&a9V~lpT", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.center("Cannot clear and set the following entries at the same time: ", 1145, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) string1;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "Cannot clear and set the following entries at the same time: ";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("", (-2034458190));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("\"", 2078, 576);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      String string0 = StringUtils.remove("|)^SgxkKOh0lPJjWJJ%", "|)^SgxkKOh0lPJjWJJ%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("|)^SgxkKOh0lPJjWJJ%", 3, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|)^SgxkKOh0lPJjWJJ%", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "vc";
      charSequenceArray0[1] = (CharSequence) "vc";
      charSequenceArray0[2] = (CharSequence) "vc";
      charSequenceArray0[3] = (CharSequence) "vc";
      charSequenceArray0[4] = (CharSequence) "vc";
      charSequenceArray0[5] = (CharSequence) "vc";
      String string0 = StringUtils.replaceChars((String) null, '!', '+');
      assertNull(string0);
      
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "vc";
      String string1 = StringUtils.trimToEmpty("C");
      assertEquals("C", string1);
      assertNotNull(string1);
      
      charSequenceArray0[8] = (CharSequence) "C";
      String string2 = StringUtils.appendIfMissing("vc", "vc", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals(9, charSequenceArray0.length);
      assertEquals("vc", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("C", "f/fM?YeA", "vc");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("C", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("C");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringBefore("hc/6'3YN}+@iV", "Object varargs must not be nullObject varargs must not be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("hc/6'3YN}+@iV", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", 2256);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      StringUtils.split(string1, string1, 22);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "Minimum abbreviation width is %d", 109);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("7B*K]9&!t+wtge&q", "7B*K]9&!t+wtge&q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("", 430);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "7B*K]9&!t+wtge&q");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("7B*K]9&!t+wtge&q", "Y|lJY1");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("7B*K]9&!t+wtge&q", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("", '\'');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.remove("ASmch!kfIg,9_8>M0w", '\'');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("ASmch!kfIg,9_8>M0w", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("7B*K]9&!t+wtge&q");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("7B*K]9&!t+wtge&q", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.countMatches((CharSequence) "7B*K]9&!t+wtge&q", 'P');
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.split("...", "FC5T", 9);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.substringBeforeLast("a$3!$B", "Exactly one type of input must be provided in the @");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("a$3!$B", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "a$3!$B", 66);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      int int0 = StringUtils.compare("uH,{T`]1_%LCP=", "Ux+ -hLSLk51-,hRjm7", false);
      assertEquals(32, int0);
      
      String string0 = StringUtils.chop("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("[+WC6Q_xDmN|i[-B!", 32767, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":30GY!Fj8", (CharSequence) "0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", 98);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substring((String) null, (-2273), 11);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", (CharSequence) "0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\n", ":30GY!Fj8");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Cannot clear ad set the following entries at the same time: Cannot clear ad set the following entries at the same time: ", "5L(Q#}MSOUvK/", 15, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)259;
      shortArray0[1] = (short)448;
      String string0 = StringUtils.join(shortArray0, 'E');
      assertArrayEquals(new short[] {(short)259, (short)448}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("259E448", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "259E448", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("259E448", 1, "&");
      assertTrue(string1.equals((Object)string0));
      assertEquals("259E448", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join(shortArray0, 'E');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new short[] {(short)259, (short)448}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("259E448", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("&");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("&", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("259E448", "259E448");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.unwrap((String) null, "&");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "259E448";
      String string5 = StringUtils.substringBefore("259E448", "9$");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("259E448", string5);
      assertNotNull(string5);
      
      charSequenceArray0[1] = (CharSequence) "259E448";
      String string6 = StringUtils.rotate("l", 32);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("l", string6);
      assertNotNull(string6);
      
      charSequenceArray0[2] = (CharSequence) "l";
      charSequenceArray0[3] = (CharSequence) "&";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[2], charSequenceArray0[2], 16);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string7 = StringUtils.substringAfter((String) null, 32);
      assertNull(string7);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (int) (short)448, 16);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.repeat("7A/2X0nO", 35);
      assertEquals("7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO", 35);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO...", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7A/2X0nO7A/2X0nO7A/2X0nO7A/2X0nO...", "7A/2X0nO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.abbreviate("P($9h+6q:s]", "l", 7);
      assertEquals("P($9h+l", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("P($9h+6q:s]", "[");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("P($9h+l");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("P($9h+l", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("[", 'l');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Threshold must not be negative", 'l');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.removeEndIgnoreCase("P\"{=B7w;$8%)U|", "wil");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("P\"{=B7w;$8%)U|", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "P($9h+l", "l");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        StringUtils.getBytes("l", "P\"{=B7w;$8%)U|");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "maxWith cannot be negative", (CharSequence) "maxWith cannot be negative");
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "GA-e==,<cxQE", 4, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "?b_u`'Q\"wk;f}\"@&E");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", (-348));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("Cloneable type ", 4, 4);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Cloneable type "));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.substring("", 4);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("", 1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("NY|lJY1gOT1Ktpl!OQ7=!w0>|", " g4~ ");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("NY|lJY1gOT1Ktpl!OQ7=!w0>|", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "NY|lJY1gOT1Ktpl!OQ7=!w0>|");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("F@E+=Bd0@NEI");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.strip("]k*V#:6SiSq", (String) null);
      assertEquals("]k*V#:6SiSq", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("RB7j?W>,a$u+", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("RB7j?W>,a$u+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("6U2buz\u0006KVe]5");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("6u2BUZ\u0006kvE]5", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]k*V#:6SiSq", (CharSequence) "6U2buz\u0006KVe]5", 50);
      assertEquals(12, int0);
      
      String[] stringArray0 = StringUtils.split("RB7j?W>,a$u+", "6U2buz\u0006KVe]5");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.stripStart("6U2buz\u0006KVe]5", "Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("6U2buz\u0006KVe]5", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ", Length: ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[2] = (Object) "6U2buz\u0006KVe]5";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "6U2buz\u0006KVe]5";
      objectArray0[5] = (Object) "x2 a*jqj.2wG#kow";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "Object varargs must not be null", 0, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String string0 = StringUtils.difference("(K", (String) null);
      assertEquals("(K", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = "pA$GS*-c,\\60Mb{XC\"";
      String string2 = StringUtils.replace("pA$GS*-c,0Mb{XC\"", "7rL3]\"uH!", "", 48);
      assertFalse(string2.equals((Object)string1));
      assertEquals("pA$GS*-c,0Mb{XC\"", string2);
      assertNotNull(string2);
      
      int int1 = 25;
      int int2 = 573;
      long[] longArray0 = new long[7];
      longArray0[1] = (long) 48;
      longArray0[2] = (long) 573;
      longArray0[3] = 573L;
      longArray0[4] = (long) '%';
      longArray0[5] = (long) 48;
      longArray0[6] = (long) 0;
      char char0 = ';';
      int int3 = 84;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ';', 0, 84);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("-1WDn_:gDhdp&5");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-1WDn_:gDhdp&5", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("...", 'P');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "Wx&U*[.{5hE<BHTGv", 'P');
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStart("StdIoExtension is active but no %s annotation was found.", "W");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("StdIoExtension is active but no %s annotation was found.", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "W", (CharSequence) "StdIoExtension is active but no %s annotation was found.", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("...", "W");
      assertEquals(0.0, double0, 0.01);
      
      int int2 = StringUtils.countMatches((CharSequence) "...", (CharSequence) "StdIoExtension is active but no %s annotation was found.");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("'");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-1WDn_:gDhdp&5";
      objectArray0[1] = (Object) "Wx&U*[.{5hE<BHTGv";
      objectArray0[2] = (Object) "...";
      objectArray0[3] = (Object) "W";
      String string5 = StringUtils.join(objectArray0, "`2Rs)c'{}N", 8, (-1361));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(4, objectArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("...", 9, "...");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(".........", string6);
      assertNotNull(string6);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfEmpty("a+IG!wnwY_mld=+`lXX~", supplier0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("a+IG!wnwY_mld=+`lXX~", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("", 141);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", 1335);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("Qg?w%R/$!s6", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Illegal range. The step cannot be zero."));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.substring("F@E+=Bd0@NEI", 141);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("", (-1644));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBefore("04$*dsra3VvK", "Locale must not be null");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("04$*dsra3VvK", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Illegal range. The step cannot be zero.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.repeat("1+Q,Gm<!pyLDq@gxBg", 8174);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("1+Q,Gm<!pyLDq@gxBg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("1+Q,Gm<!pyLDq@gxBg", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "1+Q,Gm<!pyLDq@gxBg", (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'r';
      charArray0[4] = 'G';
      charArray0[5] = 'r';
      charArray0[6] = 'r';
      charArray0[7] = 'G';
      String string2 = StringUtils.join(charArray0, 'F');
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'G', 'G', 'G', 'r', 'G', 'r', 'r', 'G'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("GFGFGFrFGFrFrFG", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap((String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("iQ&O|Locale must not be null", "`|@oHR`(]GQh0p9N!l^y?o");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("`|@oHR`(]GQh0p9N!l^y?o", (-3224));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "`|@oHR`(]GQh0p9N!l^y?o";
      charSequenceArray0[3] = (CharSequence) "`|@oHR`(]GQh0p9N!l^y?o";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[3], '\"');
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("(]GQh0p9N!l^y?o`|@oHR`", "", "(]GQh0p9N!l^y?o`|@oHR`");
      assertNull(stringArray0);
      
      String string3 = StringUtils.removeEnd("", "(]GQh0p9N!l^y?o`|@oHR`");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[1]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "(]GQh0p9N!l^y?o`|@oHR`", (CharSequence) "iQ&O|Locale must not be null", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      NavigableSet<String> navigableSet0 = treeSet0.subSet("Th^", false, "Th^", false);
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertFalse(treeSet0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertFalse(navigableSet0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertNotNull(navigableSet0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) navigableSet0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(treeSet0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertFalse(navigableSet0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertFalse(list0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertNotNull(list0);
      
      String string5 = StringUtils.join(list0, "`|@oHR`(]GQh0p9N!l^y?o", 122, 122);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(treeSet0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertFalse(navigableSet0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertFalse(list0.contains("`|@oHR`(]GQh0p9N!l^y?o"));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "8\"[");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceAll("U5_]:$E/Ei&qRv#M", " ", ".K.XoxT7,c");
      assertFalse(string1.equals((Object)string0));
      assertEquals("U5_]:$E/Ei&qRv#M", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Th^", 71, "offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Th^offset cannot be negativeoffset cannot be negativeoffset cannot be n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("NQwuq\"^0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("NQwuq\"^0", string3);
      assertNotNull(string3);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(".K.XoxT7,c"));
      assertNotNull(linkedHashSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedHashSet0.remove("8\"[");
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(boolean1);
      
      boolean boolean2 = linkedHashSet0.add((Object) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(boolean2);
      
      boolean boolean3 = linkedHashSet0.add("U5_]:$E/Ei&qRv#M");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(linkedHashSet0.contains("U5_]:$E/Ei&qRv#M"));
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(boolean3);
      
      String string4 = StringUtils.join((Iterable<?>) linkedHashSet0, '\\');
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(linkedHashSet0.contains("U5_]:$E/Ei&qRv#M"));
      assertFalse(linkedHashSet0.contains(""));
      assertEquals("\\U5_]:$E/Ei&qRv#M", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("\n");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rotate("-1WDn_:gDhdp&5", 52);
      assertEquals("n_:gDhdp&5-1WD", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("n_:gDhdp&5-1WD");
      assertTrue(string1.equals((Object)string0));
      assertEquals("n_:gDhdp&5-1WD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate(" 00($%cOSWv4@E", 52);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$%cOSWv4@E 00(", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring((String) null, (-25));
      assertNull(string3);
      
      String string4 = StringUtils.substring("n_:gDhdp&5-1WD", 2415, 2415);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = "H9$Nx[OU.p$e=<";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("", "l@yBuI2]xT9gK|", "H9$Nx[OU.p$e=<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = StringUtils.contains((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.wrap("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aorg.junitpioneer.jupiter.cartesian.CartesianTestExtensionA", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      String string1 = "^Th";
      String string2 = StringUtils.capitalize("^Th");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("^Th", string2);
      assertNotNull(string2);
      
      String string3 = "Threshold must not be negative";
      String string4 = StringUtils.unwrap("Threshold must not be negative", 'T');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("Threshold must not be negative");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Thresholdmustnotbenegative", string5);
      assertNotNull(string5);
      
      int int0 = 4160;
      String string6 = StringUtils.repeat("^Th", 4160);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = ";F[s>^q-<wt&13Qa";
      // Undeclared exception!
      StringUtils.splitByCharacterTypeCamelCase(string6);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("must not be null", '\u000B');
      assertEquals("\u000Bmust not be null\u000B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, '\u000B', 4589, 4589);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'J');
      assertNull(string0);
      
      String string1 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertEquals("X,M4x/#1`Ugk", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split((String) null, "|h|9u=coFpz:qw", (int) 'J');
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceAll("vh.<wi/DhRdJ.4=|", "...", "NQwuq\"^0");
      assertFalse(string2.equals((Object)string1));
      assertEquals("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0|", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|");
      assertEquals(26, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeStart("UbG=1(-1WDn_:gDhdp&5", "NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("UbG=1(-1WDn_:gDhdp&5", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("Locale must not be null");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Locale must not be null", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Locale must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.getIfEmpty("lX", (Supplier<String>) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("lX", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.split("NQwuq\"^0", (String) null);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean2 = StringUtils.isAlpha("lX");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean3 = locale0.hasExtensions();
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int1 = StringUtils.getFuzzyDistance("UbG=1(-1WDn_:gDhdp&5", "vh.<wi/DhRdJ.4=|", locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 187);
      assertEquals("1`Q5", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("51`Q", "1`Q5");
      assertFalse(boolean0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("51`Q"));
      assertNotNull(stack0);
      
      String string2 = StringUtils.join((List<?>) stack0, 'x', 187, (-32768));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(string2.equals((Object)string0));
      assertFalse(stack0.contains("51`Q"));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('o', (-1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Qg?w%R/$!s6", 'Q');
      assertEquals("Qg?w%R/$!s6Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.center("lH`0KiV?4", 8187, "lH`0KiV?4");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "lH`0KiV?4", (CharSequence) string0, 8187);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.replace("9", "9", "G vs ", 14);
      assertEquals("G vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("", "TJg~w-cW9s/w ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.getDigits(">P<\u0001CFOzauyl");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      String string5 = StringUtils.center("The character must not be null", 14);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("The character must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("Ux+ -hLSLk51-,hRjm7", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "G vs ";
      charSequenceArray0[1] = (CharSequence) "TJg~w-cW9s/w ";
      charSequenceArray0[2] = (CharSequence) "Ux+ -hLSLk51-,hRjm7";
      String string7 = StringUtils.chomp((String) null);
      assertNull(string7);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "The character must not be null";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.upperCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = "";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(charSequence0);
      
      Locale locale1 = Locale.FRENCH;
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.JAPANESE;
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", locale2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "ZF{k=_2(sU(u&BsAZi)", (String) null, (-1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 57);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((-1)));
      assertNotNull(stack0);
      
      boolean boolean2 = stack0.add((Object) "ZF{k=_2(sU(u&BsAZi)");
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[ZF{k=_2(sU(u&BsAZi)]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(stack0.contains("ZF{k=_2(sU(u&BsAZi)"));
      assertFalse(stack0.contains((-1)));
      assertTrue(boolean2);
      
      Stream<Object> stream0 = stack0.parallelStream();
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[ZF{k=_2(sU(u&BsAZi)]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("ZF{k=_2(sU(u&BsAZi)"));
      assertFalse(stack0.contains((-1)));
      assertNotNull(stream0);
      
      String string4 = StringUtils.join((List<?>) stack0, 'C', 38, 38);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[ZF{k=_2(sU(u&BsAZi)]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(stack0.contains("ZF{k=_2(sU(u&BsAZi)"));
      assertFalse(stack0.contains((-1)));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase("{[0-9]+}", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("{[0-9]+}", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "{[0-9]+}";
      String string1 = StringUtils.overlay("\"UQ`SanTs", "{[0-9]+}", 10, 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"UQ`SanTs{[0-9]+}", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "\"UQ`SanTs{[0-9]+}";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-67);
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string2 = locale0.getExtension('l');
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(string2);
      
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)23;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)99, (byte)11, (byte)22, (byte) (-67), (byte)96, (byte)23}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("c\u000B\u0016\uFFFD`\u0017", string3);
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "c\u000B\u0016\uFFFD`\u0017";
      String string4 = StringUtils.substringBetween("{[0-9]+}", "\"UQ`SanTs{[0-9]+}", (String) null);
      assertNull(string4);
      
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      String string5 = StringUtils.join(charArray0, '`', (int) (byte)96, (int) (byte)23);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(";7#R52[3*}\"n*", "n", 4737);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y|lJY1", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'P');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll(";7#R52[3*}\"n*6AGZ}e", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(";7#R52[3*}\"n*6AGZ}e", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((char[]) null, 'P');
      assertNull(string6);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string7 = StringUtils.upperCase((String) null, locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      char[] charArray0 = new char[0];
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string0 = locale1.getDisplayName();
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Chinese", string0);
      assertNotNull(string0);
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertNull(string2);
      assertNotSame(locale0, locale1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"@TOEPFCry/\u0000NzL", "\"@TOEPFCry/\u0000NzL", 48);
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad((String) null, (-1372), "lX");
      assertNull(string0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayCountry(locale1);
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\u82F1\u570B", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(set0.contains("\"@TOEPFCry/\u0000NzL"));
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      
      String string2 = StringUtils.join((Iterable<?>) set0, '9');
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(set0.contains(string2));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      
      String string3 = StringUtils.substringBefore("", "\"@TOEPFCry/\u0000NzL");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(16, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "lX", "6]k{p8M;g3");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.substringBefore("Cannot store ", "G ?<");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Cannot store ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(16, stringArray0.length);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1372);
      longArray0[2] = (long) '9';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '\\', 5, 66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.rightPad("#N]ka&|+]lP>@v(I~zn", 8192);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("#N]ka&|+]lP>@v(I~zn", 28);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn#N]ka&|+]lP>@v(I~zn", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("P_");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.join((Object[]) null, "3VwC58A^&q{S");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.junitpioneer.vintage.ExpectedExceptionExtension", ",*5Q\"mcouQv", Integer.MAX_VALUE);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.trimToNull("doesn't match any regular expression.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("doesn't match any regular expression.", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", charSequence0);
      assertNotNull(charSequence0);
      
      Locale locale1 = Locale.ENGLISH;
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.JAPANESE;
      assertEquals("", locale2.getISO3Country());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Locale locale3 = locale1.stripExtensions();
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getCountry());
      assertEquals("en", locale3.getLanguage());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("", locale3.getISO3Country());
      assertEquals("en", locale3.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale1);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.replaceEach("3VwC58A^&q{S", stringArray1, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals(0, stringArray1.length);
      assertEquals("3VwC58A^&q{S", string5);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.getFuzzyDistance("N", ",*5Q\"mcouQv", locale2);
      assertEquals("", locale2.getISO3Country());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertFalse(int1 == int0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale3));
      assertEquals(0, int1);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale3);
      
      String string6 = StringUtils.chop(" vs ");
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" vs", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBefore(" vs ", "\"");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string6));
      assertEquals(" vs ", string7);
      assertNotNull(string7);
      
      String[] stringArray2 = new String[5];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "\"";
      stringArray2[1] = "3VwC58A^&q{S";
      stringArray2[2] = string0;
      stringArray2[3] = " vs ";
      stringArray2[4] = " ";
      String string8 = StringUtils.firstNonBlank(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string6));
      assertEquals(5, stringArray2.length);
      assertEquals("\"", string8);
      assertNotNull(string8);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 187);
      assertEquals("1`Q5", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "51`Q", (CharSequence) "51`Q");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "51`Q";
      charSequenceArray0[1] = (CharSequence) "51`Q";
      charSequenceArray0[2] = (CharSequence) "1`Q5";
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("51`Q");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultIfEmpty("<Kv", "OY<Xv5E");
      assertFalse(string1.equals((Object)string0));
      assertEquals("<Kv", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 187;
      intArray0[1] = 187;
      intArray0[2] = 187;
      intArray0[3] = 187;
      intArray0[4] = 187;
      intArray0[5] = 0;
      String string2 = StringUtils.join(intArray0, '0');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {187, 187, 187, 187, 187, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("18701870187018701870000", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("51`Q", "51`Q");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "AQ_P}[wqb");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace("");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.upperCase("maxWith cannot be negative", locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("MAXWITH CANNOT BE NEGATIVE", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("51`Q", "51`Q");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear ad set the following entries at the same time: ", "Cannot clear ad set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("", 9);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("_LNjn.BYsSQmrP6q;8'", "_LNjn.BYsSQmrP6q;8'");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("_LNjn.BYsSQmrP6q;8'", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("Rn):7rx$jvt2");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("rn):7rx$jvt2", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("X~");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, '\\');
      assertNull(string5);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.getDigits("97n1(CCUqxcRf-XZ1_+");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("9711", string6);
      assertNotNull(string6);
      
      try { 
        StringUtils.getBytes("Cannot clear ad set the following entries at the same time: ", "=wZU!FcjkCSitGd]1");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1979);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = '`';
      charArray0[2] = ']';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'U', '`', ']'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("U`]", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'U', '`', ']'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\n", "^Th");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Threshold must not be negative", 'T');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("q&g:_`Jo_J>_m\"E");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("q&g:_`Jo_J>_m\"E", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern("q&g:_`Jo_J>_m\"E", "67.0");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("q&g:_`Jo_J>_m\"E", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Threshold must not be negative", (CharSequence) "\n", (-2154));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.join(floatArray0, '\"', 1446, 619);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains('C'));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        vector0.subList(2378, (-860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2378) > toIndex(-860)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String string0 = "^A&\"";
      String string1 = StringUtils.abbreviate("$JX}V", "^A&\"", 825, 256);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$JX}V", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'q', 825, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToEmpty("Lv");
      assertEquals("Lv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split(";7#R52[3*}\"n*", "Ux+ -hLSLk51-,hRjm7", (-1924));
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.rightPad("SQR1=8u<", 2452, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty(";7#R52[3*}\"n*");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(";7#R52[3*}\"n*", string4);
      assertNotNull(string4);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Ux+ -hLSLk51-,hRjm7"));
      assertNotNull(linkedHashSet0);
      
      String string5 = StringUtils.substringAfterLast(string3, 20);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(";7#R52[3*}\"n*", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "PYK}UH(n2n", (-878));
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "8\"[");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("", 'J');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("U5_]:$E/Ei&qRv#M", " ", ".K.XoxT7,c");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("U5_]:$E/Ei&qRv#M", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Th^", 71, "offset cannot be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Th^offset cannot be negativeoffset cannot be negativeoffset cannot be n", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("NQwuq\"^0");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("NQwuq\"^0", string4);
      assertNotNull(string4);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(71));
      assertNotNull(linkedHashSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedHashSet0.remove("8\"[");
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.contains(71));
      assertFalse(boolean1);
      
      boolean boolean2 = linkedHashSet0.add((Object) null);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.contains(71));
      assertTrue(boolean2);
      
      boolean boolean3 = linkedHashSet0.add("U5_]:$E/Ei&qRv#M");
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(linkedHashSet0.contains("U5_]:$E/Ei&qRv#M"));
      assertFalse(linkedHashSet0.contains(71));
      assertTrue(boolean3);
      
      String string5 = StringUtils.join((Iterable<?>) linkedHashSet0, '\\');
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(linkedHashSet0.contains("U5_]:$E/Ei&qRv#M"));
      assertFalse(linkedHashSet0.contains(71));
      assertEquals("\\U5_]:$E/Ei&qRv#M", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("s{,\""));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("s{,\"                         ");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("s{,\"                         "));
      assertFalse(linkedHashSet0.contains("s{,\""));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add((Object) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains("s{,\"                         "));
      assertFalse(linkedHashSet0.contains("s{,\""));
      assertTrue(boolean1);
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, '-');
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(string1.equals((Object)string0));
      assertTrue(linkedHashSet0.contains("s{,\"                         "));
      assertFalse(linkedHashSet0.contains("s{,\""));
      assertEquals("s{,\"                         -", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("s{,\"                         ", '(');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(s{,\"                         (", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = priorityQueue0.add(locale_FilteringMode0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      
      String string3 = StringUtils.uncapitalize("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("vVVVVVVV\u0007R76i(BW8ACqVVVVVVVV", string3);
      assertNotNull(string3);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = priorityQueue0.add(locale_FilteringMode1);
      assertEquals(2, priorityQueue0.size());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(priorityQueue0.contains(locale_FilteringMode1));
      assertTrue(boolean1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2);
      
      String string4 = StringUtils.prependIfMissing("s{,\"                         ", "s{,\"", stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("s{,\"                         ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV", (CharSequence) "vVVVVVVV\u0007R76i(BW8ACqVVVVVVVV");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "The type must not be null", 29);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.abbreviateMiddle(" has no clone method", "The type must not be null", 2);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" has no clone method", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "s{,\"                         ", "The type must not be null");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 29;
      String string6 = StringUtils.trimToEmpty(">P<\u0001CFOzauyl");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals(">P<\u0001CFOzauyl", string6);
      assertNotNull(string6);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(" has no clone method"));
      assertNotNull(linkedHashSet0);
      
      String string7 = StringUtils.join((Iterable<?>) priorityQueue0, 'A');
      assertEquals(2, priorityQueue0.size());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(priorityQueue0.contains(locale_FilteringMode1));
      assertEquals("MAP_EXTENDED_RANGESAREJECT_EXTENDED_RANGES", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.lastOrdinalIndexOf(" has no clone method", "MAP_EXTENDED_RANGESAREJECT_EXTENDED_RANGES", 2616);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean4 = StringUtils.equalsAny(" has no clone method", stringArray0);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("~\"hz_");
      assertFalse(string2.equals((Object)string1));
      assertEquals("~\"HZ_", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "~\"HZ_", (CharSequence) "org.apache.commons.lang3.StringUtils", 35);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("~\"hz_", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[2] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", 130);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("ORG.APACHE.COMMONS.LANG3.EXCEPTION.cLONEfAILEDeXCEPTION", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension", 290);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(36, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'w', 450, (-400));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "nUP0jhFyU#I=Cy*");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "nUP0jhFyU#I=Cy*", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("1", "zK#E3S@.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("1", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "A])%-[<h~");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("1", (short)0, (short)0);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      String string7 = StringUtils.capitalize("");
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('g', 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("gggggggggggggggg", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("gggggggggggggggg", "Execution of '%s' took [%d] ms.", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringBetween("gggggggggggggggg", "gggggggggggggggg");
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("gggggggggggggggg");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-212962593), (-212962593));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("%>#u8Ex\"");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("8", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("%>#u8Ex\"");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "gggggggggggggggg", 7);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isWhitespace("%>#u8Ex\"");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAllLowerCase("gggggggggggggggg");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.isAlphanumeric("gggggggggggggggg");
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      boolean boolean6 = StringUtils.contains((CharSequence) " ", (-2926));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6);
      
      String string5 = StringUtils.replaceIgnoreCase("D*s*Gr`\".}3MJDY0Blp", "Execution of '%s' took [%d] ms.", (String) null, 61);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("D*s*Gr`\".}3MJDY0Blp", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastOrdinalIndexOf("%>#u8Ex\"", "D*s*Gr`\".}3MJDY0Blp", 57);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean7 = StringUtils.isEmpty(" ");
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7);
      
      String string6 = StringUtils.abbreviate("Execution of '%s' took [%d] ms.", "%>#u8Ex\"", (-212962593), 61);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Execution of '%s' took [%d] ms.", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBetween("8", "mN}88$X+T^@ZN4N");
      assertNull(string7);
      
      String string8 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string8);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "8", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int2);
      
      int int3 = StringUtils.ordinalIndexOf(" ", "gggggggggggggggg", 61);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "n";
      charSequenceArray0[1] = (CharSequence) "n";
      charSequenceArray0[2] = (CharSequence) "n";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'Y');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("51`Q");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Execution of '%s' took [%d] ms.", "0W", false);
      assertEquals(53, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("w5rRym_fAD$").when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("w5rRym_fAD$", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("Execution of '%s' took [%d] ms.", "<Bb[4:!4m;[s");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank("w5rRym_fAD$");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "0W", (CharSequence) "Execution of '%s' took [%d] ms.");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int1 = StringUtils.indexOf((CharSequence) "w5rRym_fAD$", 372);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("Object varargs must not be null", 0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      StringWriter stringWriter0 = new StringWriter(7);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('r');
      assertEquals("r", stringWriter0.toString());
      assertEquals("r", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      stringWriter0.flush();
      assertEquals("r", stringWriter0.toString());
      assertSame(stringWriter0, stringWriter1);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      assertEquals("rnull", stringWriter0.toString());
      assertEquals("rnull", stringWriter1.toString());
      assertEquals("rnull", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      String string3 = StringUtils.substringAfterLast("", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", charArray0);
      assertArrayEquals(new char[] {'r', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(68, int0);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O2c..QB)9<");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "O2c..QB)9<");
      assertEquals(1, stringArray0.length);
      assertEquals("O2c..QB)9<", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", (-6139), 'B');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("org.junitpioneer.jupiter.params.DoubleRange", (-6139), "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.DoubleRange", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("a+IG!wnwY_mld=+`lXX~", "Q", "Expected exception %s was not thrown.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("a+IG!wnwY_mld=+`lXX~", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Q", (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.toRootUpperCase("Expected exception %s was not thrown.");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("EXPECTED EXCEPTION %S WAS NOT THROWN.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", "Threshold must not be negative");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.params.RangeSourceArgumentsProvider", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEndIgnoreCase("m1Sq3.t{8{Y9", "Q");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("m1Sq3.t{8{Y9", string6);
      assertNotNull(string6);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(""));
      assertNotNull(priorityQueue0);
      
      boolean boolean0 = priorityQueue0.add("...");
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("..."));
      assertFalse(priorityQueue0.contains(""));
      assertTrue(boolean0);
      
      String string7 = StringUtils.join((Iterable<?>) priorityQueue0, '');
      assertEquals(1, priorityQueue0.size());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(priorityQueue0.contains("..."));
      assertFalse(priorityQueue0.contains(""));
      assertEquals("...", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 28);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase(", '");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(", '", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ", '", (CharSequence) "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 22);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "8.k|cd4=_hZ[2Yu+~;e", (CharSequence[]) null);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.abbreviate("Comparator should not be null.", 35);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Comparator should not be null.", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.swapCase("%(@~lfU<(W@`Q");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("%(@~LFu<(w@`q", string7);
      assertNotNull(string7);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.DefaultTimeZoneExtension", (CharSequence) null, 11);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "3`\"@U3::x", (CharSequence) "nUP0jhFyU#I=Cy*");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "3`\"@U3::x", (CharSequence) "nUP0jhFyU#I=Cy*", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.rotate("$JX}V", 76);
      assertEquals("V$JX}", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "V$JX}";
      objectArray0[1] = (Object) "$JX}V";
      String string1 = StringUtils.join(objectArray0, '%');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertEquals("V$JX}%$JX}V", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("{arguments}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{arguments}", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("{arguments}");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Execution of '%s' took [%d] ms.", true);
      assertEquals((-1), int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("w5rRym_fAD$", supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("w5rRym_fAD$", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("Execution of '%s' took [%d] ms.", "Fv)Y<]K/oDguf");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "w5rRym_fAD$", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y', 'Y'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank("$JX}V");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.capitalize("'iU+m'-cpNU+aAi");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("'iU+m'-cpNU+aAi", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceFirst("V$JX}%$JX}V", "'iU+m'-cpNU+aAi", "{arguments}");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("V$JX}%$JX}V", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals(6, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Z", (String) null);
      assertEquals("Z", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "Z";
      stringArray0[2] = "Z";
      stringArray0[3] = null;
      stringArray0[4] = "Z";
      stringArray0[5] = null;
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "Z";
      stringArray1[1] = "Z";
      stringArray1[2] = "Z";
      stringArray1[3] = "Z";
      stringArray1[4] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("Z", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 6 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap("s{", '3');
      assertEquals("3s{3", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("\"");
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("WStdIoExtension is active but no %s annotation was found.", "\"");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.defaultIfEmpty("Xcd", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Xcd", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "3s{3", 'I');
      assertEquals(0, int0);
      
      String string5 = StringUtils.difference("Exactly one type of input must be provided in the @", "s{");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("s{", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeFirst("", "0tz_yJaI33a+p',0");
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBefore("7=c*t6`)M5RGCM|\"", "0tz_yJaI33a+p',0");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("7=c*t6`)M5RGCM|\"", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      String string8 = StringUtils.join(charArray0, '\"', 0, 1);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("3", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = "nB7;c";
      String string1 = StringUtils.rightPad("nB7;c", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 28;
      // Undeclared exception!
      try { 
        StringUtils.repeat("P_", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.repeat("{", 65);
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.rightPad("&>V8<d8)Jl8oTB>S", 3, "DefaultTimeZone");
      assertEquals("&>V8<d8)Jl8oTB>S", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("DefaultTimeZone", 1568, '7');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("&>V8<d8)Jl8oTB>S", "DefaultTimeZone");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.chop("&>V8<d8)Jl8oTB>S");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("&>V8<d8)Jl8oTB>", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String string0 = StringUtils.stripToNull(":In)L");
      assertEquals(":In)L", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, 'M');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString(":In)L", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":In)L", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split(":In)L", 'M');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.remove(":In)L", 'g');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(":In)L", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "Vv", 'P');
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.split("x\"+A@DefaultLocale can only be used with language tag if language, country, and variant are not set", "YKyvD5[J;YX", (-70));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Vv", 2441);
      assertFalse(boolean0);
      
      String string4 = "p'(|d[UZ,sF\\u{S:";
      String string5 = StringUtils.unwrap(string4, 'P');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("p'(|d[UZ,sF\\u{S:", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("YKyvD5[J;YX", ":In)L");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.center(")", 2869);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 2869, 2869);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("'t>_P.|R8+pZh8e", 3, "'t>_P.|R8+pZh8e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("'t>_P.|R8+pZh8e", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      int int0 = 8192;
      String string0 = StringUtils.rightPad("nB7;c", 8192);
      assertNotNull(string0);
      
      int int1 = 25;
      String string1 = StringUtils.center("nB7;c", 25, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVVVVnB7;cVVVVVVVVVV", string1);
      assertNotNull(string1);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      char char0 = 'A';
      String string2 = StringUtils.right("/ANtz j$", 8192);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/ANtz j$", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'A');
      assertNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) ">P<\u0001CFOzauyl", (CharSequence) ">P<\u0001CFOzauyl");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      int int3 = StringUtils.compare("h", "$y[C/f0H+", false);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(68, int3);
      
      String string4 = StringUtils.abbreviateMiddle("{displayName}", "\"J?~~$gBxPW:y'vGJp}k&B/_PZ.#", 68);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{displayName}", string4);
      assertNotNull(string4);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "{displayName}", (CharSequence) "h");
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "$y[C/f0H+");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "8u2|W", 0, 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[7] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, 'G');
      assertEquals(8, stringArray0.length);
      assertEquals("G1(3GGGGGG1+Q,Gm<!pyq@gxBg", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("1(3", " ", true);
      assertEquals(17, int0);
      
      String string1 = StringUtils.abbreviateMiddle("G1(3GGGGGG1+Q,Gm<!pyq@gxBg", "1(3", 17);
      assertFalse(string1.equals((Object)string0));
      assertEquals("G1(3GGG1(3yq@gxBg", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "G1(3GGGGGG1+Q,Gm<!pyq@gxBg", (CharSequence) "1(3");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "maxWith cannot be negative");
      assertNull(stringArray1);
      
      String string2 = StringUtils.join((Object[]) null, "G1(3GGG1(3yq@gxBg", 1, 1297);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.substringBetween("GCnB;c", "GCnB;c");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("51`Q", 49);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q51`", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("51`Q", 96);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("51`Q", (-2011), 3389);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("51`Q", string3);
      assertNotNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(49));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.substring("npU", 2010);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad((String) null, 321);
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripStart("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", "51`Q");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.removeEnd("n`jZnA}B!#Eb&s", (String) null);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("n`jZnA}B!#Eb&s", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.rotate("#C", (-2011));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertEquals("C#", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'A');
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The type must not be null", 29);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %d", "The type must not be null", 29);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("MiThe type must not be null%d", string4);
      assertNotNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 'V';
      String string5 = StringUtils.replaceFirst("s{,\"", (String) null, (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("s{,\"", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad((String) null, 29, 'A');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-2252));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string4);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.chomp("");
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int2 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      String string6 = StringUtils.repeat("", "Object varargs must not be null", (-2252));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string7);
      
      String string8 = StringUtils.join((int[]) null, '6', 76, 76);
      assertNull(string8);
      
      String string9 = StringUtils.rightPad("", 0, 'T');
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string5));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.substringBeforeLast("Gz_4}0Cr3}v,*!FP|8", "Locale must not be null");
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertEquals("Gz_4}0Cr3}v,*!FP|8", string10);
      assertNotNull(string10);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-96);
      // Undeclared exception!
      try { 
        Charset.forName("Strings must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Strings must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("=c*t6`)M5RGCM|\"");
      assertEquals("=c*t6`)M5RGCM|\"", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", 21, 21);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "=c*t6`)M5RGCM|\"");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("=c*t6`)M5RGCM|\"", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("`7");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("7", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrap("J1Fj>ggi-9q#_Ux", "StdIo_System_In");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat('g', 24);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("gggggggggggggggggggggggg", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultIfBlank("=c*t6`)M5RGCM|\"", "7");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertEquals("=c*t6`)M5RGCM|\"", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = new String[7];
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      int int1 = StringUtils.indexOfAny((CharSequence) "gggggggggggggggggggggggg", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "StdIo_System_In", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, stringArray0.length);
      assertTrue(boolean2);
      
      String string7 = StringUtils.reverseDelimited("maxWith cannot be negative", 'g');
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("ativegmaxWith cannot be ne", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "maxWith cannot be negative", (CharSequence) "gggggggggggggggggggggggg", 21);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.swapCase("11y");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("11Y", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.overlay("gggggggggggggggggggggggg", "=c*t6`)M5RGCM|\"", 1867, (-1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertEquals("=c*t6`)M5RGCM|\"", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear ad set the following entries at the same time: ", "Cannot clear ad set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.right("*w", 32);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*w", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "Cannot clear ad set the following entries at the same time: ");
      assertEquals(0, priorityQueue0.size());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("R");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "R", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.removeStartIgnoreCase((String) null, "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertNull(string3);
      
      String string4 = StringUtils.rotate("Q!H4ood8mG", 10);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Q!H4ood8mG", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Cannot clear ad set the following entries at the same time: "));
      assertNotNull(linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("c0\"z&", supplier0);
      assertEquals("c0\"z&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate((String) null, 78);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("c0\"z&");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string2 = StringUtils.unwrap((String) null, 'e');
      assertNull(string2);
      
      int int1 = StringUtils.length((CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("...");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.repeat((String) null, 47);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("<WXU^*Rnuuv<|LEK", 64, 'e');
      assertFalse(string4.equals((Object)string0));
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee<WXU^*Rnuuv<|LEK", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">~`*iq&fUtJ+*;-9T", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("0W");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0w", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("DefaultTimeZone", ">hr(a]~i&a9V~lpT");
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence[]) stringArray1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, stringArray1.length);
      assertEquals(5, int2);
      
      String string4 = StringUtils.abbreviate((String) null, 0);
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("...");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 1145);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1145;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 0;
      String string6 = StringUtils.join(intArray0, 'a');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new int[] {1145, (-1), (-1), (-1), (-1), (-1), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("1145a-1a-1a-1a-1a-1a0a0", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("0w", "0w");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.repeat('a', (-2588));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", "%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("RxA|@V~1#Yquk", 114);
      assertEquals("RxA|@V~1#Yquk                                                                                                     ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("%s was not annotated with @ArgumentsSource but should have been.", 114, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVV%s was not annotated with @ArgumentsSource but should have been.VVVVVVVVVVVVVVVVVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right("gsT;0pbS]", 29);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("gsT;0pbS]", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(114);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string1));
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.removeAll(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(arrayList0.contains(string1));
      assertFalse(boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = linkedHashSet0.add(locale_FilteringMode0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean1);
      
      boolean boolean2 = hashSet0.add(locale_FilteringMode0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean2);
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue0, "FEs@sbbV");
      assertEquals(0, priorityQueue0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(priorityQueue0.contains(locale_FilteringMode0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "gsT;0pbS]", (CharSequence) "s{,\"");
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "!]%\"#@h");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("q']JZD:o,&bB", 0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("q']JZD:o,&bB", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase(">P<\u0001CFOzauyl", "%s was not annotated with @ArgumentsSource but should have been.");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.stripStart("%s was not annotated with @ArgumentsSource but should have been.", "q']JZD:o,&bB");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad(">P<\u0001CFOzauyl", 114);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("                                                                                                     >P<\u0001CFOzauyl", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "                                                                                                    >P<\u0001CFOzauyl", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(int1 == int0);
      assertEquals(100, int1);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = null;
      String string1 = "nDb3";
      String string2 = StringUtils.replace((String) null, "nDb3", (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = "}P^KvP";
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "}P^KvP", (String) null);
      assertNull(stringArray0);
      
      String string4 = null;
      String string5 = StringUtils.wrapIfMissing((String) null, ']');
      assertNull(string5);
      
      String string6 = StringUtils.unwrap((String) null, '`');
      assertNull(string6);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-19);
      byte byte0 = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      String string7 = "No arguments sources were found for @CartesianTest";
      try { 
        StringUtils.toString(byteArray0, "No arguments sources were found for @CartesianTest");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 98;
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 98.0F;
      objectArray0[1] = (Object) 98.0F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 98.0F;
      objectArray0[4] = (Object) 98.0F;
      objectArray0[5] = (Object) 98.0F;
      String string0 = StringUtils.join(objectArray0, 'a');
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("51`Q");
      assertFalse(string1.equals((Object)string0));
      assertEquals("51`Q", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("51`Q");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("51`Q", "# :`", true);
      assertEquals(18, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty("0W", supplier0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0W", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("*", "Execution of '%s' took [%d] ms.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Execution of '%s' took [%d] ms.", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.capitalize("1`Q5");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("1`Q5", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Rx9e", 18, 98);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Rx9e", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("Xme}5$.8qUUMw", 7, 18);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Xme}5$.8qUUMw", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.rightPad("D> ,QA^r", 95);
      assertEquals("D> ,QA^r                                                                                       ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "D> ,QA^r                                                                                       ";
      charSequenceArray0[1] = (CharSequence) "D> ,QA^r";
      charSequenceArray0[2] = (CharSequence) "D> ,QA^r";
      charSequenceArray0[3] = (CharSequence) "D> ,QA^r";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("D> ,QA^r                                                                                       GD> ,QA^rGD> ,QA^rGD> ,QA^rG", string1);
      assertNotNull(string1);
      
      String string2 = "\\u";
      int int0 = StringUtils.compare(string2, "D> ,QA^r                                                                                       ", true);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(24, int0);
      
      String string3 = StringUtils.abbreviateMiddle("D> ,QA^r                                                                                       GD> ,QA^rGD> ,QA^rGD> ,QA^rG", "$y[C/f0H+", 95);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("D> ,QA^r                                   $y[C/f0H+               GD> ,QA^rGD> ,QA^rGD> ,QA^rG", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("[Q,Q");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("[Q,", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "v*9^WlJ5iWeePi", 'G');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int2);
      
      String string5 = StringUtils.chop("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not se", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) null, 65536);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfAny((CharSequence) "D> ,QA^r", "V ,O,?W)rz2;G&f3");
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(2, int4);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("$JX}V", "$JX}V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "Ux+ -hLSLk51-,hRjm7Q8SII)[");
      assertTrue(boolean0);
      
      String string1 = StringUtils.leftPad((String) null, (-2577), "");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "$JX}V", (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Ux+ -hLSLk51-,hRjm7Q8SII)["));
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Ux+ -hLSLk51-,hRjm7Q8SII)["));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, ':');
      assertEquals(0, linkedList0.size());
      assertTrue(string2.equals((Object)string0));
      assertFalse(linkedList0.contains("Ux+ -hLSLk51-,hRjm7Q8SII)["));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.abbreviate("CLS@Cc;ZaLC", (String) null, (-1369));
      assertEquals("CLS@Cc;ZaLC", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((float[]) null, 'C');
      assertNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, "\n");
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("Minimum abbreviation width with offset is %d", "CLS@Cc;ZaLC");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertNotNull(string3);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string4 = StringUtils.replaceChars("iT~tQ-'YjReDI", "1+Q,Gm<!pyq@gxBg", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("iT~t-'YjReDI", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) "\n", 120);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'A');
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars("...", "...", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      String string0 = StringUtils.abbreviate("51`Q", "51`Q", 187);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("GN5`[Odg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("gN5`[Odg", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("51`Q", 126);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("`Q51", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("GN5`[Odg", "51`Q");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("GN5`[Odg", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("`Q51", 187, 187);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart((String) null, "u~KC'%FP-|1xV+9");
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("GN5`[Odg", "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", 223, 223);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertEquals("GN5`[Odg", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "`Q51", 126);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.normalizeSpace((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String string0 = StringUtils.abbreviate("#\"&4MKaJbUn4n#X~", "", 1, 1);
      assertEquals("#", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Cannot store ", "", (-293), (-118));
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "Bp{8}TfCRX@%qFMM");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Bp{8}TfCRX@%qFMM";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      String string0 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[2] = null;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'X';
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (-299.858673);
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      String string1 = StringUtils.join(doubleArray0, 'X', 0, 3);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 88.0, 0.0, 0.0, (-299.858673), 3.0, 3.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("0.0X0.0X0.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNull(string2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[2], charSequenceArray0[1], locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String string0 = StringUtils.defaultString(">hr(a]~i&a9V~lpT", ">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[1] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null, ">hr(a]~i&a9V~lpT");
      assertNull(string3);
      
      String string4 = StringUtils.remove("", '\'');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "g*K4Tteij+";
      stringArray0[2] = "";
      stringArray0[3] = ">hr(a]~i&a9V~lpT";
      stringArray0[4] = ">hr(a]~i&a9V~lpT";
      stringArray0[5] = "2u11]HJRV$^#u|r";
      stringArray0[6] = null;
      stringArray0[7] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      String string5 = StringUtils.chop("");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left("Ux+ -hLSLk51-,hRjm7", 0);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      
      String string7 = StringUtils.join((char[]) null, '%', 102, 0);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripToNull("wm-!f++");
      assertEquals("wm-!f++", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY*h1", "Y|lJY*h1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "Y|lJY*h1", charSequenceArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", (int) (byte)6);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Y|lJY*h1", (CharSequence) "", (int) (byte)6);
      assertEquals(6, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string3 = StringUtils.overlay("Array element zv", "", (-2780), 51);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Array element zv");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'J');
      assertNull(string0);
      
      String string1 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertEquals("X,M4x/#1`Ugk", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split((String) null, "|h|9u=coFpz:qw", (int) 'J');
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceAll("vh.<wi/DhRdJ.4=|", "...", "NQwuq\"^0");
      assertFalse(string2.equals((Object)string1));
      assertEquals("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0|", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("m3bkz7e)", 71, "%s was not annotated with @ArgumentsSource but should have been.");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("m3bkz7e)%s was not annotated with @ArgumentsSource but should have been", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("m3bkz7e)%s was not annotated with @ArgumentsSource but should have been");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("m3bkz7e)%s was not annotated with @ArgumentsSource but should have been", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("NQwuq\"^0", "...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("m3bkz7e)%s was not annotated with @ArgumentsSource but should have been");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.endsWithAny("%s was not annotated with @ArgumentsSource but should have been.", (CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.abbreviate("1+Q,Gm<!pyq@gxBg", (String) null, (-1369));
      assertEquals("1+Q,Gm<!pyq@gxBg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("The String must not be empty", "1+Q,Gm<!pyq@gxBg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("1+Q,Gm<!pyq@gxBg");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("1+Q,Gm<!pyq@gxBg", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Locale must not be null", '\u001E');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '<');
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStart("Q,Q", "[");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Q,Q", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.strip("1+Q,Gm<!pyq@gxBg", "1+Q,Gm<!pyq@gxBg");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The String must not be empty", (CharSequence) "", 19);
      assertFalse(int1 == int0);
      assertEquals(19, int1);
      
      int[] intArray0 = StringUtils.toCodePoints("Q,Q");
      assertArrayEquals(new int[] {81, 44, 81}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.getDigits("1+Q,Gm<!pyq@gxBg");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("1", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("1+Q,Gm<!pyq@gxBg", 19, "Locale must not be null");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("Loc1+Q,Gm<!pyq@gxBg", string7);
      assertNotNull(string7);
      
      int[] intArray1 = StringUtils.toCodePoints("Loc1+Q,Gm<!pyq@gxBg");
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(19, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.center("GG% sORj", 23, "GG% sORj");
      assertEquals("GG% sORGG% sORjGG% sORj", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7e+@M");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.center("", 2995, 'V');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right("", 2995);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'V');
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "/ANtz j$");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll(string1, "");
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEndIgnoreCase(string1, "");
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.reverseDelimited("", 'A');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "In8]5b&+)$D!W{fiAH", "matches '%s'.");
      assertFalse(boolean0);
      
      try { 
        StringUtils.getBytes("G'nOa", ">P<\u0001CFOzauyl");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[5] = "_iD&|k";
      String string0 = StringUtils.join((Object[]) stringArray0, 'H');
      assertEquals(8, stringArray0.length);
      assertEquals("1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, '2', 12, 12);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", (CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.left("_iD&|k", 0);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("', has a length less than 2", 108);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("', has a length less than 2", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("1+Q,Gm<!pyq@gxBg");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("1+Q,Gm<!pyq@gxBg", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[5] = "_iD&|k";
      String string0 = StringUtils.join((Object[]) stringArray0, 'H');
      assertEquals(8, stringArray0.length);
      assertEquals("1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, '2', 12, 12);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("7-?6 ;'G)-jg7k#|,QF", "1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("7-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("Ux+ -hLSLk51-,hRjm7", "1+Q,Gm<!pyq@gxBg", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("1+Q,Gm<!pyq@gxBgUx+ -hLSLk51-,hRjm7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeFirst("%s was not annotated with @ArgumentsSource but should have been.", "1+Q,Gm<!pyq@gxBg");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap("7-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", "1(3");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("1(37-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH1(3", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("0W");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0w", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("DefaultTimeZone", ">hr(a]~i&a9V~lpT");
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence[]) stringArray1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, stringArray1.length);
      assertEquals(5, int2);
      
      String string4 = StringUtils.abbreviate((String) null, 0);
      assertNull(string4);
      
      String string5 = StringUtils.substringAfterLast("", 5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 1145);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      int[] intArray0 = StringUtils.toCodePoints("0w");
      assertArrayEquals(new int[] {48, 119}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.getDigits("0w");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("", 5, "");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("     ", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '%';
      charArray0[2] = '{';
      charArray0[3] = 'P';
      charArray0[4] = 'w';
      charArray0[5] = '5';
      charArray0[6] = '`';
      charArray0[7] = 'y';
      charArray0[8] = 'u';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {')', '%', '{', 'P', 'w', '5', '`', 'y', 'u'}, charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("i?1{6ENz$aNY", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToEmpty(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("line.separator", "line.separator", true);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "S`5P@M*>V)T[*eQOH9", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "S`5P@M*>V)T[*eQOH9";
      objectArray0[1] = (Object) "line.separator";
      objectArray0[2] = (Object) "line.separator";
      objectArray0[3] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String string2 = StringUtils.join(objectArray0, "", 309, 309);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.capitalize("}{#IZR^m$9a,5o");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("}{#IZR^m$9a,5o", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "Strings must not be null", (-227));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.swapCase("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("rEPORT ENTRY CONTAINS UNRESOLVED VARIABLE(S): { KEY=\"%S\" VALUE=\"%S\" }", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string5);
      assertSame(stringArray0, stringArray1);
      
      String string6 = StringUtils.appendIfMissing("rEPORT ENTRY CONTAINS UNRESOLVED VARIABLE(S): { KEY=\"%S\" VALUE=\"%S\" }", "}{#IZR^m$9a,5o", stringArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("rEPORT ENTRY CONTAINS UNRESOLVED VARIABLE(S): { KEY=\"%S\" VALUE=\"%S\" }}{#IZR^m$9a,5o", string6);
      assertNotNull(string6);
      assertSame(stringArray0, stringArray1);
      
      String string7 = StringUtils.repeat("?", 14);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("??????????????", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rotate("mgdM\"", 52);
      assertEquals("M\"mgd", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing(" $vgx", "Cloneable type ", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(" $vgx", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("mgdM\"");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp(")");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(")", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase("mgdM\"");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "m31WO7S}x5?%", false);
      assertEquals(1, int0);
      
      String string3 = StringUtils.getIfEmpty(" $vgx", (Supplier<String>) null);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" $vgx", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split(" $vgx", "dM\"mg");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Cloneable type ", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank(" $vgx");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string4 = StringUtils.capitalize("$mP+pUzB{$}7");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("$mP+pUzB{$}7", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isEmpty("m31WO7S}x5?%");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.substringBetween("wB{c-V(", "wB{c-V(");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("wB{c-V(", "wB{c-V(");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "6AbdB`-}", true);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.right("6AbdB`-}", (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = ')';
      charArray0[2] = 'p';
      charArray0[3] = 'X';
      charArray0[4] = 'A';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'O', ')', 'p', 'X', 'A'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\n", "Vv");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("\n", 'm');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.remove("Threshold must not be negative", 'A');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("Threshold must not be negative");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Threshold must not be negative", string3);
      assertNotNull(string3);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = locale0.getDisplayVariant();
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray1, 'm', 1, 1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(250, stringArray1.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.getFuzzyDistance("", "\n", locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(0, int0);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "67.0", (CharSequence) "67.0", (-186));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string1);
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      String string2 = StringUtils.join(list0, "\n", (-9), (-9));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(list0.contains(string2));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", (-9));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".0C0.0C0.0C0.0C0.0C0.0C0.0C0.00.0C0.0C0", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter(".0C0.0C0.0C0.0C0.0C0.0C0.0C0.00.0C0.0C0", 98);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "doesn't match any regular expression.");
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("\n", "", 850);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.getDigits(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(" ", "", 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7e+@M");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("7e+@M"));
      assertNotNull(linkedList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains("7e+@M"));
      assertTrue(boolean0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains("7e+@M"));
      assertNotNull(listIterator0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("7e+@M"));
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("7e+@M"));
      assertNotNull(iterator0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " >hr(a]~i&a9V~lpT", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compare("", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle(" >hr(a]~i&a9V~lpT", "7e+@M", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" >hr(a]~i&a9V~lpT", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "{ol\"LDhlL4D>S+");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.substringBetween((String) null, "-(^:,Rk}6", "?|#5 Vb=C86!9E");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "?|#5 Vb=C86!9E");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.leftPad("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 32, " must return `CartesianProductTest.Sets`.");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[5] = "_iD&|k";
      String[] stringArray1 = StringUtils.split("_iD&|k", 's');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.remove("Minimum abbreviation width is %d", 'm');
      assertEquals("Miniu abbreviation width is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("#C0?M?z0kO5\u0004#uHjD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("#C0?M?z0kO5\u0004#uHj", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "#C0?M?z0kO5\u0004#uHj", '0');
      assertEquals(2, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertEquals(1, stringArray1.length);
      assertEquals((-1), int1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.chop("1+Q,Gm<!pyq@gxBg");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1+Q,Gm<!pyq@gxB", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "1+Q,Gm<!pyq@gxB", (CharSequence) "1(3", (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "_iD&|k", "#C0?M?z0kO5\u0004#uHj");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(5, int3);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) '%';
      longArray0[1] = (long) 28;
      longArray0[2] = (long) '%';
      longArray0[3] = 61L;
      longArray0[4] = (long) 28;
      longArray0[5] = 61L;
      String string1 = StringUtils.join(longArray0, 'W', 573, 573);
      assertArrayEquals(new long[] {37L, 28L, 37L, 61L, 28L, 61L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("4", (-1130));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '~');
      assertNull(stringArray0);
      
      String string3 = StringUtils.removeEndIgnoreCase("Comparator should not be null.", "s{,\"");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Comparator should not be null.", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "Could not find parameter named %s in test %s");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = StringUtils.getBytes("Q", (String) null);
      assertArrayEquals(new byte[] {(byte)81}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean2 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.mid("[Q,Q", 14, 28);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vc");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string1);
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("\n"));
      assertNotNull(list0);
      
      String string2 = StringUtils.join(list0, "", (-9), (-9));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(list0.contains("\n"));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceAll(";7#R52[3*}\"n*6AGZ}e", "0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";7#R52[3*}\"n*6AGZ}e", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (-9), "m3bkz7e)");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("m3bkz7e)");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("m3bkz7e)", string5);
      assertNotNull(string5);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("\n"));
      assertNotNull(linkedHashSet0);
      
      String string6 = StringUtils.join((Iterable<?>) vector0, 'C');
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string7 = StringUtils.rightPad("XzJy%.;(+Q&", (-9), 'G');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("XzJy%.;(+Q&", string7);
      assertNotNull(string7);
      
      charSequenceArray0[0] = (CharSequence) "XzJy%.;(+Q&";
      charSequenceArray0[1] = (CharSequence) ";7#R52[3*}\"n*6AGZ}e";
      charSequenceArray0[2] = (CharSequence) ";7#R52[3*}\"n*6AGZ}e";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider";
      charSequenceArray0[7] = (CharSequence) "m3bkz7e)";
      String string8 = StringUtils.appendIfMissingIgnoreCase("\n", "", charSequenceArray0);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertEquals(9, charSequenceArray0.length);
      assertEquals("\n", string8);
      assertNotNull(string8);
      
      charSequenceArray0[8] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string9 = StringUtils.uncapitalize("\r");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertEquals("\r", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("null comparator", "null comparator");
      assertEquals("null comparator", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'E';
      charArray0[1] = 'U';
      charArray0[2] = '8';
      charArray0[3] = 'l';
      charArray0[4] = '$';
      charArray0[5] = 'E';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "null comparator", charArray0);
      assertArrayEquals(new char[] {'E', 'U', '8', 'l', '$', 'E'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("null comparator");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringBeforeLast("null comparator", "}.C'sZ06JB[ePHD][+WC6Q_xDmN|i[-B!x[+WC6Q_xDmN|i[-B!x");
      assertTrue(string1.equals((Object)string0));
      assertEquals("null comparator", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("null comparator", "null comparator");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Y[^/Y<cT", (CharSequence) "Y[^/Y<cT");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y[^/Y<cT", "Y[^/Y<cT", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "Y[^/Y<cT", (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y|lJY1", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'P');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals(2, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll(";7#R52[3*}\"n*6AGZ}e", "65Z");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(";7#R52[3*}\"n*6AGZ}e", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("QY", 'g');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("QY", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "65Z");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.truncate("VB", 14, 14);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.right("Ep3GlI0Xm!=w?<rA<)", 3);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertEquals("A<)", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rotate("", (-31));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[2] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[3] = (CharSequence) "Cannot clone Cloneable type ";
      String string1 = StringUtils.appendIfMissing("Cannot clone Cloneable type ", "Cannot clone Cloneable type ", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Cannot clone Cloneable type ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[0], (-3392), (-31));
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverseDelimited("qq?;h6/(d{W)PqV0I", 'j');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("qq?;h6/(d{W)PqV0I", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("Locale must not be null", '9');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace(".7u~@");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(".7u~@", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("borting to protect against StackOverflowError - output of one loop is the input of anotherA", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "qq?;h6/(d{W)PqV0I", (CharSequence) "Cannot clone Cloneable type ");
      assertFalse(int1 == int0);
      assertEquals(28, int1);
      
      String string6 = StringUtils.replaceAll(".7u~@", "Cannot clone Cloneable type ", "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals(".7u~@", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad((String) null, (-1), "Cannot clear ad set the following entries at the same time: Cannot clear ad set the following entries at the same time: ");
      assertNull(string7);
      
      String string8 = StringUtils.trimToEmpty("Exception cloning Cloneable type ");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertEquals("Exception cloning Cloneable type", string8);
      assertNotNull(string8);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Cannot clone Cloneable type "));
      assertNotNull(linkedHashSet0);
      
      String string9 = StringUtils.join((Iterable<?>) linkedHashSet0, 'h');
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(linkedHashSet0.contains("Cannot clone Cloneable type "));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-3460), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      String string0 = "GCnyB;c";
      String string1 = StringUtils.rightPad("GCnyB;c", 8202);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('=', 8202);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      StringUtils.rightPad("08}Ctd-R{D-@|0", 8202, "GCnyB;c");
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear ad set the following entries at the same time: ", "Cannot clear ad set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("6AGZ}e", 1145, 'C');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char char0 = 'j';
      String string2 = StringUtils.reverseDelimited((String) null, ')');
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("", 'K');
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate((String) null, (-1));
      assertNull(string5);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string6 = StringUtils.replaceAll("", "Cannot clear ad set the following entries at the same time: ", " vs ");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      // Undeclared exception!
      StringUtils.rightPad("0W", 65536, "");
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Iw;eih8bYgT", "Iw;eih8bYgT", "!d1.}#}5Y");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      long[] longArray0 = new long[1];
      String string0 = StringUtils.join(longArray0, 'G');
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripStart("matches '%s'.", "matches '%s'.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("matches '%s'.", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("matches '%s'.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("", "ZB-H`%FvT9");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "";
      String string0 = StringUtils.removeStartIgnoreCase("", "%(@~lfU<(W@`Q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("8.k|cd4=_hZ[2Yu+~;e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("8.K|CD4=_Hz[2yU+~;E", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "1+Q,Gm<!pyq@gxBg", 35);
      assertEquals(16, int0);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "8.k|cd4=_hZ[2Yu+~;e", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.abbreviate("", 35);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "8.k|cd4=_hZ[2Yu+~;e", (CharSequence) "", 16);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(16, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.substringAfterLast(", '", "|nt(&LrRV");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'B', (-137), 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.right("ZL#GdYt>", (-2147483629));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("org.junitpioneer.jupiter.params.Range");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "|BYk<pn", "|BYk<pn");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(charSequence0);
      assertSame(stringArray0, stringArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.capitalize(">hr(a]~i&a9V~lpT");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(">hr(a]~i&a9V~lpT", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("Locale must not be null", "The Character must not be null");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("The Character must not be null", string5);
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("|BYk<pn");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(5, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)1;
      String string6 = StringUtils.join(byteArray0, 'Y', (int) (byte)17, 9);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new byte[] {(byte)17, (byte)121, (byte)1}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removePattern("The Character must not be null", "XJeRE_T7h");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertEquals("The Character must not be null", string7);
      assertNotNull(string7);
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "The Character must not be null");
      assertTrue(charSequence1.equals((Object)string7));
      assertFalse(charSequence1.equals((Object)string6));
      assertTrue(charSequence1.equals((Object)string5));
      assertFalse(charSequence1.equals((Object)string2));
      assertFalse(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string1));
      assertFalse(charSequence1.equals((Object)string4));
      assertFalse(charSequence1.equals((Object)string3));
      assertEquals("The Character must not be null", charSequence1);
      assertNotNull(charSequence1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "The Character must not be null", "Locale must not be null");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("[+WC6Q_xDmN|i[-B!x");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[+wc6q_xdmn|i[-b!x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.prependIfMissingIgnoreCase("[+WC6Q_xDmN|i[-B!x", "[+wc6q_xdmn|i[-b!x", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("[+WC6Q_xDmN|i[-B!x", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("", 3);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("...", (CharSequence) null, charSequenceArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("...", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("", 1);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 1);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "...", (CharSequence) "\r");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.overlay("[+WC6Q_xDmN|i[-B!x", "}", 1, (-1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("}+WC6Q_xDmN|i[-B!x", string7);
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "$eV9`JcZ$[8 '/");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) null;
      boolean boolean1 = StringUtils.startsWithAny("[+wc6q_xdmn|i[-b!x", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray1.length);
      assertFalse(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.repeat("b", 1);
      assertEquals("b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.leftPad("@CartesianTest not found.", (-4526), 'C');
      assertEquals("@CartesianTest not found.", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "nM=|%[Xom^*Y(4V");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.capitalize("nM=|%[Xom^*Y(4V");
      assertFalse(string2.equals((Object)string0));
      assertEquals("NM=|%[Xom^*Y(4V", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("nM=|%[Xom^*Y(4V", "nM=|%[Xom^*Y(4V");
      assertNull(string3);
      
      String string4 = StringUtils.removeStart("@CartesianTest not found.", "@CartesianTest not found.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.swapCase(";=aN3o}0%_V[8:/im0");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(";=An3O}0%_v[8:/IM0", string5);
      assertNotNull(string5);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("9`@94QQlzRX?5%kWv", "b1+Q,Gm<!pyq@gxBg", 12);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.trimToNull(";=aN3o}0%_V[8:/im0");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(";=aN3o}0%_V[8:/im0", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, stringArray0.length);
      assertNull(charSequence0);
      assertNotSame(stringArray0, stringArray1);
      
      Locale locale1 = Locale.ENGLISH;
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("@CartesianTest not found.", "nM=|%[Xom^*Y(4V", locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertEquals(1, int0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      
      String string7 = StringUtils.chop((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.substringBefore((String) null, "");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("H/S8h2!'8", (-751));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("6iqsGwf!!D)#;3A|rU,", '2');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.toRootLowerCase("s{,\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("s{,\"", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "H/S8h2!'8", (CharSequence) "X~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((List<?>) null, '2', 25, 322);
      assertNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('2'));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.left("The type must not be null", 19);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The type must not b", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("The type must not b", 19);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("The type must not b", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast((String) null, "SG9%?H12");
      assertNull(string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "s{,\"", charArray0);
      assertArrayEquals(new char[] {'2', '\u0000', '2', '2', '2', '2', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) '2';
      intArray0[1] = 322;
      intArray0[2] = 322;
      intArray0[3] = 19;
      intArray0[4] = (int) '2';
      intArray0[5] = (int) '2';
      intArray0[6] = (int) '2';
      intArray0[7] = (int) '2';
      intArray0[8] = (int) '2';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '3', (-1695), 19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1695
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("s{,\"                         ", 29, 'V');
      assertTrue(string1.equals((Object)string0));
      assertEquals("s{,\"                         ", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.swapCase("s{,\"                         ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("S{,\"                         ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("s{,\"                         ", "o_)");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("s{,\"                         ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("s{,\"                         ", (-6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("                       s{,\"  ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("axWith cnnot be negative");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("axWith cnnot be negative", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("s{,\"                         ", "                       s{,\"  ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(">P<\u0001CFOzauyl");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("S{,\"                         ", 'a');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("aS{,\"                         a", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.truncate("~eSq#$PKfv", 783, 241);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("offset cannot be negative", (String) null, 52);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase("2e$2jmZN?q-a<N", "Minimum abbreviation width with offset is %d");
      assertEquals("2e$2jmZN?q-a<N", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "2e$2jmZN?q-a<N", (CharSequence) "OZ:360OO=`qpy6v`[?");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("Cloneable type ", (String) null, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cloneable type ", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsWhitespace("mgdM\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Cloneable type ", (CharSequence) "Cloneable type ");
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("Cloneable type ", charSequence0);
      assertNotNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("Ux+ -hLSLk51-,hRjm7", "2e$2jmZN?q-a<N", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(4, stringArray1.length);
      assertEquals("Ux+ -hLSLk51-,hRjm72e$2jmZN?q-a<N", string2);
      assertNotNull(string2);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.left("mgdM\"", 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) null, 20);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceIgnoreCase("Ux+ -hLSLk51-,hRjm7", (String) null, "[0IHGi#=LN7U", (-1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((List<?>) null, "Cloneable type ", 0, (-1));
      assertNull(string5);
      
      String string6 = StringUtils.stripToNull("Minimum abbreviation width is %d");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripToNull("mgdM\"");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence0));
      assertEquals("mgdM\"", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.";
      charSequenceArray0[1] = (CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.", (CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "StdIoExtension is active but neither System.out or System.in are getting redirected.", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isBlank(charSequenceArray0[1]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string1 = StringUtils.rotate("The Character must not be null", (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("he Character must not be nullT", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.length("he Character must not be nullT");
      assertFalse(int1 == int0);
      assertEquals(30, int1);
      
      boolean boolean3 = StringUtils.isAllLowerCase("he Character must not be nullT");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.wrap("StdIoExtension is active but neither System.out or System.in are getting redirected.", "Ux+ -hLSLk51-,hRjm7");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7StdIoExtension is active but neither System.out or System.in are getting redirected.Ux+ -hLSLk51-,hRjm7", string2);
      assertNotNull(string2);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("Ux+ -hLSLk51-,hRjm7StdIoExtension is active but neither System.out or System.in are getting redirected.Ux+ -hLSLk51-,hRjm7", "Ux+ -hLSLk51-,hRjm7");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Ux+ -hLSLk51-,hRjm7";
      stringArray0[1] = "Ux+ -hLSLk51-,hRjm7";
      stringArray0[2] = "Ux+ -hLSLk51-,hRjm7";
      stringArray0[3] = "Ux+ -hLSLk51-,hRjm7StdIoExtension is active but neither System.out or System.in are getting redirected.Ux+ -hLSLk51-,hRjm7";
      stringArray0[4] = "StdIoExtension is active but neither System.out or System.in are getting redirected.";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals("Ux+ -hLSLk51-,hRjm7", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.countMatches((CharSequence) "Ux+ -hLSLk51-,hRjm7", (CharSequence) "Ux+ -hLSLk51-,hRjm7StdIoExtension is active but neither System.out or System.in are getting redirected.Ux+ -hLSLk51-,hRjm7");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean5 = StringUtils.isEmpty("StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string4 = StringUtils.removeIgnoreCase((String) null, "Ux+ -hLSLk51-,hRjm7StdIoExtension is active but neither System.out or System.in are getting redirected.Ux+ -hLSLk51-,hRjm7");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.defaultString("StdIoExtension is active but neither System.out or System.in are getting redirected.");
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, 'y');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("=c*t6`)M5RGCM|\"");
      assertEquals("=c*t6`)M5RGCM|\"", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", 21, 21);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center("=c*t6`)M5RGCM|\"", 24, 'g');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("gggg=c*t6`)M5RGCM|\"ggggg", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("`7");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "gggg=c*t6`)M5RGCM|\"ggggg");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.wrap("J1Fj>ggi-9q#_Ux", "StdIo_System_In");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripAccents("=c*t6`)M5RGCM|\"");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("=c*t6`)M5RGCM|\"", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.defaultIfBlank("=c*t6`)M5RGCM|\"", "7");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals("=c*t6`)M5RGCM|\"", string8);
      assertNotNull(string8);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Q`UPrj5jL1Pa-F";
      stringArray0[2] = "Index: ";
      String string9 = StringUtils.rotate("Q`UPrj5jL1Pa-F", (-4304));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertEquals("5jL1Pa-FQ`UPrj", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.appendIfMissing("Q`UPrj5jL1Pa-F", "=c*t6`)M5RGCM|\"", stringArray0);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertEquals(7, stringArray0.length);
      assertEquals("Q`UPrj5jL1Pa-F", string10);
      assertNotNull(string10);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Q`UPrj5jL1Pa-F", "5jL1Pa-FQ`UPrj");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string11 = StringUtils.join((Iterator<?>) null, 'g');
      assertNull(string11);
      
      String string12 = StringUtils.defaultIfBlank("', is neither of type Map.Entry nor an Array", "9a0SwBQ[RZ");
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string2));
      assertEquals("', is neither of type Map.Entry nor an Array", string12);
      assertNotNull(string12);
      
      String string13 = StringUtils.appendIfMissingIgnoreCase("", "StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In", stringArray0);
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string2));
      assertTrue(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string9));
      assertFalse(string13.equals((Object)string12));
      assertEquals(7, stringArray0.length);
      assertEquals("", string13);
      assertNotNull(string13);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("Illegal range. The step cannot be zero.", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(39, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("Illegal range. The step cannot be zero.");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'n');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Illegal range. The step cannot be zero.n", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[1], (CharSequence) "Illegal range. The step cannot be zero.");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((List<?>) null, 'n', 39, 25);
      assertNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.left("YFmK#(fC&lorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", 39);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("YFmK#(fC&lorg.junitpioneer.jupiter.cart", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider", 3);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.strip((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.replaceChars("Illegal range. The step cannot be zero.n", "org", "YFmK#(fC&lorg.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertEquals("Illemal Fanme. The step cannYt be zeFY.n", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.remove("org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider", '#');
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'z');
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Object varargs must not be null", (short)0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, 'z');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("1", "zK#E3S@.");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "A])%-[<h~");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("1", (short)0, (short)0);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.trimToNull("");
      assertNull(string7);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string8 = StringUtils.getDigits("!]Nfgwq(GAxP-E-)v]");
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.leftPad("", (int) (short)0, "zK#E3S@.");
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertEquals("", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.defaultIfBlank("!]Nfgwq(GAxP-E-)v]", "bM\u0001/wX<~@g#q");
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertEquals("!]Nfgwq(GAxP-E-)v]", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("0W");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0w", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.substringsBetween("0W", "DefaultTimeZone", "0W");
      assertNull(stringArray1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence[]) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.abbreviate((String) null, 0);
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("...");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 1145);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      int[] intArray0 = StringUtils.toCodePoints("0w");
      assertArrayEquals(new int[] {48, 119}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      String string6 = locale0.getDisplayName();
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("English", string6);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      
      int int4 = StringUtils.getFuzzyDistance("0w", "", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals(0, int4);
      assertNotSame(locale0, locale1);
      
      String[] stringArray2 = StringUtils.substringsBetween("Ae8(rQ kx;-|7}", "", "qWzLD");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7e+@M");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "");
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("7e+@M"));
      assertTrue(linkedList0.contains(""));
      assertTrue(boolean0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("7e+@M"));
      assertTrue(linkedList0.contains(""));
      assertNotNull(listIterator0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase(" ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getIfEmpty("{DIWcoF", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{DIWcoF", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("\"OOF7+~lyhq_%dp1c", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = 's';
      charArray0[2] = 'w';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'<', 's', 'w'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean2);
      
      String string3 = StringUtils.capitalize("`[\tVQ2v/");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("`[\tVQ2v/", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference((String) null, "0W");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("0W", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("\"OOF7+~lyhq_%dp1c");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(10, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string5 = StringUtils.replaceIgnoreCase("", "                                                                                           ", "0W");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.replaceChars("M6", "M6", " ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 187);
      assertEquals("1`Q5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("GN5`[Odg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("gN5`[Odg", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("1`Q5", 126);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Q51`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Q51`", 187);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("Q51`", 187, 187);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("51`Q"));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.substring("ReportEntry", 35);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", 126);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("                                                                                                                              ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripEnd("1`Q5", "kX+_A%jwM]ngo");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("1`Q5", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.stripStart("1", "GN5`[Odg");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertEquals("1", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.removeEnd("                                                                                                                              ", "1");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("                                                                                                                              ", string9);
      assertNotNull(string9);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1`Q5");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string10 = StringUtils.remove("1`Q5", "");
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertEquals("1`Q5", string10);
      assertNotNull(string10);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 126;
      doubleArray0[1] = 599.358;
      doubleArray0[2] = (double) 187;
      doubleArray0[3] = (double) 35;
      doubleArray0[4] = (double) 126;
      doubleArray0[5] = (double) 35;
      doubleArray0[6] = (double) 35;
      doubleArray0[7] = (double) 187;
      String string11 = StringUtils.join(doubleArray0, 'e', 35, 35);
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertArrayEquals(new double[] {126.0, 599.358, 187.0, 35.0, 126.0, 35.0, 35.0, 187.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.remove("3`}\"@U3:x", (String) null);
      assertEquals("3`}\"@U3:x", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("3`}\"@U3:x");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "3`}\"@U3:x", "3`}\"@U3:x");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = "Cloneable type ";
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      boolean boolean0 = linkedList0.add((Object) listIterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertTrue(boolean0);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      String string1 = "?b_u`'Q\"wk;f}\"@&E";
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "?b_u`'Q\"wk;f}\"@&E");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.repeat("]", 3);
      assertEquals("]]]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "9h?hMh", "9h?hMh");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(204);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = StringUtils.rotate("StdIoExtension is active but no %s annotation was found.", 204);
      assertEquals("tive but no %s annotation was found.StdIoExtension is ac", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("\"@TOEry~0NzL", 91);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("x.&nKv", (-290), (-793));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("x.&nKv"));
      assertNotNull(arrayList0);
      
      String string3 = "ReportEntry";
      String string4 = StringUtils.substring("OI'ZvU^0CL", 35);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = "@>F|n15U";
      String string6 = StringUtils.leftPad("@>F|n15U", (-793));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("@>F|n15U", string6);
      assertNotNull(string6);
      
      String string7 = "GU)w,CgJXM8i\"0Qm_7V";
      String string8 = StringUtils.stripEnd("\"@TOEry~0NzL", "GU)w,CgJXM8i\"0Qm_7V");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("\"@TOEry~0NzL", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripStart("@>F|n15U", "ReportEntry");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("@>F|n15U", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.removeEnd(".9KnPn_)lSI.E]}vy7", "");
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertEquals(".9KnPn_)lSI.E]}vy7", string10);
      assertNotNull(string10);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "ReportEntry";
      charSequenceArray0[1] = (CharSequence) "@>F|n15U";
      charSequenceArray0[2] = (CharSequence) "\"@TOEry~0NzL";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(".9KnPn_)lSI.E]}vy7", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-2252));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removeStart("U*6 ", (String) null);
      assertFalse(string5.equals((Object)string2));
      assertEquals("U*6 ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.deleteWhitespace("7");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("7", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string7 = StringUtils.getIfEmpty("7", (Supplier<String>) null);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("7", string7);
      assertNotNull(string7);
      
      String[] stringArray2 = StringUtils.split((String) null, "hy<");
      assertNull(stringArray2);
      
      String string8 = StringUtils.removePattern("hy<", "");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertEquals("hy<", string8);
      assertNotNull(string8);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase((CharSequence) null, "The String must not be empty");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\"kZe8gEGRcm", 9, 9);
      assertEquals("...gEGRcm", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("...gEGRcm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("[+WC6Q_xDmN|i[-B!x");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[+wc6q_xdmn|i[-b!x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("Rt 'p2gvlC:AsRn9M", 234);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                                                                            Rt 'p2gvlC:AsRn9M                                                                                                             ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "[+WC6Q_xDmN|i[-B!x", (CharSequence) "", 302);
      assertEquals(18, int0);
      
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.abbreviate("[+WC6Q_xDmN|i[-B!x", 18);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("[+WC6Q_xDmN|i[-B!x", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("...");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "[+WC6Q_xDmN|i[-B!x", (CharSequence) "                                                                                                            Rt 'p2gvlC:AsRn9M                                                                                                             ", 42);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.center("test-template-invocation", (-2332));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("test-template-invocation", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate("                                                                                                            Rt 'p2gvlC:AsRn9M                                                                                                             ", "...", 259, 18);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("...               ", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.removeStart("(3{AhJ/arH3)B%7Tq@", "(3{AhJ/arH3)B%7Tq@");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("(3{AhJ/arH3)B%7Tq@", "\n", 1281, 10);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\nH3)B%7Tq@", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'A');
      assertNull(string3);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = priorityQueue0.add(locale_FilteringMode0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1);
      
      String string4 = StringUtils.prependIfMissing("s{,\"                         ", "s{,\"", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("s{,\"                         ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "The type must not be null", 29);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.abbreviateMiddle(" has no clone method", "The type must not be null", 2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" has no clone method", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "s{,\"                         ", "The type must not be null");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 29;
      String string6 = StringUtils.trimToEmpty(">P<\u0001CFOzauyl");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertEquals(">P<\u0001CFOzauyl", string6);
      assertNotNull(string6);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains('V'));
      assertNotNull(linkedHashSet0);
      
      String string7 = StringUtils.join((Iterable<?>) priorityQueue0, 'A');
      assertEquals(1, priorityQueue0.size());
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(priorityQueue0.contains(locale_FilteringMode0));
      assertEquals("REJECT_EXTENDED_RANGES", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.lastOrdinalIndexOf(" has no clone method", "REJECT_EXTENDED_RANGES", 2616);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean3 = StringUtils.equalsAny(" has no clone method", stringArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("7A/2X0nO");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains("7A/2X0nO"));
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains("7A/2X0nO"));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'z');
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains("7A/2X0nO"));
      assertEquals("7A/2X0nO", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4778);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      String string0 = StringUtils.center("OI'ZvU^0CnL", 2, 'S');
      assertEquals("OI'ZvU^0CnL", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 4778);
      assertEquals(0, int0);
      
      String string1 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 'C');
      assertFalse(string1.equals((Object)string0));
      assertEquals("artesianTestExtensionCorg.junitpioneer.jupiter.cartesian.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("sHzGWT@Gfn+HO)l@>mE", 'c');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("sHzGWT@Gfn+HO)l@>mE", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("artesianTestExtensionCorg.junitpioneer.jupiter.cartesian.", 2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("n.artesianTestExtensionCorg.junitpioneer.jupiter.cartesia", string3);
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("sHzGWT@Gfn+HO)l@>mE", locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("shzgwt@gfn+ho)l@>me", string4);
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("shzgwt@gfn+ho)l@>me", "\"@TOEry~0NzL");
      assertEquals(0.26, double0, 0.01);
      
      String string5 = StringUtils.wrap("n.artesianTestExtensionCorg.junitpioneer.jupiter.cartesia", 'q');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("qn.artesianTestExtensionCorg.junitpioneer.jupiter.cartesiaq", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 0, Integer.MIN_VALUE);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.substringBetween("shzgwt@gfn+ho)l@>me", "maxWith cannot be negative");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("org.junitpioneer.jupiter.params.DoubleRangeorg.junitpioneer.jupiter.params.DoubleRange", "[+WC6Q_xDmN|i&[-B!x");
      assertEquals(0.29, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(" _oh\"e04O", " _oh\"e04O");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY*h1", "Y|lJY*h1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-91);
      String string1 = StringUtils.join(byteArray0, '\\');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)0, (byte) (-91)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("6\\6\\0\\-91", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Y|lJY*h1", (int) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>((byte)6);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((byte)0));
      assertNotNull(arrayList0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Y|lJY*h1", (CharSequence) "Y|lJY*h1");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.replaceAll("P<\u0001COzuyl", "7", "5*^OjX)\"3p5f/G");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("P<\u0001COzuyl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", (int) (byte)0, "i5X,4&");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("){#MY(~u}i]7");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("){#MY(~u}i]7", string4);
      assertNotNull(string4);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Y|lJY*h1"));
      assertNotNull(linkedHashSet0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("Y|lJY*h1"));
      assertNotNull(treeSet0);
      
      NavigableSet<Object> navigableSet0 = treeSet0.descendingSet();
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertFalse(treeSet0.contains("Y|lJY*h1"));
      assertFalse(navigableSet0.contains("Y|lJY*h1"));
      assertNotNull(navigableSet0);
      
      String string5 = StringUtils.join((Iterable<?>) navigableSet0, 'n');
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(treeSet0.contains("Y|lJY*h1"));
      assertFalse(navigableSet0.contains("Y|lJY*h1"));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'z');
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = "Object varargs must not be null";
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("1", "zK#E3S@.");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("1", string5);
      assertNotNull(string5);
      
      String string6 = "0 b]";
      String string7 = StringUtils.normalizeSpace("0 b]");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("0 b]", string7);
      assertNotNull(string7);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "p{InCombiningDiacriticalMarks}+";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "0 b]";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ' ', 0, 2093);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      String string2 = StringUtils.capitalize("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween(":CwNX*(Fo[%", ":CwNX*(Fo[%");
      assertNull(string3);
      
      String string4 = "PS%";
      String string5 = StringUtils.removeStart("The type must not be null", "PS%");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("The type must not be null", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isMixedCase("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV");
      assertTrue(boolean0);
      
      String string6 = StringUtils.swapCase(";=aN3o}0%_V[8:/im0");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals(";=An3O}0%_v[8:/IM0", string6);
      assertNotNull(string6);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean1 = stack0.add(locale_FilteringMode0);
      assertEquals(1, stack0.size());
      assertEquals("[IGNORE_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.contains(locale_FilteringMode0));
      assertTrue(boolean1);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertEquals(Locale.FilteringMode.MAP_EXTENDED_RANGES, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_FilteringMode2);
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertNotNull(predicate0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      
      boolean boolean2 = stack0.removeIf(predicate0);
      assertEquals(1, stack0.size());
      assertEquals("[IGNORE_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(stack0.contains(locale_FilteringMode2));
      assertTrue(stack0.contains(locale_FilteringMode1));
      assertFalse(boolean2);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean3 = stack0.add(locale_FilteringMode3);
      assertEquals("[IGNORE_EXTENDED_RANGES, MAP_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(stack0.contains(locale_FilteringMode2));
      assertTrue(boolean3);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertSame(locale_FilteringMode3, locale_FilteringMode2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("PS%"));
      assertNotNull(arrayList0);
      
      int int0 = 1690;
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, ":CwNX*(Fo[%", 29, 1690);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1690
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7e+@M");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(""));
      assertNotNull(listIterator0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(iterator0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " >hr(a]~i&a9V~lpT", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((long[]) null, 'H');
      assertNull(string1);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat("7e+@M", 2);
      assertFalse(string3.equals((Object)string0));
      assertEquals("7e+@M7e+@M", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "(e<GN4/#I)", (CharSequence) "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substring("(e<GN4/#I)", 2, 867);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("<GN4/#I)", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "7e+@M", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string5 = StringUtils.stripToEmpty("7e+@M");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("7e+@M", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, "\"^z-UH,O1iLKfz=>hr(a]~i&a9V~lpT                                                                                                                                                              =");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string6 = StringUtils.center(" >hr(a]~i&a9V~lpT", 5);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" >hr(a]~i&a9V~lpT", string6);
      assertNotNull(string6);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 867;
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) 'H';
      doubleArray0[4] = (double) 867;
      doubleArray0[5] = (double) 2;
      String string7 = StringUtils.join(doubleArray0, 'X', 2, 3);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertArrayEquals(new double[] {(-1.0), 867.0, 72.0, 72.0, 867.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("72.0", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "+pc!|_dXmC4=1>m", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "v*9^WlJ5iWeePi");
      assertNull(stringArray0);
      
      String string2 = StringUtils.strip("2s$8+/\u0002,W|nML", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("2s$8+/\u0002,W|nML", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '@';
      String string3 = StringUtils.stripAccents("_?W-yU.9?>\",*/f=`");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_?W-yU.9?>\",*/f=`", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("1*U&@Y92f #G");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("1*U&@Y92f #G", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultIfBlank((String) null, "x;?lc~@o@YA3RI-}o");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("x;?lc~@o@YA3RI-}o", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "1*U&@Y92f #G", (CharSequence) "2s$8+/\u0002,W|nML");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.capitalize("iw;YW\"mJ}!2t");
      assertEquals("Iw;YW\"mJ}!2t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[2] = (CharSequence) "Could not provide arguments because of exception.";
      charSequenceArray0[3] = (CharSequence) "N=+";
      String string0 = StringUtils.appendIfMissing("Could not provide arguments because of exception.", "N=+", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("Could not provide arguments because of exception.", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("N=+");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("\r", "Illegal range. The step cannot be zero.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "Illegal range. The step cannot be zero.";
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("Illegal range. The step cannot be zero.");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '(');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.repeat((String) null, "kX)$VoSH", 2716);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = "Search and Replace array lengths don't match: ";
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray1);
      
      String string1 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string2 = null;
      int int0 = 0;
      String string3 = StringUtils.left((String) null, 0);
      assertNull(string3);
      
      String string4 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = 160;
      String string5 = StringUtils.repeat((String) null, "Search and Replace array lengths don't match: ", 0);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "AH");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Iterator<?>) null, "v*p");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "AH", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Search and Replace array lengths don't match: ", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center(string1, 13, 'V');
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string3 = StringUtils.right(string1, 8192);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = hashSet0.remove(object0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(3);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string2));
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean1 = hashSet0.add(locale_FilteringMode1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      
      boolean boolean2 = hashSet0.add(locale_FilteringMode0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(boolean2);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      
      String string4 = StringUtils.join((Iterable<?>) arrayList0, "^nI$?P$xH>]n@");
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(arrayList0.contains(string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween("V!@m9h/>iCz~Om+", "-1WDn_:gDhdp&5");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "V!@m9h/>iCz~Om+");
      assertEquals(0, int0);
      
      String string6 = StringUtils.removeStartIgnoreCase(">P<\u0001CFOzauyl", "iF,F!y,*Eo6_@3~");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(">P<\u0001CFOzauyl", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rotate(" vs ", 3);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("vs  ", string7);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("FEs@sbbV", string1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string7));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("Object varargs must not be null", 0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      
      StringWriter stringWriter0 = new StringWriter(7);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string3 = StringUtils.substringAfter("Object varargs must not be null", "'Sc80");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split(" ", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "The type must not be null", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("Object varargs must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, ")ik(VD_ ET/^Ye");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Illegal range. The step cannot be zero.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "Illegal range. The step cannot be zero.");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Illegal range. The step cannot be zero.", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.swapCase("g");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("G", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, "Illegal range. The step cannot be zero.");
      assertNull(string4);
      
      String string5 = StringUtils.rotate((String) null, (-6));
      assertNull(string5);
      
      String string6 = StringUtils.trimToNull((String) null);
      assertNull(string6);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("Illegal range. The step cannot be zero.", (CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Illegal range. The step cannot be zero.", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("Object varargs must not be null", 'R');
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertEquals("RObject varargs must not be nullR", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-751));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("6iqsGwf!!D)#;3A|rU,", '2');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("a+IG!wnwY_mld=+`lX", "X~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("X~a+IG!wnwY_mld=+`lXX~", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("s{,\"");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("s{,\"", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("(Xm");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("CartesianTest can not have a ", '!');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("!CartesianTest can not have a !", string4);
      assertNotNull(string4);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-751);
      intArray0[2] = (-751);
      intArray0[3] = (int) '2';
      String string5 = StringUtils.join(intArray0, '!');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertArrayEquals(new int[] {(-751), 0, (-751), 50}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("-751!0!-751!50", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("6iqsGwf!!D)#;3A|rU,", "AQ_P}[wqb");
      assertFalse(boolean0);
      
      String string6 = StringUtils.removeEnd((String) null, "s{,\"");
      assertNull(string6);
      
      String string7 = StringUtils.chop("The type must not be null");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("The type must not be nul", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.substringBetween("+pc!|_dXmC4=1>m", "+pc!|_dXmC4=1>m", "+pc!|_dXmC4=1>m");
      assertNull(string0);
      
      String string1 = StringUtils.difference((String) null, "+pc!|_dXmC4=1>m");
      assertEquals("+pc!|_dXmC4=1>m", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-2252));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string4);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.chomp("");
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int2 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      String string6 = StringUtils.repeat("", "Object varargs must not be null", (-2252));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string7);
      
      String string8 = StringUtils.join((int[]) null, 'e', 0, (-693));
      assertNull(string8);
      
      String[] stringArray2 = StringUtils.split("");
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.difference("", "#tjH,%vIvu");
      assertEquals("#tjH,%vIvu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "#tjH,%vIvu", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("", "", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("#tjH,%vIvu");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("5}%yW_m", "", stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("5}%yW_m", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "#tjH,%vIvu";
      objectArray0[1] = (Object) "#tjH,%vIvu";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      String string4 = StringUtils.join(doubleArray0, '5', 2108, 0);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("", "#", "", 116);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("5}%yW_m", "#", "", 116);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("5}%yW_m", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((List<?>) null, "", 649, (-175));
      assertNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny("5}%yW_m", stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
      
      String string8 = StringUtils.substringBefore("", (String) null);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = "org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider";
      String string1 = "%s was not annotated with @ArgumentsSource but should have been.";
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", "%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Ux+ -hLSLk51-,hRjm7", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.stripAccents("-GO^zsokQTfN7");
      assertEquals("-GO^zsokQTfN7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("-GO^zsokQTfN7", "-GO^zsokQTfN7");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.rightPad("$JX}V", 29);
      assertEquals("$JX}V                        ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("$JX}V", (-2062), 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("$JX}V", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right("$JX}V", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(43);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("$JX}V"));
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedHashSet0.add(locale_FilteringMode2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(linkedHashSet0.contains(locale_FilteringMode0));
      assertTrue(linkedHashSet0.contains(locale_FilteringMode2));
      assertTrue(boolean0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      
      boolean boolean1 = hashSet0.add(locale_FilteringMode1);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(hashSet0.contains(locale_FilteringMode1));
      assertFalse(hashSet0.contains(locale_FilteringMode2));
      assertTrue(boolean1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      boolean boolean2 = hashSet0.add(locale_FilteringMode0);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(hashSet0.contains(locale_FilteringMode2));
      assertTrue(boolean2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet0, "$JX}V                        ");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(linkedHashSet0.contains(locale_FilteringMode0));
      assertTrue(linkedHashSet0.contains(locale_FilteringMode2));
      assertEquals("AUTOSELECT_FILTERING", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "$JX}V", (CharSequence) "$JX}V                        ");
      assertEquals(5, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("$JX}V", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("$JX}V", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("!]%\"#@h", 921);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\"#@h!]%", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("", "s{,\"");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("b", "b");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "b", "b");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "b", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("b");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.replace("9", "9", "G vs ", 14);
      assertEquals("G vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("", "TJg~w-cW9s/w ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.getDigits(">P<\u0001CFOzauyl");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '?';
      intArray0[1] = (int) 'N';
      intArray0[2] = (int) 'N';
      intArray0[3] = (int) 'N';
      intArray0[4] = (int) 'N';
      intArray0[5] = (int) '?';
      intArray0[6] = (int) '0';
      String string5 = StringUtils.join(intArray0, 'N');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertArrayEquals(new int[] {63, 78, 78, 78, 78, 63, 48}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals("63N78N78N78N78N63N48", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBefore("G vs ", "org.junitpioneer.jupiter.RetryingTestExtension");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("G vs ", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase((CharSequence) null, "63N78N78N78N78N63N48");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string7 = StringUtils.removeEnd("G vs ", "Ux+ -hLSLk51-,hRjm7");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("G vs ", string7);
      assertNotNull(string7);
      
      boolean boolean4 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.replaceChars("zLwsCN b`]/x$", "", "");
      assertEquals("zLwsCN b`]/x$", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      longArray0[4] = 61L;
      String string1 = StringUtils.join(longArray0, '%', 573, 25);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 61L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("s{,\"", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s{,\"", string2);
      assertNotNull(string2);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(25);
      assertEquals(25, byteBuffer0.remaining());
      assertEquals(25, byteBuffer0.capacity());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=25 cap=25]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(25, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      String string3 = StringUtils.wrap("112p0p112p204p204p112p112p204CartesianTest can not have a non-empty display name.", '%');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%112p0p112p204p204p112p112p204CartesianTest can not have a non-empty display name.%", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 573, 2598);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBetween("Locale must no", "s{,\"");
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace(" ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "s{,\"");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.overlay("]", (String) null, 56, 2);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("]", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replacePattern((String) null, (String) null, " ");
      assertNull(string7);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(" "));
      assertNotNull(hashSet0);
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(hashSet0.contains(" "));
      assertNotNull(iterator0);
      
      String string8 = StringUtils.join(iterator0, "]");
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(hashSet0.contains(" "));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.truncate("r5N.", 0, 3);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertEquals("r5N", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", "", (String) null);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string10);
      assertNotNull(string10);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      String string1 = StringUtils.join(longArray0, '%', 573, 25);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 25);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("a\u0005s<1d3$MlH,}7*");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("A\u0005S<1D3$mLh,}7*", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Fn!F_=K]> ", 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceIgnoreCase(" ", "b1+Q,Gm<!pyq@gxBg", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals(" ", string4);
      assertNotNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 25;
      doubleArray0[1] = (double) '3';
      doubleArray0[2] = (double) 573;
      doubleArray0[3] = (double) 62;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 25;
      String string5 = StringUtils.join(doubleArray0, '%');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertArrayEquals(new double[] {25.0, 51.0, 573.0, 62.0, 0.0, 0.0, 0.0, (-1.0), 25.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals("25.0%51.0%573.0%62.0%0.0%0.0%0.0%-1.0%25.0", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("B0>eY$(Ri\"t0}", (String) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("B0>eY$(Ri\"t0}", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("KPdNYJBVv", "");
      assertEquals("KPdNYJBVv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.replace("9", "9", "G vs ", 14);
      assertEquals("G vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripEnd("", "TJg~w-cW9s/w ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.getDigits(">P<\u0001CFOzauyl");
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '?';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'N', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ux+ -hLSLk51-,hRjm7";
      String string5 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("Ux+ -hLSLk51-,hRjm7", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceFirst((String) null, "Ux+ -hLSLk51-,hRjm7", "Ux+ -hLSLk51-,hRjm7");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("k+C[");
      assertFalse(string1.equals((Object)string0));
      assertEquals("K+C[", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(">hr(a]~i&a9V~lpT", 103);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny("k+C[", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.upperCase("?tyS#k3BU>5?");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("?TYS#K3BU>5?", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate(">hr(a]~i&a9V~lpT", 1, 57);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("hr(a]~i&a9V~lpT", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.remove("Class %s not found, referenced in method %s", '*');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Class %s not found, referenced in method %s", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.countMatches((CharSequence) "?tyS#k3BU>5?", '*');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) ";F[s>^q-<wt&13Qa", (CharSequence[]) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.stripEnd((String) null, "Search and Replace array lengths don't match: ");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      longArray0[4] = 61L;
      String string1 = StringUtils.join(longArray0, '%', 573, 25);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 61L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("s{,\"", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("s{,\"", string2);
      assertNotNull(string2);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(25);
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=25 cap=25]", byteBuffer0.toString());
      assertEquals(25, byteBuffer0.limit());
      assertEquals(25, byteBuffer0.capacity());
      assertEquals(25, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      String string3 = StringUtils.wrap("112p0p112p204p204p112p112p204CartesianTest can not have a non-empty display name.", '%');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%112p0p112p204p204p112p112p204CartesianTest can not have a non-empty display name.%", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 573, 2598);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBetween("Locale must no", "s{,\"");
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace(" ");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "s{,\"");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.overlay("]", (String) null, 56, 2);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("]", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replacePattern((String) null, (String) null, " ");
      assertNull(string7);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("s{,\""));
      assertNotNull(hashSet0);
      
      Iterator<Object> iterator0 = hashSet0.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains("s{,\""));
      assertNotNull(iterator0);
      
      String string8 = StringUtils.join(iterator0, "]");
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(hashSet0.contains("s{,\""));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.trim("");
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string8));
      assertEquals("", string9);
      assertNotNull(string9);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Could not resolve parameter of type %s.", "", (String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      String string10 = StringUtils.stripToEmpty("%s was not annotated with @ArgumentsSource but should have been.");
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension", 'i');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "#RY7e*/o13[|73i;^y0", '\\');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.split("#RY7e*/o13[|73i;^y0", "|h|9u=coFpz:qw", 54);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.toRootLowerCase("|h|9u=coFpz:qw");
      assertFalse(string1.equals((Object)string0));
      assertEquals("|h|9u=cofpz:qw", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((List<?>) null, "Class %s not found, referenced in method %s", 0, 31);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.startsWithAny("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(14, stringArray0.length);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.stripStart("pJ9O2KJ\"(1F0sr&^\t", "'");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("pJ9O2KJ\"(1F0sr&^\t", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("...", (-2007), 31);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      charArray0[7] = '\\';
      charArray0[8] = '\\';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "pJ9O2KJ\"(1F0sr&^\t", charArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\', '\\'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean2);
      
      int int2 = StringUtils.lastIndexOfAny("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(14, stringArray0.length);
      assertEquals(49, int2);
      assertNotSame(stringArray0, stringArray1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("a9&vpDnCsOG~", "a9&vpDnCsOG~", "a9&vpDnCsOG~");
      assertEquals("a9&vpDnCsOG~", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", 'A');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.normalizeSpace("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("sU", "sU");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", 858);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 858;
      String string4 = StringUtils.join(longArray0, '*');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new long[] {858L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("858", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '*';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = '*';
      charArray0[5] = '*';
      int int0 = StringUtils.indexOfAny((CharSequence) "2!B", charArray0);
      assertArrayEquals(new char[] {'t', '*', 'A', 'A', '*', '*'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "858", charArray0);
      assertArrayEquals(new char[] {'t', '*', 'A', 'A', '*', '*'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      
      String string5 = StringUtils.reverseDelimited("n86bjo*mB0V+K", 't');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("n86bjo*mB0V+K", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "a9&vpDnCsOG~", (CharSequence) "a9&vpDnCsOG~", 858);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.swapCase("a9&vpDnCsOG~");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("A9&VPdNcSog~", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("", "Exactly one type of input must be provided in the @", 0, 1716);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Exactly one type of input must be provided in the @", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[0] = "u;KxOXPJqv6|sge#py";
      stringArray0[7] = "u;KxOXPJqv6|sge#py";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("u;KxOXPJqv6|sge#py", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = StringUtils.substringAfter("#\"&4MKaJbUn4n#X~Object varargs must notbe nulln", 99);
      assertEquals("t varargs must notbe nulln", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("t varargs must notbe nulln");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-2252));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) null, (char[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("h`bk", "h7 !?G<_b!");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) null, (char[]) null);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string5 = StringUtils.repeat("e_s#Q: /4JfSTq", 744);
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substringAfter(string5, 32);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "gB!Q7'1.h");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("h`bk"));
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '2', 0, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 32
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = "2)vDZ8";
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("2)vDZ8", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = "Y|lJY1";
      String string1 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 3;
      String[] stringArray0 = StringUtils.splitByCharacterType("Y|lJY1");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Y|lJY1", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("", 'P');
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Y|lJY1", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.swapCase("Y|lJY1");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("y|Ljy1", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Y|lJY1", (CharSequence) "Y|lJY1", 16);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray2 = StringUtils.split("", "9+q >{tqXT2\"j|i.");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertEquals(5, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Y|lJY1", (CharSequence[]) stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, stringArray2.length);
      assertEquals((-1), int2);
      assertSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      int int3 = (-1834);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("{3g", (-1834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1246L;
      longArray0[5] = 584L;
      longArray0[6] = 575L;
      String string0 = StringUtils.removeStartIgnoreCase("\"^{ISRDSjD' ;h;Cya", "|nt(&LrRV");
      assertEquals("\"^{ISRDSjD' ;h;Cya", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissingIgnoreCase("jo2d,H>\"5dwCH]@", (CharSequence) null, charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("jo2d,H>\"5dwCH]@", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("|nt(&LrRV", (-3182));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "\"^{ISRDSjD' ;h;Cya", (-3182));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "jo2d,H>\"5dwCH]@", (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.overlay("Ux+ -hLSLk51-,hRjm7", "\"^{ISRDSjD' ;h;Cya", (-1), 13);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\"^{ISRDSjD' ;h;Cya,hRjm7", string3);
      assertNotNull(string3);
      
      String string4 = "#`6$\\u%1tB";
      boolean boolean1 = StringUtils.containsNone((CharSequence) "\"^{ISRDSjD' ;h;Cya,hRjm7", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.countMatches((CharSequence) "jo2d,H>\"5dwCH]@", (CharSequence) "Cannot clear and set the following entries at the same time: ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.StdIoExtension");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.truncate("org.junitpioneer.jupiter.IssueExtension", 0, 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.wrap("X~", '6');
      assertEquals("6X~6", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "X~", (CharSequence) "X~");
      assertEquals(0, int0);
      
      String string1 = StringUtils.overlay("Uw,iHVL0.Ng<1KqE)4/", "%E", 378, 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%E", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("&: ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfterLast((String) null, 0);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.upperCase("_@#-i");
      assertFalse(string3.equals((Object)string1));
      assertEquals("_@#-I", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("i", 57, 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";F[s>^q-<wt&13Qa");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.mid(" ", 1575, 1550);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("_@#-I", "_@#-i");
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("_@#-I", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBetween(";}3BMg", (String) null);
      assertNull(string7);
      
      String string8 = StringUtils.deleteWhitespace((String) null);
      assertNull(string8);
      
      String string9 = StringUtils.remove((String) null, ',');
      assertNull(string9);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string10 = StringUtils.overlay("empty", "e_s#Q: /4JfSTq,!RM<RK", 1550, (-1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertEquals("e_s#Q: /4JfSTq,!RM<RK", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.replacePattern("e_s#Q: /4JfSTq,!RM<RK", "org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertEquals("e_s#Q: /4JfSTq,!RM<RK", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("s{,\"                         ", 29, 'V');
      assertTrue(string1.equals((Object)string0));
      assertEquals("s{,\"                         ", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(29);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = hashSet0.add(locale_FilteringMode0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = hashSet0.add(locale_FilteringMode1);
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      String string3 = StringUtils.join((Iterable<?>) hashSet0, "s{,\"                         ");
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertEquals("IGNORE_EXTENDED_RANGESs{,\"                         AUTOSELECT_FILTERING", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNotEmpty(">P<\u0001CFOzauyl");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "R", (CharSequence) "The type must not be null");
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("Tz 1>0ZI W?-", "s{,\"");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Tz 1>0ZI W?-", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", 29);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("tesian.CartesianTestExtensionParameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.car", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("The type must not be null", ">P<\u0001CFOzauyl");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("The String must not be empty", 'A');
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", (CharSequence) "The String must not be empty");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)56;
      String string1 = StringUtils.join(byteArray0, 'A');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)18, (byte)120, (byte)0, (byte) (-76), (byte)76, (byte)56}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("18A120A0A-76A76A56", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("18A120A0A-76A76A56", (-3128), 'A');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("18A120A0A-76A76A56", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("82HZh3BN^", (int) (byte)0, 'A');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("82HZh3BN^", string3);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("18A120A0A-76A76A56", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultIfBlank("18A120A0A-76A76A56", "The String must not be empty");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("18A120A0A-76A76A56", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("%s does not implement the CartesianArgumentsProvider interface.", ">hr(a]~i&a9V~lpT");
      assertEquals("%s does not implement the CartesianArgumentsProvider interface.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("%s does not implement the CartesianArgumentsProvider interface.", 1273);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("%s does not implement the CartesianArgumentsProvider interface.", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d].", 1273);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("%s does not implement the CartesianArgumentsProvider interface.", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Ux+ -hLSLk51-,hRjm7", " ");
      assertEquals(3, int0);
      
      String string6 = StringUtils.unwrap("yonVoj//6y:&?,", '0');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("yonVoj//6y:&?,", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "%s does not implement the CartesianArgumentsProvider interface.", (CharSequence) "Ux+ -hLSLk51-,hRjm7");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(linkedList0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("", 'A');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Cannot get the toString of anullobject", "#RY7e*/o13[|73i;^y0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Cannot get the toString of anullobject", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot get the toString of anullobject", (CharSequence) "");
      assertEquals(38, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "#RY7e*/o13[|73i;^y0", "#RY7e*/o13[|73i;^y0");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 38;
      longArray0[1] = (long) 'A';
      longArray0[2] = (long) 38;
      longArray0[3] = (long) 38;
      longArray0[4] = (long) 0;
      String string3 = StringUtils.join(longArray0, '5', 49, 33);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new long[] {38L, 65L, 38L, 38L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "XxD/i^DNiNFEp+/AF", "XxD/i^DNiNFEp+/AF");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray1);
      
      String string1 = StringUtils.strip(", Length: ", "0W");
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[2] = '@';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cannot clear and set the following entries at the same time: ", charArray0);
      assertArrayEquals(new char[] {'@', '\u0000', '@'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("NJxd", "");
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      
      String string2 = StringUtils.replaceChars("\"2QW%5", '\u0000', '@');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"2QW%5", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\"2QW%5", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'@', '\u0000', '@'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.StringUtils", "", (-1507));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.reverseDelimited("org.junitpioneer.vintage.TimeoutExtension", 'h');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("2s$8+/\u0002,W|nML");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("28", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("gA");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("gA", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isBlank("282");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.getDigits((String) null);
      assertNull(string6);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "Cannot clear and set the following entries at the same time: ", charArray0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {'@', '\u0000', '@'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean3);
      
      String string7 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Locale must not be null", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("A&Yd_ZR+", "}");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.replaceChars("s{,\"", 'V', '+');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("s{,\"", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "s{,\"", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("s{,\"", "A&Yd_ZR+", 29);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.reverseDelimited("s{,\"", '+');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("s{,\"", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("...");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("}");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("}", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isBlank("\u0007R76i(BW8ACq");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.getDigits("Locale must not be null");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV", (char[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string7 = StringUtils.firstNonEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals(1, stringArray1.length);
      assertEquals("A&Yd_ZR+", string7);
      assertNotNull(string7);
      assertNotSame(stringArray1, stringArray0);
      
      String string8 = StringUtils.center("}", 29, '!');
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertEquals("!!!!!!!!!!!!!!}!!!!!!!!!!!!!!", string8);
      assertNotNull(string8);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "A&Yd_ZR+", (char[]) null);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("A&Yd_ZR+", " vs ");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 1935);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 1935, 'R');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right("*w", (-1684));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("\u0007R76i(BW8ACq"));
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = linkedHashSet0.add(locale_FilteringMode0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add(locale_FilteringMode0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(locale_FilteringMode0));
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue0, "nY^Z8RHUs&r.q$5n");
      assertEquals(0, priorityQueue0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(priorityQueue0.contains(locale_FilteringMode0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNotEmpty((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "*w");
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "R");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("Expected exactly one annotation to provide an ArgumentSource, found %d.", (-1684));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("entSource, found %d.Expected exactly one annotation to provide an Argum", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly)");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly)", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly)", string1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isAsciiPrintable("nY^Z8RHUs&r.q$5n");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.endsWithAny("nY^Z8RHUs&r.q$5n", stringArray0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("\n", stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y|lJY1", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("", 3);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Y|lJY1", 3);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Y|lJY1", (CharSequence) "Y|lJY1");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, stringArray1.length);
      assertTrue(boolean2);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'r');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ux+ -hLSLk51-,hRjm7", "Ux+ -hLSLk51-,hRjm7");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("FiiYsj(MC$xqK]g_G", (CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("FiiYsj(MC$xqK]g_G", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat((String) null, 0);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "FiiYsj(MC$xqK]g_G", (CharSequence) "FiiYsj(MC$xqK]g_G", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) " ");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Ux+ -hLSLk51-,hRjm7");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.overlay("org.junitpioneer.jupiter.RetryingTestExtension", "Cannot clear and set the following entries at the same time: ", (-3182), (-3182));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Cannot clear and set the following entries at the same time: org.junitpioneer.jupiter.RetryingTestExtension", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "DN|3(", " annotation, but there were ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("tt:>apCpi56])P:a=?");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.replaceFirst(" ", " ", "b1+Q,Gm<!pyq@gxBg");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("b1+Q,Gm<!pyq@gxBg", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripToNull((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.stripAccents((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.getDigits((String) null);
      assertNull(string8);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY*h1", "Y|lJY*h1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("!d1.}#}5Y", "maxWith cannot be negative", "Y|lJY*h1");
      assertNull(stringArray0);
      
      String string1 = StringUtils.trimToEmpty("teH}TT*fgs]wvI}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("teH}TT*fgs]wvI}", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "teH}TT*fgs]wvI}", (CharSequence) "Y|lJY*h1");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll("q6D9A@V~CG'", "7e+@MX~a+IG!wnwY_mld=+`lX");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("q6D9A@V~CG'", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("^O7:= }J", "^O7:= }J");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "q6D9A@V~CG'");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("q6D9A@V~CG'", "{[0-9]+}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = "O2c..QB)9<";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O2c..QB)9<");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "O2c..QB)9<");
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("O2c..QB)9<", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("O2c..QB)9<", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("O2c..QB)9<", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("O2c..QB)9<");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.joinWith("O2c..QB)9<", stringArray0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("O2c..QB)9<", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("", "v*9^Wl.5iWeePi", "v*9^WlJ5iWeePiLocale must not be null");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("v*9^WlJ5iWeePiLocale must not be null", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("v*9^WlJ5iWeePiLocale must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeFirst("", "Don't clear/set the same entry more than once.");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'y';
      charArray0[2] = 'l';
      charArray0[3] = ')';
      charArray0[4] = 'Q';
      charArray0[5] = ';';
      charArray0[6] = 'w';
      charArray0[7] = 'X';
      int int0 = 67;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'Q', 0, 67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.rightPad(">hr(a]~i&a9V~lpT", 174);
      assertEquals(">hr(a]~i&a9V~lpT                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", "`T0nQ)~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(">hr(a]~i&a9V~lpT                                                                                                                                                              ", 32767, 174);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("`T0nQ)~", "org.apache.commons.lang3.StringUtils", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`T0nQ)~", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ">hr(a]~i&a9V~lpT                                                                                                                                                              ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate((String) null, 32767, 32767);
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("F|r4TYgSoelTM?");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.remove("E", '*');
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("E", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.countMatches((CharSequence) ">hr(a]~i&a9V~lpT                                                                                                                                                              ", '*');
      assertEquals(0, int0);
      
      String string7 = StringUtils.leftPad((String) null, Integer.MAX_VALUE);
      assertNull(string7);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(9, stringArray0.length);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.stripEnd("`T0nQ)~", "kH");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertEquals("`T0nQ)~", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.abbreviate((String) null, 86, 15);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.upperCase("_@#-i");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_@#-I", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isWhitespace(" ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("e~qw\".!", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 20);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.trimToNull("_@#-I");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("_@#-I", string4);
      assertNotNull(string4);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals("e~qw\".!", charSequence0);
      assertNotNull(charSequence0);
      
      Locale locale1 = Locale.ENGLISH;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      int int1 = StringUtils.getFuzzyDistance("e~qw\".!", "N", locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'v', (-118), (-118));
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-118), (-118));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String string0 = StringUtils.difference("\"af", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string1 = "org.apache.commons.lang3.ObjectUtils";
      String string2 = StringUtils.substringBefore("org.apache.commons.lang3.ObjectUtils", "matches '%s'.");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("org.apache.commons.lang3.ObjectUtils");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'P';
      charArray0[2] = 'n';
      charArray0[3] = 'U';
      charArray0[4] = 'e';
      charArray0[5] = '1';
      charArray0[6] = '+';
      charArray0[7] = '6';
      String string3 = StringUtils.join(charArray0, '`', 54, (-5125));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'7', 'P', 'n', 'U', 'e', '1', '+', '6'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains('6'));
      assertNotNull(stack0);
      
      char char0 = 'l';
      // Undeclared exception!
      try { 
        stack0.remove(54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 54
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.difference("Q; 2s~8Pqwd", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("DefaultTimeZone", "");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence[]) stringArray1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, stringArray1.length);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.abbreviate((String) null, 0);
      assertNull(string4);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Rz![mz{F?Il3M{index}M", 1145);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.getDigits("");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", (-1), "");
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string7 = StringUtils.join(iterator0, 'h');
      assertEquals(0, priorityQueue0.size());
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("T}", 341, 'Z');
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZT}", string8);
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZT}", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(", '", ", '");
      assertEquals(", '", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(", '", ", '");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("dUg0zP$P`Xo%g2a");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double1 = StringUtils.getJaroWinklerDistance(", '", ", '");
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(13, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripToNull("The type must not be null");
      assertEquals("The type must not be null", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-2290);
      longArray0[1] = 1246L;
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) 'M';
      longArray0[4] = (-826L);
      String string1 = StringUtils.join(longArray0, 'M', 874, (-2317));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {(-2290L), 1246L, 77L, 77L, (-826L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("The type must not be null");
      assertEquals(25, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The type must not be null", (CharSequence) "...", 1002);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.lowerCase("V(.8Q=18:Uu");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("v(.8q=18:uu", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.join(stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("V(.8Q=18:Uu", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.wrap("v(.8q=18:uu", "V(.8Q=18:Uu");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("V(.8Q=18:Uuv(.8q=18:uuV(.8Q=18:Uu", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "V(.8Q=18:Uuv(.8q=18:uuV(.8Q=18:Uu", (-1633));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.removeEnd("maxWith cannot be negative", "Class %s not found, referenced in method %s");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) stringArray0, (String) null, 1002, (-1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(iterator0);
      
      String string8 = StringUtils.join(iterator0, 'x');
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(arrayDeque0.contains(string0));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = "]\"cRI&tb6U`bN=";
      String string1 = StringUtils.defaultIfBlank("present", "]\"cRI&tb6U`bN=");
      assertFalse(string1.equals((Object)string0));
      assertEquals("present", string1);
      assertNotNull(string1);
      
      String string2 = "s{,\"";
      String string3 = StringUtils.center("present", (-1399), "+gq:)Z7q ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("present", string3);
      assertNotNull(string3);
      
      String string4 = "A@CJJj')({";
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "CartesianEnumSource annotation not found", "A@CJJj')({");
      assertNull(stringArray0);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "present", 7, (-1399));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 187);
      assertEquals("1`Q5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("GN5`[Odg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("gN5`[Odg", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("1`Q5", 126);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Q51`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Q51`", 187);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("Q51`", 187, 187);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart((String) null, "u~KC'%FP-|1xV+9");
      assertNull(string5);
      
      String string6 = StringUtils.abbreviate("GN5`[Odg", "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", 223, 223);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("GN5`[Odg", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isAlpha("GN5`[Odg");
      assertFalse(boolean0);
      
      String string7 = StringUtils.substringBefore("GN5`[Odg", "StdIo_System_Out");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertEquals("GN5`[Odg", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap(" ", "1`Q5");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertEquals(" ", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.unwrap("\r", "\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Iw;eih8bYgT", "Iw;eih8bYgT", "!d1.}#}5Y");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Iw;eih8bYgT", (CharSequence) "Iw;eih8bYgT");
      assertEquals(0, int0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("1*pCuo:SNv,*U1'5", "!d1.}#}5Y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1*pCuo:SNv,*U1'5", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("", '3');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.truncate("Iw;eih8bYgT", 14, 14);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.right("\r", 0);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("OZ:360OO=`qpy6v`[?", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "OZ:360OO=`qpy6v`[?");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("", "Ux+ -hLSLk51-,hRjm7", 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("-1WDn_:gDhdp&5");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Ux+ -hLSLk51-,hRjm7", (CharSequence) "OZ:360OO=`qpy6v`[?");
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("Ux+ -hLSLk51-,hRjm7", charSequence0);
      assertNotNull(charSequence0);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "Ux+ -hLSLk51-,hRjm7", stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.left("OZ:360OO=`qpy6v`[?", 2498);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("OZ:360OO=`qpy6v`[?", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", (CharSequence) "OZ:360OO=`qpy6v`[?", 0);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.replaceIgnoreCase("", "maxWith cannot be negative", "Search and Replace array lengths don't match: ", (-2260));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((List<?>) null, "5f2+~%ovFl,aa*KI", (-1), (-2389));
      assertNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny("maxWith cannot be negative", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String string0 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat(string0, 1114111);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7e+@M");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("7e+@M"));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("7e+@M"));
      assertNotNull(listIterator0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("7e+@M"));
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("7e+@M"));
      assertNotNull(iterator0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " >hr(a]~i&a9V~lpT", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((long[]) null, 'H');
      assertNull(string1);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat("7e+@M", 2);
      assertFalse(string3.equals((Object)string0));
      assertEquals("7e+@M7e+@M", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "(e<GN4/#I)", (CharSequence) "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.substring("", 867, (-1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.stripToEmpty("");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string6 = StringUtils.center("{", (-1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("{", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "h", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      String[] stringArray1 = StringUtils.substringsBetween("1+Q,Gm<!pyq@gxBg", "Q", "_iD&|k");
      assertNull(stringArray1);
      
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("a+");
      assertEquals("a", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("_iD&|k", 781, 'R');
      assertFalse(string2.equals((Object)string1));
      assertEquals("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR_iD&|kRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("_iD&|k", "1+Q,Gm<!pyq@gxBg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.center("hWcgw", 3, "#(JX}7");
      assertEquals("hWcgw", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 1935);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 1935, 'R');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center(string1, 1935, "org.junitpioneer.jupiter.params.DoubleRange");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.substringsBetween("org.junitpioneer.jupiter.params.DoubleRange", string1, "m1Sq3.t{8{Y9");
      assertFalse(string1.equals((Object)string0));
      assertNull(stringArray1);
      
      String string3 = StringUtils.replace("a+IG!wnwY_mld=+`lXX~", "m1Sq3.t{8{Y9", "%");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("a+IG!wnwY_mld=+`lXX~", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "a+IG!wnwY_mld=+`lXX~", (CharSequence) string2);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("%", "IssueExtension");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("%", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is %d", "org.junitpioneer.jupiter.params.DoubleRange");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "DoO1)WTE-VWo8", "`BI>C!/[V,");
      assertFalse(boolean0);
      
      try { 
        StringUtils.getBytes("a+IG!wnwY_mld=+`lXX~", string2);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("maxWith cannot be negative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "?b_u`'Q\"wk;f}\"@&E");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.substringAfter("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "The type must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(19, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.substring((String) null, 700, 577);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "?b_u`'Q\"wk;f}\"@&E");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O2c..QB)9<");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "O2c..QB)9<");
      assertEquals(1, stringArray0.length);
      assertEquals("O2c..QB)9<", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("O2c..QB)9<", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("O2c..QB)9<", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("O2c..QB)9<");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.joinWith("O2c..QB)9<", stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("O2c..QB)9<", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replacePattern("", "v*9^WlJ5iWeePi", "v*9^WlJ5iWeePiLocale must not be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("v*9^WlJ5iWeePiLocale must not be null", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("v*9^WlJ5iWeePiLocale must not be null", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "/";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "/", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("=c*t6`)M5RGCM|\"");
      assertEquals("=c*t6`)M5RGCM|\"", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", 21, 21);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNull(string2);
      
      String string3 = StringUtils.center("=c*t6`)M5RGCM|\"", 24, 'g');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("gggg=c*t6`)M5RGCM|\"ggggg", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("`7");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("gggg=c*t6`)M5RGCM|\"ggggg");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("gggg=c*t6`)M5RGCM|\"ggggg", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "gggg=c*t6`)M5RGCM|\"ggggg");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string7 = StringUtils.wrap("J1Fj>ggi-9q#_Ux", "StdIo_System_In");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.stripAccents("gggg=c*t6`)M5RGCM|\"ggggg");
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertEquals("gggg=c*t6`)M5RGCM|\"ggggg", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.chomp((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.defaultIfBlank("=c*t6`)M5RGCM|\"", "gggg=c*t6`)M5RGCM|\"ggggg");
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertEquals("=c*t6`)M5RGCM|\"", string10);
      assertNotNull(string10);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Q`UPrj5jL1Pa-F";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In";
      stringArray0[4] = "gggg=c*t6`)M5RGCM|\"ggggg";
      stringArray0[5] = null;
      stringArray0[6] = "Search and Replace array lengths don't match: ";
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("=c*t6`)M5RGCM|\"");
      assertEquals("=c*t6`)M5RGCM|\"", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "=c*t6`)M5RGCM|\"";
      String string1 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "=c*t6`)M5RGCM|\"Search and Replace array lengths don't match: ", 21, 21);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNull(string2);
      
      String string3 = StringUtils.center("=c*t6`)M5RGCM|\"", 24, 'g');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("gggg=c*t6`)M5RGCM|\"ggggg", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("`7");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("gggg=c*t6`)M5RGCM|\"ggggg");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("gggg=c*t6`)M5RGCM|\"ggggg", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "gggg=c*t6`)M5RGCM|\"ggggg");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("=c*t6`)M5RGCM|\"", string6);
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=c*t6`)M5RGCM|\"", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string7 = StringUtils.wrap("J1Fj>ggi-9q#_Ux", "StdIo_System_In");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.stripAccents("gggg=c*t6`)M5RGCM|\"ggggg");
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("gggg=c*t6`)M5RGCM|\"ggggg", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.chomp((String) null);
      assertNull(string9);
      
      String string10 = StringUtils.defaultIfBlank("=c*t6`)M5RGCM|\"", "gggg=c*t6`)M5RGCM|\"ggggg");
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string1));
      assertEquals("=c*t6`)M5RGCM|\"", string10);
      assertNotNull(string10);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=c*t6`)M5RGCM|\"";
      stringArray0[1] = "Q`UPrj5jL1Pa-F";
      stringArray0[2] = "Index: ";
      stringArray0[3] = "StdIo_System_InJ1Fj>ggi-9q#_UxStdIo_System_In";
      stringArray0[4] = "gggg=c*t6`)M5RGCM|\"ggggg";
      stringArray0[5] = null;
      stringArray0[6] = "Search and Replace array lengths don't match: ";
      String string11 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertEquals(7, stringArray0.length);
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      longArray0[4] = 61L;
      String string1 = StringUtils.join(longArray0, '%', 573, 25);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 61L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("s{,\"", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("s{,\"", string2);
      assertNotNull(string2);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(25);
      assertEquals(25, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=25 cap=25]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(25, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(25, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      String string3 = StringUtils.wrap("112p0p112p204p204p112p112p204CartesianTest can not have a non-empty display name.", '%');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("%112p0p112p204p204p112p112p204CartesianTest can not have a non-empty display name.%", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", 573, 2598);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBetween("Locale must no", "s{,\"");
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace(" ");
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "s{,\"");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.overlay("]", (String) null, 56, 2);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("]", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replacePattern((String) null, (String) null, " ");
      assertNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "]";
      charSequenceArray0[1] = (CharSequence) "s{,\"";
      charSequenceArray0[2] = (CharSequence) "s{,\"";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) "]";
      String string8 = StringUtils.toRootLowerCase("]");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertEquals("]", string8);
      assertNotNull(string8);
      
      charSequenceArray0[5] = (CharSequence) "]";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "";
      String string9 = StringUtils.replaceOnce((String) null, "-GO^zsokQTfN7", "-GO^zsokQTfN7");
      assertNull(string9);
      
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny("s{,\"", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) ",", 1969);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String string0 = StringUtils.rightPad("D> ,QA^r", 29);
      assertEquals("D> ,QA^r                     ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "D> ,QA^r                     ";
      charSequenceArray0[1] = (CharSequence) "D> ,QA^r";
      charSequenceArray0[2] = (CharSequence) "D> ,QA^r";
      charSequenceArray0[3] = (CharSequence) "D> ,QA^r";
      charSequenceArray0[4] = (CharSequence) "D> ,QA^r";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("D> ,QA^r                     GD> ,QA^rGD> ,QA^rGD> ,QA^rGD> ,QA^r", string1);
      assertNotNull(string1);
      
      String string2 = "\\u";
      int int0 = StringUtils.compare(string2, "D> ,QA^r                     ", false);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(24, int0);
      
      String string3 = StringUtils.abbreviateMiddle("D> ,QA^r                     GD> ,QA^rGD> ,QA^rGD> ,QA^rGD> ,QA^r", "$y[C/f0H+", 29);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("D> ,QA^r  $y[C/f0H+rGD> ,QA^r", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "D> ,QA^r  $y[C/f0H+rGD> ,QA^r");
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D> ,QA^r";
      stringArray0[1] = "$y[C/f0H+";
      stringArray0[3] = "D> ,QA^r                     ";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "$y[C/f0H+";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "maxWith cannot be negative");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      String string4 = StringUtils.substringBetween("$y[C/f0H+", "$y[C/f0H+", "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "D> ,QA^r                     ", "D> ,QA^r                     GD> ,QA^rGD> ,QA^rGD> ,QA^rGD> ,QA^r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.leftPad("v*9^WlJ5iWeePi", 1898, "LwFRzEOxf~u ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String string0 = "Illegal range. The step cannot be zero.";
      // Undeclared exception!
      try { 
        StringUtils.upperCase("Illegal range. The step cannot be zero.", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, "\"", 1112);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("\"", "\"");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("", 'T');
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("X,M4x/#1`Ugk", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, '\\');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.wrap("7e+@MX~a+IG!wnwY_mld=+`lX", 'W');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("W7e+@MX~a+IG!wnwY_mld=+`lXW", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "X,M4x/#1`Ugk", (-1), 8192);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.substringBetween("X,M4x/#1`Ugk", "7e+@MX~a+IG!wnwY_mld=+`lX");
      assertNull(string5);
      
      String string6 = StringUtils.deleteWhitespace("\"TSU~$;nNOG*C>2");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("\"TSU~$;nNOG*C>2", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "X,M4x/#1`Ugk", (CharSequence) null);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string7 = StringUtils.overlay("6PNZm?NVW<+1[zH", (String) null, 0, (-1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("6PNZm?NVW<+1[zH", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replacePattern((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 160);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "");
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'I';
      charArray0[1] = 'T';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      String string4 = StringUtils.join(charArray0, 'I');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new char[] {'I', 'T', 'I', 'I'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("IITIIII", string4);
      assertNotNull(string4);
      
      StringWriter stringWriter0 = new StringWriter(33);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase((String) null, "", (CharSequence[]) null);
      assertNull(string5);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      assertEquals("null", stringWriter0.toString());
      assertEquals("null", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "Search and Replace array lengths don't match: ", (-926), 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Display name '%s' %s", "Display name '%s' %s", "Display name '%s' %s");
      assertEquals("Display name '%s' %s", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Display name '%s' %s", (CharSequence) "Display name '%s' %s", (-1497));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.upperCase("_@#-i");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_@#-I", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate(" ", 57, 0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";F[s>^q-<wt&13Qa");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.removeStart("clone", ", Length: ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("clone", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAlphanumeric("_@#-I");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.getIfEmpty("_@#-i", (Supplier<String>) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("_@#-i", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.split(" ", " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compare("Object varargs must not be null", (String) null, false);
      assertEquals((-1), int0);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.firstNonEmpty(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNull(string1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, stringArray1.length);
      assertFalse(boolean2);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[Zqn5Tx");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("[Zqn5Tx", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("DisplaK name '%s' %s", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y|lJY1", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'P');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("", "", "");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("i.U[x\"G4tIp.$SH", "", 18);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("i.U[x\"G4tIp.$SH", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("org.apache.commons.lang3.StringUtils");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("slitUgnirtS.3gnal.snommoc.ehcapa.gro", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(47, int0);
      
      String string7 = StringUtils.substringAfterLast("", "hmpCi");
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceIgnoreCase("offset cannot be negative", "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (String) null);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertEquals("offset cannot be negative", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripToNull("\r");
      assertNull(string9);
      
      String string10 = StringUtils.prependIfMissing("Y|lJY1", "", stringArray0);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("Y|lJY1", string10);
      assertNotNull(string10);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "i.U[x\"G4tIp.$SH", (CharSequence) "\r");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 65536);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string11 = StringUtils.abbreviateMiddle("empty", "K8Cf13*P[Q\"ig", 47);
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertEquals("empty", string11);
      assertNotNull(string11);
      
      boolean boolean0 = StringUtils.endsWithAny("empty", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 1935);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 1935, 'R');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right("*w", (-1684));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string2));
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = hashSet0.add(locale_FilteringMode0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      
      boolean boolean1 = hashSet0.add(locale_FilteringMode0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue0, "nY^Z8RHUs&r.q$5n");
      assertEquals(0, priorityQueue0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(priorityQueue0.contains(locale_FilteringMode0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "*w");
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "R");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("Expected exactly one annotation to provide an ArgumentSource, found %d.", (-1684));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("entSource, found %d.Expected exactly one annotation to provide an Argum", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly)");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly)", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly)", string1);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string4 = ";7#R52[3*}\"n*";
      String[] stringArray0 = StringUtils.split(";7#R52[3*}\"n*", "Ux+ -hLSLk51-,hRjm7", (-1924));
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.rightPad("SQR1=8u<", 2452, (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.chomp("?=4A", "?=4A");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\n", "Vv");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("\n", 'm');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.mid("\n", 1575, (-666));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("Threshold must not be negative", "g>\"vRZ:");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Threshold must not be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center((String) null, (-666));
      assertNull(string4);
      
      String string5 = StringUtils.mid("q^P]@", 1575, 890);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.wrap(">P<\u0001CFOzauylLocale must not be null", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals(">P<\u0001CFOzauylLocale must not be null", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.stripToEmpty("ky$Fbf3?Y])w\"");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals("ky$Fbf3?Y])w\"", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'C';
      charArray0[2] = 'm';
      charArray0[3] = 'C';
      charArray0[4] = 'm';
      String string8 = StringUtils.join(charArray0, 'm', 1575, (-503));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertArrayEquals(new char[] {'m', 'C', 'm', 'C', 'm'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.equalsAny("Threshold must not be negative", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[2]);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[2], (-115));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String string1 = StringUtils.wrap("Test ethod must declare at least one parameter: ", 'R');
      assertFalse(string1.equals((Object)string0));
      assertEquals("RTest ethod must declare at least one parameter: R", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("Arguments cannot both be null", 120, 2064);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Arguments cannot both be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.stripAccents("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("f", "Minimum abbreviation width with offset is %d");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      assertNotSame(stringArray0, stringArray1);
      
      String string1 = StringUtils.replaceEachRepeatedly(">!", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals(">!", string1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 128);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("Locale must not be null", "Locale must not be null", 3);
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Locale must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      String[] stringArray0 = StringUtils.split((String) null, 'y');
      assertNull(stringArray0);
      
      String string2 = StringUtils.right((String) null, (-4056));
      assertNull(string2);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("![w|'MY\"=I7@J![w|'MY\"=I7@Jclone", "1QYFYK)", "*9^WlJ5iWeePiv");
      assertNull(stringArray1);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "v*9^WlJ5iWeePi", (CharSequence) "org.junitpioneer.jupiter.params.Range");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.left("", 'G');
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.truncate("Locale must not be null", 76);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Locale must not be null", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.strip((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Rz![mz{F?Il3";
      objectArray0[1] = (Object) "Rz![mz{F?Il3";
      String string0 = StringUtils.joinWith("Rz![mz{F?Il3", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("Rz![mz{F?Il3", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rotate((String) null, 1532);
      assertNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, "Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3");
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.mid("Rz![mz{F?Il3", 53, (-851));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[2] = (byte)76;
      String string6 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)76}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("\uFFFD\u0000L", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("\uFFFD\u0000L");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("\uFFFD\u0000", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat("", "Y|lJY1", (int) (byte) (-109));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.wrapIfMissing((String) null, 'd');
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-1723));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("Vx`Scd[P:^", '6');
      assertFalse(string2.equals((Object)string1));
      assertEquals("6Vx`Scd[P:^6", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "&: ", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.overlay("_q5S>|+", "", (-1723), (-5138));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_q5S>|+", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("_q5S>|+");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3235);
      longArray0[1] = (long) (-3235);
      longArray0[2] = 0L;
      longArray0[3] = (long) 'G';
      longArray0[4] = (long) 'G';
      longArray0[5] = (long) (-3235);
      String string2 = StringUtils.join(longArray0, 'G');
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {(-3235L), (-3235L), 0L, 71L, 71L, (-3235L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals("-3235G-3235G0G71G71G-3235", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "*9^WlJ5iWeePiv", (CharSequence) "-3235G-3235G0G71G71G-3235");
      assertFalse(boolean0);
      
      int int0 = 322;
      String string3 = StringUtils.rightPad((String) null, 322, 'G');
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "v*9^WlJ5iWeePi", 3);
      assertNull(stringArray0);
      
      String string4 = "M{index}M";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("M{index}M", "*9^WlJ5iWeePiv", "No instructions to disable");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *9^WlJ5iWeePiv
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("$JX}V", "$JX}V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("$JX}V");
      assertFalse(string1.equals((Object)string0));
      assertEquals("$JX}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("$JX}V", (String) null, (-2239), (-2239));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$JX}V", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "$JX}V", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", "%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("RxA|@V~1#Yquk", 114);
      assertEquals("RxA|@V~1#Yquk                                                                                                     ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("%s was not annotated with @ArgumentsSource but should have been.", 114, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVV%s was not annotated with @ArgumentsSource but should have been.VVVVVVVVVVVVVVVVVVVVVVVVV", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterator<?>) null, "s{,\"");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "RxA|@V~1#Yquk                                                                                                     ", (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrap("4zu@ze_`N}Y", 'q');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("q4zu@ze_`N}Yq", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("q4zu@ze_`N}Yq", "_On4UZVd=T8@u");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("q4zu@ze_`N}Yq", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", (CharSequence) "VVVVVVVVVVVVVVVVVVVVVVVVV%s was not annotated with @ArgumentsSource but should have been.VVVVVVVVVVVVVVVVVVVVVVVVV");
      assertEquals(96, int0);
      
      String string5 = StringUtils.substringAfterLast((String) null, "tm$K6t?3t{u{Z");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("blank_blank_blank_2014", Integer.MAX_VALUE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("blank_blank_blank_2014", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("blank_blank_blank_2014", '|');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("The type must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("the type must not be null", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "s{,\"", (CharSequence) "s{,\"                         ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((List<?>) null, 'r', Integer.MAX_VALUE, 25);
      assertNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(Integer.MAX_VALUE));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.left("org.junitpioneer.jupiter.params.FloatRange", 19);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.ju", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("X~", 8192);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("X~", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.strip("s{,\"                         ");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("s{,\"", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.countMatches((CharSequence) "s{,\"", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "-a!e\" >)<E>#.  ?]Ng", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\n", "Vv");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("\n", 'm');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.remove(",!RM<RK", 'P');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",!RM<RK", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) ",!RM<RK", '=');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Vv", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.chop(",!RM<RK");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(",!RM<R", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) ",!RM<RK", (CharSequence) ",!RM<R", (-785));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfAny((CharSequence) ",!RM<RK", "6=H@*'q:zuOjh}qv");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(linkedList0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("", 'A');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Cannot get the toString of anullobject", "#RY7e*/o13[|73i;^y0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Cannot get the toString of anullobject", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot get the toString of anullobject", (CharSequence) "");
      assertEquals(38, int0);
      
      String string3 = StringUtils.substringAfterLast("#RY7e*/o13[|73i;^y0", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWith("", "#RY7e*/o13[|73i;^y0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      int int0 = StringUtils.compare("7J^l@DN|inX,lo%@td", "7J^l@DN|inX,lo%@td");
      assertEquals(0, int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("7J^l@DN|inX,lo%@td"));
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "#[f+Q@2r");
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 'I';
      charArray0[2] = '\'';
      charArray0[3] = '|';
      charArray0[4] = 'J';
      String string1 = StringUtils.join(charArray0, 'b', 112, 112);
      assertArrayEquals(new char[] {')', 'I', '\'', '|', 'J'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Ux+ -hLSLk51-,hRjm7", "E?vg=9BbJ*!M2X76", "Ux+ -hLSLk51-,hRjm7");
      assertEquals("Ux+ -hLSLk51-,hRjmh", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" vs ", ">+<lu;_2!CZ;", ">+<lu;_2!CZ;");
      assertEquals(" vs ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      int int0 = StringUtils.compare("=oE{", "d<w", true);
      assertEquals((-39), int0);
      
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("org.junitpioneer.jupiter.cartesian.CartesianTestExtension                                  ");
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension                                 ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", "d<w", "");
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = StringUtils.replaceChars("maxWith >annot be negative", "maxWith >annot be negative", "maxWith >annot be negative");
      assertEquals("maxWith >annot be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ";
      String string1 = "73}";
      String string2 = StringUtils.replaceChars("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", "73}", "B,wH");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "B,wH", (CharSequence) "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)34;
      try { 
        StringUtils.toString(byteArray0, "L7-\",]");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY*h1", "Y|lJY*h1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("!d1.}#}5Y", "maxlith cannotVbe negatiQe", "Y|lJY*h1");
      assertNull(stringArray0);
      
      String string1 = StringUtils.trimToEmpty("teH}TT*fgs]wvI}");
      assertFalse(string1.equals((Object)string0));
      assertEquals("teH}TT*fgs]wvI}", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "teH}TT*fgs]wvI}", (CharSequence) "Y|lJY*h1");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll("q6D9A@V~CG'", "7e+@MX~a+IG!wnwY_mld=+`lX");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("q6D9A@V~CG'", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("teH}TT*fgs]wvI}", "7e+@MX~a+IG!wnwY_mld=+`lX", "!d1.}#}5Y");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("tdH}TT*fgs]v}", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "q6D9A@V~CG'");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("q6D9A@V~CG'", "{[0-9]+}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("OZ:360OO=`qpy6v`[?", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "OZ:360OO=`qpy6v`[?");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("", "Ux+ -hLSLk51-,hRjm7", 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("-1WDn_:gDhdp&5");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Ux+ -hLSLk51-,hRjm7", (CharSequence) "OZ:360OO=`qpy6v`[?");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals("Ux+ -hLSLk51-,hRjm7", charSequence0);
      assertNotNull(charSequence0);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("\r", 2498, 0);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string6 = StringUtils.removeAll("Search and Replace array lengths don't match: ", "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((List<?>) null, "5f2+~%ovFl,aa*KI", (-1), (-2389));
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("Search and Replace array lengths don't match: ");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(17, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("OZ:360OO=`qpy6v`[?", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "OZ:360OO=`qpy6v`[?");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("", "Ux+ -hLSLk51-,hRjm7", 0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("-1WDn_:gDhdp&5");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Ux+ -hLSLk51-,hRjm7", (CharSequence) "OZ:360OO=`qpy6v`[?");
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", charSequence0);
      assertNotNull(charSequence0);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "Ux+ -hLSLk51-,hRjm7", stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", 2498, 0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string6 = StringUtils.replaceIgnoreCase("", "maxWith cannot be negative", "Search and Replace array lengths don't match: ", (-2260));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((List<?>) null, "5f2+~%ovFl,aa*KI", (-1), (-2389));
      assertNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny("maxWith cannot be negative", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      String string8 = StringUtils.uncapitalize("xZc<EOBc,u`SS8\"]");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("xZc<EOBc,u`SS8\"]", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.getDigits("StdIoExtension is active but no %s annotation was found.");
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)charSequence0));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertEquals("", string9);
      assertNotNull(string9);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("", "OZ:360OO=`qpy6v`[?");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("n<Mi0S%ee2Foj+Hqiq", "U", 8);
      assertEquals("n<MiUqiq", string0);
      assertNotNull(string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(8));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, '', 8, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2147483647
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'A');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.prependIfMissing("s{,\"                         ", "s{,\"", stringArray0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("s{,\"                         ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The type must not be null", 29);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %d", "The type must not be null", 29);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("MiThe type must not be null%d", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "s{,\"                         ", "The type must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 29;
      longArray0[1] = (long) 'V';
      longArray0[2] = (long) 29;
      longArray0[4] = (long) 'A';
      String string6 = StringUtils.join(longArray0, '_');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new long[] {29L, 86L, 29L, 0L, 65L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("29_86_29_0_65", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.defaultIfBlank("bk<*6($]", "\u0007R76i(BW8ACq");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("bk<*6($]", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.center(":t@d+v^a#~JG&", 32);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "bk<*6($]", 32, 296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("l");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 's', 9, 1837);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      longArray0[4] = 61L;
      String string1 = StringUtils.join(longArray0, '%', 573, 25);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 61L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("s{,\"", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s{,\"", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "s{,\"";
      charSequenceArray0[1] = (CharSequence) " ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", '\\');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 171;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '%', 0, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("l", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      StringUtils.center("l", 32767);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s{,\"", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, '$');
      assertNull(stringArray1);
      
      String string0 = StringUtils.abbreviate("112p0p112p204p204p112p112p204", "clone", 53);
      assertEquals("112p0p112p204p204p112p112p204", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("112p0p112p204p204p112p112p204");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("112p0p112p204p204p112p112p204", "The type must not be null", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("112p0p112p204p204p112p112p204The type must not be null", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "i0&f/I* ~O;xOu", (CharSequence) "i0&f/I* ~O;xOu", 53);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "112p0p112p204p204p112p112p204");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray0);
      
      String string2 = StringUtils.remove("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", 'c');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Report entry an not have variables in the key: { key=\"%s\" value=\"%s\" }", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAllLowerCase("' ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.stripEnd("+Y6^m<C{,.}", "clone");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("+Y6^m<C{,.}", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("clone", "Minimum abbreviation width with offset is %d", "Report entry an not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("clone", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle(" ", "![w|'MY\"=I7@J![w|'MY\"=I7@J", 1);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals(" ", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("J1Fj>ggi-9q#_Ux", "]\"cRI&tb6U`bN=");
      assertEquals("J1Fj>ggi-9q#_Ux", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "J1Fj>ggi-9q#_Ux";
      charSequenceArray0[3] = (CharSequence) "#tjH,%vIvu";
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charSequenceArray0[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string2 = StringUtils.join(objectArray0, 'G');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", ":eX<5nQ4-Fn?4vXX", true);
      assertEquals(6, int0);
      
      String string3 = StringUtils.stripToNull("");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) ":eX<5nQ4-Fn?4vXX");
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeStart((String) null, "]\"cRI&tb6U`bN=");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.getIfEmpty("~XU7k#WGp", (Supplier<String>) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("~XU7k#WGp", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("\n", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly)");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("~XU7k#WGp", "aG{`+fi:RqJOfsz");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // aG{`+fi:RqJOfsz
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", 'P');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("", "", "");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("i.U[x\"G4tIp.$SH", "", 18);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("i.U[x\"G4tIp.$SH", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.reverse("org.apache.commons.lang3.StringUtils");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("slitUgnirtS.3gnal.snommoc.ehcapa.gro", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(47, int0);
      
      String string6 = StringUtils.substringAfterLast("", "hmpCi");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase("offset cannot be negative", "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (String) null);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("offset cannot be negative", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "7_2n#u:\"UdkBH!", 2000);
      assertNull(stringArray1);
      
      String string8 = StringUtils.trimToNull("");
      assertNull(string8);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ITALIAN;
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string9 = locale0.getDisplayLanguage(locale1);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("giapponese", string9);
      assertNotNull(string9);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", "Y|lJY1", locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertFalse(int1 == int0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, int1);
      assertNotSame(locale0, locale1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(11, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.right("ZL#GdYt>", (-2147483629));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      int[] intArray0 = new int[0];
      String string4 = StringUtils.join(intArray0, 'M');
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", (-2147483629), "^~cAbCId <q(8Wj");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("0W");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0w", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("DefaultTimeZone", "0w");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence[]) stringArray1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, stringArray1.length);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.abbreviate((String) null, 0);
      assertNull(string4);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 1145);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      int[] intArray0 = StringUtils.toCodePoints("0w");
      assertArrayEquals(new int[] {48, 119}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.getDigits("0w");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("0", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", (-1), "");
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<Locale.FilteringMode> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string7 = StringUtils.join(iterator0, 'h');
      assertEquals(0, priorityQueue0.size());
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("T}", 341, '5');
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertEquals("555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555T}", string8);
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555T}", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      String string0 = StringUtils.rightPad(">hr(a]~i&a9V~lpT", 174);
      assertEquals(">hr(a]~i&a9V~lpT                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", "`T0nQ)~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(">hr(a]~i&a9V~lpT                                                                                                                                                              ", 32767, 174);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("`T0nQ)~", "org.apache.commons.lang3.StringUtils", "Threshold must not be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`T0nQ)~", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ">hr(a]~i&a9V~lpT                                                                                                                                                              ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isWhitespace("`T0nQ)~");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Br='G[=L'@XufZT", "N", (-1139));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.trimToNull("v*9^WlJ5iWeePi");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("v*9^WlJ5iWeePi", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      HashSet<Locale.LanguageRange> hashSet0 = new HashSet<Locale.LanguageRange>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayDeque<Locale> arrayDeque0 = new ArrayDeque<Locale>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(locale0));
      assertNotNull(arrayDeque0);
      
      Locale locale1 = Locale.lookup(linkedList0, arrayDeque0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(locale0));
      assertNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("org.apache.commons.lang3.StringUtils", "v*9^WlJ5iWeePi", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "`T0nQ)~", (CharSequence) "", 174);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      String string6 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "v*9^WlJ5iWeePi");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("B", 2665);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("B", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("B");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "Minimum abbreviation width with offset is %d", (String) null);
      assertNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "B", (CharSequence) "B");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("qg61/jggh$", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("qg61/jggh$", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.remove("", 'u');
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "H&[>_RBF)");
      assertNull(stringArray1);
      
      String string7 = StringUtils.stripAccents("f}8b4::1h");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("f}8b4::1h", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("!f@1wj'|-jof", "!f@1wj'|-jof", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("0W");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0w", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.split("DefaultTimeZone", ">hr(a]~i&a9V~lpT");
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", (CharSequence[]) stringArray1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, stringArray1.length);
      assertEquals(5, int2);
      
      String string4 = StringUtils.abbreviate((String) null, 0);
      assertNull(string4);
      
      String string5 = StringUtils.swapCase("...");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 1145);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      int[] intArray0 = StringUtils.toCodePoints("0w");
      assertArrayEquals(new int[] {48, 119}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.getDigits("0w");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("0", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("", 5, "");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("     ", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("X~", (String[]) null, (String[]) null);
      assertEquals("X~", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)0;
      try { 
        StringUtils.toString(byteArray0, "X~");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "GCnB;c", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "?=4A";
      objectArray0[1] = (Object) "?=4A";
      objectArray0[2] = (Object) "?=4A";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "?=4A";
      String string0 = StringUtils.joinWith("?=4A", objectArray0);
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "?=4A?=4A?=4A?=4A?=4A?=4Ajava.lang.Object@40e1eea3?=4Ajava.lang.Object@13538bbb?=4A?=4A", (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("?=4A?=4A?=4A?=4A?=4A?=4Ajava.lang.Object@40e1eea3?=4Ajava.lang.Object@13538bbb?=4A?=4A");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat('P', (-1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.compare("a", "?=4A", true);
      assertFalse(int1 == int0);
      assertEquals(34, int1);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("[+WC6Q_xDmN|i[-B!x");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[+wc6q_xdmn|i[-b!x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("*cKw;", 3404);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("...");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Rt 'p2gvlC:AsRn9M", 234);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("                                                                                                            Rt 'p2gvlC:AsRn9M                                                                                                             ", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "[+WC6Q_xDmN|i[-B!x", (CharSequence) "", 302);
      assertEquals(18, int0);
      
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "*cKw;", (CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.chop("[+wc6q_xdmn|i[-b!x");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("[+wc6q_xdmn|i[-b!", string5);
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "...", (CharSequence) "", (-1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "", "[+wc6q_xdmn|i[-b!x");
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      int int0 = StringUtils.compare("uH,{T`]1_%LCP=", "Ux+ -hLSLk51-,hRjm7", true);
      assertEquals(32, int0);
      
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.swapCase("112p0p112p204p204p112p112p204");
      assertEquals("112P0P112P204P204P112P112P204", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "X~a+IG!wnwY_mld=+`lX7e+@M", (CharSequence) "uH,{T`]1_%LCP=", 1304);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '\\');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 160);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.swapCase("} k4o-xNSH~");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("} K4O-Xnsh~", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.unwrap((String) null, ')');
      assertNull(string5);
      
      String string6 = StringUtils.deleteWhitespace((String) null);
      assertNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "} k4o-xNSH~", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(int1 == int0);
      assertEquals(44, int1);
      
      String string7 = StringUtils.removePattern("} k4o-xNSH~", "1~Brut~I`g\">W");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("} k4o-xNSH~", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 4580);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.removeStart("Search and Replace array lengths don't match: ", (String) null);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match: ", string8);
      assertNotNull(string8);
      
      int int3 = StringUtils.lastOrdinalIndexOf("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) ')';
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 44;
      floatArray0[6] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '~', 0, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("OZ:360OO=`qpy6v`[?", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "OZ:360OO=`qpy6v`[?");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      String string3 = StringUtils.join(longArray0, '0');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("00000000000000000", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("~XU7k#WGp", 0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "00000000000000000", (CharSequence) "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.repeat("CartesianTest can not have a ", 20);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a ", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "-1WDn_:gDhdp&5", 20);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "-1WDn_:gDhdp&5", (CharSequence) "00000000000000000");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a CartesianTest can not have a ");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.repeat('{', (-1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y|lJY1", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'P');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Y|lJY1", 3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase((String) null, "", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(2, stringArray0.length);
      assertNull(string4);
      assertNotSame(stringArray0, stringArray1);
      
      String string5 = StringUtils.repeat("\r", (-3182));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "", (-3182));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Y|lJY1");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.overlay("Cannot clear and set the following entries at the same time: ", "", (-3182), (-1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Cannot clear and set the following entries at the same time: ", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Cannot clear and set the following entries at the same time: ", "Y|lJY1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "\r");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("hn520$77CakLEX5");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(7, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "", "Locale must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 797);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("Y|lJY1");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1YJl|Y", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Locale must not be null", (CharSequence) " ");
      assertEquals(22, int0);
      
      String string5 = StringUtils.substringAfterLast("Locale must not be null", "Locale must not be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("1YJl|Y", "1YJl|Y", "^Xd].X!?_#@#%siM@lz");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("^Xd].X!?_#@#%siM@lz", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripToNull("");
      assertNull(string7);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '?';
      charArray0[2] = ';';
      charArray0[3] = '?';
      charArray0[4] = ';';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.StringUtils", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {';', '?', ';', '?', ';'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      String string8 = StringUtils.join(floatArray0, 'g', 797, (-1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      String string9 = StringUtils.firstNonEmpty(stringArray0);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals(" ", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.substringAfterLast(" ", "");
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" must be static.", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.truncate("T=lrjQ9?`R=~]7", 2547);
      assertEquals("T=lrjQ9?`R=~]7", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "T=lrjQ9?`R=~]7", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = "\\";
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("1+Q,Gm<!pyLDq@gxBg");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      String string0 = StringUtils.stripEnd("d", "d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'G', (int) (byte) (-1), 402);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Z', (-682), 2151);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -682
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)35;
      String string0 = StringUtils.join(byteArray0, '3');
      assertArrayEquals(new byte[] {(byte)73, (byte)96, (byte) (-79), (byte)3, (byte)35}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("733963-7933335", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("733963-7933335", "733963-7933335");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "_LNjn.BYsSQmrP6q;8'K|,FW*..IZZSwV");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string0 = "\"^{ISRDSjD' ;h;Cya";
      String string1 = null;
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "\"^{ISRDSjD' ;h;Cya");
      assertNull(string2);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("3Zzy]`'r)g;QSv5jGZ)", stringArray0);
      assertEquals(14, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "{diplayName}");
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("", "u'wQg'D{zhlT?q");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("C)(_H+)aO_T<f+T", 'S', '<');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("C)(_H+)aO_T<f+T", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceFirst((String) null, "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.dL)Dce'Jbh?F_,", (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.defaultString("");
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "C)(_H+)aO_T<f+T", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(14, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("7B*K]9&!t+wte&q", "7B*K]9&!t+wte&q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("Fqas", 430);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Fqas", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("l", 'l');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("b/cqu7EB(`<2Va<");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("b/cqu7eb(`<2va<", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("ItsoL{PC4_y", "Minimum abbreviation width is %d");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "X~", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((List<?>) null, 'x', (-320), (-1022));
      assertNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('l'));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.left("dTD%s was not annotated with @ArgumentsSource but should have been.", 2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("dT", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("b/cqu7eb(`<2va<", (-1022));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "&>V8<d8)Jl8oTB>S", (CharSequence) "&>V8<d8)Jl8oTB>S");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y|lJY1", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'P');
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replace("", "", "");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("i.U[x\"G4tIp.$SH", "", 18);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("i.U[x\"G4tIp.$SH", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("org.apache.commons.lang3.StringUtils");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("slitUgnirtS.3gnal.snommoc.ehcapa.gro", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(47, int0);
      
      String string7 = StringUtils.substringAfterLast("", "hmpCi");
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceIgnoreCase("offset cannot be negative", "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (String) null);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("offset cannot be negative", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripToNull("\r");
      assertNull(string9);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = '?';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      charArray0[4] = 'P';
      charArray0[5] = ';';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "hmpCi", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'P', '?', 'P', 'P', 'P', ';'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "offset cannot be negative");
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("51`Q", 'G');
      assertTrue(string1.equals((Object)string0));
      assertEquals("51`Q", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("51`Q");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("', is neither of type Map.Entry nor an Array").when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("Execution of '%s' took [%d] ms.", "<Bb[4:!4m;[s");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.capitalize("', is neither of type Map.Entry nor an Array");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("8", "]3VTD=ve~");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("]3VTD=ve~", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("51`Q");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.capitalize("()` not found in ");
      assertEquals("()` not found in ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.appendIfMissing("', is neither of type Map.Entry nor an Array", "[+WC6Q_xDmN|i[-B!x", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("', is neither of type Map.Entry nor an Array[+WC6Q_xDmN|i[-B!x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEach("Locale must not be null", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("Locale must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "[+WC6Q_xDmN|i[-B!x", (CharSequence) "', is neither of type Map.Entry nor an Array[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.stripAccents("*pjg{S|?c");
      assertEquals("*pjg{S|?c", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("*pjg{S|?c");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*pjg{S|?c";
      stringArray0[1] = "*pjg{S|?c";
      stringArray0[2] = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Z;KxOXPJqv6|sFe#";
      stringArray0[1] = "Z;KxOXPJqv6|sFe#";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Z;KxOXPJqv6|sFe#", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/&UI3:s{z-f5{`");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("/&UI3:s{z-f5{`", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceEachRepeatedly("]=Rr$S|:PG^2)BjIF", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("]=Rr$S|:PG^2)BjIF", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("/&UI3:s{z-f5{`");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.replaceEachRepeatedly("_!m|T( k(2R", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("_!m|T( k(2R", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("_!m|T( k(2R", (-1886));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "B";
      stringArray0[5] = "_i&|";
      String string0 = StringUtils.wrapIfMissing("1+Q,Gm<!pyq@gxBg", '<');
      assertEquals("<1+Q,Gm<!pyq@gxBg<", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("', is neither of type Map.Entry nor an Array", "<1+Q,Gm<!pyq@gxBg<", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("', is neither of type Map.Entry nor an Array<1+Q,Gm<!pyq@gxBg<", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEach("<1+Q,Gm<!pyq@gxBg<", stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("<1+Q,Gm<!pyq@gxBg<", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "<1+Q,Gm<!pyq@gxBg<", (CharSequence) "<1+Q,Gm<!pyq@gxBg<");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("_U");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Y|lJY1";
      stringArray0[2] = "FOh";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("FOh", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode[] locale_FilteringModeArray1 = linkedList0.toArray(locale_FilteringModeArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals(7, locale_FilteringModeArray0.length);
      assertEquals(7, locale_FilteringModeArray1.length);
      assertNotNull(locale_FilteringModeArray1);
      assertSame(locale_FilteringModeArray0, locale_FilteringModeArray1);
      assertSame(locale_FilteringModeArray1, locale_FilteringModeArray0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.strip("Cloneable type ", "Cloneable type ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cloneable type ", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("Cloneable type ", 'a');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cloneble type ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "gB!Q7'1.h", (CharSequence) "gB!Q7'1.h");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceAll("TONb|/efDVPr.*Iz:Qh", "Cloneble type ", "v*9^WlJ5iWeePiLocale must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("TONb|/efDVPr.*Iz:Qh", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("TONb|/efDVPr.*Iz:Qh", "Cloneble type ", (int) 'a');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("TONb|/efDVPr.*Iz:Qh", "v*9^WlJ5iWeePiLocale must not be null", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(5, stringArray0.length);
      assertEquals("v*9^WlJ5iWeePiLocale must not be nullTONb|/efDVPr.*Iz:Qh", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "v*9^WlJ5iWeePiLocale must not be nullTONb|/efDVPr.*Iz:Qh", (CharSequence) "TONb|/efDVPr.*Iz:Qh");
      assertFalse(int1 == int0);
      assertEquals(37, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "TONb|/efDVPr.*Iz:Qh", 1171);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.abbreviateMiddle("", string3, (-2101));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("WP", "$.o?',+_O_aq9{|)vxu", (-2101));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isBlank("TONb|/efDVPr.*Iz:Qh");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = StringUtils.unwrap("[+WC6Q_xDmN|i&[-B!x", '\u0000');
      assertEquals("[+WC6Q_xDmN|i&[-B!x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.repeat('J', (-201));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootUpperCase("Locale must no");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("LOCALE MUST NO", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('u', 0);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      double double0 = StringUtils.getJaroWinklerDistance("1", "");
      assertEquals(0.0, double0, 0.01);
      
      String string7 = StringUtils.wrap("9", 'I');
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("I9I", string7);
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-2980), 7);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.substringBetween("9", "Locale must no");
      assertNull(string8);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";9oZE;3,&EZFJkKUj}", 'I');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) 'Z';
      intArray0[1] = 7;
      intArray0[2] = (int) 'I';
      intArray0[3] = (int) 'F';
      intArray0[4] = (int) 'I';
      intArray0[5] = 7;
      String string9 = StringUtils.join(intArray0, '&', 171, 73);
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertArrayEquals(new int[] {90, 7, 73, 70, 73, 7}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing(" vs ", "W(", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals(" vs W(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("CG^'1C!48Uu/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-6399), (-386));
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 3006);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.apache.commons.lang3.CharUtils";
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "_iD&|k", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1(3", (CharSequence) "1+Q,Gm<!pyq@gxBg", 966);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("1(3", "org.apache.commons.lang3.CharUtils");
      assertEquals(0.0, double0, 0.01);
      
      String string0 = StringUtils.substring((String) null, (-1), 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "1(3", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("1+Q,Gm<!pyq@gxBg");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'P', (-1172), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1172
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.rightPad("D> ,QA^r", 29);
      assertEquals("D> ,QA^r                     ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("_LNjn.BYsSQmrP6q;8'", 29, '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("=====_LNjn.BYsSQmrP6q;8'=====", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v*9^WlJ5iWeePi";
      stringArray0[1] = "J~KFidT%[$";
      stringArray0[2] = "D> ,QA^r";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "![w|'MY\"=I7@J![w|'MY\"=I7@J");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.normalizeSpace("J~KFidT%[$");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("J~KFidT%[$", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '=', (-3235), 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3235
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rotate("The type must not be null", 76);
      assertEquals("lThe type must not be nul", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("The type must not be null"));
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(stack1.contains("The type must not be null"));
      assertNotNull(stack1);
      
      boolean boolean0 = stack1.add("The type must not be null");
      assertFalse(stack1.isEmpty());
      assertEquals("[The type must not be null]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.contains("The type must not be null"));
      assertFalse(stack1.contains(string0));
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      
      boolean boolean1 = stack1.add("3g{FY4359gG-Z");
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(2, stack1.size());
      assertEquals("[The type must not be null, 3g{FY4359gG-Z]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertTrue(stack1.contains("The type must not be null"));
      assertFalse(stack1.contains(string0));
      assertTrue(boolean1);
      assertNotSame(stack1, stack0);
      
      String string2 = StringUtils.join((List<?>) null, 'A', 76, (-1381));
      assertNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("The type must not be null"));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.substring((String) null, 208);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("BSd.dqt%n0:)55zW}u", (-1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("BSd.dqt%n0:)55zW}u", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd(";2wU(+N;!\"]4nuQ", "Minimum abbreviation width with offset is %d");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(";2wU(+N;!\"]4nuQ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.stripAccents("");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 160);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.swapCase("} k4o-xNSH~");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("} K4O-Xnsh~", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.stripAccents("} K4O-Xnsh~");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("} K4O-Xnsh~", string5);
      assertNotNull(string5);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-3382);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      String string6 = StringUtils.join(doubleArray0, 'i', 1764, (-3382));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new double[] {8.0, (-1.0), (-3382.0), 0.0, 8.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.uncapitalize("ELU+.xeU)MO=)/");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertEquals("ELU+.xeU)MO=)/", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("qU,yY00$};", "Object varargs must not be null", false);
      assertEquals(2, int0);
      
      String string0 = StringUtils.getDigits("uY=3KqN 5Kq");
      assertEquals("35", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Object varargs must not be null", "35");
      assertEquals(0.0, double0, 0.01);
      
      int int1 = StringUtils.indexOf((CharSequence) "Object varargs must not be null", 3432);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compare("qU,yY00$};", "35");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(62, int2);
      
      String string1 = StringUtils.substringBefore("7", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull(".)8`p-4be$5j");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".)8`p-4be$5j", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst(".)8`p-4be$5j", "'4`9g*HM", ">)m");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".)8`p-4be$5j", string3);
      assertNotNull(string3);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.iterator();
      assertFalse(treeSet0.contains(string1));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, "7");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(treeSet0.contains(string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) ".)8`p-4be$5j";
      objectArray0[1] = (Object) ".)8`p-4be$5j";
      objectArray0[2] = (Object) "uY=3KqN 5Kq";
      objectArray0[3] = (Object) ".)8`p-4be$5j";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "uY=3KqN 5Kq";
      objectArray0[6] = (Object) "35";
      objectArray0[7] = (Object) "uY=3KqN 5Kq";
      objectArray0[8] = (Object) "qU,yY00$};";
      String string5 = StringUtils.joinWith("uY=3KqN 5Kq", objectArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(9, objectArray0.length);
      assertEquals(".)8`p-4be$5juY=3KqN 5Kq.)8`p-4be$5juY=3KqN 5KquY=3KqN 5KquY=3KqN 5Kq.)8`p-4be$5juY=3KqN 5KquY=3KqN 5KquY=3KqN 5KquY=3KqN 5Kq35uY=3KqN 5KquY=3KqN 5KquY=3KqN 5KqqU,yY00$};", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.substringBefore("null/empty items", (String) null);
      assertEquals("null/empty items", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = "Iw;e\\ih8bYgT";
      String string1 = StringUtils.rightPad("Iw;eih8bYgT", 8192);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("Iw;eih8bYgT", 25, 'V');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("VVVVVVIw;eih8bYgTVVVVVVV", string2);
      assertNotNull(string2);
      
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string3 = StringUtils.right("/ANtz j$", 8192);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/ANtz j$", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((byte[]) null, 'A');
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.prependIfMissing(">P<\u0001CFOzauyl", "\u0007R76i(BW8ACq", charSequenceArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("\u0007R76i(BW8ACq>P<\u0001CFOzauyl", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0007R76i(BW8ACq>P<\u0001CFOzauyl", (CharSequence) ">P<\u0001CFOzauyl");
      assertEquals(12, int0);
      
      // Undeclared exception!
      StringUtils.rightPad("VVVVVVIw;eih8bYgTVVVVVV", 2357);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("R");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("R");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.overlay("", "", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "7";
      stringArray1[1] = "The type must not be null";
      stringArray1[2] = "\u0007R76i(BW8ACq";
      stringArray1[3] = "VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV";
      String string2 = StringUtils.toRootUpperCase("7");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7", string2);
      assertNotNull(string2);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(29);
      assertTrue(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(29, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(29, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(29, byteBuffer0.limit());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=29 cap=29]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      String string3 = StringUtils.wrap("Locale must no", 'G');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("GLocale must noG", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The type must not be null", 1468, (-14));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringBetween("K*Yz6", "StdIoExtension is active but no %s annotation was found.");
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV", (CharSequence) "The type must not be null");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.overlay("+gq:)Z7q ", "7", (-1), (-1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("7+gq:)Z7q ", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      String string2 = StringUtils.center("*9^WlJ5iWeePiv", (-3511), '|');
      assertTrue(string2.equals((Object)string0));
      assertEquals("*9^WlJ5iWeePiv", string2);
      assertNotNull(string2);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = " $vgx";
      stringArray0[2] = "*9^WlJ5iWeePiv";
      stringArray0[3] = "Nq;iJUsxpi3";
      stringArray0[4] = "*9^WlJ5iWeePiv";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*9^WlJ5iWeePiv");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = "_LNjn.BYsSQmrP6q;8'K|,FW*..IZZSwV";
      String string4 = StringUtils.normalizeSpace(" $vgx");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("$vgx", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) stringArray1, 'Y', (-3235), (-3511));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        Charset.forName("matches '%s'.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // matches '%s'.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("s{,\""));
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(stack1.contains("s{,\""));
      assertNotNull(stack1);
      
      Stream<String> stream0 = stack1.parallelStream();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(stack1.contains("s{,\""));
      assertNotNull(stream0);
      assertNotSame(stack1, stack0);
      
      boolean boolean0 = stack1.add("%A/v+X%tr$A3>:Pg6eS");
      assertEquals("[%A/v+X%tr$A3>:Pg6eS]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(stack1.contains("%A/v+X%tr$A3>:Pg6eS"));
      assertFalse(stack1.contains("s{,\""));
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      
      String string1 = StringUtils.join((List<?>) stack1, 'V', 2316, (-239));
      assertEquals("[%A/v+X%tr$A3>:Pg6eS]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(1, stack1.size());
      assertFalse(stack1.empty());
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(stack1.contains("%A/v+X%tr$A3>:Pg6eS"));
      assertFalse(stack1.contains("s{,\""));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(stack1, stack0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("The type must not be null"));
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.substring("The type must not be null", 29);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("1ZO", 29);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("                          1ZO", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd(";rZhCg8}*a}a", "hmpCi");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(";rZhCg8}*a}a", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("", "s{,\"", (-239));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 160);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.wrap("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", 'I');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Iorg.junitpioneer.jupiter.CartesianValueArgumentsProviderI", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 51);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBetween("", "");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 160;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 51;
      floatArray0[3] = (float) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'I', 0, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY*h1", "Y|lJY*h1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      String string1 = StringUtils.join(byteArray0, 'b');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)6, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("6b0", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 31, 52);
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(52);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Y|lJY*h1"));
      assertNotNull(arrayList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEnd("", "Y|lJY*h1");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.wrap("6l-", 'I');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("I6l-I", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "I6l-I", 100, 31);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.substringBetween("Y|lJY*h1", "(F#");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1246L;
      longArray0[5] = 584L;
      longArray0[6] = 575L;
      String string0 = StringUtils.removeStartIgnoreCase("\"^{ISRDSjD' ;h;Cya", "|nt(&LrRV");
      assertEquals("\"^{ISRDSjD' ;h;Cya", string0);
      assertNotNull(string0);
      
      String string1 = "J$^tP^!+M-Db(2E";
      String string2 = StringUtils.swapCase("\"^{ISRDSjD' ;h;Cya");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"^{isrdsJd' ;H;cYA", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\"^{ISRDSjD' ;h;Cya", (CharSequence) "J$^tP^!+M-Db(2E", 16);
      assertEquals((-1), int0);
      
      String string3 = "org.apache.commons.lang3.CharSequenceUtils";
      String string4 = "p1klL-lT&OY:7vt@;";
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.CharSequenceUtils", "p1klL-lT&OY:7vt@;");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\"^{ISRDSjD' ;h;Cya";
      String string5 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertEquals("\"^{ISRDSjD' ;h;Cya", string5);
      assertNotNull(string5);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "|nt(&LrRV", (CharSequence[]) stringArray1);
      assertTrue(int1 == int0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertEquals((-1), int1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\"^{ISRDSjD' ;h;Cya", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "R", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "R", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.right("ZL#GdYt>", (-2147483629));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("org.junitpioneer.jupiter.params.Range");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("8ZEaR", 'p');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("p8ZEaRp", string5);
      assertNotNull(string5);
      
      int[] intArray0 = new int[0];
      String string6 = StringUtils.join(intArray0, 'M');
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("p8ZEaRp", (-2147483629), "^~cAbCId <q(8Wj");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("p8ZEaRp", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("J1Fj>ggi-9q#_Ux", "]\"cRI&tb6U`bN=");
      assertEquals("J1Fj>ggi-9q#_Ux", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("maxWith cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxwith cannot be negative", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("1", 'M');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.left("J1Fj>ggi-9q#_Ux", 514);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("J1Fj>ggi-9q#_Ux", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("F", "a+IG!wnwY_mld=+`lXX~");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("F", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1", (CharSequence) "...");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string6 = StringUtils.upperCase("4[YfcP:@n7q", locale1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("4[YFCP:@N7Q", string6);
      assertNotNull(string6);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "4[YFCP:@N7Q", "maxwith cannot be negative");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String string0 = StringUtils.unwrap("z", ':');
      assertEquals("z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rotate("", (-31));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("Cannot clone Cloneable type ", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.prependIfMissing("_bDX[2Xb ", "_bDX[2Xb ", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("_bDX[2Xb ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("_bDX[2Xb ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultIfEmpty("Cannot clone Cloneable type ", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cannot clone Cloneable type ", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string3 = "eRIkJyw k^e0[AxI+q";
      String string4 = StringUtils.rightPad("_bDX[2Xb ", (-1), 'f');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("_bDX[2Xb ", string4);
      assertNotNull(string4);
      
      String string5 = "pYJ\\T{{hF+&";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("pYJT{{hF+&", "_bDX[2Xb ", (-4573));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("No instructions to disable", "_bDX[2Xb ", "Minimum abbreviation width with offset is %d");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // _bDX[2Xb 
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("4b$2h{", "4b$2h{", "4b$2h{");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // 4b$2h{
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.strip("&3)nn_N#GMA", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string0));
      assertEquals("&3)nn_N#GM", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '5');
      assertNull(string4);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-375);
      intArray0[1] = 9;
      intArray0[2] = (int) '@';
      intArray0[3] = (int) 'p';
      intArray0[4] = (-2290);
      String string5 = StringUtils.join(intArray0, 'M');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertArrayEquals(new int[] {(-375), 9, 64, 112, (-2290)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("-375M9M64M112M-2290", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("[+WC6Q_xDmN|i[-B!x", 9, "\"@TOEPFCry/\u0000NzL");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("[+WC6Q_xDmN|i[-B!x", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      String string0 = StringUtils.remove("owm>w),!}N$3vyux", 'm');
      assertEquals("ow>w),!}N$3vyux", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale_FilteringModeArray0[2] = locale_FilteringMode2;
      Locale.FilteringMode[] locale_FilteringModeArray1 = linkedList0.toArray(locale_FilteringModeArray0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals(3, locale_FilteringModeArray0.length);
      assertEquals(3, locale_FilteringModeArray1.length);
      assertNotNull(locale_FilteringModeArray1);
      assertSame(locale_FilteringModeArray0, locale_FilteringModeArray1);
      assertSame(locale_FilteringModeArray1, locale_FilteringModeArray0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.strip("Cloneable type ", "Cloneable type ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cloneable type ", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("Cloneable type ", 'a');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cloneble type ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "gB!Q7'1.h", (CharSequence) "gB!Q7'1.h");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceAll("TONb|/efDVPr.*Iz:Qh", "Cloneble type ", "v*9^WlJ5iWeePiLocale must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("TONb|/efDVPr.*Iz:Qh", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring(":G;", 418);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("TONb|/efDVPr.*Iz:Qh");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("tonB|/EFdvpR.*iZ:qH", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("|A6j6N&t}V!4(l<", 0, "NQwu>q\"^0");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("|A6j6N&t}V!4(l<", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.chop("i7$<;B SL");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("i7$<;B S", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center("Ux+ -hLSLk51-,hRjm7l", 102, 'E');
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEUx+ -hLSLk51-,hRjm7lEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string7);
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'B');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.removeStart("![w|'MY\"=I7@J", "![w|'MY\"=I7@J");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("![w|'MY\"=I7@J", "![w|'MY\"=I7@J");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substring("![w|'MY\"=I7@J", 1414, (-1421));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("![w|'MY\"=I7@J", "![w|'MY\"=I7@J");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.";
      String string4 = StringUtils.replaceOnce("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", "![w|'MY\"=I7@J", "![w|'MY\"=I7@J");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("", 'J', '-');
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("JJJ", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertArrayEquals(new char[] {'J', 'J', 'J'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.";
      // Undeclared exception!
      try { 
        charBuffer0.put("=DgC'YC$nY^-7b9Nc", 54, 54);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.strip("Cloneable type ", "Cloneable type ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cloneable type ", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Eti_qThG>TCWZ$<j[", "~XU7k#WGp");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'G';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'E', 'G'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.repeat("Eti_qThG>TCWZ$<j[", (-1073));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "Cloneable type ", supplier0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("Cloneable type ", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Cloneable type ", "Cloneable type ", 4663);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("Eti_qThG>TCWZ$<j[", 4663);
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      try { 
        StringUtils.getBytes("O_,4:7 k{XE&Yz", "gB!Q7'1.h");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'Y');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      String string2 = null;
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("51`Q");
      assertFalse(boolean0);
      
      String string4 = "0W";
      int int0 = StringUtils.compareIgnoreCase("Execution of '%s' took [%d] ms.", "0W", false);
      assertEquals(53, int0);
      
      String string5 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "0W", (CharSequence) null, 1619);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.";
      stringArray0[3] = null;
      stringArray0[4] = "uH,{T`]1_%LCP=";
      stringArray0[5] = null;
      char[] charArray0 = new char[9];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", (CharSequence) stringArray0[2], 26);
      assertEquals(8, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Y|lJY1", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'P');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("k+x&", " ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("k+x&", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("i.U[x\"G4tIp.$SH", "", 18);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("i.U[x\"G4tIp.$SH", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("org.apache.commons.lang3.StringUtils");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("slitUgnirtS.3gnal.snommoc.ehcapa.gro", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(47, int0);
      
      String string7 = StringUtils.substringAfterLast("k+x&", "hmpCi");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceIgnoreCase("offset cannot be negative", "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (String) null);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("offset cannot be negative", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripToNull("\r");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 2564);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "67.0");
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertFalse(arrayList0.contains(string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat((String) null, 94);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) " >hr(a]~i&a9V~lpT", 84);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4778);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = StringUtils.reverse("J(*");
      assertEquals("*(J", string0);
      assertNotNull(string0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*(J");
      assertEquals("*(J", stringWriter0.toString());
      assertEquals("*(J", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      stringWriter0.flush();
      assertEquals("*(J", stringWriter0.toString());
      assertSame(stringWriter0, stringWriter1);
      
      String string1 = StringUtils.center("OI'ZvU^0CL", 2, 'S');
      assertFalse(string1.equals((Object)string0));
      assertEquals("OI'ZvU^0CL", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 4778);
      assertEquals(0, int0);
      
      String string2 = StringUtils.reverseDelimited("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 'C');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("artesianTestExtensionCorg.junitpioneer.jupiter.cartesian.", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.junitpioneer.jupiter.cartesian.CartesianTestExtension";
      stringArray0[1] = "OI'ZvU^0CL";
      String string3 = StringUtils.replaceEachRepeatedly("Cm@JWH`", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("Cm@JWH`", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 'u');
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "artesianTestExtensionCorg.junitpioneer.jupiter.cartesian.", (-1260));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("offset cannot be negative", "offset cannot be negative", "", 0);
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("offset cannot be negative", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      String string2 = StringUtils.chomp("", "offset cannot be negative");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("offset cannot be negative", ';');
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("\n", "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\n", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", '|');
      assertEquals(0, int0);
      
      String string5 = StringUtils.removeStart("dL)Dce'Jbh?F_,", "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("dL)Dce'Jbh?F_,", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlphanumeric("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.getIfEmpty("T?HRG<i|Aas`]", (Supplier<String>) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("T?HRG<i|Aas`]", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split((String) null, "k\"2*nD {J-zj?hI!U");
      assertNull(stringArray0);
      
      String string7 = StringUtils.removePattern(",7J>@8=Kx", (String) null);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals(",7J>@8=Kx", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = StringUtils.rightPad("?4M.uf(.^\"Z8", 1853, '?');
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, string0, 3472);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'z', 10, 1853);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      String string0 = "1(3";
      stringArray0[1] = "1(3";
      stringArray0[5] = "_iD&|k";
      String string1 = StringUtils.join((Object[]) stringArray0, 'H');
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int0 = 12;
      String string2 = StringUtils.join(charArray0, '2', 12, 12);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "7-?6 ;'G)-jg7k#|,QF";
      String string4 = StringUtils.appendIfMissing("7-?6 ;'G)-jg7k#|,QF", "1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("7-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("';;d[{Ww~Jh[hC#uaW", 2533);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "7-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", (CharSequence) "1+Q,Gm<!pyq@gxBg");
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("7-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("1(3", "7-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", 2533);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.substringAfter("';;d[{Ww~Jh[hC#uaW", 2533);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = "O_,4:7 k{XE&Yz";
      try { 
        StringUtils.getBytes("@6HO1FWcm+Bt*s4cw/~", "O_,4:7 k{XE&Yz");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("3`}\"@U3:x", "3`}\"@U3:x", 154);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("[");
      assertEquals("[", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("[", "0W", false);
      assertEquals(43, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("Execution of '%s' took [%d] ms.", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Execution of '%s' took [%d] ms.", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("hM@rN|yF6dMkj~l\"", "Execution of '%s' took [%d] ms.");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'G';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'G';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Execution of '%s' took [%d] ms.", charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'Y', 'Y', 'G', 'Y', 'Y', 'G', 'Y', 'Y'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank("[");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("G...", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("$y[C/f0H+", "$y[C/f0H+", true);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("...", "G...", 0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'G';
      intArray0[1] = 160;
      String string5 = StringUtils.join(intArray0, 'N', 160, 13);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new int[] {71, 160}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "G...", (CharSequence) "...");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String string6 = StringUtils.replaceAll(">A\u0003Y+Q++fg~#", "-1WDn_:gDhdp&5", "^vILh;");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals(">A\u0003Y+Q++fg~#", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ">A\u0003Y+Q++fg~#", 65, 1325);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string7 = StringUtils.strip("org.apache.commons.lang3.StringUtils");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = StringUtils.rightPad(">hr(a]~i&a9V~lpT", 174);
      assertEquals(">hr(a]~i&a9V~lpT                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d/U*JG:rC.KC_`\"&T<g", '?', 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d/U*JG:rC.KC_`\"&T<g", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("MAAmcJ#)W2b#NX!");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maamcj#)w2b#nx!", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "maamcj#)w2b#nx!", (CharSequence) "MAAmcJ#)W2b#NX!");
      assertEquals(0, int0);
      
      String string3 = StringUtils.right("Minimum abbreviation width with offset is %d/U*JG:rC.KC_`\"&T<g", (-1007));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "VT0nQ)~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("n@03`rl Nn", 114, 1230);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceFirst("maxWith cannot be negative", "', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.defaultString("");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isWhitespace("', is neither of type Map.Entry nor an Array");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 20);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substringAfterLast("N", "maxWith cannot be negative");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("3'$(");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("3'$(", string5);
      assertNotNull(string5);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "8\"[");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("", 'J');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("7DHkgf", 'S');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7DHkgf", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("7DHkgf");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'q');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      StringWriter stringWriter0 = new StringWriter('A');
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "p{InCombiningDiacriticalMarks}+", 160, 256);
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "v", (CharSequence) "v");
      assertEquals("v", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'A');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.prependIfMissing(">P<\u0001CFOzauyl", ">P<\u0001CFOzauyl", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals(">P<\u0001CFOzauyl", string4);
      assertNotNull(string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "FgSB:", "FgSB:");
      assertEquals(0, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.substringBetween(": R", ": R", ": R");
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 1143, 1143);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = "@CartesianTest not found.";
      String string1 = StringUtils.leftPad("@CartesianTest not found.", (-4526), 'C');
      assertTrue(string1.equals((Object)string0));
      assertEquals("@CartesianTest not found.", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "nM=|%[Xom^*Y(4V");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("nM=|%[Xom^*Y(4V");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NM=|%[Xom^*Y(4V", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("nM=|%[Xom^*Y(4V", "nM=|%[Xom^*Y(4V");
      assertNull(string4);
      
      String string5 = StringUtils.removeStart("@CartesianTest not found.", "@CartesianTest not found.");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.swapCase(";=aN3o}0%_V[8:/im0");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(";=An3O}0%_v[8:/IM0", string6);
      assertNotNull(string6);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = stack0.add(locale_FilteringMode0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[AUTOSELECT_FILTERING]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.contains(locale_FilteringMode0));
      assertTrue(boolean1);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_FilteringMode1);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertNotNull(predicate0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      boolean boolean2 = stack0.removeIf(predicate0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[AUTOSELECT_FILTERING]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(stack0.contains(locale_FilteringMode1));
      assertTrue(stack0.contains(locale_FilteringMode0));
      assertFalse(boolean2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean3 = stack0.add(locale_FilteringMode2);
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[AUTOSELECT_FILTERING, MAP_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(stack0.contains(locale_FilteringMode1));
      assertTrue(stack0.contains(locale_FilteringMode2));
      assertTrue(boolean3);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, ";=An3O}0%_v[8:/IM0", (-4526), (-2918));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -4526
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'Y');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("51`Q");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Execution of '%s' took [%d] ms.", "0W", false);
      assertEquals(53, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.split("Execution of '%s' took [%d] ms.", "<Bb[4:!4m;[s");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      String string0 = StringUtils.remove("_GijPaco2f=$yk< {F", "_GijPaco2f=$yk< {F");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("CartesianProductTest can only take exactly one type of arguments source.", "-/WLjN2('1", (-1840700267));
      assertFalse(string1.equals((Object)string0));
      assertEquals("CartesianProductTest can only take exactly one type of arguments source.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-751));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("6iqsGwf!!D)#;3A|rU,", '2');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.toRootLowerCase("s{,\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("s{,\"", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "_LNjn.BYsSQmrP6q;8'", (CharSequence) "X~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((List<?>) null, '2', 25, 322);
      assertNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("The type must not be null"));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.left("The type must not be null", 19);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The type must not b", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("The type must not b", 19);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("The type must not b", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.strip("SG9%?H12");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("SG9%?H12", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Rz![mz{F?Il3";
      objectArray0[1] = (Object) "Rz![mz{F?Il3";
      String string0 = StringUtils.joinWith("Rz![mz{F?Il3", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("Rz![mz{F?Il3", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rotate((String) null, 1532);
      assertNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      Class<Object> class1 = Object.class;
      ServiceLoader<Object> serviceLoader1 = ServiceLoader.loadInstalled(class1);
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      String string2 = StringUtils.join(iterator0, "Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3");
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.mid("", 53, (-851));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[2] = (byte)76;
      String string6 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)76}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("\uFFFD\u0000L", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("\uFFFD\u0000L");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("\uFFFD\u0000", string7);
      assertNotNull(string7);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2422.68934703976;
      doubleArray0[1] = (double) 53;
      String string8 = StringUtils.join(doubleArray0, '6', (int) (byte)76, (int) (byte) (-109));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertArrayEquals(new double[] {2422.68934703976, 53.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.removeFirst("", "");
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 10);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("J1Fj>ggi-9q#_Ux", "]\"cRI&tb6U`bN=");
      assertEquals("J1Fj>ggi-9q#_Ux", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-2290);
      longArray0[5] = 1246L;
      longArray0[6] = 0L;
      String string2 = StringUtils.join(longArray0, 'M', 8192, 8192);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, (-2290L), 1246L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "J1Fj>ggi-9q#_Ux", (-822));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.lowerCase("maxWith cannot be negative");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("maxwith cannot be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("...");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "...";
      stringArray0[1] = "...";
      String string5 = StringUtils.join(stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(2, stringArray0.length);
      assertEquals("......", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("......", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "...", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "...";
      charSequenceArray1[1] = (CharSequence) "...";
      String string6 = StringUtils.removeEnd("...", "@6HO1FWcm+Bt*s4cw/~");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      charSequenceArray1[2] = (CharSequence) "...";
      boolean boolean1 = StringUtils.startsWithAny("...", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray1.length);
      assertTrue(boolean1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Threshold must not be negative", "61>V8Lf)n>8k", (String) null);
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-1300));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      String string2 = StringUtils.center((String) null, 100, 'G');
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "OI'ZvU^0CL", (CharSequence) "v*9^WlJ5iWeePi", 321);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.reverseDelimited("OI'ZvU^0CL", 'G');
      assertFalse(string3.equals((Object)string0));
      assertEquals("OI'ZvU^0CL", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("Could not resolve parameter of type %s.", 'F');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Could not resolve parameter of type %s.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "OI'ZvU^0CL", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(int1 == int0);
      assertEquals(56, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = '*';
      charArray0[2] = '~';
      charArray0[3] = 'C';
      String string6 = StringUtils.join(charArray0, 'q', 9, (-3235));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new char[] {'F', '*', '~', 'C'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = StringUtils.compare((String) null, "ptRV5]Co v))#,");
      assertEquals((-1), int0);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("blank_blank_blank_2014");
      assertEquals("blank_blank_blank_201", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, "1+Q,Gm<!pyq@gxBg", 1112);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("1+Q,Gm<!pyq@gxBg", "1+Q,Gm<!pyq@gxBg");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertFalse(string2.equals((Object)string1));
      assertEquals("X,M4x/#1`Ugk", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("vh.<wi/DhRdJ.4=|", "...", "NQwu>q\"^0");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("X,M4x/#1`Ugk", 418);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("vh.<wi/DhRdJ.4=|");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("VH.<WI/dHrDj.4=|", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("#H:b", (-1), "NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0=|");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("#H:b", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("VH.<WI/dHrDj.4=|");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("VH.<WI/dHrDj.4=", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.abbreviate("", 1215, (-1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String string0 = StringUtils.substringAfter("$JX}V", (-1886));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("3Zzy]`'r)g;QSv5jGZ)", stringArray0);
      assertEquals(14, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertNotNull(serviceLoader1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      
      String string1 = StringUtils.join(iterator0, "{diplayName}");
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(serviceLoader0.equals((Object)serviceLoader1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(class0, class1);
      assertNotSame(serviceLoader0, serviceLoader1);
      
      String string2 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(serviceLoader0.equals((Object)serviceLoader1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(class0, class1);
      assertNotSame(serviceLoader0, serviceLoader1);
      
      String string3 = StringUtils.substringAfter("", "u'wQg'D{zhlT?q");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Spliterator<String> spliterator0 = serviceLoader0.spliterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(serviceLoader0.equals((Object)serviceLoader1));
      assertNotNull(spliterator0);
      assertSame(class0, class1);
      assertNotSame(serviceLoader0, serviceLoader1);
      
      String string4 = StringUtils.replaceChars("C)(_H+)aO_T<f+T", 'S', '<');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("C)(_H+)aO_T<f+T", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceFirst((String) null, "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.dL)Dce'Jbh?F_,", (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.defaultString("");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "C)(_H+)aO_T<f+T", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(14, stringArray0.length);
      assertFalse(boolean1);
      
      String string7 = StringUtils.substringAfter("", 8192);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.strip("&3)nn_N#GMA", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string0));
      assertEquals("&3)nn_N#GM", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = '@';
      charArray0[2] = '?';
      charArray0[3] = '@';
      charArray0[4] = '@';
      charArray0[5] = '@';
      charArray0[6] = '@';
      charArray0[7] = '@';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'E', '@', '?', '@', '@', '@', '@', '@'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("[+WC6Q_xDmN|i[-B!x", " $vgx");
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "gB!Q7'1.h", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'E', '@', '?', '@', '@', '@', '@', '@'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat("[+WC6Q_xDmN|i[-B!x", (-1073));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("gB!Q7'1.h", "", 322);
      assertEquals(10, int0);
      
      String string4 = StringUtils.substringAfter("&3)nn_N#GM", 2290);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      try { 
        StringUtils.getBytes("[+WC6Q_xDmN|i[-B!x", "O_,4:7 k{XE&Yz");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '&');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      String string0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = "\"kZe8gERcm";
      String string2 = StringUtils.repeat("\"kZe8gERcm", 2580);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\"kZe8gERcm", (CharSequence) null, 2580);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "\"kZe8gERcm");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      StringUtils.containsWhitespace(string2);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("GCnB;c is not in the range '0' - '9'", "GCnB;c is not in the range '0' - '9'");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2125);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((Object[]) null, ',', 5, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.right("ZL#GdYt>", (-2147483629));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("org.junitpioneer.jupiter.params.Range");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'Z';
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "v*9^WlJ5iWeePi");
      assertNull(stringArray1);
      
      String string4 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(">hr(a]~i&a9V~lpT", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, 'Z', (-782), (-782));
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        Charset.forName("@'");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // @'
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.equalsAny("KJX}", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "KJX}", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "7";
      String string2 = StringUtils.removeStartIgnoreCase("', has a length less than 2", ";(V!X>!");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("', has a length less than 2", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("s=S0k]ZklW>Er<*m@");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("S=s0K]zKLw>eR<*M@", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7", (CharSequence) "\u0007R76i(BW8ACq", 35);
      assertEquals(11, int0);
      
      String[] stringArray2 = StringUtils.split("s=S0k]ZklW>Er<*m@", "rsi!QR3R@p02t[y");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(3, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "S=s0K]zKLw>eR<*M@", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertEquals(7, stringArray1.length);
      assertEquals((-1), int1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.abbreviate("7", 62);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("7", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("Fn!F_=K]> ");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("fN!f_=k]> ", string6);
      assertNotNull(string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">hr(a]~i&a9V~lpT", (CharSequence) "The type must not be null", 62);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int[] intArray0 = StringUtils.toCodePoints("kCA<:Z+c9Tc,");
      assertEquals(12, intArray0.length);
      assertNotNull(intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 12;
      doubleArray0[4] = (double) 12;
      doubleArray0[5] = (double) 29;
      String string7 = StringUtils.join(doubleArray0, '3');
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertArrayEquals(new double[] {12.0, (-1.0), (-1.0), 12.0, 12.0, 29.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("12.03-1.03-1.0312.0312.0329.0", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, "1+Q,Gm<!pyq@gxBg", 1112);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("1+Q,Gm<!pyq@gxBg", "1+Q,Gm<!pyq@gxBg");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertFalse(string2.equals((Object)string1));
      assertEquals("X,M4x/#1`Ugk", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("vh.<wi/DhRdJ.4=|", "...", "NQwu>q\"^0");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0NQwu>q\"^0|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("X,M4x/#1`Ugk", 418);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("vh.<wi/DhRdJ.4=|");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("VH.<WI/dHrDj.4=|", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("#H:b", (-1), "cP,NkR^`u*efP9;k");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("#H:b", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("VH.<WI/dHrDj.4=|");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("VH.<WI/dHrDj.4=", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.center("", 1112, '=');
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.isBlank("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "A8?:PQpEnCr", 8, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 13
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.", "n", (-1));
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "n";
      charSequenceArray0[1] = (CharSequence) "Using both name and index parameter targeting in a single @DisableIfArgument is not permitted.";
      charSequenceArray0[2] = (CharSequence) "n";
      charSequenceArray0[3] = (CharSequence) "n";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, "SEG]");
      assertEquals("SEG]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      char char0 = 'G';
      String string2 = StringUtils.join((Object[]) null, 'G');
      assertNull(string2);
      
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("N", "Y|lJY1", 98);
      assertFalse(string4.equals((Object)string3));
      assertEquals("N", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("$y[C/f0H+");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("$y[C/f0H+", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "$y[C/f0H+", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "c$gc");
      assertNull(stringArray0);
      
      String string6 = StringUtils.reverse("");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      char char1 = 'B';
      String string7 = StringUtils.unwrap("org.apache.commons.lang3.ArrayUtils", 'B');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Y|lJY1", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("s:)Ho.e(FZPs]\"[9TWi", (-5186));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("Ux+ -hLSLk51-,hRjm7", ";7K#R92[3*}\"n*", (-5186));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceAll(" ", "Illegal range. The step cannot be zero.", "{arguments}");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("{arguments}", (-5186), "SQR1=8u<");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{arguments}", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty((String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Ux+ -hLSLk51-,hRjm7"));
      assertNotNull(linkedHashSet0);
      
      String string6 = StringUtils.join((Iterable<?>) linkedHashSet0, ':');
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(linkedHashSet0.contains("Ux+ -hLSLk51-,hRjm7"));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "SQR1=8u<", (CharSequence) "SQR1=8u<");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("3");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("3", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = " ";
      int int0 = 2;
      String string1 = StringUtils.mid(" ", 2, 2);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString(" ", "");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      String string3 = StringUtils.wrap("The character must not be null", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherThe character must not be nullAborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of anotherThe character must not be nullAborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      
      String string4 = StringUtils.chop("T");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2));
      assertNotNull(arrayList0);
      
      int int1 = 40;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = arrayList0.add((Object) "Aborting to protect against StackOverflowError - output of one loop is the input of anotherThe character must not be nullAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(arrayList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of anotherThe character must not be nullAborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(arrayList0.contains(2));
      assertTrue(boolean2);
      
      arrayList0.forEach(consumer0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of anotherThe character must not be nullAborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(arrayList0.contains(2));
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of anotherThe character must not be nullAborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(arrayList0.contains(2));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 40
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.difference("", "#tjH,%vIvu");
      assertEquals("#tjH,%vIvu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "#tjH,%vIvu", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfterLast("", (-1348));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.wrapIfMissing("v+W,jo", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("v+W,jo", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll("", "Minimum abbreviation width with offset is %d", ", Length: 0");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("f(", "f(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.upperCase("_@#-i");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_@#-I", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate(" ", 57, 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";F[s>^q-<wt&13Qa");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.mid(" ", 1575, 1550);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("_@#-I", "_@#-i");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("_@#-I", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center((String) null, 1324);
      assertNull(string7);
      
      String string8 = StringUtils.mid("", 57, 1263);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.wrap("*4*[Etb.E\"aN/-|Z", "Threshold must not be negative");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertEquals("Threshold must not be negative*4*[Etb.E\"aN/-|ZThreshold must not be negative", string9);
      assertNotNull(string9);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(13, stringArray0.length);
      assertEquals(0, int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string10 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string10);
      
      String string11 = StringUtils.stripToEmpty((String) null);
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rotate("", (-31));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[2] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[3] = (CharSequence) "Cannot clone Cloneable type ";
      String string1 = StringUtils.appendIfMissing("Cannot clone Cloneable type ", "Cannot clone Cloneable type ", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Cannot clone Cloneable type ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[0], (-3392), (-31));
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3392);
      intArray0[1] = (-31);
      intArray0[2] = (-3392);
      intArray0[3] = (-1);
      intArray0[4] = (-31);
      intArray0[5] = (-1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)49;
      String string3 = StringUtils.join(byteArray0, 'u');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)3, (byte)49}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals("3u49", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[2]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", charSequenceArray0[2]);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("+pc|_dXmC4=1>m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.wrap("", 'F');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Object varargs must not be null");
      assertNull(stringArray0);
      
      String string5 = StringUtils.remove("rl", '=');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("rl", string5);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAllLowerCase("bM\u0001/wX<~@g#q");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.left((String) null, 2);
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd("a+IG!wnwY_mld=+`lXX~", "");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("a+IG!wnwY_mld=+`lXX~", string7);
      assertNotNull(string7);
      
      boolean boolean3 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string8 = StringUtils.wrap("", '}');
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string9 = StringUtils.join(iterator0, '#');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string2));
      assertEquals("", string9);
      assertNotNull(string9);
      
      boolean boolean4 = StringUtils.isAlphaSpace("");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[4] = "";
      String string0 = StringUtils.swapCase("8.k|cd4=_hZ[2Yu+~;e");
      assertEquals("8.K|CD4=_Hz[2yU+~;E", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "1+Q,Gm<!pyq@gxBg", 35);
      assertEquals(16, int0);
      
      String[] stringArray1 = StringUtils.split("|nt(&LrRV", "8.K|CD4=_Hz[2yU+~;E");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray1.length);
      assertEquals("nt(&LrRV", string1);
      assertNotNull(string1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "8.k|cd4=_hZ[2Yu+~;e", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.left(stringArray0[3], Integer.MIN_VALUE);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(8, stringArray0.length);
      assertNull(string2);
      assertNotSame(stringArray0, stringArray1);
      
      String string3 = StringUtils.truncate("%(@~lfU<(W@`Q", 514);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%(@~lfU<(W@`Q", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-751));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("6iqsGwf!!D)#;3A|rU,", '2');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("a+IG!wnwY_mld=+`lX", "X~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("X~a+IG!wnwY_mld=+`lXX~", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("s{,\"");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("s{,\"", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "_LNjn.BYsSQmrP6q;8'", (CharSequence) "X~");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((List<?>) null, '2', 25, 322);
      assertNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("a+IG!wnwY_mld=+`lX"));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.replaceAll("org.junitpioneer.jupiter.DefaultTimeZoneExtension", (String) null, "6iqsGwf!!D)#;3A|rU,");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("X~a+IG!wnwY_mld=+`lXX~", 322, "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("X~a+IG!wnwY_mld=+`lXX~Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same t", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("X~a+IG!wnwY_mld=+`lXX~Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same t");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("X~a+IG!wnwY_mld=+`lXX~Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same t", string6);
      assertNotNull(string6);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("a+IG!wnwY_mld=+`lX"));
      assertNotNull(linkedHashSet0);
      
      String string7 = StringUtils.join((Iterable<?>) null, '2');
      assertNull(string7);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("6iqsGwf!!D)#;3A|rU,", "6iqsGwf!!D)#;3A|rU,");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'T');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "eGYk<p|", "eGYk<p|");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = "ZL#GdYt>";
      String string3 = StringUtils.right("ZL#GdYt>", (-2147483629));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("org.junitpioneer.jupiter.params.Range");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "|BYk<pn", "|BYk<pn");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(charSequence0);
      assertSame(stringArray0, stringArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals(0, stringArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
      assertSame(stringArray0, stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("", "n0.{xYdj<@IQr)mr");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // n0.{xYdj<@IQr)mr
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("7B*K]9&!t+wte&q", "7B*K]9&!t+wte&q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("", 430);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "7B*K]9&!t+wte&q");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "7B*K]9&!t+wte&q", 4);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("The type must not be null", "a+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substring("", (-3409), 430);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "7B*K]9&!t+wte&q", (CharSequence) "Object varargs must not be null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-2252));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string4);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.chomp("");
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int2 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      String string6 = StringUtils.repeat("", "Object varargs must not be null", (-2252));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string7);
      
      String string8 = StringUtils.join((int[]) null, 'e', 0, (-693));
      assertNull(string8);
      
      int int3 = StringUtils.compareIgnoreCase("", "v*9^WlJ5iWeePiLocale must not be null");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-37), int3);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Rz![mz{F?Il3";
      objectArray0[1] = (Object) "Rz![mz{F?Il3";
      String string0 = StringUtils.trimToNull("Rz![mz{F?Il3");
      assertEquals("Rz![mz{F?Il3", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("{index}", 'M');
      assertFalse(string1.equals((Object)string0));
      assertEquals("M{index}M", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '~');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("/U*JG:rC.KC_`\"&T<g", 3, "J%TrO");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("/U*JG:rC.KC_`\"&T<g", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-380L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1246L;
      longArray0[5] = 584L;
      longArray0[6] = 575L;
      longArray0[7] = 1454L;
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.trimToNull("*sa%wRj`T-");
      assertEquals("*sa%wRj`T-", string0);
      assertNotNull(string0);
      
      charSequenceArray0[6] = (CharSequence) "*sa%wRj`T-";
      String string1 = StringUtils.wrapIfMissing("2[1", 'p');
      assertFalse(string1.equals((Object)string0));
      assertEquals("p2[1p", string1);
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2290);
      intArray0[1] = (int) 'M';
      intArray0[2] = (int) 'M';
      intArray0[3] = (-2290);
      intArray0[4] = (int) 'p';
      String string2 = StringUtils.join(intArray0, 'p');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {(-2290), 77, 77, (-2290), 112}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals("-2290p77p77p-2290p112", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Extension context \"", 944, "*sa%wRj`T-");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Extension context \"*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%wRj`T-*sa%w", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (int) 'D';
      intArray0[3] = 1354;
      String string0 = StringUtils.join(intArray0, 'D');
      assertArrayEquals(new int[] {0, 68, 0, 1354}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("0D68D0D1354", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type ust not be null", "The type ust not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad("V?Z%dWA>]]IO#6", 2);
      assertEquals("V?Z%dWA>]]IO#6", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "V?Z%dWA>]]IO#6", "R");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.rotate("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'a');
      assertNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      String string2 = StringUtils.join((List<?>) stack0, 'G', 1200, 13);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(string2.equals((Object)string0));
      assertFalse(stack0.contains(string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(0));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.substring("", 13);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("S0]B|`Ty(h5VT+", (-473));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("S0]B|`Ty(h5VT+", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("", "S0]B|`Ty(h5VT+");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("Ux+ -hLSLk51-,hRjm7Q8SII)[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("%s was not annotated with @ArgumentsSource but should have been.", "[");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("[", 'J');
      assertFalse(string1.equals((Object)string0));
      assertEquals("[", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("<8kYN`y2}:D0h", '=');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<8kYN`y2}:D0h", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("[");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "$JX}V", '!');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("H/S8h2!'8", (-751));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("6iqsGwf!!D)#;3A|rU,", '2');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.toRootLowerCase("s{,\"");
      assertFalse(string1.equals((Object)string0));
      assertEquals("s{,\"", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "H/S8h2!'8", (CharSequence) "X~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((List<?>) null, '2', 25, 322);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter("The type must not be null", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse("H/S8h2!'8");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("8'!2h8S/H", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "8'!2h8S/H", (CharSequence) "8'!2h8S/H");
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringAfterLast("pxE6M}_Cv 07qz=jA$", "pSLCYLyk?*");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.exception.CloneFailedException", "Strings must not be null", (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripToNull("%s does not implement the CartesianArgumentsProvider interface.");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("%s does not implement the CartesianArgumentsProvider interface.", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.join((byte[]) null, 'h', (-1983), 0);
      assertNull(string8);
      
      String string9 = StringUtils.getIfEmpty("X~", (Supplier<String>) null);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertEquals("X~", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'X');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'Y');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("51`Q");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Execution of '%s' took [%d] ms.", "0W", false);
      assertEquals(53, int0);
      
      String string3 = StringUtils.repeat("", "", (-6));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("51`Q", "Execution of '%s' took [%d] ms.");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("51`Q", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((int[]) null, 'A', (-2543), (-2543));
      assertNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "0W", 14, (-2543));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)98;
      String string6 = StringUtils.join(byteArray0, 'G', 322, (int) (byte)111);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertArrayEquals(new byte[] {(byte)5, (byte) (-121), (byte) (-68), (byte)100, (byte) (-63), (byte)111, (byte)89, (byte)98}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = "$JX}V";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$JX}V";
      stringArray0[1] = "$JX}V";
      stringArray0[3] = "$JX}V";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("$JX}V", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Le1DDf6(", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ">hr(a]~i&a9V~lpT", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">hr(a]~i&a9V~lpT", (CharSequence) ">hr(a]~i&a9V~lpT", 1867);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      double double0 = StringUtils.getJaroWinklerDistance(">hr(a]~i&a9V~lpT", "Le1DDf6(");
      assertEquals(0.4, double0, 0.01);
      
      String string2 = StringUtils.substring("org.apache.commons.lang3.StringUtils", 64, 86);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{}";
      stringArray0[1] = "";
      stringArray0[2] = "Le1DDf6(";
      stringArray0[3] = "{}";
      stringArray0[4] = "Le1DDf6(";
      stringArray0[5] = "Le1DDf6(";
      stringArray0[6] = ">hr(a]~i&a9V~lpT";
      stringArray0[7] = "";
      stringArray0[8] = "Le1DDf6(";
      String string3 = StringUtils.replaceEach("{}", stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertEquals("{}", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "{}", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string4 = StringUtils.upperCase("{}", locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("{}", string4);
      assertNotNull(string4);
      assertSame(locale0, locale1);
      
      int int3 = StringUtils.countMatches((CharSequence) "{}", '*');
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      String string5 = StringUtils.join((char[]) null, '2', (-1), 1509);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Locale must not be null";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Locale must not be null", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Timeout for vintage @Test must be positive.", 65);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 739.1771F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Timeout for vintage @Test must be positive.";
      String[] stringArray1 = StringUtils.substringsBetween("Timeout for vintage @Test must be positive.", "!d1.}#}5Y", ".*{[0-9]+}.*");
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "!d1.}#}5Y", (CharSequence) "Timeout for vintage @Test must be positive.");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string0 = StringUtils.getCommonPrefix(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(stringArray2, stringArray0);
      
      String string1 = StringUtils.removeAll("XepCD*y\u0002@c^8", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("XepCD*y\u0002@c^8", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", '\'');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray3 = new String[13];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      stringArray3[0] = "XepCD*y\u0002@c^8";
      stringArray3[1] = "";
      String[] stringArray4 = StringUtils.stripAll(stringArray3, "XepCD*y\u0002@c^8");
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(13, stringArray4.length);
      assertEquals(13, stringArray3.length);
      assertNotNull(stringArray4);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) ".*{[0-9]+}.*");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("!d1.}#}5Y", stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray4));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(13, stringArray3.length);
      assertFalse(boolean0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("7B*K]9&!t+wte&q", "7B*K]9&!t+wte&q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "7B*K]9&!t+wte&q", (CharSequence) "7B*K]9&!t+wte&q");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "7B*K]9&!t+wte&q", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 966);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "7B*K]9&!t+wte&q");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.substring("Threshold must not be negative", 2, 722);
      assertFalse(string1.equals((Object)string0));
      assertEquals("reshold must not be negative", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Threshold must not be negative", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "?b_u`'Q\"wk;f}\"@&E");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("?b_u`'Q\"wk;f}\"@&E"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty(" ", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "The type must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(19, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank(" ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 98;
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {98.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string1);
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      String string2 = StringUtils.join(list0, "\n", (-9), (-9));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(list0.contains(string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", (-9));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.098.0C0.0C", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("+[+kOm", "\n");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("+[+kOm", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "doesn't match any regular expression.");
      assertFalse(boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes("7A?PaZ\"D4S<%>BvZ", (String) null);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.chop("p");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("p", 40, "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("p                                       ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split(";7K#R92[3*}\"n*", "Ux+ -hLSLk51-,hRjm7", (-1924));
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceAll((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("SQR1=8u<", 2452, (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToEmpty("Ux+ -hLSLk51-,hRjm7");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string5);
      assertNotNull(string5);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Ux+ -hLSLk51-,hRjm7"));
      assertNotNull(linkedHashSet0);
      
      String string6 = StringUtils.join((Iterable<?>) linkedHashSet0, ':');
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(linkedHashSet0.contains("Ux+ -hLSLk51-,hRjm7"));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'J');
      assertNull(string0);
      
      String string1 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertEquals("X,M4x/#1`Ugk", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("X,M4x/#1`Ugk");
      assertFalse(string2.equals((Object)string1));
      assertEquals("X,M4X/#1`UGK", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("X,M4X/#1`UGK", 503, 57);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.mid(",(=w|jnx5-)%Bum?g", (-1), 503);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(",(=w|jnx5-)%Bum?g", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("Bt9qug", "A0aP1*");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Bt9qug", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("Bt9qug", (-1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Bt9qug", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("Supplied value must be a valid byte literal between -32768 and 32767: [", 3061, 1550);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("j'68_)R9e'Mi", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtensionj'68_)R9e'Miorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", string8);
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'p';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-3235);
      longArray0[1] = (long) (-3235);
      longArray0[2] = 0L;
      longArray0[3] = (long) 'p';
      longArray0[4] = (long) 'G';
      longArray0[5] = (long) (-3235);
      String string2 = StringUtils.join(longArray0, 'p');
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {(-3235L), (-3235L), 0L, 112L, 71L, (-3235L)}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals("-3235p-3235p0p112p71p-3235", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "*9^WlJ5iWeePiv", (CharSequence) "-3235p-3235p0p112p71p-3235");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((List<?>) null, 'p', 322, 25);
      assertNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('p'));
      assertNotNull(arrayList0);
      
      String string4 = StringUtils.substring("", Integer.MAX_VALUE);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad((String) null, (-3858));
      assertNull(string5);
      
      String string6 = StringUtils.stripEnd((String) null, "AQ_P}[wqb");
      assertNull(string6);
      
      String string7 = StringUtils.removeStart("Locale must not be null", "v*9^WlJ5iWeePi");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Locale must not be null", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString("&bC1e#l\"ju");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertEquals("&bC1e#l\"ju", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-751));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("6iqsGwf!!D)#;3A|rU,", '2');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = "a+IG!wnwY_mld=+`lX";
      String string2 = "X~";
      String string3 = StringUtils.wrapIfMissing("a+IG!wnwY_mld=+`lX", "X~");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("X~a+IG!wnwY_mld=+`lXX~", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("s{,\"");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("s{,\"", string4);
      assertNotNull(string4);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("_LNjn.BYsSQmrP6q;8'"));
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '2', 26, 1110);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1110
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'd', (int) 'd', 160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 160
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("Illegal range. The step cannot be zero.", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(39, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("Illegal range. The step cannot be zero.");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "Illegal range. The step cannot be zero.");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string2);
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string3 = StringUtils.rightPad("eRIkJyw k^e0[AxI+q", 0, 'f');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("eRIkJyw k^e0[AxI+q", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", (String) null, 39);
      assertEquals(21, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.replaceFirst("No instructions to disable", "eRIkJyw k^e0[AxI+q", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("No instructions to disable", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("", 4, '`');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("````", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "M6", (CharSequence) " ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "M6", (CharSequence) " ", 449);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfter("M6", "3E(Gg#~w:(+~<P2dIB8^,fk8");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("Object varargs must not be null", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Timeout for vintage @Test must be positive.");
      assertNull(stringArray0);
      
      String string2 = StringUtils.difference("6V", "|BYk<pn");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|BYk<pn", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = StringUtils.getBytes("ZqeMj#q#9jV*FaV~Lsx", (String) null);
      assertEquals(19, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.removeEnd("Qeb1Z[ -NuQu!wJ#>) StdIoExtension is active but no %s annotation was found.", "|BYk<pn");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Qeb1Z[ -NuQu!wJ#>) StdIoExtension is active but no %s annotation was found.", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Ux+ -hLSLk51-,hRjm7S", "].-z5J|Mf");
      assertEquals("Ux+ -hLSLk51-,hRjm7S", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("!d1.}#}5Y");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("!d1.}#}5y", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!d1.}#}5y", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((List<?>) null, 'Y', (-2147483629), 25);
      assertNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.substring("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", 321);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, ">hr(a]~i&a9V~lpT");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "!d1.}#}5Y", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substringBefore("H&[>_RBF)", "!d1.}#}5y");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("H&[>_RBF)", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.uncapitalize((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.chomp("{vF#aB3!H");
      assertEquals("{vF#aB3!H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.mid("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 55, (-2222));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("null comparator", "null comparator", "null comparator");
      assertFalse(string1.equals((Object)string0));
      assertEquals("null comparator", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("=>J)s4Cfje\"a\"", (-2222));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"=>J)s4Cfje\"a", string2);
      assertNotNull(string2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "%z{+");
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfter("t5J=iQW*MIB", "9!d1.}#}5Y");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.mid("org.junitpioneer.jupiter.RetryingTestExtension", 1532, 55);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("|<M", "Object varargs must not be null");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("|<M", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.rotate("|<M", 13);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertEquals("M|<", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(204);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      String string0 = StringUtils.center("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (-290), 'S');
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\"@TOEry~0NzL", (CharSequence) "OI'ZvU^0CL", (-290));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.reverseDelimited("Cloneable type ", 'j');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cloneable type ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("Cloneable type ", 'C');
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Cloneable type ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 204);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(".cartesian.CartesianTestExtensionorg.junitpioneer.jupiter", string4);
      assertNotNull(string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Cloneable type ", (CharSequence) ".cartesian.CartesianTestExtensionorg.junitpioneer.jupiter");
      assertFalse(int1 == int0);
      assertEquals(50, int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = 'V';
      charArray0[3] = 'S';
      charArray0[4] = 'S';
      charArray0[5] = '*';
      String string5 = StringUtils.join(charArray0, 'C', 2416, 204);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new char[] {'*', '*', 'V', 'S', 'S', '*'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String string0 = StringUtils.unwrap("Threshold must not be negative", 'T');
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Threshold must not be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Thresholdmustnotbenegative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Thresholdmustnotbenegative", "Threshold must not be negative", "Threshold must not be negative");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Thresholdmustnotbenegative", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      int int0 = 204;
      StringWriter stringWriter0 = new StringWriter(204);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = StringUtils.mid("Cannot store ", 204, 204);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = 0;
      int int2 = (-1689);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 0, (-1689));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("[]NDW<!62~");
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace(":4jbMNTGt 03VE");
      assertEquals(":4jbMNTGt 03VE", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("H`x");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("c[ntans '5s',");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("!`?H =tTU#N[}h=");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      String string0 = StringUtils.uncapitalize("_iD&|k");
      assertEquals("_iD&|k", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("1(3", 126);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1(3", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("org.junitpioneer.jupiter.StdIoExtension", 126);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1(3", (CharSequence) "", 16);
      assertEquals(3, int0);
      
      String string3 = StringUtils.abbreviate(")V\fhoH", 321);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(")V\fhoH", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "1(3", (CharSequence) ":30GY!Fj8");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripStart("c9U=IA9zA'(hGuuAm[X", "_iD&|k");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("c9U=IA9zA'(hGuuAm[X", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      String string5 = StringUtils.join(charArray0, 'g');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K', 'K'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("KgKgKgKgKgK", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("c9U=IA9zA'(hGuuAm[X", (String) null, (-5));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals(8, stringArray0.length);
      assertEquals("1+Q,Gm<!pyq@gxBg1(3_iD&|korg.junitpioneer.jupiter.StdIoExtension", string6);
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Exactly one type of input must be provided in the @", "Exactly one type of input must be provided in the @", "\n");
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("1", "zK#E3S@.");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("1", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "A])%-[<h~");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("1", (short)0, (short)0);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)76;
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "Illegal range. The step cannot be zero.";
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("Illegal range. The step cannot be zero.");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.defaultIfEmpty((String) null, "Illegal range. The step cannot be zero.");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "Illegal range. The step cannot be zero.", (char[]) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string2 = StringUtils.rightPad("eRIkJyw k^e0[AxI+q", 0, 'f');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("eRIkJyw k^e0[AxI+q", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", (String) null, 0);
      assertEquals(21, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceFirst("No instructions to disable", "eRIkJyw k^e0[AxI+q", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("No instructions to disable", string3);
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.abbreviateMiddle("eRIkJyw k^e0[AxI+q", "offset cannot be negative", 2);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("eRIkJyw k^e0[AxI+q", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Hh\"v~e");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Hh\"v~e", 46684428);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      long[] longArray0 = new long[2];
      String string0 = StringUtils.join(longArray0, '>');
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("0>0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '$');
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("gnj5E(X`PH}In");
      assertEquals("5", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("J1Fj>ggi-9q#_Ux", "]\"cT*RI&tb6U`bN=");
      assertEquals("J1Fj>ggi-9q#_Ux", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull(".|");
      assertFalse(string1.equals((Object)string0));
      assertEquals(".|", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[0] = (CharSequence) "J1Fj>ggi-9q#_Ux";
      charSequenceArray0[3] = (CharSequence) "#tjH,%vIvu";
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[2], charSequenceArray0[3]);
      assertEquals(11, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "J1Fj>ggi-9q#_Ux", charSequenceArray0[0], 0);
      assertEquals(11, charSequenceArray0.length);
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], ".|");
      assertEquals(11, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.substring((String) null, 65536, 4);
      assertNull(string2);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string3 = StringUtils.join((List<?>) stack0, '=', 65536, 722);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeFirst("hH5LB&OD", ".|");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("H5LB&OD", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "H5LB&OD");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 0;
      String string1 = StringUtils.center("...", 0, 'l');
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween((String) null, "...");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 15);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.reverseDelimited((String) null, 'E');
      assertNull(string3);
      
      char char0 = '-';
      String string4 = StringUtils.unwrap("...", '#');
      assertTrue(string4.equals((Object)string1));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("X~a+IG!wnwY_mld=+`lX");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("X~a+IG!wnwY_mld=+`lX", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rotate("!d1.}#}5Y9", 0);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("!d1.}#}5Y9", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBetween("{@nxco|$h`", "\"0Z#", "(E}S?]BLX-,XbCKt");
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("The type must not be null", "^o5R`SiDz7U3H");
      assertFalse(string1.equals((Object)string0));
      assertEquals("The type must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("v8S<6<=,_;zM,HA", 8);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_;zM,HA", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left("s{,\"                         ", 29);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("s{,\"                         ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[6] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '<', 3, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ".UC|";
      boolean boolean0 = StringUtils.equalsAny(".UC|", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("J1Fj>ggi-9q#_Ux", "]\"cRI&tb6U`bN=");
      assertEquals("J1Fj>ggi-9q#_Ux", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-2290);
      longArray0[5] = 1246L;
      longArray0[6] = 0L;
      String string2 = StringUtils.join(longArray0, 'M', 8192, 8192);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, (-2290L), 1246L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "J1Fj>ggi-9q#_Ux", (-822));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStart("ldZhO/", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ldZhO/", string3);
      assertNotNull(string3);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int[] intArray1 = StringUtils.toCodePoints("]\"cRI&tb6U`bN=");
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(14, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-991));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String string0 = StringUtils.replace("/U*JG:rC.KC_`\"&T<g", "", "g$q>p)'K<8B8T*2");
      assertEquals("/U*JG:rC.KC_`\"&T<g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfEmpty("g$q>p)'K<8B8T*2", (Supplier<String>) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g$q>p)'K<8B8T*2", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "g$q>p)'K<8B8T*2";
      int[] intArray0 = new int[6];
      intArray0[0] = 3228;
      intArray0[1] = 1390;
      intArray0[2] = (-1021);
      intArray0[3] = 1031;
      intArray0[4] = 56;
      intArray0[5] = 53;
      String string2 = StringUtils.join(intArray0, '@', 2126, 1390);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {3228, 1390, (-1021), 1031, 56, 53}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.lowerCase("lX");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("lx", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull(" ");
      assertNull(string4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "maxWith cannot be negative";
      stringArray0[1] = "/U*JG:rC.KC_`\"&T<g";
      String string5 = StringUtils.join(stringArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(2, stringArray0.length);
      assertEquals("maxWith cannot be negative/U*JG:rC.KC_`\"&T<g", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("lx", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[1], (-1169));
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      Locale locale0 = Locale.forLanguageTag("1Dv<_xq;~hUdP");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getScript();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("s{,\"", 99);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("The type must not be null", 2350);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("The type must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("the type must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.center("", 2350);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "the type must not be null", 99);
      assertFalse(int1 == int0);
      assertEquals(25, int1);
      
      String[] stringArray1 = StringUtils.split(",]f_ |j", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "the type must not be null", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, stringArray1.length);
      assertEquals((-1), int2);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.join((float[]) null, 'g');
      assertNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("ggggggg", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ggggggg", (CharSequence) string3, 281);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertEquals((-1), int3);
      
      String string6 = StringUtils.left("", 35);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string7 = StringUtils.lowerCase("ggggggg", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("ggggggg", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("UZ:qkfz{0 ", locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("uz:qkfz{0 ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "uz:qkfz{0 ", (CharSequence) "UZ:qkfz{0 ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = "4J{sW";
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("4J{sW", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.defaultString("J1Fj>ggi-9qL_U.x", "J1Fj>ggi-9qL_U.x");
      assertEquals("J1Fj>ggi-9qL_U.x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("J1Fj>ggi-9qL_U.x", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("S", "Strings must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be nullSStrings must not be null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String string0 = StringUtils.difference("", "#tjH,%vIvu");
      assertEquals("#tjH,%vIvu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "#tjH,%vIvu", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfterLast("", (-1348));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.wrapIfMissing("v+W,jo", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("v+W,jo", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("a+", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("a+", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("a+");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string5);
      
      String[] stringArray1 = StringUtils.split(" vwYBJc5wzY", (String) null);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = "@\\u/";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("!fler8", string6);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal Unicode escape sequence near index 3
         // @\\u/
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 4061);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" ", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) stringArray0, '\u0082');
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Threshold must not be negative", "<T");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Threshold must not be negative", "", 76, 76);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Threshold must not be negative", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "2u11]HJRV$^#u|r";
      String string1 = StringUtils.prependIfMissingIgnoreCase("oT", "oT", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("oT", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("EGYWgJjw+vic4h/(Dp", " vs ", "Threshold must not be negative");
      assertNull(string2);
      
      String string3 = StringUtils.substring("oT", 1145, 1145);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 1475, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.removeEndIgnoreCase("doesn't contain any substring.", "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("doesn't contain any substring.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfBlank("doesn't contain any substring.", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("doesn't contain any substring.", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = null;
      int int0 = 0;
      String string3 = StringUtils.leftPad("!d1.}#}5Y", 0, (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!d1.}#}5Y", string3);
      assertNotNull(string3);
      
      StringWriter stringWriter0 = new StringWriter(7);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('r');
      assertEquals("r", stringWriter0.toString());
      assertEquals("r", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "doesn't contain any substring.");
      assertEquals("rdoesn't contain any substring.", stringWriter0.toString());
      assertEquals("rdoesn't contain any substring.", stringWriter1.toString());
      assertEquals("rdoesn't contain any substring.", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter1);
      assertSame(stringWriter2, stringWriter0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = '\\';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      String string4 = StringUtils.join(charArray0, 'r');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new char[] {'r', 'r', '\\', 'r', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("rrrr\\rrrr", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "rrrr\rrrr", 15, (-926));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[iz5r2EWapvckD3Ht_";
      stringArray0[1] = "2u11]HJRV$^#u|r";
      stringArray0[2] = "&22^f/>iYZge6-_";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "_iD&|k");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.substring("&22^f/>iYZge6-_", (int) (short)0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&22^f/>iYZge6-_", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "2u11]HJRV$^#u|r", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'F');
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(4, stringArray0.length);
      assertEquals("[iz5r2EWapvckD3Ht_F2u11]HJRV$^#u|rF&22^f/>iYZge6-_F", string3);
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.removeEndIgnoreCase("doesn't contain any substring.", "Object varargs must not be null");
      assertFalse(string1.equals((Object)string0));
      assertEquals("doesn't contain any substring.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfBlank("doesn't contain any substring.", (Supplier<String>) null);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("doesn't contain any substring.", string2);
      assertNotNull(string2);
      
      int int0 = 0;
      String string3 = StringUtils.left("Ux+ -hLSLk51-,hRjm7", 3880);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("Object varargs must not be null", "doesn't contain any substring.");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      String string5 = "JC`l3*7'c";
      String string6 = "H&[>_RBF)";
      String string7 = StringUtils.abbreviate("JC`l3*7'c", "H&[>_RBF)", 160);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("JC`l3*7'c", string7);
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "Ux+ -hLSLk51-,hRjm7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "";
      String string0 = StringUtils.removeStartIgnoreCase("", "%(@~lfU<(W@`Q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("8.k|cd4=_hZ[2Yu+~;e");
      assertFalse(string1.equals((Object)string0));
      assertEquals("8.K|CD4=_Hz[2yU+~;E", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "1+Q,Gm<!pyq@gxBg", 35);
      assertEquals(16, int0);
      
      String[] stringArray1 = StringUtils.split("|nt(&LrRV", "8.K|CD4=_Hz[2yU+~;E");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray1.length);
      assertEquals("nt(&LrRV", string2);
      assertNotNull(string2);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "8.k|cd4=_hZ[2Yu+~;e", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.abbreviate("", 160);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "8.k|cd4=_hZ[2Yu+~;e", (CharSequence) "", 16);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(16, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      String string0 = StringUtils.swapCase("]\"cRI&tb6U`bN=");
      assertEquals("]\"Cri&TB6u`Bn=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (long) (-2290);
      longArray0[5] = 1250L;
      longArray0[6] = 0L;
      String string2 = StringUtils.join(longArray0, 'M', 8192, 8192);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L, (-2290L), 1250L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "]\"Cri&TB6u`Bn=", (-822));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.lowerCase("maxWith cannot be negative");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("maxwith cannot be negative", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("...");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "...";
      stringArray0[1] = "...";
      String string5 = StringUtils.join(stringArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("......", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("......", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "]\"Cri&TB6u`Bn=", (CharSequence) "]\"cRI&tb6U`bN=", (-822));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("]\"Cri&TB6u`Bn=", "A-3b");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals(1, stringArray1.length);
      assertEquals("]\"Cri&TB6u`Bn=", string6);
      assertNotNull(string6);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.upperCase("_@#-i");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_@#-I", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate(" ", 57, 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";F[s>^q-<wt&13Qa");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.remove(" ", '*');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals(" ", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '9');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) null);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.chop(" ");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (-804));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfAny((CharSequence) null, " ");
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.upperCase("_@#-i");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_@#-I", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate(" ", 57, 0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";F[s>^q-<wt&13Qa");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.mid(" ", 57, 1550);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("_@#-I", "_@#-i");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("_@#-I", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.center((String) null, 1324);
      assertNull(string7);
      
      String string8 = StringUtils.mid("", 57, 1263);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.wrap("*4*[Etb.E\"aN/-|Z", "Threshold must not be negative");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertEquals("Threshold must not be negative*4*[Etb.E\"aN/-|ZThreshold must not be negative", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.strip("E<S&&h`i*FY");
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertEquals("E<S&&h`i*FY", string10);
      assertNotNull(string10);
      
      try { 
        StringUtils.getBytes("P9k6uZoT", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, '7');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'Y');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'Y';
      String string2 = StringUtils.join(charArray0, '^', (-1431655763), (-1431655763));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'G', 'G', 'Y'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.left((String) null, 14);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd((String) null, "!d1.}#}5Y");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("\r");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\r", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.reverse("\r");
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\r", string6);
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.split((String) null, 'G');
      assertNull(stringArray0);
      
      String string7 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("SM}BB", "SM}BB", "SM}BB");
      assertEquals("SM}BB", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String string0 = StringUtils.mid("XEV>BEWTMb<", (-750), (-750));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("oME~Hv");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(29);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = StringUtils.isNotEmpty(">P<\u0001CFOzauyl");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "R", (CharSequence) "The type must not be null");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("Tz 1>0ZI W?-", "s{,\"");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Tz 1>0ZI W?-", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", 29);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("tesian.CartesianTestExtensionParameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.car", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("The type must not be null", ">P<\u0001CFOzauyl");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "The type must not be null", (CharSequence) "tesian.CartesianTestExtensionParameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.car");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(">hr(a]~i&a9V~lpT", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals(">hr(a]~i&a9V~lpT", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(">hr(a]~i&a9V~lpT", "Minimum abbreviation width is %d");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceChars("Minimum abbreviation width is %d", 'S', 'C');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("2s$8+/\u0002,W|nML", "_V", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("2s$8+/\u0002,W|nML", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("giT2g!k6Qf6+1$,");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("giT2g!k6Qf6+1$,", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "Minimum abbreviation width is %d");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(1, linkedList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = StringUtils.contains((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.wrap("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 'A');
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aorg.junitpioneer.jupiter.cartesian.CartesianTestExtensionA", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Cannot get the toString of a nullobject", "#RY7e*/o13[|73i;^y0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cannot get the toString of a nullobject", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot get the toString of a nullobject", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(48, int0);
      
      String string3 = StringUtils.substringAfterLast("#RY7e*/o13[|73i;^y0", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("...G...", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("$y[C/f0H+", "$y[C/f0H+", false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("...", "...G...", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("$y[C/f0H+");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("$y[C/f0H+", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "$y[C/f0H+");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "-1WDn_:gDhdp&5");
      assertNull(stringArray0);
      
      String string6 = StringUtils.reverse("...");
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("...", 'G');
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertEquals("...", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "...G...", (CharSequence) "...G...");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      String string8 = StringUtils.join(charArray0, 'K');
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertArrayEquals(new char[] {'G', '!', 'G', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("GK!KGKG", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.rightPad((String) null, 0);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 3212);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      int int0 = 204;
      StringWriter stringWriter0 = new StringWriter(204);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "\"@TOEPFCry/\\0NzL";
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      String string1 = "OI'ZvU^0CL";
      String string2 = StringUtils.leftPad("\"@TOEPFCry/\u0000NzL", 204, "OI'ZvU^0CL");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("OI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0C\"@TOEPFCry/\u0000NzL", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "OI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0\"@TOEPFCry/\u0000NzL", 204, 942);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String string0 = StringUtils.replace("/U*JG:rC.KC_`\"&T<g", "", "g$q>p)'K<8B8T*2");
      assertEquals("/U*JG:rC.KC_`\"&T<g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfEmpty("g$q>p)'K<8B8T*2", (Supplier<String>) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("g$q>p)'K<8B8T*2", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "g$q>p)'K<8B8T*2";
      int[] intArray0 = new int[6];
      intArray0[0] = 3228;
      intArray0[1] = 1390;
      intArray0[2] = (-1021);
      intArray0[3] = 1031;
      intArray0[4] = 56;
      intArray0[5] = 53;
      String string2 = StringUtils.join(intArray0, '@', 2126, 1390);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {3228, 1390, (-1021), 1031, 56, 53}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "g$q>p)'K<8B8T*2";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "/U*JG:rC.KC_`\"&T<g";
      charSequenceArray0[6] = (CharSequence) "/U*JG:rC.KC_`\"&T<g";
      charSequenceArray0[7] = (CharSequence) "g$q>p)'K<8B8T*2";
      String string3 = StringUtils.removeStart("/U*JG:rC.KC_`\"&T<g", "Minimum abbreviation width with offset is %d");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/U*JG:rC.KC_`\"&T<g", string3);
      assertNotNull(string3);
      
      charSequenceArray0[8] = (CharSequence) "/U*JG:rC.KC_`\"&T<g";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals(9, charSequenceArray0.length);
      assertEquals("g$q>p)'K<8B8T*2", charSequence0);
      assertNotNull(charSequence0);
      
      int[] intArray1 = StringUtils.toCodePoints("g$q>p)'K<8B8T*2");
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(15, intArray1.length);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("i%/Mj)>`H+");
      assertEquals("i%/Mj)>`H+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("i%/Mj)>`H+", (String) null, "i%/Mj)>`H+", (-2157));
      assertTrue(string1.equals((Object)string0));
      assertEquals("i%/Mj)>`H+", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.replace("@DefaultLocale can nly be used ", "@DefaultLocale can nly be used ", "@DefaultLocale can nly be used ");
      assertEquals("@DefaultLocale can nly be used ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'J');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("OZ:360OO=`qpy6v`[?", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "OZ:360OO=`qpy6v`[?");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("", "Ux+ -hLSLk51-,hRjm7", 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("-1WDn_:gDhdp&5");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Ux+ -hLSLk51-,hRjm7", (CharSequence) "OZ:360OO=`qpy6v`[?");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals("Ux+ -hLSLk51-,hRjm7", charSequence0);
      assertNotNull(charSequence0);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "Ux+ -hLSLk51-,hRjm7", stringArray0);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", 2498, 0);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string6 = StringUtils.join((List<?>) null, "5f2+~%ovFl,aa*KI", (-1), (-2389));
      assertNull(string6);
      
      boolean boolean2 = StringUtils.startsWithAny("maxWith cannot be negative", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", "", (-1223));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.rightPad("maxWith cannot be negative", 0, "Search and Replace array lengths don't match: ");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("maxWith cannot be negative", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.wrap("e", "");
      assertEquals("e", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("[+WC6Q_xDmN|i&[-B!x", "[+WC6Q_xDmN|i&[-B!x");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // [+WC6Q_xDmN|i&[-B!x
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "\"jI$ut7gs$VbO7|,G", "\"jI$ut7gs$VbO7|,G");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("sk88iT:-i;:B-2", "sk88iT:-i;:B-2", ":k0F0/b");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("3Zzy]`'r)g;QSv5jGZ)", stringArray0);
      assertEquals(14, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "{diplayName}");
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("", "u'wQg'D{zhlT?q");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("", 37, (-2407));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)76;
      try { 
        StringUtils.toString(byteArray0, "3Zzy]`'r)g;QSv5jGZ)");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Q", "XxD/i^DNiNFEp+/AF");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("1", "zK#E3S@.");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("1", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "A])%-[<h~");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("Strings must not be null", 76, 0);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-109);
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, '9');
      assertNull(string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '3');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, ",!RM<RK");
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("$;EB%zae\"wRL3`>", (-3088), '[');
      assertFalse(string3.equals((Object)string1));
      assertEquals("$;EB%zae\"wRL3`>", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "f", "e%SqGHhr!<");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("f", "e%SqGHhr!<", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'd', (int) 'd', (int) 'd');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", " ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("9");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("9", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.join((List<?>) null, 'Y', 0, (int) (short)0);
      assertNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1774);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("sB)K8-L`(pgVfXp\"i", 321);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                sB)K8-L`(pgVfXp\"i", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripEnd((String) null, "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ");
      assertNull(string7);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      String string1 = StringUtils.chop("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %", string1);
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %";
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[4];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) " ";
      charSequenceArray1[1] = (CharSequence) "\r";
      charSequenceArray1[2] = (CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s";
      charSequenceArray1[3] = (CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s";
      String string3 = StringUtils.prependIfMissing((String) null, "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %", charSequenceArray1);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(4, charSequenceArray1.length);
      assertNull(string3);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      
      String string4 = StringUtils.stripAccents("6)Bb");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("6)Bb", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(103);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("\r"));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.join((Iterable<?>) arrayList0, '-');
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(arrayList0.contains("\r"));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.stripAccents("uH,{T`]18%LCP=");
      assertEquals("uH,{T`]18%LCP=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 13);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "rD-/K-l7Z", "E;~9[x>tNk");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", 1532);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, (String) null);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("", "");
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("", 53, 0);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[3] = (byte) (-36);
      String string8 = StringUtils.join((Iterable<?>) serviceLoader0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.replacePattern("", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", "");
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string0));
      assertEquals("", string9);
      assertNotNull(string9);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string10 = StringUtils.toEncodedString(byteArray0, charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte) (-109), (byte) (-109), (byte)0, (byte) (-36)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("\uFFFD\uFFFD\u0000\uFFFD", string10);
      assertNotNull(string10);
      
      String string11 = StringUtils.replace("", "3s@r|%8WwO&vng]x.8", "L7=-_}oTG4/c9y", 40);
      assertFalse(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string2));
      assertTrue(string11.equals((Object)string3));
      assertTrue(string11.equals((Object)string1));
      assertTrue(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string6));
      assertTrue(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string9));
      assertEquals("", string11);
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.replacePattern("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("67.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) 98;
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {98.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(10, floatArray0.length);
      assertEquals("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "\n");
      assertTrue(string1.equals((Object)string0));
      assertEquals("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", "\n");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("98.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0C0.0", string2);
      assertNotNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("1", "zK#E3S@.");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("1", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("kCA<:Z+c9Tc,");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Kca<:z+C9tC,", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Object varargs must not be null", (CharSequence) "0", 32767);
      assertFalse(int1 == int0);
      assertEquals(31, int1);
      
      String[] stringArray0 = StringUtils.split("kCA<:Z+c9Tc,", "Kca<:z+C9tC,");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals(4, stringArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int2);
      
      String string8 = StringUtils.abbreviate("", (-3337));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.swapCase("");
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotNull(string9);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "kCA<:Z+c9Tc,", (CharSequence) "1", (-3337));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string10 = StringUtils.trim("1");
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertEquals("1", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("y#kNZ/CK*N\u0004-", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("y#kNZ/CK*N\u0004-", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "Illegal range. The step cannot be zero.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("", 126);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("Illegal range. The step cannot be zero.", 1335);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("Qg?w%R/$!s6", Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(126));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.substring("F@E+=Bd0@NEI", 126);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad(" ", (-1644));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals(" ", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.stripEnd("@mk[e>m2)", "2!WQAjyO{Yp8");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("@mk[e>m2)", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.stripStart("@mk[e>m2)", "+_v(0)^Ad");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals("@mk[e>m2)", string8);
      assertNotNull(string8);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("v*9^WlJ5iWeePiLocale must not be null", " ", (-1430));
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("dx7C", "e");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Illegal range. The step cannot be zero.", "(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("(", 29);
      assertEquals("(                            ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 32, 'F');
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right("Minimum abbreviation width with offset is %d", 'A');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'A');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.prependIfMissing("E9?[[J$>", "(                            ", stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("(                            E9?[[J$>", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'A';
      boolean boolean1 = StringUtils.startsWithIgnoreCase("(", "(                            ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      String string0 = StringUtils.left("1+Q,Gm<!pyq@gxBg", 5993);
      assertEquals("1+Q,Gm<!pyq@gxBg", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("1+Q,Gm<!pyq@gxBg", 'o');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("szBb!g8Tc7?", "offset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negativeszBb!g8Tc7?offset cannot be negative", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("hhp+0[F/&;ME");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hhp+0[f/&;me", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("1+Q,Gm<!pyq@gxBg");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("!!D}5T", '!');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("!!D}5T!", string4);
      assertNotNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("szBb!g8Tc7?");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.getDigits((String) null);
      assertNull(string5);
      
      try { 
        StringUtils.getBytes("org.apache.commons.lang3.StringUtils", "!!D}5T");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-380L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1246L;
      longArray0[5] = 584L;
      longArray0[6] = 575L;
      longArray0[7] = 1454L;
      String string0 = StringUtils.join(longArray0, 'M', (-2290), (-2290));
      assertArrayEquals(new long[] {0L, (-380L), 0L, 0L, 1246L, 584L, 575L, 1454L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 101);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.trimToNull("*sa%wRj`T-");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("*sa%wRj`T-", string2);
      assertNotNull(string2);
      
      charSequenceArray0[6] = (CharSequence) "*sa%wRj`T-";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("2[1", 'p');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p2[1p", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", '}');
      assertEquals("}Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "...";
      objectArray0[1] = (Object) "...";
      objectArray0[3] = (Object) "...";
      String string0 = StringUtils.join(objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals(".........", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rotate("", (-31));
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[2] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[0] = (CharSequence) "Cannot clone Cloneable type ";
      String string1 = StringUtils.appendIfMissing("Cannot clone Cloneable type ", "Cannot clone Cloneable type ", charSequenceArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Cannot clone Cloneable type ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[0], (-3392), (-31));
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Cannot clone Cloneable type ", charSequence0);
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "Cannot clone Cloneable type ";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.left("fn).LT/(7'", 0);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("", 1092);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.strip("Cannot clone Cloneable type ");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Cannot clone Cloneable type", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A\"5T4, sVLv~";
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("A\"5T4, sVLv~", string0);
      assertNotNull(string0);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1454L;
      longArray0[1] = (long) 'V';
      longArray0[3] = (long) 'V';
      longArray0[4] = (long) 'V';
      longArray0[5] = (long) (-2290);
      longArray0[6] = 584L;
      int[] intArray0 = StringUtils.toCodePoints("s{,\"");
      assertArrayEquals(new int[] {115, 123, 44, 34}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "The type must not be null", (CharSequence) "\u0007R76i(BW8ACq", (-2290));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.lowerCase("U2ny=");
      assertEquals("u2ny=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("u2ny=", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, "Array element ", "^RZzy>`q`q<A5no:", 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, "1+Q,Gm<!pyq@gxBg", 1112);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("1+Q,Gm<!pyq@gxBg", "1+Q,Gm<!pyq@gxBg");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove((String) null, 'J');
      assertNull(string2);
      
      String string3 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertFalse(string3.equals((Object)string1));
      assertEquals("X,M4x/#1`Ugk", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, '\\');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.remove("", 'z');
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeAll("<8kYN`y2}:D0h", (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("<8kYN`y2}:D0h", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("", 416);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.left("Ux+ -hLSLk51-,hRjm7", 680);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.stripEnd("org.junitpioneer.vintage.ExpectedExceptionExtension", "1+Q,Gm<!pyq@gxBg");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.defaultString("");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertEquals("", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'A');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.prependIfMissing(">P<\u0001CFOzauyl", ">P<\u0001CFOzauyl", stringArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertEquals(">P<\u0001CFOzauyl", string4);
      assertNotNull(string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ">P<\u0001CFOzauyl", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("p\"8U_G}9hm8h[b");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripToEmpty("p\"8U_G}9hm8h[b");
      assertEquals("p\"8U_G}9hm8h[b", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "p\"8U_G}9hm8h[b", (CharSequence[]) stringArray0);
      assertEquals(13, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ":fS y5Qk9+~", (CharSequence) "HCnB;=", 947);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'i', (-3384), 52);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", (-1));
      assertEquals(197, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "9", " vs ", 14);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) " vs ", 14);
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((long[]) null, '%', 82, 2232);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7", "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("9!d1.}#}5Y", '%');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9!d1.}#}5Y", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("9");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeAll("offset cannot be negative", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring((String) null, 14);
      assertNull(string5);
      
      String string6 = StringUtils.left((String) null, (-917));
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd("", "TJg~w-cW9s/w ");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString("Expected exception %s was not thrown.");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertEquals("Expected exception %s was not thrown.", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.reverse("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertEquals("rehtona fo tupni eht si pool eno fo tuptuo - rorrEwolfrevOkcatS tsniaga tcetorp ot gnitrobA", string9);
      assertNotNull(string9);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 40);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("", (String) null);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("!d1.}#}5Y");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("!d1.}#}5y", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!d1.}#}5y", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((List<?>) null, 'Y', (-2147483629), 25);
      assertNull(string4);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains('2'));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.substring("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", 321);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("Index: ", 1872);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.stripEnd("...", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("...", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertFalse(string1.equals((Object)string0));
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      assertNotNull(string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(">P<\u0001CFOzauyl", string2);
      assertNotNull(string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(29);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = hashSet0.add(locale_FilteringMode0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = hashSet0.add(locale_FilteringMode1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      
      String string3 = StringUtils.join((Iterable<?>) hashSet0, "s{,\"                         ");
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertEquals("IGNORE_EXTENDED_RANGESs{,\"                         AUTOSELECT_FILTERING", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNotEmpty(">P<\u0001CFOzauyl");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "R", (CharSequence) "The type must not be null");
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("Tz 1>0ZI W?-", "s{,\"");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Tz 1>0ZI W?-", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", 29);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("tesian.CartesianTestExtensionParameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.car", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("The type must not be null", ">P<\u0001CFOzauyl");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String string0 = StringUtils.difference("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", "v.sP");
      assertEquals("v.sP", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {0L, (-1L), (-1L), (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll("", " ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", '\'');
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join((byte[]) null, '_');
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) ">hr(a]~i&a9V~lpT";
      String string6 = StringUtils.toRootLowerCase("");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      assertNotNull(string6);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string7 = StringUtils.wrap("", 's');
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.chomp("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "?b_u`'Q\"wk;f}\"@&E");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty(" ", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "The type must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(19, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("The type must not be null", charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(25, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("+pc!|_XmI5$1m");
      assertEquals("+pc!|_XmI5$1m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("doesn't contain any substring.", "Object varargs must not be null");
      assertEquals("doesn't contain any substring.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("doesn't contain any substring.", (Supplier<String>) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("doesn't contain any substring.", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("'clnMd", 0, 'n');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'clnMd", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "'clnMd", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.reverseDelimited("doesn't contain any substring.", 'l');
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("doesn't contain any substring.", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("P*O1dZbzd-", '-');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("P*O1dZbzd-", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("H=hw!t(Xk)`E9g$");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("H=hw!t(Xk)`E9g$", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "P*O1dZbzd-", (CharSequence) "Ux+ -hLSLk51-,hRjm7");
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '-';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = '-';
      charArray0[5] = 'V';
      charArray0[6] = '#';
      charArray0[7] = 'n';
      charArray0[8] = 'n';
      String string6 = StringUtils.join(charArray0, '-', 0, 0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertArrayEquals(new char[] {'V', '-', 'l', 'l', '-', 'V', '#', 'n', 'n'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" tAUR");
      assertEquals("tAUR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      char char0 = 'M';
      String string1 = StringUtils.join(shortArray0, 'M', 0, (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)0, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("gG{\"\"", "%9?IZYu{+}4");
      assertFalse(int1 == int0);
      assertEquals(66, int1);
      
      String string2 = StringUtils.unwrap((String) null, "");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, "6k{]LA_@06");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.DefaultLocaleExtension", 1, "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "";
      stringArray0[5] = "&22^f/>iYZge6-_";
      String string0 = StringUtils.removeAll("&22^f/>iYZge6-_", "offset cannot be negative");
      assertEquals("&22^f/>iYZge6-_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.jupiter.StdIoExtension", (-429), "8_");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString(" 31Qjnw;", "1&R6e0&A");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" 31Qjnw;", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("1+Q,Gm<!pyq@gxBg", " 31Qjnw;");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToEmpty(" U|j8-StZ0");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("U|j8-StZ0", string3);
      assertNotNull(string3);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("offset cannot be negative"));
      assertNotNull(linkedHashSet0);
      
      String string4 = StringUtils.join((Iterable<?>) linkedHashSet0, '{');
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(linkedHashSet0.contains("offset cannot be negative"));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.chop("Cloneable type ");
      assertEquals("Cloneable type", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Cloneable type");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("Cloneable type ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(" ", " ", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      String string0 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("7e+@M", '~');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "NE");
      assertNull(string1);
      
      String string2 = StringUtils.removeStart("K|,FW*..IZZSwV", "_LNjn.BYsSQmrP6q;8'");
      assertFalse(string2.equals((Object)string0));
      assertEquals("K|,FW*..IZZSwV", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("7e+@M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string3 = StringUtils.join((List<?>) linkedList0, "`?59=: GN!q2{", (-4691), (-4691));
      assertEquals(0, linkedList0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWithAny("7e+@M", stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2);
      
      String string4 = StringUtils.stripStart(string0, "BzckUT<~5");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("Strings must not be null", (-1), (-4691));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("K|,FW*..IZZSwV", "NE", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = (-1L);
      longArray0[4] = 0L;
      String string1 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("", " ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove((String) null, '\'');
      assertNull(string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "g*K4Tteij+";
      String string4 = StringUtils.join((float[]) null, '-', 4959, (-1891));
      assertNull(string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'g';
      charArray0[1] = '\'';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '\'';
      charArray0[5] = '-';
      charArray0[6] = '}';
      charArray0[7] = '-';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 4489, 109);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '/', 21, 21);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Timeout for vintage @Test must be positive.", 65);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1891.1155F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Timeout for vintage @Test must be positive.";
      stringArray0[1] = "*U8x";
      stringArray0[2] = "*U8x";
      stringArray0[3] = "Timeout for vintage @Test must be positive.";
      stringArray0[4] = "Timeout for vintage @Test must be positive.";
      stringArray0[5] = "Timeout for vintage @Test must be positive.";
      stringArray0[6] = "Timeout for vintage @Test must be positive.";
      stringArray0[7] = "Timeout for vintage @Test must be positive.";
      stringArray0[8] = "Timeout for vintage @Test must be positive.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*U8x");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.normalizeSpace("Timeout for vintage @Test must be positive.");
      assertEquals("Timeout for vintage @Test must be positive.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '&', 715, 715);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(9, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripStart("matches '%s'.", "matches '%s'.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("matches '%s'.", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("matches '%s'.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("matches '%s'.", 98, "k+PZ2&y9o");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("matches '%s'.k+PZ2&y9ok+PZ2&y9ok+PZ2&y9ok+PZ2&y9ok+PZ2&y9ok+PZ2&y9ok+PZ2&y9ok+PZ2&y9ok+PZ2&y9ok+PZ", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 160);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", "'clnMd");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getIfBlank("Object varargs must not be null", (Supplier<String>) null);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("'clnMd", 0, 'l');
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("'clnMd", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "'clnMd", 160);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.reverseDelimited("org.apache.commons.lang3.StringUtils", '#');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("org.apache.commons.lang3.StringUtils", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap("", 'l');
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.deleteWhitespace("");
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertEquals("", string9);
      assertNotNull(string9);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(46, int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      String string10 = StringUtils.join((Object[]) null, 'l');
      assertNull(string10);
      
      int int2 = StringUtils.compare("OuWWVLSzq", "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(9, int2);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(188, stringArray0.length);
      assertEquals("aa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      int int0 = StringUtils.compare("uH,{T`]1_%LCP=", "Ux+ -hLSLk51-,hRjm7", true);
      assertEquals(32, int0);
      
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, '9');
      assertNull(string0);
      
      int int0 = StringUtils.compare((String) null, "uH,{T`]1_%LCP=", true);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "uH,{T`]1_%LCP=";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "uH,{T`]1_%LCP=";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("Required at least one of the following: @DisableIfArgument, @DisableIfAllArguments, @DisableIfAnyArgument but found none.", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare((String) null, "2%0RUeav.=8", true);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.chop("si'/o+C]9#_q.0!,g");
      assertEquals("si'/o+C]9#_q.0!,", string0);
      assertNotNull(string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType(" ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.removeStart("10ZG>yNat25u|'.|8WZ", (String) null);
      assertEquals("10ZG>yNat25u|'.|8WZ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray1, 'o');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray1.length);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.prependIfMissing((String) null, "10ZG>yNat25u|'.|8WZ", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(1, stringArray0.length);
      assertNull(string2);
      assertNotSame(stringArray0, stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "10ZG>yNat25u|'.|8WZ", " ");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("c4iS{JrJ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("4", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '`');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.substringBefore("\r", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "Ux+ -hLSLk51-,hRjm7", (-3), 51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("\r", (String) null);
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) null, 1719);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String string0 = StringUtils.substringBetween("W", "KJX}", "KJX}");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "W");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlpha("KJX}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[5] = "_iD&|k";
      String string0 = StringUtils.join((Object[]) stringArray0, 'H');
      assertEquals(8, stringArray0.length);
      assertEquals("1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, '2', 12, 12);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissing("7-?6 ;'G)-jg7k#|,QF", "1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("7-?6 ;'G)-jg7k#|,QF1+Q,Gm<!pyq@gxBgH1(3HHHH_iD&|kHH", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("Ux+ -hLSLk51-,hRjm7", "1+Q,Gm<!pyq@gxBg", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(8, stringArray0.length);
      assertEquals("1+Q,Gm<!pyq@gxBgUx+ -hLSLk51-,hRjm7", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeFirst("%s was not annotated with @ArgumentsSource but should have been.", "1+Q,Gm<!pyq@gxBg");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.center("7-?6 ;'G)-jg7k#|,QF", 53, '2');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("222222222222222227-?6 ;'G)-jg7k#|,QF22222222222222222", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull(" ");
      assertNull(string6);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "1+Q,Gm<!pyq@gxBg", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 717);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripToNull("Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Locale must not be null", stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "YUx+ -hLSLk51-,hRjm7", "YUx+ -hLSLk51-,hRjm7");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.junitpioneer.jupiter.SystemPro@ertyExtension", "org.junitpioneer.jupiter.SystemPro@ertyExtension", "org.junitpioneer.jupiter.SystemPro@ertyExtension");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      String string0 = StringUtils.rightPad("po", (int) (byte) (-52), '>');
      assertEquals("po", string0);
      assertNotNull(string0);
      
      byteArray0[3] = (byte) (-74);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) (byte)64, (int) (byte) (-24));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '~', 0, 2535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String string0 = StringUtils.repeat("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|", 49);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string1 = StringUtils.join((List<?>) stack0, '}', 1419, 5);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean1 = stack0.add(locale_FilteringMode0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.contains(locale_FilteringMode0));
      assertTrue(boolean1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|";
      charSequenceArray0[3] = (CharSequence) string0;
      stack0.trimToSize();
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(1, stack0.capacity());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      charSequenceArray0[4] = (CharSequence) "NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|";
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.leftPad("F+RYZ';X{T4|Li", 1419, '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[6] = (CharSequence) string2;
      boolean boolean2 = StringUtils.startsWithAny("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[3], charSequenceArray0[3], 5);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat('-', (-1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd((String) null, "");
      assertNull(string4);
      
      boolean boolean3 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("F+RYZ';X{T4|Li");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String string5 = StringUtils.replaceChars((String) null, '}', 'B');
      assertNull(string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "", (-2669), Integer.MIN_VALUE);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-380L);
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1246L;
      longArray0[5] = 584L;
      longArray0[6] = 575L;
      longArray0[7] = 1454L;
      String string0 = StringUtils.join(longArray0, 'M', (-2290), (-2290));
      assertArrayEquals(new long[] {0L, (-380L), 0L, 0L, 1246L, 584L, 575L, 1454L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 101);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.lowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string2 = StringUtils.trimToNull("*sa%wRj`T-");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("*sa%wRj`T-", string2);
      assertNotNull(string2);
      
      charSequenceArray0[6] = (CharSequence) "*sa%wRj`T-";
      charSequenceArray0[7] = (CharSequence) "";
      String string3 = StringUtils.replaceChars("uH,{T`]1_%LCP=", 'M', 'M');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("uH,{T`]1_%LCP=", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.replaceChars("AQ_P}[wqb", ' ', ' ');
      assertEquals("AQ_P}[wqb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'Z');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.stripToNull(stringArray0[0]);
      assertEquals(3, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("O2Y}C~", "e");
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "e", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(linkedList0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("", 'A');
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("Cannot get the toString of a nullobject", "#RY7e*/o13[|73i;^y0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cannot get the toString of a nullobject", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot get the toString of a nullobject", (CharSequence) "");
      assertEquals(39, int0);
      
      String string3 = StringUtils.substringAfterLast("#RY7e*/o13[|73i;^y0", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "?b_u`'Q\"wk;f}\"@&E");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty(" ", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "The type must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(19, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.removePattern("org.apache.commons.lang3.ObjectUtils$Null", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      long[] longArray0 = new long[22];
      longArray0[3] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '!', 0, (int) '!');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = "Y|lJY1";
      String string1 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte byte0 = (byte) (-91);
      byte byte1 = (byte)0;
      char char0 = '\\';
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '\\', (int) (byte) (-91), 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -91
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.replaceFirst("", "'Ki,xdxN", "dZ~fwY<lY'F\"&DGS!w5");
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultIfEmpty("'Ki,xdxN", "0");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("'Ki,xdxN", string6);
      assertNotNull(string6);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "Y(k,@|9jsw'%}", (char[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int2 = StringUtils.lastIndexOfAny("})eT\rD!oKY'@P0C", charSequenceArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(15, int2);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("\r", "Illegal range. The step cannot be zero.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "Illegal range. The step cannot be zero.";
      String string2 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", " >hr(a]~i&a9V~lpT");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase("pmbvp9!QX");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("PMBVP9!qx", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("kCA<:Z+c9Tc,", "PMBVP9!qx");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("kCA<:Z+c9Tc,", string4);
      assertNotNull(string4);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedList0.add("kCA<:Z+c9Tc,");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains("kCA<:Z+c9Tc,"));
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.add("5hMr3B`]3[<bS@|>=");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(linkedList0.contains(string1));
      assertTrue(linkedList0.contains("kCA<:Z+c9Tc,"));
      assertTrue(boolean3);
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      boolean boolean4 = linkedList0.add((String) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(linkedList0.contains(string1));
      assertTrue(boolean4);
      
      String string5 = StringUtils.join((List<?>) linkedList0, "zK#E3S@.", 36, 25);
      assertEquals(1, linkedList0.size());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(linkedList0.contains(string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.rotate("kCA<:Z+c9Tc,", 25);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(",kCA<:Z+c9Tc", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeEndIgnoreCase("\r", (String) null);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("\r", string7);
      assertNotNull(string7);
      
      boolean boolean5 = StringUtils.containsOnly((CharSequence) "zK#E3S@.", "-;}?\"8nqJ7E?8Ix");
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      try { 
        StringUtils.getBytes("K|,FW*..IZZSwV", "5hMr3B`]3[<bS@|>=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      String string0 = StringUtils.uncapitalize("_iD&|k");
      assertEquals("_iD&|k", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("1(3", 126);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1(3", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("org.junitpioneer.jupiter.StdIoExtension", 126);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1(3", (CharSequence) "", 16);
      assertEquals(3, int0);
      
      String string3 = StringUtils.substring(")V\fhoH", 321, (-2141));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "1(3", (CharSequence) ":30GY!Fj8");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripStart("c9U=IA9zA'(hGuuAm[X", "_iD&|k");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("c9U=IA9zA'(hGuuAm[X", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "c9U=IA9zA'(hGuuAm[X", "org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.abbreviate((String) null, "1(3", (-2141), 3);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("^-YYw+Fy ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("^-yyW+fY ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^-YYw+Fy ", (CharSequence) "^-YYw+Fy ", 2465);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("^-yyW+fY ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("e", 8192);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "e", (CharSequence) "", 8192);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String string0 = "[+WC6Q_xDmN|i[-B!x";
      String string1 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertTrue(string1.equals((Object)string0));
      assertEquals("[+WC6Q_xDmN|i[-B!x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("[+WC6Q_xDmN|i[-B!x");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[+wc6q_xdmn|i[-b!x", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("*cKw;", 3404);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = "...";
      String string5 = StringUtils.toRootLowerCase("...");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("...", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "[+WC6Q_xDmN|i[-B!x");
      assertEquals(6, int0);
      
      String string6 = StringUtils.center("Rt 'p2gvlC:AsRn9M", 234);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("                                                                                                            Rt 'p2gvlC:AsRn9M                                                                                                             ", string6);
      assertNotNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "[+WC6Q_xDmN|i[-B!x", (CharSequence) "", 302);
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "*cKw;", (CharSequence[]) stringArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("[+WC6Q_xDmN|i[-B!x", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("N=+");
      assertEquals("n=+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("n=+", "N=+");
      assertFalse(string1.equals((Object)string0));
      assertEquals("N=+n=+N=+", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 3212);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("+pc|_dXmC4=1>m", "+pc|_dXmC4=1>m");
      assertEquals("+pc|_dXmC4=1>m", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String string0 = StringUtils.substring("*PC+&", (-692));
      assertEquals("*PC+&", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("*PC+&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultIfEmpty("Y|lJY1", "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Y|lJY1", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("", 3);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Y|lJY1", 3);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Y|lJY1", (CharSequence) "Y|lJY1");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "_Nv");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.compareIgnoreCase("", "", true);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      String[] stringArray0 = new String[27];
      stringArray0[0] = "8Y=*N";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[5] = "&22^f/>iYZge6-_";
      stringArray0[6] = "2u11]HJRV$^#u|r";
      stringArray0[7] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "1(3");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(27, stringArray0.length);
      assertEquals(27, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.substring("", 1431657400);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("8Y=*N");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("[aba~\"(dGN8KlJm*c)", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("[aba~\"(dGN8KlJm*c)", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("1(3", "[aba~\"(dGN8KlJm*c)", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(27, stringArray0.length);
      assertEquals(27, stringArray1.length);
      assertEquals("1(3", string2);
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("88i|)A<Q-Q|%q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("P($9h+6q:s]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.removeStart("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", "Locale must not be null");
      assertEquals("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, '.');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, (-1312));
      assertNull(string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string1 = StringUtils.join(objectArray0, 'R');
      assertEquals(1, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'c';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'q';
      String string2 = StringUtils.join(charArray0, 'c', (-3235), (-1431655747));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'p', 'c', 'R', 'R', 'q'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      String string3 = StringUtils.join((byte[]) null, 'c');
      assertNull(string3);
      
      charSequenceArray0[6] = (CharSequence) null;
      String string4 = StringUtils.appendIfMissing((String) null, "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissing(" >hr(a]~i&a9V~lpT", "", charSequenceArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertEquals(" >hr(a]~i&a9V~lpT", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((byte[]) null, 'q');
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Cloneable type ");
      assertEquals("Cloneable type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Threshold must not be negative", "");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.appendIfMissing("rN~", "', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("rN~', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String[] stringArray0 = new String[30];
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(30, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("R");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("R", "K+", true);
      assertEquals(7, int0);
      
      String string0 = StringUtils.substringAfter("K+", "K+");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("J1Fj>ggi-9q#_Ux", "]\"cRI&tb6U`bN=");
      assertEquals("J1Fj>ggi-9q#_Ux", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "J1Fj>ggi-9q#_Ux";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "]\"cRI&tb6U`bN=";
      charSequenceArray0[3] = (CharSequence) "#tjH,%vIvu";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) charSequenceArray0[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string2 = StringUtils.join(objectArray0, 'G');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are", ":eX<5nQ4-Fn?4vXX", true);
      assertEquals(6, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("", "J1Fj>ggi-9q#_Ux", (-2552));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) ":eX<5nQ4-Fn?4vXX");
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "...";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.join((Object[]) stringArray0, "", 57, (-2552));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals(2, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertNotSame(stringArray0, stringArray1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)10;
      String string7 = StringUtils.join(byteArray0, '7');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)3, (byte) (-34), (byte)6, (byte)14, (byte)13, (byte) (-128), (byte)10}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("37-34767147137-128710", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 71, 71);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", (-40));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.uncapitalize(":30GY!Fj8");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":30GY!Fj8", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = ":30GY!Fj8";
      stringArray0[4] = ":30GY!Fj8";
      stringArray0[5] = " ";
      stringArray0[6] = ":30GY!Fj8";
      stringArray0[7] = ":30GY!Fj8";
      stringArray0[8] = ">hr(a]~i&a9V~lpT";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(9, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substring(">hr(a]~i&a9V~lpT", (-1431655763), (-40));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) ":30GY!Fj8");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "e";
      boolean boolean0 = StringUtils.endsWithAny("O2Y}C~", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("e", (-765), (-765));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "O2Y}C~", (CharSequence) "", 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      String string0 = "...";
      stringArray0[0] = "...";
      stringArray0[1] = "Illegal range. The step cannot be zero.";
      String string1 = "maxWith cannot be negative";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "";
      String string2 = "*dGA";
      stringArray0[4] = "*dGA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("*dGA", 0, (-2081));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'p';
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      String string2 = StringUtils.join((List<?>) stack0, 'G', 26, 26);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(string2.equals((Object)string0));
      assertFalse(stack0.contains(string2));
      assertEquals("", string2);
      assertNotNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(26));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.substring((String) null, 321);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("", 57);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("                                                         ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("eg%t7=$/?Y#q}", "Duplicate enum constant name(s) found in ");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("eg%t7=$/?Y#q}", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("l", 'l');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, '3', 5, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Could not find parameter named %s in test %s", 'a');
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, "\"", 1112);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("\"", "\"");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("", 'T');
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("X,M4x/#1`Ugk", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, '\\');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.split("", "|h|9u=coFpz:qw", (-1924));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.toRootLowerCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join((List<?>) null, (String) null, (-1924), 0);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      String string6 = StringUtils.stripStart("<8kYN`y2}:D0h", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("<8kYN`y2}:D0h", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("StopwatchExtension", (-1924), 108);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("StopwatchExtension", string7);
      assertNotNull(string7);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "X,M4x/#1`Ugk", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.rightPad(">hr(a]~i&a9V~lpT", 174);
      assertEquals(">hr(a]~i&a9V~lpT                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", "VT0nQ)~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(">hr(a]~i&a9V~lpT                                                                                                                                                              ", 32767, 174);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("VT0nQ)~", "org.apache.commons.lang3.StringUtils", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("VT0nQ)~", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ">hr(a]~i&a9V~lpT                                                                                                                                                              ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isWhitespace("VT0nQ)~");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Br='G[=L'@XufZT", "N", (-1139));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringAfterLast(">hr(a]~i&a9V~lpT", "org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string6);
      assertNotNull(string6);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("org.apache.commons.lang3.StringUtils", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("(JX}7", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("$*!)ky)8-FVZ;L&&}_qoule1+Q,Gm<!pyLDq@gxBg", "$*!)ky)8-FVZ;L&&}_qoule1+Q,Gm<!pyLDq@gxBg", locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals(124, int0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.mid(":/ VjvT\"oGr)8", (-79), Integer.MAX_VALUE);
      assertEquals(":/ VjvT\"oGr)8", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ":/ VjvT\"oGr)8", (CharSequence) ":/ VjvT\"oGr)8");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("4G?'4YQy4TMDkKcX\"", (int) (short)4, '0');
      assertFalse(string1.equals((Object)string0));
      assertEquals("4G?'4YQy4TMDkKcX\"", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap((String) null, '@');
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd(".q*8bl|_ ", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(".q*8bl|_ ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace((String) null);
      assertNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ".q*8bl|_ ", (CharSequence) ".q*8bl|_ ");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string5 = StringUtils.join((Object[]) null, "-[(0<|EwWZP]EQejO.u", (int) '0', 25);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Rz![mz{F?Il3";
      objectArray0[1] = (Object) "Rz![mz{F?Il3";
      String string0 = StringUtils.joinWith("Rz![mz{F?Il3", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("Rz![mz{F?Il3", (CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Rz![mz{F?Il3", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", "W'?]xlmK%ji%");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Rz![mz{F?Il3", (CharSequence) "Rz![mz{F?Il3");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      String string2 = StringUtils.join(longArray0, '2', (-1), (-963));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(longArray0, '2', 1034, (-963));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      
      String string4 = StringUtils.strip("", "Rz![mz{F?Il3");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string5 = StringUtils.replaceIgnoreCase("_LNjn.BYsSQmrP6q;8'", "_LNjn.BYsSQmrP6q;8'", "W'?]xlmK%ji%", 2398);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("W'?]xlmK%ji%", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootLowerCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.join((List<?>) null, "Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", (-963), 2398);
      assertNull(string7);
      
      boolean boolean4 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string8 = StringUtils.stripStart("VIIV.?lOB3C@$%i#", " >hr(a]~i&a9V~lpT");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("IIV.?lOB3C@$%i#", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.mid(" ", (-1), 2398);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertEquals(" ", string9);
      assertNotNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(" ", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String string0 = StringUtils.rightPad(">hr(a]~i&a9V~lpT", 174);
      assertEquals(">hr(a]~i&a9V~lpT                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", "VT0nQ)~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(">hr(a]~i&a9V~lpT                                                                                                                                                              ", 32767, 174);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("VT0nQ)~", "org.apache.commons.lang3.StringUtils", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("VT0nQ)~", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ">hr(a]~i&a9V~lpT                                                                                                                                                              ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isWhitespace("VT0nQ)~");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Br='G[=L'@XufZT", "N", (-1139));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringAfterLast(">hr(a]~i&a9V~lpT", "Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %s");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.upperCase("_@#-i");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("_@#-I", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";F[s>^q-<wt&13Qa");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.mid(" ", 1575, 1550);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("_@#-I", "_@#-i");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("_@#-I", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center((String) null, 1324);
      assertNull(string6);
      
      String string7 = StringUtils.mid("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", 57, 1263);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("*4*[Etb.E\"aN/-|Z", "Threshold must not be negative");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("Threshold must not be negative*4*[Etb.E\"aN/-|ZThreshold must not be negative", string8);
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "fgxx";
      String string0 = StringUtils.prependIfMissingIgnoreCase("fgxx", "e", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("fgxx", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("fgxx", 4984);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "3`\"@U3::x";
      String string0 = StringUtils.prependIfMissing("ReportEntry", "3`\"@U3::x", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("3`\"@U3::xReportEntry", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("ReportEntry");
      assertFalse(string1.equals((Object)string0));
      assertEquals("ReportEntry", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("owm>w),!}N$3vyux", "O2Y}C~", (CharSequence[]) null);
      assertEquals("O2Y}C~owm>w),!}N$3vyux", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "O2Y}C~", (CharSequence) "owm>w),!}N$3vyux");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.prependIfMissing("rN~", "rN~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("rN~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("rN~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ">hr(a]~i&a9V~lpT";
      charSequenceArray0[1] = (CharSequence) ">hr(a]~i&a9V~lpT";
      String string0 = StringUtils.rotate(">hr(a]~i&a9V~lpT", (-3235));
      assertEquals("(a]~i&a9V~lpT>hr", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "(a]~i&a9V~lpT>hr";
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'q');
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals(">hr(a]~i&a9V~lpTq>hr(a]~i&a9V~lpTq(a]~i&a9V~lpT>hrqqqq", string1);
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) ">hr(a]~i&a9V~lpTq>hr(a]~i&a9V~lpTq(a]~i&a9V~lpT>hrqqqq";
      charSequenceArray0[4] = (CharSequence) ">hr(a]~i&a9V~lpT";
      charSequenceArray0[5] = (CharSequence) ">hr(a]~i&a9V~lpT";
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      String string2 = StringUtils.join(charArray0, 'p', 1637, 1637);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissing(">hr(a]~i&a9V~lpT", ">hr(a]~i&a9V~lpT", charSequenceArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals(">hr(a]~i&a9V~lpT", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("", charSequenceArray0[4], charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-720));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "line.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.left("Qm4C_%<9{_<+mX_up", (-890));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", ',');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Object varargs must not be null", "");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = StringUtils.trim("eHKASU30^D1qwjI!TT");
      assertEquals("eHKASU30^D1qwjI!TT", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("eHKASU30^D1qwjI!TT");
      assertFalse(boolean0);
      
      String string1 = StringUtils.normalizeSpace("eHKASU30^D1qwjI!TT");
      assertTrue(string1.equals((Object)string0));
      assertEquals("eHKASU30^D1qwjI!TT", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "eHKASU30^D1qwjI!TT";
      charSequenceArray0[1] = (CharSequence) "eHKASU30^D1qwjI!TT";
      charSequenceArray0[2] = (CharSequence) "eHKASU30^D1qwjI!TT";
      boolean boolean1 = StringUtils.endsWithAny("eHKASU30^D1qwjI!TT", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string2 = "~3 ";
      String string3 = StringUtils.leftPad((String) null, (-776), "~3 ");
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Supplied value must be a valid byte literal between -128 and 127: [", "h-Kg");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("h-KgSupplied value must be a valid byte literal between -128 and 127: [h-Kg", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Charset.forName("LMy<ga\"kybSU~D?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // LMy<ga\"kybSU~D?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[2] = null;
      String string0 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = charSequenceArray0[4];
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string1 = StringUtils.chop("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      String[] stringArray1 = StringUtils.substringsBetween("1+Q,Gm<!pyq@gxBg", "Q", "_iD&|k");
      assertNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "_iD&|k", (CharSequence) "1+Q,Gm<!pyq@gxBg");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll((String) null, "Strings must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.remove((String) null, '\'');
      assertNull(string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, (String) null);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.substring("", (-3409), 430);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.uncapitalize(":30GY!Fj8");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":30GY!Fj8", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      stringArray0[3] = ":30GY!Fj8";
      stringArray0[4] = ":30GY!Fj8";
      stringArray0[5] = " ";
      stringArray0[6] = ":30GY!Fj8";
      stringArray0[7] = ":30GY!Fj8";
      stringArray0[8] = ">hr(a]~i&a9V~lpT";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(9, stringArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substring(">hr(a]~i&a9V~lpT", (-1431655763), 0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) ":30GY!Fj8");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.uncapitalize(":30GY!Fj8");
      assertEquals(":30GY!Fj8", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ":30GY!Fj8", 126);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring(":30GY!Fj8", (-1), (-2141));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ":30GY!Fj8", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) ":30GY!Fj8", "Ux+ -hLSLk51-,hRjm7");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.abbreviate("", "5L(Q#}MSOUvK/", (-2141), 126);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = "G";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G";
      stringArray0[1] = "G";
      stringArray0[2] = "G";
      String[] stringArray1 = new String[15];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "G";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("G", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = StringUtils.rightPad("* $ ~0", 0);
      assertEquals("* $ ~0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("ebk|BuNM^/DKJcL'OfJ", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ebk|BuNM^/DKJcL'OfJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("ebk|BuNM^/DKJcL'OfJ", 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("", "", "Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("s:)(*]0+,W$I");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("s:)(*]0+,W$I", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "org.junitpioneer.jupiter.RetryingTestExtension", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.substringAfterLast("63xJ]!2X_|_b", "offset cannot be negative");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("offset cannot be negative");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("offset cannot be negative", string6);
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("* $ ~0", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      try { 
        StringUtils.getBytes("Strings must not be null1+Q,Gm<!pyLDq@gxBg", "=v;)\"OR");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String string0 = StringUtils.removeAll("sYqMH1TZ5ac[mYW&{E[:WPh|mH8{660B90'd", (String) null);
      assertEquals("sYqMH1TZ5ac[mYW&{E[:WPh|mH8{660B90'd", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("sYqMH1TZ5ac[mYW&{E[:WPh|mH8{660B90'd", (CharSequence) null, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("...G...", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("$y[C/f0H+", "$y[C/f0H+", false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("...", "...G...", 0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("$y[C/f0H+");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("$y[C/f0H+", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "$y[C/f0H+");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "maxWith cannot be negative");
      assertNull(stringArray0);
      
      String string6 = StringUtils.join((Object[]) null, "...", 2801, (-1));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((Object[]) null, "Supplied value must be a valid byte literal between -128 and 127: [", (-1492), (-1492));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("*sJ", "*sJ", "*sJ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *sJ
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 154);
      assertNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Index", "Index");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "Index");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.center("GvK", 4, "GvK");
      assertEquals("GvKG", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, 'g');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-751));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("6iqsGwf!!D)#;3A|rU,", '2');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.remove("f[+l<}b [r'", '=');
      assertFalse(string1.equals((Object)string0));
      assertEquals("f[+l<}b [r'", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "X~", 'P');
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.split("_LNjn.BYsSQmrP6q;8'", "_LNjn.BYsSQmrP6q;8'", 34);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("\"@TOEPFCry/\u0000NzL", "<8kY{N`y2}:D0h", "...");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // <8kY{N`y2}:D0h
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.remove("', '", 'm');
      assertEquals("', '", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.chop("R");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.defaultString(">hr(a]~i&a9V~lpT", ">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[1] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null, ">hr(a]~i&a9V~lpT");
      assertNull(string3);
      
      String string4 = StringUtils.remove("", '\'');
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "g*K4Tteij+";
      stringArray0[2] = "";
      stringArray0[3] = ">hr(a]~i&a9V~lpT";
      stringArray0[4] = ">hr(a]~i&a9V~lpT";
      stringArray0[5] = "2u11]HJRV$^#u|r";
      stringArray0[6] = null;
      stringArray0[7] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      
      String string5 = StringUtils.chop("");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.left("Ux+ -hLSLk51-,hRjm7", 0);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "#\"&4MKaJbUn4n#X~", "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'f', (-2416), (-1750));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2416
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, '!', (-2476), (-2476));
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removePattern("", "6I'");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1893.1);
      doubleArray0[1] = 0.0;
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, 'j');
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, objectArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '\'';
      charArray0[2] = 'p';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = 'p';
      charArray0[7] = 'p';
      charArray0[8] = 'y';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'S', 90, 1637);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 90
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 1145;
      String string0 = "3Zzy]`'r)g;QSv5jGZ)";
      String[] stringArray1 = StringUtils.split("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "3Zzy]`'r)g;QSv5jGZ)");
      assertFalse(int1 == int0);
      assertEquals(56, int1);
      
      String string1 = "Ux+ -hLSLk51-,hRjm7";
      String[] stringArray2 = StringUtils.splitByWholeSeparator("Ux+ -hLSLk51-,hRjm7", "Ux+ -hLSLk51-,hRjm7", 56);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray1.length);
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", string2);
      assertNotNull(string2);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = "uH,{T`]1_%LCP=";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("DcgE=", "uH,{T`]1_%LCP=");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // uH,{T`]1_%LCP=
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("con1[ins '%s'.", "XxD/i^DNiNFEp+/AF");
      assertEquals("con1[ins '%s'.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("pnx2<0&A};uRzW^jN3", "pnx2<0&A};uRzW^jN3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("Locale must not be null", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertEquals("LOCALE MUST NOT BE NULL", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStart("", "Locale must not be null");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      String string4 = StringUtils.rightPad("...", 102, "LOCALE MUST NOT BE NULL");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("...LOCALE MUST NOT BE NULLLOCALE MUST NOT BE NULLLOCALE MUST NOT BE NULLLOCALE MUST NOT BE NULLLOCALE ", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("pnx2<0&A};uRzW^jN3", "LOCALE MUST NOT BE NULL");
      assertFalse(boolean0);
      
      String string5 = StringUtils.trimToEmpty("Ux+ -hLSLk51-,hRjm7");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string5);
      assertNotNull(string5);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("pnx2<0&A};uRzW^jN3"));
      assertNotNull(linkedHashSet0);
      
      String string6 = StringUtils.join((Iterable<?>) linkedHashSet0, '\\');
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(linkedHashSet0.contains("pnx2<0&A};uRzW^jN3"));
      assertEquals("", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", "`T0nQ)~");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("*'4ppO7rcD");
      assertFalse(string1.equals((Object)string0));
      assertEquals("*'4ppo7rcd", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((List<?>) null, 'N', (-2383), 39);
      assertNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("`T0nQ)~"));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.substring("v*9^WlJ5iWeePi", 322);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.leftPad("*'4ppO7rcD", 32767);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.rightPad(")1LkwjuYFELp", 71, ")1LkwjuYFELp");
      assertEquals(")1LkwjuYFELp)1LkwjuYFELp)1LkwjuYFELp)1LkwjuYFELp)1LkwjuYFELp)1Lkw", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.left("sW", (-2147483629));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("!d1.}#}5Y", '}');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("9", "!d1.}#}5Y");
      assertFalse(string1.equals((Object)string0));
      assertEquals("!d1.}#}5Y9!d1.}#}5Y", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) " vs ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((List<?>) null, 'Y', (-2147483629), (-2147483629));
      assertNull(string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(" vs "));
      assertNotNull(arrayList0);
      
      String string3 = StringUtils.substring("uH,{T`]1_%LCP=", 57);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("!d1.}#}5Y9!d1.}#}5Y", (int) 'Y');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("                                                                      !d1.}#}5Y9!d1.}#}5Y", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripEnd("9", "");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("9", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'm');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String string0 = StringUtils.center("HCnB;=", 1537, "HCnB;=");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.center("", (-3195), "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.leftPad("contains '%s'.", (-2032), "contains '%s'.");
      assertEquals("contains '%s'.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0cR", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("X");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      assertEquals("Illegal range. The step cannot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Illegal range. The step cannot be zero.", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("\r", "Illegal range. The step cannot be zero.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "Illegal range. The step cannot be zero.";
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("Illegal range. The step cannot be zero.");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = "})eT\\rD!oKY'@P0C";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("Illegal range. The step cannot be zero.", "Y(k,@|9jsw'%}", "})eT\rD!oKY'@P0C");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // Y(k,@|9jsw'%}
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("%s was not annotated with @CartesianArgumentsSource or @ArgumentsSource but should have been.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "x";
      stringArray0[1] = "x";
      stringArray0[2] = "x";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "x";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("x", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      String string0 = "Kwz";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Kwz");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Kwz", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-2252));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string4);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.chomp("");
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int3 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      String string6 = StringUtils.repeat("", "Object varargs must not be null", (-2252));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string7);
      
      String string8 = StringUtils.join((int[]) null, 'e', 0, (-693));
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("7B*K]9&!t+wte&q", "7B*K]9&!t+wte&q");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "7B*K]9&!t+wte&q", (CharSequence) "7B*K]9&!t+wte&q");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "7B*K]9&!t+wte&q", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 966);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "7B*K]9&!t+wte&q");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.center("9", (-1), ": O$M^X5omPv^'HL");
      assertFalse(string1.equals((Object)string0));
      assertEquals("9", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((char[]) null, ';');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = StringUtils.join(charArray0, 'a');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000a\u0000a\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("...G...", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("$y[C/f0H+", "$y[C/f0H+", false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("...", "...G...", 0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("$y[C/f0H+");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("$y[C/f0H+", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "$y[C/f0H+");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "-1WDn_:gDhdp&5");
      assertNull(stringArray0);
      
      String string6 = StringUtils.reverse("...");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("...", 'G');
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("...", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "...G...", (CharSequence) "...G...");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("..."));
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("..."));
      assertNotNull(listIterator0);
      
      String string8 = StringUtils.join((Iterator<?>) listIterator0, "...G...");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(linkedList0.contains(string8));
      assertEquals("", string8);
      assertNotNull(string8);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '!';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      String string9 = StringUtils.join(charArray0, 'K');
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertArrayEquals(new char[] {'G', '!', 'G', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("GK!KGKG", string9);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("(JX}7", " _oh\"e04O");
      assertEquals("(JX}7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String string0 = StringUtils.truncate("d.ti/#", 199, 43);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "d.ti/#", 199);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("e");
      assertEquals("e", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.substringBefore("QuI}rI\"BQuI}rI\"B", "HnXFOlY_B7m,bO");
      assertEquals("QuI}rI\"BQuI}rI\"B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("HnXFOlY_B7m,bO", "QuI}rI\"BQuI}rI\"B");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center((String) null, (-2480), 'J');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("6%}vb,a+`,/", "6%}vb,a+`,/");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'J');
      assertNull(string0);
      
      String string1 = StringUtils.remove((String) null, '=');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "[");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.truncate((String) null, 503, 57);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.mid(",(=w|jnx5-)%Bum?g", (-1), 503);
      assertEquals(",(=w|jnx5-)%Bum?g", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("Bt9qug", "A0aP1*");
      assertFalse(string5.equals((Object)string4));
      assertEquals("Bt9qug", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("Bt9qug", (-1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertEquals("Bt9qug", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("Supplied value must be a valid byte literal between -32768 and 32767: [", 3061, 1550);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.wrap("j'68_)R9e'Mi", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertEquals("org.junitpioneer.jupiter.cartesian.CartesianTestExtensionj'68_)R9e'Miorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", string8);
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.wrap("maxt >ant b negative", "maxt >ant b negative");
      assertEquals("maxt >ant b negativemaxt >ant b negativemaxt >ant b negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("...G...", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("$y[C/f0H+", "$y[C/f0H+", false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("...", "...G...", 0);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("$y[C/f0H+");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("$y[C/f0H+", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "$y[C/f0H+");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "-1WDn_:gDhdp&5");
      assertNull(stringArray0);
      
      String string6 = StringUtils.reverse("...");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("/-MT0P-,", "/-MT0P-,");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'G', 'G', 'G', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("VF", "Illegal range. The step cannot be zero.");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "...G...", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'G', 'G', 'G', 'G'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean2);
      
      int int2 = StringUtils.lastOrdinalIndexOf("...G...", "/-MT0P-,", 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.removeStart("H$1z)( XR", stringArray0[2]);
      assertEquals(5, stringArray0.length);
      assertEquals("H$1z)( XR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "s:MN", "#rTS5eM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      String string0 = StringUtils.substring("p{InCombiningDiacriticalMarks}+", (-1), (-2862));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.stripAccents("*pjg{S|?c");
      assertEquals("*pjg{S|?c", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("*pjg{S|?c");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("*pjg{S|?c", stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "s:MN", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "";
      stringArray0[5] = "&22^f/>iYZge6-_";
      String string0 = StringUtils.removeAll("&22^f/>iYZge6-_", "offset cannot be negative");
      assertEquals("&22^f/>iYZge6-_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring(";X\"UE6O", 8);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 8);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.juni", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd(">hr(a]~i&a9V~lpT", "3H%heF~u'");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(">hr(a]~i&a9V~lpT", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp((String) null, ">hr(a]~i&a9V~lpT");
      assertNull(string3);
      
      String string4 = StringUtils.remove("", '\'');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "g*K4Tteij+";
      stringArray0[2] = "";
      stringArray0[3] = ">hr(a]~i&a9V~lpT";
      stringArray0[4] = ">hr(a]~i&a9V~lpT";
      stringArray0[5] = "2u11]HJRV$^#u|r";
      stringArray0[6] = null;
      stringArray0[7] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Timeout for vintage @Test must be positive.", 65);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1891.1155F;
      floatArray0[1] = 1891.1155F;
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'o', 160, 65);
      assertArrayEquals(new float[] {1891.1155F, 1891.1155F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String string0 = StringUtils.defaultString("J1Fj>ggi-9qL_U.x", "J1Fj>ggi-9qL_U.x");
      assertEquals("J1Fj>ggi-9qL_U.x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("Qp$-)", (-311));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-311), (-311));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("uH,{T`]18%LCP=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("Y|lJY1");
      assertEquals("Y|LJY1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("R");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("U?w2ez&D", (-1063));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("+;h;9");
      assertEquals("+;h;9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String string0 = StringUtils.strip("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.swapCase(":b~Zr:Xv !O,<}YL]");
      assertFalse(string2.equals((Object)string0));
      assertEquals(":B~zR:xV !o,<}yl]", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.uncapitalize(":B~zR:xV !o,<}yl]");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(":B~zR:xV !o,<}yl]", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) ":B~zR:xV !o,<}yl]");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = ":B~zR:xV !o,<}yl]";
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "";
      stringArray0[5] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals(6, stringArray0.length);
      assertEquals(":B~zR:xV !o,<}yl]", string4);
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.split(":B~zR:xV !o,<}yl]", 'C');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("XZ9$E}Q+?m4LRLn7XvL", '(');
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-778));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.difference("", "#tjH,%vIvu");
      assertEquals("#tjH,%vIvu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "#tjH,%vIvu", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("", "", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("#tjH,%vIvu");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "#tjH,%vIvu";
      objectArray0[1] = (Object) "#tjH,%vIvu";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      String string3 = StringUtils.join(doubleArray0, '5', 2108, 0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", "#", "", 116);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootLowerCase("m{y]`rP~");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("m{y]`rp~", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.join((List<?>) null, "", 649, (-175));
      assertNull(string6);
      
      boolean boolean2 = StringUtils.startsWithAny("", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("ThebString m}st not be empty", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, (String) null, 1, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.removeStart("1+Q,Gm<!pyq@gxBg", "{y:4G");
      assertEquals("1+Q,Gm<!pyq@gxBg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '_');
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("_____", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("{y:4G");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("G4:y{", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.removeEnd("wXV~Y]c|9Rt", "$gl2");
      assertEquals("wXV~Y]c|9Rt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp(" ", ">hr(a]~i&a9V~lpT");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", '\'');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase(">hr(a]~i&a9V~lpT");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll(">hr(a]~i&a9V~lpT", ">hr(a]~i&a9V~lpT");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 16
         // >hr(a]~i&a9V~lpT
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cannot clear and set the following entries at the same time: "));
      assertNotNull(linkedList0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cannot clear and set the following entries at the same time: "));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cannot clear and set the following entries at the same time: "));
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(string1.equals((Object)string0));
      assertFalse(linkedList0.contains("Cannot clear and set the following entries at the same time: "));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vc";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("vc", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("%9AG93et");
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.remaining());
      assertNotNull(byteBuffer0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "/f+nl.RB0HKTT=", (CharSequence) "%9AG93et");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String string0 = StringUtils.repeat("h", 8192);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = "h";
      stringArray0[3] = "h";
      stringArray0[4] = "h";
      stringArray0[5] = "h";
      stringArray0[6] = string0;
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, stringArray0.length);
      assertEquals("h", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.prependIfMissing("f|Uej=s=yk", charSequenceArray0[1], charSequenceArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("\rf|Uej=s=yk", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "3`\"@U3::x", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", (-917));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String string0 = StringUtils.chop("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anothe", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.capitalize("UWu/x {");
      assertEquals("UWu/x {", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("UWu/x {", (-2047), (-1592));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("UWu/x {", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "SA!ZW <63 ", (CharSequence) "SA!ZW <63 ");
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'D', (-1), 57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removePattern("", "6I'");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1893.1);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 2399.70391657077;
      doubleArray0[4] = 2456.992;
      doubleArray0[5] = 291.1;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'T', (-2294), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2294
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("Q8SII)[", "Q8SII)[");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.removePattern("5S=", "5S=");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "5S=", (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", 64);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "5S=");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Q8SII)[", "Locale must not be null");
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("V^+8)w?,L)N7('/", "5S=", 64);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((double[]) null, 'Z', (-289), (-1288));
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.stripStart("LH2)Iyw|5(%YxwnVI", "Y");
      assertEquals("LH2)Iyw|5(%YxwnVI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = "yLC7%M),zMMB";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("yLC7%M),zMMB", (-3102), (-3102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String string0 = StringUtils.abbreviate("\"kZe8gERcm", 9, 9);
      assertEquals("\"kZe8g...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = (-338);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@@>%1:RIbo1+\"", (-338), (-338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.stripToNull("\n");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEachRepeatedly("Can't disable based on arguments, because method %s had no parameters.", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("Can't disable based on arguments, because method %s had no parameters.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("[+WC6Q_xDmN|i&[B!x", "[+WC6Q_xDmN|i&[B!x", "[+WC6Q_xDmN|i&[B!x");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // [+WC6Q_xDmN|i&[B!x
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripAccents("N0&/MJaxq@;s`nv*f|");
      assertEquals("N0&/MJaxq@;s`nv*f|", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("N0&/MJaxq@;s`nv*f|", stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "N0&/MJaxq@;s`nv*f|", (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Locale must not be null");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("Locale must not be null", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("R");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "R", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("R");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      List<Locale.LanguageRange> list0 = null;
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(locale0));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(locale0));
      assertTrue(boolean0);
      
      boolean boolean1 = linkedHashSet0.add(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedHashSet0.contains(locale0));
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 26);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", (CharSequence) "Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "v*9^WlJ5iWeePi", (CharSequence) "v*9^WlJ5iWeePi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("#RY7e*/o13[|73i;^y0", "Strings must not");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.removeFirst("$%|nGv", "$%|nGv");
      assertEquals("$%|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.unwrap("Fp{InFp{In", "");
      assertEquals("Fp{InFp{In", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'J');
      assertNull(string0);
      
      String string1 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertEquals("X,M4x/#1`Ugk", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split((String) null, "|h|9u=coFpz:qw", (int) 'J');
      assertNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = ')';
      charArray0[2] = 'l';
      String string2 = StringUtils.join(charArray0, 'i', (-1), (-1));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {';', ')', 'l'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringAfter("%s requires that either `contains` or `matches` is set.", 67);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'l');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("l<$Jp#~+1Q73{~]b", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%s was not annotated with @ArgumentsSource but should have been.";
      stringArray0[1] = "";
      stringArray0[2] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[3] = "1(3";
      stringArray0[4] = "blank_blank_blank_2014";
      stringArray0[5] = "%s was not annotated with @ArgumentsSource but should have been.";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "ZlSd*9vP3=mh8^6Z>*");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.stripEnd("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "INkr1{v");
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("C", "C");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.joinWith("C", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("C", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", (CharSequence[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String string0 = StringUtils.rightPad(">hr(a]~i&a9V~lpT", 174);
      assertEquals(">hr(a]~i&a9V~lpT                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", "`T0nQ)~");
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(">hr(a]~i&a9V~lpT                                                                                                                                                              ", 32767, 174);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceFirst("`T0nQ)~", "org.apache.commons.lang3.StringUtils", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`T0nQ)~", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ">hr(a]~i&a9V~lpT                                                                                                                                                              ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.defaultString("org.junitpioneer.jupiter.IssueExtension");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.IssueExtension", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isWhitespace("`T0nQ)~");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = ';';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'?', ';'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "org.junitpioneer.jupiter.IssueExtension", (CharSequence) "org.junitpioneer.jupiter.IssueExtension");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "[+WC6Q_xDmN|i&[-B!x", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.repeat(": ", (-1399));
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1399));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.truncate("_U", 284);
      assertEquals("_U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = "[uqoe8<QizPZ+ Lyd)r";
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.truncate("[uqoe8<QizPZ+ Lyd)r", Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      String string0 = StringUtils.abbreviateMiddle((String) null, "", 47);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)3824;
      shortArray0[1] = (short) (-2440);
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)2109;
      shortArray0[4] = (short)72;
      shortArray0[5] = (short)73;
      shortArray0[6] = (short)3138;
      shortArray0[7] = (short)3543;
      shortArray0[8] = (short)732;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Y', (-2460), 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2460
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String string0 = StringUtils.difference("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("OZ:360OO=`qpy6v`[?", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase("", "OZ:360OO=`qpy6v`[?");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("", "Ux+ -hLSLk51-,hRjm7", 0);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("-1WDn_:gDhdp&5");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Ux+ -hLSLk51-,hRjm7", (CharSequence) "OZ:360OO=`qpy6v`[?");
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertEquals("Ux+ -hLSLk51-,hRjm7", charSequence0);
      assertNotNull(charSequence0);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Search and Replace array lengths don't match: ", "Ux+ -hLSLk51-,hRjm7", stringArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", 2498, 0);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: Ux+ -hLSLk51-,hRjm7", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      String string6 = StringUtils.replaceIgnoreCase("", "maxWith cannot be negative", "Search and Replace array lengths don't match: ", (-2260));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((List<?>) null, "5f2+~%ovFl,aa*KI", (-1), (-2389));
      assertNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny("maxWith cannot be negative", stringArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(">hr(a]~i&a9V~lpT"));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(">hr(a]~i&a9V~lpT"));
      assertNotNull(listIterator0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(string0));
      assertNotNull(arrayList1);
      
      Iterator<String> iterator0 = arrayList1.iterator();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(string0));
      assertNotNull(iterator0);
      assertNotSame(arrayList1, arrayList0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "O&$:G_30P4{,P");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedList0.contains("O&$:G_30P4{,P"));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "O&$:G_30P4{,P", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("]O8v]eB7W$<A!$|", (-2147483629));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ">hr(a]~i&a9V~lpT", (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ">hr(a]~i&a9V~lpT", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = arrayList0.add("org.apache.commons.lang3.StringUtils");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(arrayList0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(arrayList0.contains(string1));
      assertTrue(boolean2);
      assertNotSame(arrayList0, arrayList1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", "X~");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("jI~", "");
      assertEquals("jI~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.replace(" vs ", "9", " vs ", 14);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) " vs ", 14);
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((long[]) null, '%', 82, 2232);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7", "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("9!d1.}#}5Y", '%');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9!d1.}#}5Y", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("9");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeAll("offset cannot be negative", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substring((String) null, 14);
      assertNull(string5);
      
      String string6 = StringUtils.left((String) null, (-917));
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd("", "TJg~w-cW9s/w ");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.defaultString("Expected exception %s was not thrown.");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertEquals("Expected exception %s was not thrown.", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.reverse("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertEquals("rehtona fo tupni eht si pool eno fo tuptuo - rorrEwolfrevOkcatS tsniaga tcetorp ot gnitrobA", string9);
      assertNotNull(string9);
      
      String[] stringArray0 = StringUtils.split("9!d1.}#}5Y", '%');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string10 = StringUtils.wrap("C p!X", (String) null);
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertEquals("C p!X", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "S");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotBlank("S");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getIfBlank(" ", (Supplier<String>) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) " ", 2516);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Pn:B");
      assertEquals("Pn:B", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "Pn:B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Rz![mz{F?Il3";
      objectArray0[1] = (Object) "Rz![mz{F?Il3";
      String string0 = StringUtils.joinWith("Rz![mz{F?Il3", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("Rz![mz{F?Il3", (CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Rz![mz{F?Il3", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", "W'?]xlmK%ji%");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Rz![mz{F?Il3", (CharSequence) "Rz![mz{F?Il3");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      String string2 = StringUtils.join(longArray0, '2', (-1), (-963));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(longArray0, '2', 1034, (-963));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      
      String string4 = StringUtils.strip("", "Rz![mz{F?Il3");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale0));
      assertNotNull(linkedList0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=\r
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("P($9h+6q:s]", "P($9h+6q:s]");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "P($9h+6q:s]", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", "%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", "org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider", 0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.stripToEmpty("%s was not annotated with @ArgumentsSource but should have been.");
      assertEquals("%s was not annotated with @ArgumentsSource but should have been.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("a+", "%s was not annotated with @ArgumentsSource but should have been.");
      assertFalse(string1.equals((Object)string0));
      assertEquals("a+", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "s{,\"", (CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianEnumArgumentsProvider");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate("a+", "]}TK 3_8'J+~Q!K", 2901);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("a+", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "OZ:360OO=`qpy6v`[?", (CharSequence) "%s was not annotated with @ArgumentsSource but should have been.");
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("OZ:360OO=`qpy6v`[?", charSequence0);
      assertNotNull(charSequence0);
      
      String string3 = StringUtils.left("a+", 2498);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("a+", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "%s was not annotated with @ArgumentsSource but should have been.", (CharSequence) "s{,\"", 2498);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceIgnoreCase("%s was not annotated with @ArgumentsSource but should have been.", "%s was not annotated with @ArgumentsSource but should have been.", "a+", (-2260));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("a+", string4);
      assertNotNull(string4);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string4));
      assertNotNull(stack0);
      
      String string5 = StringUtils.join((List<?>) stack0, "Threshold must not be negative", 2901, 23);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(stack0.contains(string5));
      assertEquals("", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("offset cannot be negative", "offset cannot be negative", "", 0);
      assertEquals("offset cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("offset cannot be negative", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      String string2 = StringUtils.chomp("", "offset cannot be negative");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("", "offset cannot be negative", "5{DK|g(W>@C[?");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string4 = StringUtils.getIfBlank("", supplier0);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "offset cannot be negative", "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.wrap("", "offset cannot be negative");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'G';
      charArray0[2] = 'm';
      charArray0[3] = 'a';
      charArray0[4] = 'Y';
      boolean boolean2 = StringUtils.containsOnly(charSequenceArray0[4], charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'!', 'G', 'm', 'a', 'Y'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("/1wlO)>LL+nT/<xl", "/1wlO)>LL+nT/<xl");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 4
         // /1wlO)>LL+nT/<xl
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Strings must not be null", "Strings must not be null");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("f", "f", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chop("f");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.prependIfMissingIgnoreCase("KE4{c", "KE4{c", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("KE4{c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("k^{90/", "k^{90/");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.repeat("", 284);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.getDigits("z)!O^}?qEhG5");
      assertEquals("5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.chop("a9&vpDnCsOG~");
      assertEquals("a9&vpDnCsOG", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", 'N');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeEndIgnoreCase("2!B", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("2!B", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-3556L);
      String string3 = StringUtils.join(longArray0, 'l', (-3374), (-3374));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new long[] {(-3556L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (String) null);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove(", Length: 0", '\'');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(", Length: 0", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllLowerCase("2!B");
      assertFalse(boolean0);
      
      String string6 = StringUtils.removeAll("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "");
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substring((String) null, 8);
      assertNull(string7);
      
      String string8 = StringUtils.left(", Length: 0", (-944));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.stripEnd("2!B", "a9&vpDnCsOG~");
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertEquals("2!B", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.join((double[]) null, '\'');
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'A');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("GN5`[Odg");
      assertFalse(string1.equals((Object)string0));
      assertEquals("gN5`[Odg", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("51`Q", 126);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`Q51", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("`Q51", 168);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((short[]) null, 'b');
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "gN5`[Odg", (CharSequence) null, 16);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substring("`Q51", 187, 187);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "`Q51");
      assertFalse(boolean0);
      
      String string6 = StringUtils.stripStart((String) null, "u~KC'%FP-|1xV+9");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "u~KC'%FP-|1xV+9", "u~KC'%FP-|1xV+9");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.abbreviate("GN5`[Odg", "Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", 216, 216);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("GN5`[Odg", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("S^@!t6=(Ux5", 0, "S^@!t6=(Ux5");
      assertEquals("S^@!t6=(Ux5", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("S^@!t6=(Ux5", "hmpCi");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compare((String) null, "AQ_P}[wqb", false);
      assertEquals(1, int0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("S^@!t6=(Ux5", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("S^@!t6=(Ux5");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("S^@!t6=(Ux", string2);
      assertNotNull(string2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)127;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)59;
      shortArray0[5] = (short) (-128);
      String string3 = StringUtils.join(shortArray0, 'Z');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new short[] {(short)3, (short)127, (short) (-1), (short)2, (short)59, (short) (-128)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertEquals("3Z127Z-1Z2Z59Z-128", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String string0 = StringUtils.rotate("v*9^WlJ5iWeePi", (-3235));
      assertEquals("*9^WlJ5iWeePiv", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'G');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'p';
      String string2 = StringUtils.deleteWhitespace("Wx&U*[.{5hE<BHTGv");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Wx&U*[.{5hE<BHTGv", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("Minimum abbreviation width with offset is %d", 'P');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'p');
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStart("clone", "![w|'MY\"=I7@J![w|'MY\"=I7@J");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("clone", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean0);
      
      String string5 = StringUtils.getIfEmpty("\n", (Supplier<String>) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\n", string5);
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.split("{}", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.removePattern("Minimum abbreviation width with offset is %d", "`@VQtq%d_N9h=$CXsU");
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string6);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Y[^/Y<cT", (CharSequence) "Y[^/Y<cT");
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeStartIgnoreCase("St@ings6must not b", "Y[^/Y<cT");
      assertEquals("St@ings6must not b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Illegal range. The step annot be zero.");
      assertEquals("Illegal range. The step annot be zero.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("Illegal range. The step annot be zero.", '\u000B');
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u000BIllegal range. The step annot be zero.\u000B", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step annot be zero.", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp("Rv%0x0!A@dz=1");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Rv%0x0!A@dz=1");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("Rv%0x0!A@dz=1", '\u000B');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate("Rv%0x0!A@dz=1", 16);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("\u000BIllegal range. The step annot be zero.\u000B", '\u000B');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("\u000BIllegal range. The step annot be zero.\u000B", string5);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.difference("", "#tjH,%vIvu");
      assertEquals("#tjH,%vIvu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "#tjH,%vIvu", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("", "", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("#tjH,%vIvu");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("5}%yW_m", "", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("5}%yW_m", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "#tjH,%vIvu";
      objectArray0[1] = (Object) "#tjH,%vIvu";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      String string4 = StringUtils.join(doubleArray0, '5', 2108, 0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase("", "#", "", 116);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootLowerCase("m{y]`rP~");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("m{y]`rp~", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.join((List<?>) null, "", 649, (-175));
      assertNull(string7);
      
      boolean boolean2 = StringUtils.startsWithAny("5}%yW_m", stringArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'C';
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {67.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("67.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("\n", "Vv");
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertTrue(vector1.equals((Object)vector0));
      assertNotNull(vector1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) null, locale_FilteringMode0);
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(list0.contains("Vv"));
      assertNotNull(list0);
      assertNotSame(vector1, vector0);
      
      String string2 = null;
      int int0 = 3;
      // Undeclared exception!
      try { 
        StringUtils.join(list0, (String) null, (-9), 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -9
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      String string0 = StringUtils.join(doubleArray0, 'A');
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals("0.0A0.0A0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      short[] shortArray0 = new short[3];
      String string0 = StringUtils.join(shortArray0, 'X');
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals("0X0X0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.getDigits("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (-1L);
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      String string2 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {(-1L), (-1L), (-1L), (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll("", " ");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", '\'');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(">hr(a]~i&a9V~lpT"));
      assertNotNull(arrayList0);
      
      String string5 = StringUtils.join((Iterable<?>) arrayList0, "R");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(arrayList0.contains(">hr(a]~i&a9V~lpT"));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) stringArray0[0], (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(8, stringArray0.length);
      assertEquals(0, int1);
      
      String string6 = StringUtils.removeStartIgnoreCase("2u11]HJRV$^#u|r", "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("2u11]HJRV$^#u|r", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.rotate("2u11]HJRV$^#u|r", (-833));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("V$^#u|r2u11]HJR", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.right("Locale must not be null", 3);
      assertEquals("ull", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("ull", "Locale must not be null", "Locale must not be null");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String string0 = StringUtils.rotate("Threshold must not be negative", 0);
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'B');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String string0 = StringUtils.replace("9", "9", " vs ", 14);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((long[]) null, '%', 82, 2232);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("Ux+ -hLSLk51-,hRjm7", "");
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string2);
      assertNotNull(string2);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(82));
      assertNotNull(vector0);
      
      String string3 = StringUtils.join((List<?>) vector0, "9", 80, (-1828));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(vector0.contains(82));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.rotate(" vs ", (-2259));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("  vs", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEndIgnoreCase(";56W_zH9WE{zYDu", "TPy{zV-Fv%}62A)$wl");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(";56W_zH9WE{zYDu", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "9", (String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes("Search and Replace array lengths don't match: ", (String) null);
      assertEquals(46, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      byte[] byteArray1 = StringUtils.getBytes("n", (String) null);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)110}, byteArray1);
      assertEquals(1, byteArray1.length);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.join((List<?>) linkedList0, "W", 15, 15);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("W"));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = "w`I8)b";
      String string2 = StringUtils.replaceOnce("|?$0Lf|VC&ehyshB);", ">hr(a]~i&a9V~lpT", " ");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|?$0Lf|VC&ehyshB);", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase(" ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat(" ", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric("|?$0Lf|VC&ehyshB);");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "w`I8)b";
      int int0 = StringUtils.lastIndexOfAny(">hr(a]~i&a9V~lpT", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = null;
      String string6 = StringUtils.upperCase("|?$0Lf|VC&ehyshB);");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("|?$0LF|VC&EHYSHB);", string6);
      assertNotNull(string6);
      
      int int1 = 101;
      // Undeclared exception!
      try { 
        StringUtils.truncate(" ", 101, (-4066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'u');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right("Object varargs must not be null", (short)0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("bM\u0001/wX<~@g#q");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("1", "zK#E3S@.");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("1", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("kCA<:Z+c9Tc,");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Kca<:z+C9tC,", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("", "1");
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      assertNotNull(string7);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("1"));
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedList0.add("");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(linkedList0.contains("1"));
      assertTrue(linkedList0.contains(string4));
      assertTrue(boolean2);
      
      boolean boolean3 = linkedList0.add("");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(linkedList0.contains("1"));
      assertTrue(linkedList0.contains(string4));
      assertTrue(boolean3);
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("1"));
      
      boolean boolean4 = linkedList0.add((String) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(linkedList0.contains("1"));
      assertTrue(boolean4);
      
      String string8 = StringUtils.join((List<?>) linkedList0, "", 1267, (int) (short)0);
      assertEquals(1, linkedList0.size());
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(linkedList0.contains("kCA<:Z+c9Tc,"));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.rotate("ZxCrI6*w", 0);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertEquals("ZxCrI6*w", string9);
      assertNotNull(string9);
      
      String string10 = StringUtils.removeEndIgnoreCase("bM\u0001/wX<~@g#q", "");
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertEquals("bM\u0001/wX<~@g#q", string10);
      assertNotNull(string10);
      
      boolean boolean5 = StringUtils.containsOnly((CharSequence) "bM\u0001/wX<~@g#q", "7A?PaZ\"D4S<%>BvZ");
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "1");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, "1+Q,Gm<!pyq@gxBg", 1112);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("1+Q,Gm<!pyq@gxBg", "1+Q,Gm<!pyq@gxBg");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("X,M4x/#1`Ugk", '=');
      assertFalse(string2.equals((Object)string1));
      assertEquals("X,M4x/#1`Ugk", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceAll("vh.<wi/DhRdJ.4=|", "...", "NQwuq\"^0");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0|", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("X,M4x/#1`Ugk", 418);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.left("", (-1775));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("#H:b", (-1), "cP,NkR^`u*efP9;k");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("#H:b", string6);
      assertNotNull(string6);
      
      char[] charArray0 = new char[0];
      String string7 = StringUtils.join(charArray0, '\\');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("Cloneable type "));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "?b_u`'Q\"wk;f}\"@&E");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("?b_u`'Q\"wk;f}\"@&E"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "The type must not be null");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(19, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank(" ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("H9$Nx[OU.p$e=<", 'h');
      assertFalse(string1.equals((Object)string0));
      assertEquals("hH9$Nx[OU.p$e=<h", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("Cloneable type ", 17, "a+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("a+Cloneable type ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("FwV", "", "Y>PE?]p}i% IL[K/");
      assertNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase((String) null, "Cloneable type ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "Cloneable type ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("ec|4cQ2QGHKkrUtwF", (String) null, 103);
      assertEquals("ec|4cQ2QGHKkrUtwF", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Cloneable type ", (CharSequence) "Cloneable type ");
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("Cloneable type ", charSequence0);
      assertNotNull(charSequence0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals(" ", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("Excep");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("Excep", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.stripStart("Cloneable type ", "Ux+ -hLSLk51-,hRjm7");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Cloneable type ", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("Cloneable type ", (String) null, 6);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("W", (-4053));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("W", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("W", 0, "FwV");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertEquals("W", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7e+@M");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(""));
      assertNotNull(listIterator0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      Iterator<String> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.chomp(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.split("7e+@M", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '<';
      charArray0[2] = 's';
      charArray0[3] = 'w';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "0W", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\'', '<', 's', 'w'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.capitalize("87&gxkkB7`K.6:/");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("87&gxkkB7`K.6:/", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.difference((String) null, "Ux+ -hLSLk51-,hRjm7");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string4);
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("Ux+ -hLSLk51-,hRjm7");
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(13, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 798, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("f(", "f(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, (-57), "f(");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String string0 = StringUtils.strip("Strings must not be nullS");
      assertEquals("Strings must not be nullS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, '{', 2879, 2183);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      int int0 = StringUtils.compare("uH,{T`]1_%LCP=", "uH,{T`]1_%LCP=", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.swapCase("112p0p112p204p204p112p112p204");
      assertEquals("112P0P112P204P204P112P112P204", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "X~a+IG!wnwY_mld=+`lX7e+@M", (CharSequence) "uH,{T`]1_%LCP=", 1304);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "Ux");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Cloneable type ");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rotate("mgdM\"", 52);
      assertEquals("M\"mgd", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny("Cloneable type ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(14, int0);
      
      String string1 = StringUtils.prependIfMissing(" $vgx", "Cloneable type ", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(" $vgx", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("mgdM\"");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp(")");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(")", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase("mgdM\"");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "m31WO7S}x5?%", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string3 = StringUtils.getIfEmpty(" $vgx", (Supplier<String>) null);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" $vgx", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split(" $vgx", "dM\"mg");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Cloneable type ", charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNotBlank(" $vgx");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string4 = StringUtils.capitalize("$mP+pUzB{$}7");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("$mP+pUzB{$}7", string4);
      assertNotNull(string4);
      
      boolean boolean4 = StringUtils.isEmpty("m31WO7S}x5?%");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-2252));
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string4);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.chomp("");
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int3 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      String string6 = StringUtils.repeat("", "Object varargs must not be null", (-2252));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase((String) null, "");
      assertNull(string7);
      
      String string8 = StringUtils.join((int[]) null, 'e', 0, (-693));
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "R");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(204);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      stringWriter0.flush();
      assertEquals("", stringWriter0.toString());
      
      String string0 = StringUtils.leftPad("\"@TOEPFCry/\u0000NzL", 204, "OI'ZvU^0CL");
      assertEquals("OI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0C\"@TOEPFCry/\u0000NzL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("OI'ZvU^0CL", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertEquals("OI'ZvU^0CL", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("K`Y", (String) null, 2601);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("K`Y", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase("9");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("9", "K`Y");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.wrap("OI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0\"@TOEPFCry/\u0000NzL", 'I');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("IOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0CLOI'ZvU^0\"@TOEPFCry/\u0000NzLI", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "K`Y", 204, 7);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBetween(" >hr(a]~i&a9V~lpT", "\"@TOEPFCry/\u0000NzL");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("!d1.}#}5Y", 0, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertEquals("!d1.}#}5Y", string2);
      assertNotNull(string2);
      
      StringWriter stringWriter0 = new StringWriter(7);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append('r');
      assertEquals("r", stringWriter0.toString());
      assertEquals("r", stringWriter1.toString());
      assertNotNull(stringWriter1);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      assertEquals("rnull", stringWriter0.toString());
      assertEquals("rnull", stringWriter1.toString());
      assertEquals("rnull", stringWriter2.toString());
      assertNotNull(stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      String string3 = StringUtils.join(charArray0, 'r');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("rrrrrrrrr", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "rrrrrrrrr", 15, (-926));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY*h1", "Y|lJY*h1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-91);
      String string1 = StringUtils.join(byteArray0, '\\');
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)0, (byte) (-91)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals("6\\6\\0\\-91", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Y|lJY*h1", (int) (byte)0, (int) (byte)0);
      assertEquals((-1), int0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>((byte)6);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("Y|lJY*h1"));
      assertNotNull(arrayList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string2 = StringUtils.lowerCase("6\u0006\u0000-91", locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("6\u0006\u0000-91", string2);
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("Y|lJY*h1", "6\u0006\u0000-91");
      assertEquals(0.43, double0, 0.01);
      
      String string3 = StringUtils.wrap("", 'I');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("II", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (int) (byte)0, (int) (byte) (-91));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substringBetween("", "org.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Ux+ -hLSLk51-,hRjm7");
      assertEquals("Ux+-hLSLk51-,hRjm7", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+-hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(";Q", "sTJ{-2.efD*");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "sTJ{-2.efD*";
      charSequenceArray0[1] = (CharSequence) "Ux+-hLSLk51-,hRjm7";
      charSequenceArray0[2] = (CharSequence) ";Q";
      charSequenceArray0[3] = (CharSequence) "Ux+ -hLSLk51-,hRjm7";
      charSequenceArray0[4] = (CharSequence) ";Q";
      String string1 = StringUtils.substringBeforeLast("dn", "dn");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Ux+ -hLSLk51-,hRjm7";
      boolean boolean1 = StringUtils.startsWithAny("Ux+ -hLSLk51-,hRjm7", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("AVm9*SHE@>^v", (Supplier<String>) null);
      assertEquals("AVm9*SHE@>^v", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'J');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 127);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Kd3O#xG?TuVz3nI00", " ");
      assertEquals("Kd3O#xG?TuVz3nI00", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.substringAfter(": ", "N78_s=+p_6))8Xj)oE");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ": ", (CharSequence) "");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 0);
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean0);
      
      boolean boolean1 = arrayDeque0.add("");
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean1);
      
      boolean boolean2 = arrayDeque0.add("");
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean2);
      
      Iterator<String> iterator0 = arrayDeque0.iterator();
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(""));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'z');
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(""));
      assertFalse(arrayDeque0.contains(string0));
      assertEquals("zz", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("zz", 'z');
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("zz");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("z", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "z";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "zz";
      charSequenceArray0[3] = (CharSequence) "zz";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "zz";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "zz";
      boolean boolean3 = StringUtils.containsAny((CharSequence) "zz", charSequenceArray0);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'V');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("nUP0jFyU#I=Cy*", "3`\"@U3::x");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 160);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", "'clnMd");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.getIfBlank("Object varargs must not be null", (Supplier<String>) null);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Object varargs must not be null", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center("'clnMd", 0, 'l');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("'clnMd", string6);
      assertNotNull(string6);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "'clnMd", 160);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.reverseDelimited("org.apache.commons.lang3.StringUtils", '#');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("org.apache.commons.lang3.StringUtils", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap("", 'l');
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      assertNotNull(string8);
      
      String string9 = StringUtils.deleteWhitespace("");
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
      assertNotNull(string9);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(46, int1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = '#';
      charArray0[5] = '#';
      String string10 = StringUtils.join(charArray0, 'V', 3185, (-1));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', '#', '#'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("", string10);
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 1145;
      String string0 = "3Zzy]`'r)g;QSv5jGZ)";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("3Zzy]`'r)g;QSv5jGZ)", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", 1145);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.cartesian.CartesianTestExtension", (CharSequence) "3Zzy]`'r)g;QSv5jGZ)");
      assertFalse(int1 == int0);
      assertEquals(56, int1);
      
      String string1 = "N";
      String[] stringArray2 = StringUtils.splitByWholeSeparator("N", "N", 56);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray3 = new String[0];
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      
      String string2 = StringUtils.getCommonPrefix(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(1, stringArray1.length);
      assertEquals("3Zzy]`'r)g;QSv5jGZ)", string2);
      assertNotNull(string2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      
      String string3 = "uH,{T`]1_%LCP=";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("DcgE=", "uH,{T`]1_%LCP=");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // uH,{T`]1_%LCP=
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      String string0 = StringUtils.substringAfter("nJPuSa", "nJPuSa");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("m3bkz7e)", "m3bkz7e)");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6
         // m3bkz7e)
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(";7#R52[3*}\"n*");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      String string0 = "YEwsIbluQ0Gm6?vH";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("YEwsIbluQ0Gm6?vH");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = (-1753);
      // Undeclared exception!
      try { 
        StringUtils.truncate("YEwsIbluQ0Gm6?vH", (-1753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals(35, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.removePattern("u", "u");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(linkedList0);
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(spliterator0);
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.cartesian.CartesianTestExtension"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("#RY7e*/o13[|73i;^y0", supplier0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#RY7e*/o13[|73i;^y0", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("!X.B!IPws?rr", "org.junitpioneer.jupiter.cartesian.CartesianTestExtension");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("!X.B!IPws?rr", "#RY7e*/o13[|73i;^y0");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // #RY7e*_/o13[|73i;^y0
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Ux+ -hLSLk51-,hRjm7S");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.strip("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removePattern((String) null, "");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.repeat("[", (-144));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing("\n", "", charSequenceArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank("Y|lJY1");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\n", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = StringUtils.difference("GCnB;c", "GCnB;c");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly("9~3[", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("9~3[", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "9~3[", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "9~3[", stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another9~3[", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another9~3[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('g', 16);
      assertFalse(string1.equals((Object)string0));
      assertEquals("gggggggggggggggg", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "Execution of '%s' took [%d] ms.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.EMPTY;
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|UbG=1(-1WDn_:gDhdp&5", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|UbG=1(-1WDn_:gDhdp&5", string3);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0NQwuq\"^0=|UbG=1(-1WDn_:gDhdp&5", 3, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String string0 = StringUtils.difference("", "3Yu#<");
      assertEquals("3Yu#<", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("rN~", "rN~", (CharSequence[]) null);
      assertEquals("rN~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.difference("", "#tjH,%vIvu");
      assertEquals("#tjH,%vIvu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "#tjH,%vIvu", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("", "", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("#tjH,%vIvu");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("5}%yW_m", "", stringArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertEquals("5}%yW_m", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "5}%yW_m", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "#tjH,%vIvu";
      objectArray0[1] = (Object) "#tjH,%vIvu";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      String string4 = StringUtils.join(objectArray0, '*');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      String string0 = StringUtils.wrap("d@W~X8lxPCy@>4", 'w');
      assertEquals("wd@W~X8lxPCy@>4w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "3`\"@U3::x", (CharSequence) "3`\"@U3::x");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "3`\"@U3::x", (CharSequence) "3`\"@U3::x", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("maxWith cannot be negative", "md~%\t|~X", (String) null);
      assertNull(stringArray0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)10;
      String string2 = StringUtils.join(shortArray0, '1');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new short[] {(short)10}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("10", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "10", (CharSequence) "maxWith cannot be negative");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll(">hr(a]~i&a9V~lpT", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals(">hr(a]~i&a9V~lpT", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("imye8PAxl0|R{w[k", '\'');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("imye8PAxl0|R{w[k", string5);
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[2] = (-1L);
      longArray0[4] = 0L;
      char char0 = '%';
      String string1 = StringUtils.join(longArray0, '%', 573, 0);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, (-1L), 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-2045222519));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("!7s|H/i3[!bpjZs", "!7s|H/i3[!bpjZs", "!7s|H/i3[!bpjZs");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Ux+ -hLSLk51-,hRjmR", "Ux+ -hLSLk51-,hRjmR");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("\r", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat((String) null, 1311);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Ux+ -hLSLk51-,hRjmR", "C=3pw)@g:xmP`|");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      String string0 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("8k", "Iw;eih8bYgT", "!d1.}#}5Y");
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Iw;eih8bYgT", (CharSequence) "Iw;eih8bYgT");
      assertEquals(0, int0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("1*pCuo:SNv,*U1'5", "!d1.}#}5Y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1*pCuo:SNv,*U1'5", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("", '3');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.truncate("Iw;eih8bYgT", 14, 14);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ka5[", "ka5[");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "@.Kr1t1)?W!B=kc50>N", (CharSequence) null, (-658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: ", "Cannot clear and set the following entries at the same time: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 1145);
      assertNull(stringArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("Cannot clear and set the following entries at the same time: ", "", "|BYk<pn");
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("", "Cannot clear and set the following entries at the same time: ");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, ";I< Y)");
      assertEquals(";I< Y)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("[ms\":!", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[ms\":!", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "9", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("[ms\":!", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = null;
      String string3 = StringUtils.defaultIfEmpty((String) null, "#3Ea");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("#3Ea", string3);
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.join((char[]) null, 'A');
      assertNull(string4);
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("jI~", "F");
      assertEquals("jI~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("jI~", "CartesianEnumSource annotation not found");
      assertEquals("jI~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "k)", "OMI{S", (-500));
      assertEquals("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", (CharSequence) "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("k)", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringBetween("8:'cHT'7*],.E/%JE", (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.length("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertEquals(70, int0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, "i08\n-${H", "OMI{S");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-95);
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte) (-108), (byte) (-126), (byte)96, (byte)76, (byte) (-95)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("1\u0000\uFFFD\uFFFD`L\uFFFD", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Yb", "");
      assertEquals("Yb", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("Yb", "Yb");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("GCnB;c", "eID?E)\u0007yojp.8O");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "GCnB;c", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("f", "f");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "f", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 98;
      String string0 = StringUtils.join(floatArray0, 'C');
      assertArrayEquals(new float[] {98.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("98.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.substring("", Integer.MIN_VALUE);
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) " ";
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "T>(H;|a)$c|8");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(" ", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "", 2);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String string0 = StringUtils.rightPad("c5kSRiG *", 97);
      assertEquals("c5kSRiG *                                                                                        ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ",", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '9');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String string0 = StringUtils.center("e", 2745, 'R');
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints(string0);
      assertEquals(2745, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      String string0 = StringUtils.center("b", 32, "b");
      assertEquals("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0007R76i(BW8ACq", (CharSequence) "\u0007R76i(BW8ACq", (-2147483617));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[4] = "";
      String string0 = StringUtils.swapCase("1+Q,Gm<!pyq@gxBg");
      assertEquals("1+q,gM<!PYQ@GXbG", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "%(@~lfU<(W@`Q", 35);
      assertEquals(13, int0);
      
      String[] stringArray1 = StringUtils.split("_iD&|k", "<|<p`\">f(!I");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      assertEquals(8, stringArray0.length);
      assertEquals((-1), int1);
      assertNotSame(stringArray0, stringArray1);
      
      String string2 = StringUtils.left("1+Q,Gm<!pyq@gxBg", (-1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("_iD&|k", 13);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_iD&|k", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = StringUtils.repeat('3', 98);
      assertEquals("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      String string0 = StringUtils.center("', has a length less than 2", 5, '9');
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "', has a length less than 2", "', has a length less than 2");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 64);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substring("s{,\"", 99);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("The type must not be null", 2350);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("The type must not be null");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("the type must not be null", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.center("", 2350);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "the type must not be null", 99);
      assertFalse(int1 == int0);
      assertEquals(25, int1);
      
      String[] stringArray1 = StringUtils.split("/+_qLB8+jT/S=V8q7", "");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "the type must not be null", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, stringArray1.length);
      assertEquals((-1), int2);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.join((float[]) null, '`');
      assertNull(string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      String string5 = StringUtils.valueOf(charArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new char[] {'`', '`', '`', '`', '`', '`', '`'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("```````", string5);
      assertNotNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "```````", (CharSequence) string3, 281);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = StringUtils.substring("', is neither of type Map.Entry nor an Array", 54);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = "org.junitpioneer.jupiter.params.FloatRange";
      String string1 = StringUtils.stripToNull("org.junitpioneer.jupiter.params.FloatRange");
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.params.FloatRange", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.params.FloatRange";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.FloatRange";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Charset.forName("org.junitpioneer.jupiter.params.FloatRange");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.junitpioneer.jupiter.params.FloatRange
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String string0 = "Ux+ -hLSLk51-,hRjm7";
      String string1 = StringUtils.trimToNull("Ux+ -hLSLk51-,hRjm7");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Ux+ -hLSLk51-,hRjm7"));
      assertNotNull(arrayList0);
      
      int int0 = StringUtils.lastIndexOfAny("Ux+ -hLSLk51-,hRjm7", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        ByteBuffer.allocateDirect((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative capacity: -1
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Y[^/Y<cT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.rotate("51`Q", 168);
      assertEquals("51`Q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, 'Y');
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'Y';
      String string2 = StringUtils.join(charArray0, '^', (-1431655763), (-1431655763));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'G', 'G', 'Y'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing("", "51`Q", charSequenceArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("51`Q", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("org.junitpioneer.jupiter.cartesian.CartesianTestExtension", "51`Q", charSequenceArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("51`Qorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("o=j<Q%LV9xkf", "p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = "#?ii(";
      // Undeclared exception!
      try { 
        StringUtils.unwrap("#?ii(", "#?ii(");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = StringUtils.removeStart("W", "ORjjLhSxrxrQsSUushS5-hSRjS5ull");
      assertEquals("W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 36);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String string0 = StringUtils.removeStart("kkw~|-+ZKE", "kkw~|-+ZKE");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Search and Replace array lengtXs don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0kX LLOWj>LO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("dy}E\"0%kRCk[G/");
      assertEquals("dy}e\"0%krck[g/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(13, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("5*:>D~Ia1f23", "5*:>D~Ia1f23", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("vc");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("Z%@");
      assertEquals("z%@", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("z%@");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("Z%@");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("Z%@", "Z%@");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNumeric("z%@");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = StringUtils.lowerCase("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("+pc|_dXmC4=1>m");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+PC|_DxMc4=1>M", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("z%@", "Z%@", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Z%@", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "z%@";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("z%@", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 154);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      String string0 = StringUtils.difference("", "#tjH,%vIvu");
      assertEquals("#tjH,%vIvu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "#tjH,%vIvu", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.abbreviate("", "", 0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("#tjH,%vIvu");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("5}%yW_m", "", stringArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("5}%yW_m", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "5}%yW_m");
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.substring("#tjH,%vIvu", 760);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.substringAfter("", "z\"UXT\u0004YTUxx");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("", "[aba~\"(dGN8KlJm*c)", stringArray1);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertEquals("[aba~\"(dGN8KlJm*c)", string6);
      assertNotNull(string6);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "#tjH,%vIvu", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "5}%yW_m");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 64);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String string0 = StringUtils.strip("", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("", (-1063));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Parameter of type %s must reference an Enum type (alternatively, use the annotation's 'value' attribute to specify the type explicitly): %sorg.junitpioneer.jupiter.cartesian.CartesianTestExtension", 'V');
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("a9&vpDnCsOG~", "a9&vpDnCsOG~", "a9&vpDnCsOG~");
      assertEquals("a9&vpDnCsOG~", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", 'A');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeEndIgnoreCase("2!B", "");
      assertFalse(string1.equals((Object)string0));
      assertEquals("2!B", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", string2);
      assertNotNull(string2);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-3556L);
      String string3 = StringUtils.join(longArray0, 'l', (-3374), (-3374));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new long[] {(-3556L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.remove(", Length: 0", '\'');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals(", Length: 0", string5);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAllLowerCase("2!B");
      assertFalse(boolean0);
      
      String string6 = StringUtils.removeAll("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.substring((String) null, 8);
      assertNull(string7);
      
      String string8 = StringUtils.trimToNull((String) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String string0 = StringUtils.lowerCase("$C6OugZQ%Vo#aP:0");
      assertEquals("$c6ougzq%vo#ap:0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("Strings must not be null");
      assertEquals(24, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      int int0 = 0;
      String string1 = StringUtils.center("Search and Replace array lengths don't match: ", 0, 'l');
      assertTrue(string1.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ", 29);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.reverseDelimited("Search and Replace array lengths don't match: ", '#');
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      
      char char0 = '-';
      String string3 = StringUtils.unwrap("\"0Z#", '#');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\"0Z#", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("Cannot clone Cloneable type ");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("CannotcloneCloneabletype", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("Search and Replace array lengths don't match: ", 0);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween("90", "Search and Replace array lengths don't match: ", "b!%AJ(N");
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "KJX}", (CharSequence) "KJX}", 38);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "";
      stringArray0[5] = "&22^f/>iYZge6-_";
      stringArray0[6] = "2u11]HJRV$^#u|r";
      stringArray0[7] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "1(3");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("1(3", "1+Q,Gm<!pyq@gxBg", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertEquals("1(3", string0);
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.substringBetween("1+Q,Gm<!pyq@gxBg", "1(3", "_iD&|k");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String string0 = StringUtils.trim("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.trimToNull(".");
      assertEquals(".", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("qoul2e", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String string0 = StringUtils.removePattern("", "6I'");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1893.1);
      doubleArray0[1] = 0.0;
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, 'j');
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, objectArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'o', 4, 116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'u', (-1726), (-1726));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String string0 = StringUtils.rightPad("GCnB;c", 8202);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      String string0 = StringUtils.wrap("...", "...");
      assertEquals(".........", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ".........", (-2181));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      String string0 = StringUtils.abbreviate("aE5D']", "aE5D']", 105, 105);
      assertEquals("aE5D']", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("+?\"([-J.dJ%UDrN1B#", (String) null, false);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((short[]) null, 'M', 8, 2604);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "\r");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.startsWith("\r", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("", "Y(k,@|9jsw'%}", "})eT\rD!oKY'@P0C");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // Y(k,@|9jsw'%}
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("g7//U>*dVX", "Ux+ -hLSLk51-,hRjm7", false);
      assertEquals(18, int0);
      
      String[] stringArray0 = null;
      String string2 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("V7ngh", "/f+nl.RB0HKTT=");
      assertEquals("/f+nl.RB0HKTT=V7ngh/f+nl.RB0HKTT=", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("Yb", "v_>9}fS]Vr|@)95\"R");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compareIgnoreCase("v_>9}fS]Vr|@)95\"R", "V7ngh");
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("iw;YW\"mJ}!2t");
      assertEquals("iw;YW\"mJ}!2t", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'X');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1;
      String string1 = StringUtils.join(shortArray0, 'M', 0, (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2, (short)0, (short)1}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToEmpty("?2i9jat_h#}/5L[d ");
      assertFalse(string2.equals((Object)string1));
      assertEquals("?2i9jat_h#}/5L[d", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.compareIgnoreCase("gG{\"\"", "%9?IZYu{+}4");
      assertFalse(int1 == int0);
      assertEquals(66, int1);
      
      String string3 = StringUtils.unwrap("+&Qi`7y`C`EQ", "?2i9jat_h#}/5L[d");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("+&Qi`7y`C`EQ", string3);
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Ux+ -hLSLk51-,hRjm7", "Ux+ -hLSLk51-,hRjm7");
      assertEquals("Ux+ -hLSLk51-,hRjm7", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Ux+ -hLSLk51-,hRjm7", "Ux+ -hLSLk51-,hRjm7");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.unwrap("Ux+ -hLSLk51-,hRjm7", "Ux");
      assertTrue(string1.equals((Object)string0));
      assertEquals("Ux+ -hLSLk51-,hRjm7", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "Ux+ -hLSLk51-,hRjm7";
      String string2 = StringUtils.removeStartIgnoreCase("xMNS7_:P", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("xMNS7_:P", string2);
      assertNotNull(string2);
      
      charSequenceArray0[1] = (CharSequence) "xMNS7_:P";
      charSequenceArray0[2] = (CharSequence) "Ux+ -hLSLk51-,hRjm7";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      double double1 = StringUtils.getJaroWinklerDistance("Ux+ -hLSLk51-,hRjm7", charSequenceArray0[0]);
      assertEquals(double1, double0, 0.01);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(1.0, double1, 0.01);
      
      String string3 = StringUtils.substringBefore((String) null, "=hKhy");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      String string0 = StringUtils.removeAll("Array element ", "Array element ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String string1 = StringUtils.upperCase("", locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(locale0, locale1);
      
      String string2 = StringUtils.upperCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStart("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'O');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Array element O", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("^Th", "^Th");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase("@CartesianTest not found.", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("@CARTESIANTEST NOT FOUND.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("@CARTESIANTEST NOT FOUND.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("pnx2<0&A};uRzW^jN3", "pnx2<0&A};uRzW^jN3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("Locale must not be null", locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertEquals("LOCALE MUST NOT BE NULL", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStart("", "Locale must not be null");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "pnx2<0&A};uRzW^jN3";
      objectArray0[3] = (Object) "pnx2<0&A};uRzW^jN3";
      String string4 = StringUtils.join(objectArray0, 'O');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4, objectArray0.length);
      assertEquals("OOpnx2<0&A};uRzW^jN3Opnx2<0&A};uRzW^jN3", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      String string0 = StringUtils.substringBefore("n", ">~`*iq&fUtJ+*;-9T");
      assertEquals("n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[5];
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, 'Z');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", "zK#E3S@.");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("");
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.mid("", (short)0, (short)0);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.ordinalIndexOf("p{InCombiningDiacriticalMarks}+", "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1(3";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "";
      stringArray0[5] = "&22^f/>iYZge6-_";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("1(3"));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("2u11]HJRV$^#u|r");
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("1(3"));
      assertTrue(linkedList0.contains("2u11]HJRV$^#u|r"));
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((List<?>) linkedList0, "uH,{T`]1_%LCP=", 1267, 1267);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("1(3"));
      assertTrue(linkedList0.contains("2u11]HJRV$^#u|r"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("n6IH,DH~", 160);
      assertFalse(string1.equals((Object)string0));
      assertEquals("n6IH,DH~", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("ZxCrI6*w", "2u11]HJRV$^#u|r");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ZxCrI6*w", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "n6IH,DH~", "_iD&|k");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        StringUtils.getBytes("R0in},{X3?#9A", "R0in},{X3?#9A");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, "Ux+ -hLSLk51-,hRjm7", 1, 1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Ux+ -hLSLk51-,hRjm7"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("Ux+ -hLSLk51-,hRjm7", 1, 1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("x", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("Ux+ -hLSLk51-,hRjm7", 35, "W!a5uCot+~%0kAW");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("W!a5uCot+~%0kAWWUx+ -hLSLk51-,hRjm7", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      String string0 = StringUtils.rotate("", 86);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("\n", "Strings must not be null", false);
      assertEquals((-105), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Strings must not be null");
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("wp]f3%z!t&^qqt{-)y", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-105), 321);
      assertEquals("wp]f3%z!t&^qqt{-)y", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.stripToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      
      int int2 = StringUtils.indexOf((CharSequence) "wp]f3%z!t&^qqt{-)y", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-105);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = 1891.1155F;
      String string3 = StringUtils.join(floatArray0, 'o', 160, (-1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new float[] {0.0F, (-105.0F), (-1.0F), 1891.1155F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("[uqoe8<QizPZ+ Lyd)r", "[uqoe8<QizPZ+ Lyd)r", "w`I8)b");
      assertEquals("w`I8)b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny("w`I8)b", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.upperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.center("[uqoe8<QizPZ+ Lyd)r", (-2204));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("[uqoe8<QizPZ+ Lyd)r", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.center((String) null, 0);
      assertNull(string6);
      
      String string7 = StringUtils.mid((String) null, 13, (-312));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-268));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-268));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.rotate((String) null, 16);
      assertNull(string1);
      
      String string2 = StringUtils.removeStart("", "Ux+ -hLSLk51-,hRjm7");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = "Iw;e\\ih8bYgT";
      String string1 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, (char[]) null);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("7e+@M", '~');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.abbreviate(string1, "7e+@M", 2357);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("7e+@M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("i0&f/I* ~O;xOu", "7e+@M", stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("i0&f/I* ~O;xOu7e+@M", string3);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string2, (CharSequence) "i0&f/I* ~O;xOu7e+@M", 2357);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "' ");
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.substring("i0&f/I* ~O;xOu7e+@M", 760);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNumericSpace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = null;
      String string6 = StringUtils.substringAfter("A|5!F-g}-$iTym", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("Iw;eih8bYgT", "' ", stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertEquals("' Iw;eih8bYgT", string7);
      assertNotNull(string7);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "A|5!F-g}-$iTym", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("i0&f/I* ~O;xOu7e+@M", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Rz![mz{F?Il3";
      objectArray0[1] = (Object) "Rz![mz{F?Il3";
      String string0 = StringUtils.joinWith("Rz![mz{F?Il3", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("Rz![mz{F?Il3", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rotate((String) null, 1532);
      assertNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, "Rz![mz{F?Il3Rz![mz{F?Il3Rz![mz{F?Il3");
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.mid("", 53, (-851));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[2] = (byte)76;
      String string6 = StringUtils.toString(byteArray0, (String) null);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte) (-109), (byte)0, (byte)76}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("\uFFFD\u0000L", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.chop("\uFFFD\u0000L");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("\uFFFD\u0000", string7);
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String string0 = StringUtils.mid("Cannot clone Cloneable type ", 631, 631);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Cannot clone Cloneable type ", "Cannot clone Cloneable type ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("+pc|_dXmC4=1>m");
      assertEquals(14, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "+pc|_dXmC4=1>m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      String string0 = StringUtils.rotate("...", 402);
      assertEquals("...", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 13);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "rD-/K-l7Z", "E;~9[x>tNk");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", 1532);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, (String) null);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.join(iterator0, '6');
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter("", "");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("", 53, 0);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      assertNotNull(string7);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-36);
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension", 1935);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "\u0007R76i(BW8ACq";
      objectArray0[1] = (Object) string0;
      String string1 = StringUtils.join(objectArray0, 'R');
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("org.junitpioneer.jupiter.cartesian.Cart{siLnTestExtension");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("M", "M", 1935);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.right("\u0007R76i(BW8ACq", 1935);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u0007R76i(BW8ACq", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("U$Uj<Q&N({>Ig~!lVA", (String) null, 2683, 2683);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("U$Uj<Q&N({>Ig~!lVA", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'z');
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("org.apache.commons.lang3.exception.CloneFailedException", 12);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("org.apache.commons.lang3.exception.CloneFailedException", "Never disable parameterized test method itself");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", "org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", string3);
      assertNotNull(string3);
      
      int int1 = 26;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.exception.CloneFailedException", "Strings must not be null", 26);
      assertEquals(26, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.right("0", 26);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("0", string4);
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("a", "Never disable parameterized test method itself", 502, (-1100));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 47
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("RQUx+ -hLSLk51-,hRjm7", "^k");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\"@TOEPFCry/\u0000NzL", "\"@TOEPFCry/\u0000NzL", 48);
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.leftPad((String) null, (-1372), "lX");
      assertNull(string0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayCountry(locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("\u82F1\u570B", string1);
      assertNotNull(string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(set0.contains("lX"));
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      
      String string2 = StringUtils.join((Iterable<?>) set0, '9');
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(set0.contains(string2));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(locale0, locale1);
      
      String string3 = StringUtils.substringBefore("", "\"@TOEPFCry/\u0000NzL");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(16, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.repeat("Cannot store ", "org.apache.commons.lang3.ObjectUtils", 40);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("XxD/i^$Ni@FEp+/AF", "XxD/i^$Ni@FEp+/AF");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String string0 = StringUtils.unwrap("{", "8m5");
      assertEquals("{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("z-)p", "z-)p", Integer.MIN_VALUE);
      assertEquals("z-)p", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("z-)p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("contans '%s<.", "contans '%s<.");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f nY]>7pFAMXm+[wjuYFELp", "f nY]>7pFAMXm+[wjuYFELp");
      assertEquals(24, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      String string0 = StringUtils.unwrap("owm>w),!}N$3vyux", '3');
      assertEquals("owm>w),!}N$3vyux", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("VDi$2KP$)lFT", "VDi$2KP$)lFT", 216);
      assertEquals("VDi$2KP$)lFT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "_U", (CharSequence) "_U");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      assertNotNull(string0);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">P<\u0001CFOzauyl", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("\n", 8178);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertEquals(5, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertEquals(5, enumSet0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertEquals(5, enumSet0.size());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("AUTOSELECT_FILTERINGEXTENDED_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Could not provide arguments because of exception.");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("JqF+OdC<Yie35C");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.removeStartIgnoreCase("org.junitzioneer.jupiter.IssueExtension", "");
      assertEquals("org.junitzioneer.jupiter.IssueExtension", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitzioneer.jupiter.IssueExtension", (CharSequence) "org.junitzioneer.jupiter.IssueExtension", 13);
      assertEquals(0, int0);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("maxWith cannot be negative", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("W<Z", "W<Z");
      assertEquals("W<Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String string0 = StringUtils.substringBetween("e", "e", "e");
      assertNull(string0);
      
      int int0 = StringUtils.compare("e", "e");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String string0 = StringUtils.reverse("KJX}");
      assertEquals("}XJK", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.strip("[+WC6Q_xDmN|i[-B!x", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(string2.equals((Object)string0));
      assertEquals("[+WC6Q_xDmN|i[-B!x", string2);
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = '@';
      String string3 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", '\u0000');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("[+WC6Q_xDmN|i[-B!x");
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("[+WC6Q_xDmN|i[-B!x", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "[+WC6Q_xDmN|i[-B!x");
      assertEquals(89, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("}Af6c(4\"EAx(", "[+WC6Q_xDmN|i[-B!x");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // [+WC6Q_xDmN|i[-B!x
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("-1WDn_:gDhdp&5", "-1WDn_:gDhdp&5");
      assertEquals("-1WDn_:gDhdp&5", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("...");
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'G');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("...G...", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.compare("$y[C/f0H+", "$y[C/f0H+", false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("...", "...G...", 0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("$y[C/f0H+");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("$y[C/f0H+", string5);
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "$y[C/f0H+");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "-1WDn_:gDhdp&5");
      assertNull(stringArray0);
      
      String string6 = StringUtils.reverse("...");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("...", string6);
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("...", 'G');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertEquals("...", string7);
      assertNotNull(string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "...G...", (CharSequence) "...G...");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("..."));
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains("..."));
      assertNotNull(listIterator0);
      
      String string8 = StringUtils.join((Iterator<?>) listIterator0, "...G...");
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(linkedList0.contains(string8));
      assertEquals("", string8);
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], "-1WDn_:gDhdp&5");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("$y[C/f0H+", "...");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap("GCnB;c", "GCnB;c");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", 'F');
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 9);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(""));
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, ',', 9, 256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 256
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'z';
      charArray0[1] = 'G';
      charArray0[2] = 'c';
      charArray0[3] = 's';
      charArray0[4] = 'a';
      charArray0[5] = '`';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'z', 'G', 'c', 's', 'a', '`', 'l', 'l'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("zGcsa`ll", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '1';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'%', '1'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("%1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("%1");
      assertTrue(string1.equals((Object)string0));
      assertEquals("%1", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      assertEquals(">hr(a]~i&a9V~lpT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("_LNjn.BYsSQmrP6q;8'", (-2147483629));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", '2');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.right("ZL#GdYt>", (-2147483629));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("org.junitpioneer.jupiter.params.Range");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'Z';
      doubleArray0[1] = (double) '2';
      doubleArray0[2] = (double) (-2147483629);
      String string4 = StringUtils.removeStartIgnoreCase("", "|nt(&LrRV");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("J$^tP^!+M-Db(2E");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("j$^Tp^!+m-dB(2e", string5);
      assertNotNull(string5);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "J$^tP^!+M-Db(2E", (CharSequence) ">hr(a]~i&a9V~lpT", 35);
      assertEquals(16, int0);
      
      String[] stringArray1 = StringUtils.split(">hr(a]~i&a9V~lpT", ">hr(a]~i&a9V~lpT");
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertEquals(0, stringArray0.length);
      assertEquals("", string6);
      assertNotNull(string6);
      assertSame(stringArray0, stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertFalse(int1 == int0);
      assertEquals(0, stringArray1.length);
      assertEquals((-1), int1);
      assertSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.abbreviate("", 35);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      assertNotNull(string7);
      
      String string8 = StringUtils.swapCase("kCA<:Z+c9Tc,");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("Kca<:z+C9tC,", string8);
      assertNotNull(string8);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ">hr(a]~i&a9V~lpT", (-2147483629));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int[] intArray0 = StringUtils.toCodePoints("org.junitpioneer.jupiter.params.Range");
      assertEquals(37, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 3321L;
      longArray0[1] = 388L;
      longArray0[2] = (-1918L);
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-2629L);
      String string0 = "k";
      // Undeclared exception!
      StringUtils.repeat("k", 65536);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "S", "7CM8`v.S{:");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      String string0 = StringUtils.wrapIfMissing("szBb!g8Tc7?", "1+Q,Gm<!pyq@gxBg");
      assertEquals("1+Q,Gm<!pyq@gxBgszBb!g8Tc7?1+Q,Gm<!pyq@gxBg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("hhp+0[F/&;ME");
      assertFalse(string1.equals((Object)string0));
      assertEquals("hhp+0[f/&;me", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("1+Q,Gm<!pyq@gxBg");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "1+Q,Gm<!pyq@gxBgszBb!g8Tc7?1+Q,Gm<!pyq@gxBg", "1");
      assertFalse(boolean0);
      
      try { 
        StringUtils.getBytes("szBb!g8Tc7?", "1+Q,Gm<!pyq@gxBg");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "I~", "a<9qH&`i;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "XxD/i^NiNFEp+/AF", "contains '%s'.");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("_U", "_U", "_U");
      assertEquals("_U", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("$JX}V", "$JX}V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "$JX}V", "$JX}V");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("", "$JX}V");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Cloneable type ", "5#g!\"]&HT@_k`x");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.defaultString("", " vs ");
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("sW", Integer.MIN_VALUE);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = "!d1.}#}5Y";
      String[] stringArray0 = StringUtils.split("!d1.}#}5Y", '}');
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals(3, stringArray0.length);
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) " vs ");
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((List<?>) null, 'Y', Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNull(string5);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains('}'));
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("pnx2<0&A};uRzW^jN3", "pnx2<0&A};uRzW^jN3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase("Locale must not be null", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertEquals("LOCALE MUST NOT BE NULL", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStart("", "Locale must not be null");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) "pnx2<0&A};uRzW^jN3";
      objectArray0[3] = (Object) "Locale must not be null";
      String string4 = StringUtils.join(objectArray0, 'O');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4, objectArray0.length);
      assertEquals("OOpnx2<0&A};uRzW^jN3OLocale must not be null", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripAccents("Class %s not found, referenced in method %s");
      assertEquals("Class %s not found, referenced in method %s", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("[uqoe8<QizPZ+ Lyd)r", "[uqoe8<QizPZ+ Lyd)r", "w`I8)b");
      assertEquals("w`I8)b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase(" ");
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.repeat(" ", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny("w`I8)b", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.upperCase((String) null);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(" ", (-2204), 1550);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.leftPad((String) null, (-2252), (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllLowerCase("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = StringUtils.compare("dL)Dce'Jbh?F_,", "dL)Dce'Jbh?F_,", false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string3);
      assertSame(stringArray0, stringArray1);
      
      String string4 = StringUtils.chop("");
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      String string0 = StringUtils.repeat("9ffudBlV{db9<6)1*", 49);
      assertEquals("9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("}pesen", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}pesen", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*9ffudBlV{db9<6)1*", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Search and Replace array lengths don't match: ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringAfter("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", 160);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Search and Replace array lengths don't match: ", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.wrap("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", 'I');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Iorg.junitpioneer.jupiter.CartesianValueArgumentsProviderI", string4);
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 51);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBetween((String) null, "\r");
      assertNull(string5);
      
      String string6 = StringUtils.overlay((String) null, (String) null, (-293), 0);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      StringUtils.isNotEmpty((CharSequence) null);
      StringUtils.splitByWholeSeparator("", "");
      StringUtils.join((long[]) null, 'R');
      StringUtils.contains((CharSequence) "", (CharSequence) null);
      StringUtils.join((List<?>) null, 'M', 3, 3);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringUtils.substring((String) null, 3);
      StringUtils.leftPad("", (-3858));
      StringUtils.stripEnd("AQ_P}[wqb", (String) null);
      StringUtils.removeStart("Cannot clear and set the following entries at the same time: Cannot clear and set the following entries at the same time: ", (String) null);
      StringUtils.defaultString("AQ_P}[wqb");
      String string0 = StringUtils.mid((String) null, 3, (-1335));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      String string0 = StringUtils.rightPad("s{,\"", 29);
      StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      StringUtils.right(">P<\u0001CFOzauyl", 29);
      StringUtils.join((byte[]) null, 'A');
      StringUtils.isNoneEmpty(stringArray0);
      StringUtils.prependIfMissing("s{,\"                         ", "s{,\"", stringArray0);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "VVVVVVVV\u0007R76i(BW8ACqVVVVVVVV", (CharSequence) null);
      StringUtils.lastIndexOf((CharSequence) "The type must not be null", 29);
      StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %d", "The type must not be null", 2);
      StringUtils.containsOnly((CharSequence) "s{,\"                         ", "The type must not be null");
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 29;
      longArray0[1] = (long) 'V';
      longArray0[2] = (long) 29;
      longArray0[3] = (long) 'V';
      longArray0[4] = (long) 2;
      StringUtils.join(longArray0, '_');
      String string1 = StringUtils.defaultIfBlank("bk<*6($]", "\u0007R76i(BW8ACq");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      StringUtils.joinWith("", objectArray0);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-46160863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      StringUtils.length((CharSequence) null);
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      String string0 = StringUtils.join((Object[]) charSequenceArray0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      String string0 = StringUtils.repeat("B0)c7bX[1s#R", "B0)c7bX[1s#R", 621);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String string0 = StringUtils.upperCase("(s3ih,");
      assertNotNull(string0);
      assertEquals("(S3IH,", string0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String string0 = StringUtils.center("Iw;eih8bYgT", 2357, "Iw;eih8bYgT");
      StringUtils.containsOnly((CharSequence) string0, (char[]) null);
      StringUtils.splitPreserveAllTokens("7e+@M", '~');
      StringUtils.getLevenshteinDistance((CharSequence) "7e+@M", (CharSequence) "7e+@M");
      StringUtils.wrapIfMissing((String) null, "NE");
      StringUtils.removeStart("K|,FW*..IZZSwV", "_LNjn.BYsSQmrP6q;8'");
      StringUtils.isAlphanumeric("7e+@M");
      StringUtils.contains((CharSequence) "K|,FW*..IZZSwV", (CharSequence) "7e+@M");
      StringUtils.wrap((String) null, 'A');
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      String string0 = StringUtils.substringBefore("~.JENTvvA\"A9.X+{", "~.JENTvvA\"A9.X+{");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7e+@M", (CharSequence) "7e+@M");
      assertEquals(0, int0);
      
      String string0 = StringUtils.wrapIfMissing((String) null, "NE");
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("K|,FW*..IZZSwV", "_LNjn.BYsSQmrP6q;8'");
      assertEquals("K|,FW*..IZZSwV", string1);
      
      StringUtils.isAlphanumeric("7e+@M");
      boolean boolean0 = StringUtils.contains((CharSequence) "K|,FW*..IZZSwV", (CharSequence) "7e+@M");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrap((String) null, 'A');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("\"@TOEPFCry/\u0000NzL", 'g');
      assertEquals(1, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("K|,FW*..IZZSwV");
      assertNotNull(intArray0);
      assertEquals(15, intArray0.length);
      
      StringUtils.stripToNull((String) null);
      int int1 = StringUtils.indexOfAny((CharSequence) "K|,FW*..IZZSwV", (char[]) null);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String string0 = StringUtils.overlay("oQ #y$BnJ", "p_s#)fL7!(", 477, 4852);
      assertNotNull(string0);
      assertEquals("oQ #y$BnJp_s#)fL7!(", string0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      StringUtils.replaceChars("maxWith cannot be negative", 'K', 'B');
      StringUtils.substringBefore("maxWith cannot be negative", "");
      StringUtils.leftPad("vb0GY ", 35);
      StringUtils.removeStart("maxWith cannot be negative", (String) null);
      StringUtils.splitPreserveAllTokens("", 'K');
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'K';
      charArray0[2] = 'B';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'B';
      charArray0[6] = 'T';
      charArray0[7] = 'B';
      charArray0[8] = 'B';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "maxWith cannot be negative", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      StringUtils.toRootUpperCase((String) null);
      String string0 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 28);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string1 = StringUtils.SPACE;
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      StringUtils.isAllBlank((CharSequence[]) null);
      String string2 = StringUtils.upperCase("_@#-i");
      assertNotNull(string2);
      
      StringUtils.isWhitespace(" ");
      String[] stringArray0 = StringUtils.splitByWholeSeparator("e~qw\".!", "@DefaultTimeZone not configured correctly. Could not find the specified time zone + '%s'. Please use correct identifiers, e.g. \"GMT\" for Greenwich Mean Time.", 28);
      String string3 = StringUtils.trimToNull("_@#-I");
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Locale locale0 = Locale.JAPAN;
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertNotNull(charSequence0);
      
      Locale locale1 = Locale.ENGLISH;
      int int1 = StringUtils.getFuzzyDistance("e~qw\".!", "N", locale1);
      assertEquals(0, int1);
      
      String string4 = StringUtils.chop("e~qw\".!");
      assertEquals("e~qw\".", string4);
      
      String string5 = StringUtils.repeat("\"", 28);
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string5);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("l", '|');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0cR", "0cR");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(">^~~p", 'T');
      assertEquals(">^~~p", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Y[=Y$cT", "Y[=Y$cT", "Y[=Y$cT");
      assertEquals("Y[=Y$cT", string0);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("', is neither of type Map.Entry nor an Array");
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "owm>w),!}N$3vyux", (CharSequence) "owm>w),!}N$3vyux", 9);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.uncapitalize(":30GY!Fj8");
      assertEquals(":30GY!Fj8", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(":30GY!Fj8", '!');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      StringUtils.substring("Qg?w%R/$!s6", Integer.MAX_VALUE, Integer.MAX_VALUE);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      StringUtils.removeStart("", "+Vgiw_SIXxGMB0QZ");
      boolean boolean0 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean0);
      
      StringUtils.containsNone((CharSequence) "Qg?w%R/$!s6", "WW");
      String string0 = StringUtils.chomp("+Vgiw_SIXxGMB0QZ");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "+Vgiw_SIXxGMB0QZ", (CharSequence) "WW", Integer.MAX_VALUE);
      assertEquals(17, int0);
      
      String string1 = StringUtils.removeStart("", "");
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate("+Vgiw_SIXxGMB0QZ", "", 83, 17);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("a9&vpDnCsOG~", "a9&vpDnCsOG~", "a9&vpDnCsOG~");
      assertEquals("a9&vpDnCsOG~", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", 'A');
      String string1 = StringUtils.removeEndIgnoreCase("2!B", "");
      assertEquals("2!B", string1);
      
      String string2 = StringUtils.normalizeSpace("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", string2);
      
      String string3 = StringUtils.substringBefore("sU", "sU");
      assertEquals("", string3);
      
      StringUtils.repeat("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", 858);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 858;
      String string4 = StringUtils.join(longArray0, '*');
      assertNotNull(string4);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = '*';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = '*';
      charArray0[5] = '*';
      int int0 = StringUtils.indexOfAny((CharSequence) "2!B", charArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "858", charArray0);
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.reverseDelimited("n86bjo*mB0V+K", 't');
      assertNotNull(string5);
      assertEquals("n86bjo*mB0V+K", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "2!B", (CharSequence) "a9&vpDnCsOG~", 858);
      assertEquals(12, int1);
      
      String string6 = StringUtils.upperCase("xhvociNh");
      assertNotNull(string6);
      assertEquals("XHVOCINH", string6);
      
      String string7 = StringUtils.overlay("", "Exactly one type of input must be provided in the @", 12, 1716);
      assertEquals("Exactly one type of input must be provided in the @", string7);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.repeat("Could not provide arguments because of exception.", 20);
      assertEquals("Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.Could not provide arguments because of exception.", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Could not provide arguments because of exception.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.SPACE;
      int int0 = StringUtils.lastIndexOfAny("Could not provide arguments because of exception.", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      StringUtils.split(";7#R52[3*}\"n*", "...", (-1));
      String string2 = StringUtils.rightPad("SQR1=8u<", 108, "s4D@=c9w2yFL(|");
      assertEquals("SQR1=8u<s4D@=c9w2yFL(|s4D@=c9w2yFL(|s4D@=c9w2yFL(|s4D@=c9w2yFL(|s4D@=c9w2yFL(|s4D@=c9w2yFL(|s4D@=c9w2", string2);
      
      StringUtils.trimToEmpty("s4D@=c9w2yFL(|");
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      String string3 = StringUtils.substringAfterLast("Could not provide arguments because of exception.", 108);
      assertEquals("d not provide arguments because of exception.", string3);
      
      String string4 = StringUtils.substringBeforeLast(";7#R52[3*}\"n*", "*-L*A'M%");
      assertEquals(";7#R52[3*}\"n*", string4);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Method `CartesianProductTest.Sets ", 1549);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String string0 = "12xvpa;5R\"2/";
      int int0 = 0;
      StringUtils.substringAfterLast("12xvpa;5R\"2/", 0);
      StringUtils.isNotEmpty("");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("12xvpa;5R\"2/");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      arrayList0.addAll((Collection<? extends String>) linkedList0);
      arrayList0.add("12xvpa;5R\"2/");
      // Undeclared exception!
      try { 
        arrayList0.subList(76, 76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 76
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Z$", "Z$", (-3251), (-1756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      String string0 = "uH,{T`]1_%LCP=";
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("uH,{T`]1_%LCP=", "uH,{T`]1_%LCP=", Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 15
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "[+WC6Q_xDmN|i[-B!x");
      assertEquals(0, stringArray0.length);
      
      StringUtils.reverse((String) null);
      String string1 = StringUtils.strip("[+WC6Q_xDmN|i[-B!x", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("[+WC6Q_xDmN|i[-B!x", string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'E';
      charArray0[1] = '@';
      String string2 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", '\u0000');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      
      String string3 = StringUtils.deleteWhitespace("[+WC6Q_xDmN|i[-B!x");
      assertTrue(string3.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "[+WC6Q_xDmN|i[-B!x");
      assertEquals(89, int0);
      
      String string4 = StringUtils.abbreviate("Parameter has to be annotated with ", "", 89, 89);
      assertEquals("Parameter has to be annotated with ", string4);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String string0 = "s{,\"";
      int int0 = 29;
      StringUtils.rightPad("s{,\"", 29);
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("s{,\"                         ", "s{,\"                         ", 29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String string0 = "%s was not annotated with @ArgumentsSource but should have been.";
      String string1 = "0W";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("%s was not annotated with @ArgumentsSource but should have been.", "0W", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string0);
      assertEquals("AD", string0);
      
      boolean boolean0 = StringUtils.isNumeric("AD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("N=+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@4(x";
      stringArray0[1] = "A[CRos";
      stringArray0[2] = "uZw,*ufQ4,&s70wJA";
      stringArray0[3] = "org.junitpioneer.jupiter.cartesian.CartesianValueArgumentsProvider";
      stringArray0[4] = "maxWith cannot be negative";
      stringArray0[5] = "jq)Z";
      stringArray0[6] = "fV`e_Y6IZ#a";
      stringArray0[7] = "`";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("@4(x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      String string0 = StringUtils.replace(" ", " ", " ", 0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.substringAfterLast(" ", " ");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      String string0 = StringUtils.stripAccents("*pjg{S|?c");
      assertEquals("*pjg{S|?c", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("*pjg{S|?c");
      String string1 = StringUtils.left("*pjg{S|?c", 4);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("*pjg");
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBefore("*pjg", "*pjg{S|?c");
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      StringUtils.removeAll("", "");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Y|lJY1", "Y|lJY1", 3);
      StringUtils.defaultIfEmpty("Y|lJY1", "");
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", stringArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.repeat("", 3);
      assertEquals("", string2);
      
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Y|lJY1", 3);
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      StringUtils.lastIndexOf((CharSequence) "Y|lJY1", (CharSequence) "Y|lJY1");
      StringUtils.containsNone((CharSequence) "", "");
      String string3 = StringUtils.substring("", (-934));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      String string0 = StringUtils.rotate("Minimum abbreviation width is %d", (-550));
      assertEquals("m abbreviation width is %dMinimu", string0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[1] = "1+Q,Gm<!pyq@gxBg";
      stringArray0[2] = "_iD&|k";
      stringArray0[3] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[4] = "";
      stringArray0[5] = "&22^f/>iYZge6-_";
      String string0 = StringUtils.removeAll("&22^f/>iYZge6-_", "offset cannot be negative");
      assertEquals("&22^f/>iYZge6-_", string0);
      
      String string1 = StringUtils.substring(";X\"UE6O", 8);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.left("_iD&|k", 8);
      assertNotNull(string2);
      assertEquals("_iD&|k", string2);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      StringUtils.abbreviate((String) null, "1+Q,Gm<!pyq@gxBg", 1112);
      StringUtils.substringAfterLast("1+Q,Gm<!pyq@gxBg", "1+Q,Gm<!pyq@gxBg");
      StringUtils.isEmpty("[");
      StringUtils.remove((String) null, 'J');
      StringUtils.remove("X,M4x/#1`Ugk", '=');
      StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "X,M4x/#1`Ugk");
      StringUtils.countMatches((CharSequence) null, '\\');
      StringUtils.split((String) null, "|h|9u=coFpz:qw", (-1924));
      String string0 = StringUtils.replaceAll("vh.<wi/DhRdJ.4=|", "...", "NQwuq\"^0");
      StringUtils.rightPad("m3bkz7e)", 71, "%s was not annotated with @ArgumentsSource but should have been.");
      StringUtils.endsWithIgnoreCase("", "<8kYN`y2}:D0h");
      StringUtils.trimToEmpty((String) null);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, '=');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.rotate("X1cpu<v~Y=9b", 430);
      assertEquals("cpu<v~Y=9bX1", string0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '{');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("a9&vpDnCsOG~", "a9&vpDnCsOG~", "a9&vpDnCsOG~");
      assertEquals("a9&vpDnCsOG~", string0);
      
      StringUtils.splitPreserveAllTokens("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", 'A');
      StringUtils.removeEndIgnoreCase("2!B", "");
      String string1 = StringUtils.normalizeSpace("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.");
      assertEquals("Providing both method-level and parameter-level argument sources for @CartesianTest is not supported.", string1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-3556L);
      StringUtils.join(longArray0, 'l', (-3374), (-3374));
      String string2 = StringUtils.chomp("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (String) null);
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", string2);
      
      String string3 = StringUtils.remove(", Length: 0", '\'');
      assertEquals(", Length: 0", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("2!B");
      assertFalse(boolean0);
      
      StringUtils.removeAll("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", "");
      StringUtils.substring((String) null, 8);
      StringUtils.left(", Length: 0", (-944));
      String string4 = StringUtils.stripEnd("2!B", "a9&vpDnCsOG~");
      assertEquals("2!B", string4);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String string0 = StringUtils.chomp("zk|O;gaPD2<#)fx6f", "zk|O;gaPD2<#)fx6f");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      String string0 = StringUtils.remove("Y|lJY1", "Y|lJY1");
      String string1 = StringUtils.substringAfterLast("", "");
      assertEquals("", string1);
      
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-28));
      String string2 = StringUtils.substringAfter("", "nJPuSa");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing("", "");
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String string0 = StringUtils.left("reU^E/SY,~sgq", 15);
      assertNotNull(string0);
      assertEquals("reU^E/SY,~sgq", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "reU^E/SY,~sgq", (CharSequence) "reU^E/SY,~sgq");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      StringUtils.toRootUpperCase((String) null);
      String string0 = StringUtils.repeat("Ux+ -hLSLk51-,hRjm7", 20);
      assertEquals("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertFalse(boolean0);
      
      String string1 = StringUtils.SPACE;
      int int0 = StringUtils.lastIndexOfAny(" ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      StringUtils.isAllBlank((CharSequence[]) null);
      String string2 = StringUtils.upperCase("_@#-i");
      assertEquals("_@#-I", string2);
      
      StringUtils.truncate(" ", 57, 0);
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";F[s>^q-<wt&13Qa");
      assertEquals(13, stringArray0.length);
      
      String string3 = StringUtils.remove(" ", '*');
      assertEquals(" ", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '9');
      assertEquals(0, int1);
      
      StringUtils.indexOfAny((CharSequence) " ", (CharSequence[]) null);
      String string4 = StringUtils.stripEnd(" ", "Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7Ux+ -hLSLk51-,hRjm7");
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String string0 = StringUtils.removeAll("2", "2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      String string0 = StringUtils.remove("", '@');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("7e+@M");
      assertEquals(5, stringArray0.length);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.spliterator();
      linkedList0.listIterator();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Iterator<String> iterator0 = arrayList0.iterator();
      String string1 = StringUtils.join(iterator0, " >hr(a]~i&a9V~lpT");
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " >hr(a]~i&a9V~lpT", (CharSequence) "");
      StringUtils.repeat((String) null, Integer.MAX_VALUE);
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", 84);
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      arrayList0.add("");
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "");
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      StringUtils.normalizeSpace(">hr(a]~i&a9V~lpT");
      StringUtils.replace(" ", " ", " ", 0);
      StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) ">hr(a]~i&a9V~lpT", 0);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = 0L;
      longArray0[3] = (long) (-1);
      longArray0[4] = 0L;
      StringUtils.join(longArray0, '%', 573, 0);
      StringUtils.chomp((String) null, ">hr(a]~i&a9V~lpT");
      StringUtils.remove("", '\'');
      StringUtils.isAllLowerCase((CharSequence) null);
      StringUtils.removeAll((String) null, (String) null);
      String string0 = StringUtils.substring(">hr(a]~i&a9V~lpT", 8);
      StringUtils.left("uQl%BNcpW=S_", 0);
      String string1 = StringUtils.stripEnd("0s8LA vOi`$0FB}|=XK", (String) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The type must not be null", "The type must not be null");
      String string0 = StringUtils.rightPad("s{,\"", 29);
      assertEquals("s{,\"                         ", string0);
      
      String string1 = StringUtils.center("\u0007R76i(BW8ACq", 29, 'V');
      assertNotNull(string1);
      assertEquals("VVVVVVVV\u0007R76i(BW8ACqVVVVVVVVV", string1);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>((Comparator<? super Locale.FilteringMode>) null);
      String string2 = StringUtils.right(">P<\u0001CFOzauyl", 29);
      StringUtils.join((byte[]) null, 'A');
      StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.wrap(">P<\u0001CFOzauyl", 's');
      assertEquals("s>P<\u0001CFOzauyls", string3);
      
      String string4 = StringUtils.chomp(">P<\u0001CFOzauyl");
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      StringUtils.right("Strings must not be null", (-434));
      StringUtils.getJaroWinklerDistance("", "Strings must not be null");
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\n\n");
      assertEquals("", string0);
      
      StringUtils.length("");
      String string1 = StringUtils.defaultIfBlank("\"'+w:>*", " %s");
      assertEquals("\"'+w:>*", string1);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      String string0 = StringUtils.rightPad("*pjg{S|?c", (-2310));
      assertEquals("*pjg{S|?c", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      charSequenceArray0[0] = (CharSequence) "[+WC6Q_xDmN|i[-B!x";
      String string1 = StringUtils.rightPad("[+WC6Q_xDmN|i[-B!x", (-1206));
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "[+WC6Q_xDmN|i[-B!x";
      String string2 = StringUtils.center("|?2", (-1206), 'V');
      assertEquals("|?2", string2);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>(hashSet0);
      String string3 = StringUtils.join((Iterable<?>) linkedList0, 'Y');
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.right("[+WC6Q_xDmN|i[-B!x", (-1206));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      StringUtils.join((byte[]) null, 'u');
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      ListIterator<Object> listIterator0 = stack0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '*');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      String string0 = StringUtils.center(";KXz4", (-1262));
      assertEquals(";KXz4", string0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String string0 = StringUtils.right("Timeout for vintage @Test must be positive.", 981);
      assertNotNull(string0);
      assertEquals("Timeout for vintage @Test must be positive.", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Timeout for vintage @Test must be positive.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("DmT/^lA3~ON9Ya");
      assertEquals("DmT/^lA3~ON9Ya", string0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      StringUtils.split(" ", " ");
      StringUtils.left("_LNjn.BYsSQmrP6q;8'", 534);
      StringUtils.right(" annotation, but there were ", 534);
      StringUtils.getDigits(" annotation, but there were ");
      StringUtils.rightPad(" annotation, but there were ", 534, "lFUk{&z");
      StringUtils.normalizeSpace("Exception cloning Cloneable type ");
      StringUtils.substring("_LNjn.BYsSQmrP6q;8'", 534, 534);
      StringUtils.contains((CharSequence) "_LNjn.BYsSQmrP6q;8'", (CharSequence) "Exception cloning Cloneable type");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-3464));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3464
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      String string0 = StringUtils.join((Iterable<?>) linkedHashSet0, 'C');
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'C');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.normalizeSpace("[+WC6Q_xDmN|i[-B!x");
      charSequenceArray0[0] = (CharSequence) "[+WC6Q_xDmN|i[-B!x";
      String string1 = StringUtils.rightPad("[+WC6Q_xDmN|i[-B!x", (-1206));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "[+WC6Q_xDmN|i[-B!x";
      String string2 = StringUtils.center("|?2", (-1206), 'V');
      assertEquals("|?2", string2);
      
      charSequenceArray0[2] = (CharSequence) "|?2";
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>(hashSet0);
      String string3 = StringUtils.join((Iterable<?>) linkedList0, 'Y');
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      StringUtils.right("td<KCj-", (-1206));
      charSequenceArray0[4] = (CharSequence) "";
      StringUtils.join((byte[]) null, 'u');
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 1114111);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      float[] floatArray0 = new float[10];
      String string0 = StringUtils.SPACE;
      StringUtils.swapCase(" ");
      StringUtils.getDigits(" ");
      StringUtils.getDigits("\n");
      StringUtils.substringAfterLast("@IqM[!]=2J}x", 7);
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, 'b', (int) (short)256, 7);
      StringUtils.chomp("\n");
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      StringUtils.wrap("Ux+ -hLSLk51-,hRjm7", 'n');
      int int0 = StringUtils.lastIndexOf((CharSequence) "Ux+ -hLSLk51-,hRjm7", (-3), 51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.abbreviate("", "", (-1), (-1));
      String string1 = StringUtils.uncapitalize("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String string0 = StringUtils.chomp("Illegal range. The step cannot be zero.");
      String string1 = StringUtils.removeStartIgnoreCase("Illegal range. The step cannot be zero.", "\r");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWith("\r", "Illegal range. The step cannot be zero.");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Illegal range. The step cannot be zero.", (CharSequence) "Illegal range. The step cannot be zero.");
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Illegal range. The step cannot be zero.";
      charSequenceArray0[1] = (CharSequence) "Illegal range. The step cannot be zero.";
      StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      boolean boolean2 = StringUtils.isAllUpperCase("Illegal range. The step cannot be zero.");
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.defaultIfEmpty((String) null, "Illegal range. The step cannot be zero.");
      assertNotNull(string2);
      
      StringUtils.containsOnly((CharSequence) "Illegal range. The step cannot be zero.", (char[]) null);
      int int0 = StringUtils.lastIndexOfAny("Illegal range. The step cannot be zero.", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      String string0 = StringUtils.remove("mT/^lA3~ON9Ya", "mT/^lA3~ON9Ya");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String string0 = StringUtils.abbreviate("d0Wk]P%O1RK^w", "d0Wk]P%O1RK^w", 5211);
      assertEquals("d0Wk]P%O1RK^w", string0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 1269, 1269);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("?r7E2?53z]qH[B", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("`^#2", "`^#2");
      assertEquals("`^#2", string0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      String string0 = StringUtils.join(byteArray0, 'X');
      assertEquals("0X0X0X0X0X0X0X0X0X0X0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      StringUtils.trimToEmpty("0");
      int int0 = StringUtils.indexOf((CharSequence) "0", 816, 816);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rotate("", (-31));
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[2] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[3] = (CharSequence) "Cannot clone Cloneable type ";
      String string1 = StringUtils.appendIfMissing("Cannot clone Cloneable type ", "Cannot clone Cloneable type ", charSequenceArray0);
      assertEquals("Cannot clone Cloneable type ", string1);
      
      StringUtils.indexOf(charSequenceArray0[0], (-3392), (-31));
      StringUtils.equalsAnyIgnoreCase(charSequenceArray0[3], charSequenceArray0);
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3392);
      intArray0[1] = (-31);
      intArray0[2] = (-3392);
      intArray0[3] = (-1);
      intArray0[4] = (-31);
      intArray0[5] = (-1);
      intArray0[6] = (-31);
      String string3 = StringUtils.join(intArray0, 'n');
      assertEquals("-3392n-31n-3392n-1n-31n-1n-31", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, 'X');
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      StringUtils.rotate("51`Q", 168);
      StringUtils.join((Object[]) null, 'Y');
      String string0 = StringUtils.abbreviate("...", "51`Q", 18);
      StringUtils.containsWhitespace("51`Q");
      StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "...");
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "51`Q";
      charSequenceArray0[2] = (CharSequence) "...";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      StringUtils.appendIfMissingIgnoreCase("...", "...", charSequenceArray0);
      StringUtils.truncate((String) null, 2498, 18);
      StringUtils.indexOfIgnoreCase((CharSequence) "...", charSequenceArray0[1], (-2050554589));
      StringUtils.replaceIgnoreCase("51`Q", "51`Q", "...", (-2260));
      StringUtils.join((List<?>) null, "YQ5*k[bW_,", 37, 2498);
      StringUtils.isAllLowerCase("YQ5*k[bW_,");
      StringUtils.getBytes((String) null, "...");
      StringUtils.remove((String) null, 'h');
      String string1 = StringUtils.center("Ux+ -hLSLk51-,hRjm7l", (-1252), 'R');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.range(locale_FilteringMode0, locale_FilteringMode0);
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.copyOf(enumSet0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      String string0 = StringUtils.join(iterator0, "%s was not annotted with @ArgumentsSource l;t should have been.");
      assertEquals("IGNORE_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Locale must not be null", "");
      assertEquals("Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String string0 = StringUtils.stripStart("-U~+XU08!EZ`3N;", "");
      assertEquals("-U~+XU08!EZ`3N;", string0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      StringUtils.isNotEmpty((CharSequence) null);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      StringUtils.stripAll(stringArray0, "_LNjn.BYsSQmrP6q;8'K|,FW*..IZZSwV");
      StringUtils.reverse("^x>i~D2]t5q^U>");
      StringUtils.strip("", (String) null);
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
      StringUtils.containsAny((CharSequence) "{}", charArray0);
      StringUtils.splitByWholeSeparator("^x>i~D2]t5q^U>", "");
      StringUtils.containsOnly((CharSequence) "...", charArray0);
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "gB!Q7'1.h", (-1128));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String string0 = StringUtils.stripEnd("RjJ", "RjJ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      String string0 = StringUtils.abbreviate("CLS@Cc;ZaLC", (String) null, (-1369));
      String string1 = StringUtils.substringAfterLast("The String must not be empty", "1+Q,Gm<!pyq@gxBg");
      assertEquals("", string1);
      
      StringUtils.isEmpty("");
      String string2 = StringUtils.deleteWhitespace("CLS@Cc;ZaLC");
      assertTrue(string2.equals((Object)string0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StringUtils.lowerCase("org.apache.commons.lang3.StringUtils", locale0);
      boolean boolean0 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.stringutils", (CharSequence) "1+Q,Gm<!pyq@gxBg");
      assertFalse(boolean0);
      
      StringUtils.join((List<?>) null, '-', 3, 1061);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>();
      linkedHashSet0.add(locale_FilteringMode0);
      StringUtils.join((Iterable<?>) null, "CLS@Cc;ZaLC");
      String string3 = StringUtils.wrapIfMissing("1+Q,Gm<!pyq@gxBg", 'y');
      assertEquals("y1+Q,Gm<!pyq@gxBgy", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      StringUtils.removeStartIgnoreCase("org.apache.commons.lang3.stringutils", (String) null);
      String string4 = StringUtils.rotate("/_,t(e", (-1));
      assertEquals("_,t(e/", string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.stringutils");
      StringUtils.isAllBlank(stringArray0);
      assertEquals(10, stringArray0.length);
      
      String string5 = StringUtils.abbreviate("Ulv*4=X>a zf_s^", "", 161, (-4485));
      assertEquals("Ulv*4=X>a zf_s^", string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (-4485));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, (-1));
      assertNull(string0);
      
      StringUtils.lastIndexOf((CharSequence) null, (-1), (-1));
      String string1 = StringUtils.strip((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.stripToEmpty("&p>o(");
      assertEquals("&p>o(", string2);
      
      String string3 = StringUtils.chomp("J");
      assertEquals("J", string3);
      
      String string4 = StringUtils.replace((String) null, "", (String) null, (-593));
      assertNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty("org.junitpioneer.jupiter.params.DisableIfNameExtension", "");
      assertEquals("org.junitpioneer.jupiter.params.DisableIfNameExtension", string5);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'g');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";");
      int int0 = StringUtils.lastIndexOfAny(";", stringArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) ";", 0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)0;
      StringUtils.join(byteArray0, '\\');
      StringUtils.indexOf((CharSequence) "-121-86-40-91I\u0006-91\u0000", 0, 1259);
      ArrayList<Object> arrayList0 = new ArrayList<Object>((byte)111);
      Object object0 = new Object();
      arrayList0.add(object0);
      Object object1 = new Object();
      arrayList0.clear();
      // Undeclared exception!
      try { 
        arrayList0.set((-1), object1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      StringUtils.replace(" ", " ", " ", 0);
      long[] longArray0 = new long[5];
      longArray0[2] = 0L;
      longArray0[4] = 0L;
      StringUtils.join(longArray0, '%', 573, 25);
      StringUtils.substring("", 0);
      StringUtils.isNumericSpace(" ");
      String string0 = "doesn't contain any substring.";
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      StringUtils.prependIfMissingIgnoreCase("doesn't contain any substring.", "", charSequenceArray0);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "n_8h]:Z", charSequenceArray0[1]);
      StringUtils.upperCase((String) null);
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "KJX}", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      String string0 = StringUtils.join(iterator0, "jI~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String string0 = StringUtils.capitalize("#?ii(");
      assertEquals("#?ii(", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "#?ii(", (CharSequence) "#?ii(");
      boolean boolean0 = StringUtils.equals((CharSequence) "#?ii(", (CharSequence) "#?ii(");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-11);
      int int1 = StringUtils.compare("#?ii(", "#?ii(", true);
      assertTrue(int1 == int0);
      
      StringUtils.firstNonEmpty((String[]) null);
      String string1 = StringUtils.chop("blank_blank_blank_2014");
      assertEquals("blank_blank_blank_201", string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "#?ii(", (-1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      String string0 = StringUtils.swapCase("+fc|RXmC4=1>m");
      assertEquals("+FC|rxMc4=1>M", string0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "Timeout for vintage @Test must be positive.", 65);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 739.1771F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = 0.0F;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Timeout for vintage @Test must be positive.";
      String[] stringArray1 = StringUtils.substringsBetween("Timeout for vintage @Test must be positive.", "!d1.}#}5Y", ".*{[0-9]+}.*");
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "!d1.}#}5Y", (CharSequence) "Timeout for vintage @Test must be positive.");
      assertTrue(int1 == int0);
      
      String[] stringArray2 = new String[0];
      StringUtils.getCommonPrefix(stringArray2);
      String string0 = StringUtils.removeAll("XepCD*y\u0002@c^8", "");
      assertEquals("XepCD*y\u0002@c^8", string0);
      
      String string1 = StringUtils.remove("", '\'');
      assertEquals("", string1);
      
      String[] stringArray3 = new String[13];
      stringArray3[0] = "XepCD*y\u0002@c^8";
      stringArray3[1] = "";
      String[] stringArray4 = StringUtils.stripAll(stringArray3, "XepCD*y\u0002@c^8");
      assertEquals(13, stringArray4.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "XepCD*y\u0002@c^8";
      charSequenceArray0[2] = (CharSequence) "XepCD*y\u0002@c^8";
      charSequenceArray0[3] = (CharSequence) "Timeout for vintage @Test must be positive.";
      String string2 = StringUtils.chop("XepCD*y\u0002@c^8");
      assertEquals("XepCD*y\u0002@c^", string2);
      
      charSequenceArray0[4] = (CharSequence) "XepCD*y\u0002@c^";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("m&~", "m&~");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      StringUtils.abbreviate((String) null, "l", 0);
      StringUtils.substringAfterLast("%s was not annotated with @ArgumentsSource but should have been.", "[");
      StringUtils.isEmpty("%s was not annotated with @ArgumentsSource but should have been.");
      StringUtils.deleteWhitespace("{");
      StringUtils.remove("z", ';');
      StringUtils.countMatches((CharSequence) "{", '9');
      StringUtils.removeStart("Y|lJY1", "Y|lJY1");
      StringUtils.isAlphanumeric("l");
      StringUtils.getIfEmpty("", (Supplier<String>) null);
      StringUtils.split("org.apache.commons.lang3.ObjectUtils", "Strings must not be null");
      // Undeclared exception!
      try { 
        StringUtils.removePattern("1+Q,Gm<!pyq@gxBg $vgx", "ky$Fbf3?Y])w\"");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 9
         // ky$Fbf3?Y])w\"
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 105);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "qoule", (CharSequence) "qoule");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.stripToNull("A{\"NI~8{)'om");
      assertEquals("A{\"NI~8{)'om", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '}');
      assertNotNull(string0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      String string1 = StringUtils.join((Iterable<?>) priorityQueue1, (String) null);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      StringUtils.countMatches((CharSequence) "$JX}V", 'v');
      StringUtils.capitalize((String) null);
      String string0 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      StringUtils.join((byte[]) null, 's');
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>(linkedHashSet0);
      linkedHashSet0.add(linkedList0);
      linkedList0.add((Object) null);
      linkedList0.toArray();
      Stream<Object> stream0 = linkedHashSet0.stream();
      linkedList0.containsAll(linkedHashSet0);
      linkedHashSet0.remove(stream0);
      linkedHashSet0.add(linkedList0);
      linkedList0.stream();
      linkedList0.add((Object) null);
      linkedList0.containsAll(linkedHashSet0);
      linkedList0.removeFirst();
      linkedList0.sort((Comparator<? super Object>) null);
      StringUtils.join((Iterable<?>) linkedList0, (String) null);
      linkedList0.parallelStream();
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "No arguments sources were found for @CartesianTest");
      assertNull(stringArray0);
      
      StringUtils.containsAny((CharSequence) "No arguments sources were found for @CartesianTest", (CharSequence[]) null);
      linkedList0.parallelStream();
      linkedHashSet0.add((Object) null);
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-1019));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Timeout for vintage @Test must be positive.", (-1019));
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfEmpty("", supplier0);
      String string0 = StringUtils.strip("/-MT0P-,", "");
      assertEquals("/-MT0P-,", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Timeout for vintage @Test must be positive.", charArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'X');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      String string0 = StringUtils.stripStart("Mmbio/>", "Mmbio/>");
      assertEquals("", string0);
  }
}
