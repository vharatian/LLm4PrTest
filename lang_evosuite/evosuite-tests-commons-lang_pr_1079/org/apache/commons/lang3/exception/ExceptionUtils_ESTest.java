/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 23 20:59:56 GMT 2025
 */

package org.apache.commons.lang3.exception;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ExceptionUtils_ESTest extends ExceptionUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockError mockError0 = new MockError("Another failed with one of the specified exceptions.");
      Class<MockError> class0 = MockError.class;
      MockThrowable mockThrowable0 = new MockThrowable(mockError0);
      MockError mockError1 = ExceptionUtils.throwableOfThrowable((Throwable) mockThrowable0, class0, (-1));
      assertSame(mockError0, mockError1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockError mockError0 = new MockError();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockError0, class0, 1);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Za");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("R\"|gxGe5\"k");
      linkedList1.add("Za");
      ExceptionUtils.removeCommonFrames(linkedList1, linkedList0);
      assertFalse(linkedList1.contains("Za"));
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Za");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Za");
      ExceptionUtils.removeCommonFrames(linkedList1, linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Za");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("Za");
      linkedList1.add("aq");
      ExceptionUtils.removeCommonFrames(linkedList1, linkedList0);
      assertEquals(2, linkedList1.size());
      assertFalse(linkedList0.equals((Object)linkedList1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("C#fdKn{2xi?E9");
      ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("getNested");
      MockError mockError0 = new MockError(mockRuntimeException0);
      String string0 = ExceptionUtils.getRootCauseMessage(mockError0);
      assertEquals("MockRuntimeException: getNested", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockError mockError0 = new MockError(mockRuntimeException0);
      Throwable throwable0 = ExceptionUtils.getRootCause(mockError0);
      assertSame(throwable0, mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockRuntimeException0, class0, (-8));
      assertSame(mockRuntimeException0, throwable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("%(7Tw~m=8up[#[=54");
      Class<Throwable> class0 = Throwable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("*<f`l");
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, (-2300));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "");
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) undeclaredThrowableException0, (Class<? extends Throwable>) class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, (-523));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("L");
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      Class<MockThrowable> class0 = MockThrowable.class;
      MockRuntimeException mockRuntimeException1 = new MockRuntimeException((String) null, mockThrowable0);
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException1, (Class<? extends Throwable>) class0, (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("");
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Throwable> class0 = Throwable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) null, class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<MockError> class0 = MockError.class;
      boolean boolean0 = ExceptionUtils.hasCause((Throwable) null, class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables((Throwable) null);
      assertEquals(0, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      List<Throwable> list0 = ExceptionUtils.getThrowableList((Throwable) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = ExceptionUtils.getThrowableCount((Throwable) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      List<String> list0 = ExceptionUtils.getStackFrameList(mockRuntimeException0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException((Throwable) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) undeclaredThrowableException0);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockThrowable0);
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockRuntimeException0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // printWriter
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrames(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrames((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.getStackFrameList(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      // Undeclared exception!
      try { 
        ExceptionUtils.getRootCauseStackTrace(mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockError mockError0 = new MockError("i??y}j");
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("i??y}j", mockError0);
      MockThrowable mockThrowable0 = new MockThrowable("9j?)JH9", mockRuntimeException0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("9j?)JH9");
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintStream) mockPrintStream0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable: 9j?)JH9", mockThrowable0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // printStream
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("getCausedByException", mockThrowable0);
      mockThrowable0.initCause(mockRuntimeException0);
      List<Throwable> list0 = ExceptionUtils.getThrowableList(mockRuntimeException0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockThrowable0);
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(mockRuntimeException0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Throwable throwable0 = ExceptionUtils.getRootCause((Throwable) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("5G]~XS5uwIvi-^X(");
      MockError mockError0 = new MockError(mockThrowable0);
      String string0 = ExceptionUtils.getMessage(mockError0);
      assertEquals("MockError: org.evosuite.runtime.mock.java.lang.MockThrowable: 5G]~XS5uwIvi-^X(", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = ExceptionUtils.getMessage((Throwable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable0, (String[]) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockThrowable0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) undeclaredThrowableException0, (String[]) null);
      assertNull(throwable0.getMessage());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) null, (String[]) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String string0 = ExceptionUtils.getStackTrace(mockThrowable0);
      //  // Unstable assertion: assertEquals("sun.reflect.GeneratedConstructorAccessor114.newInstance(Unknown Source)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n<evosuite>.<evosuite>(<evosuite>)\n", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("5G]~XS5uwIvi-^X(");
      MockError mockError0 = new MockError(mockThrowable0);
      Throwable[] throwableArray0 = ExceptionUtils.getThrowables(mockError0);
      assertEquals(2, throwableArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) null);
        fail("Expecting exception: UndeclaredThrowableException");
      
      } catch(UndeclaredThrowableException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockRuntimeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtils.wrapAndThrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<MockThrowable> class0 = MockThrowable.class;
      MockThrowable mockThrowable1 = ExceptionUtils.throwableOfThrowable((Throwable) mockThrowable0, class0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", mockThrowable1.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockRuntimeException0, (Class<Throwable>) null);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Class<MockThrowable> class0 = MockThrowable.class;
      MockThrowable mockThrowable0 = ExceptionUtils.throwableOfThrowable((Throwable) null, class0);
      assertNull(mockThrowable0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames(linkedList0, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExceptionUtils.removeCommonFrames((List<String>) null, (List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The List must not be null
         //
         verifyException("org.apache.commons.lang3.exception.ExceptionUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null, (PrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ExceptionUtils.printRootCauseStackTrace((Throwable) null);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MockError> class0 = MockError.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0, (-523));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<MockError> class0 = MockError.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockRuntimeException0, (Class<? extends Throwable>) class0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<? extends Throwable>) class0, 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<? extends Throwable>) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockRuntimeException0, "");
      Class<MockRuntimeException> class0 = MockRuntimeException.class;
      boolean boolean0 = ExceptionUtils.hasCause(undeclaredThrowableException0, class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames((Throwable) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      String[] stringArray0 = ExceptionUtils.getStackFrames(mockThrowable0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getStackFrames("@@4ttCQr6^aum");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      StackTraceElement stackTraceElement0 = new StackTraceElement("wBw9!", "z|4w`{T~\"kvDbbMD+", "", 8);
      StackTraceElement stackTraceElement1 = new StackTraceElement("at", "", "", (-3672));
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[5];
      stackTraceElementArray0[0] = stackTraceElement1;
      stackTraceElementArray0[1] = stackTraceElement1;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      mockRuntimeException0.setStackTrace(stackTraceElementArray0);
      List<String> list0 = ExceptionUtils.getStackFrameList(mockRuntimeException0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError("O", mockThrowable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("HH5o#7=");
      ExceptionUtils.printRootCauseStackTrace((Throwable) mockError0, (PrintWriter) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace((Throwable) null);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "hashCode";
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockRuntimeException0, stringArray0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<? extends Throwable>) class0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(mockThrowable0);
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfThrowable((Throwable) undeclaredThrowableException0, (Class<? extends Throwable>) class0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      int int0 = ExceptionUtils.getThrowableCount(mockRuntimeException0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError(mockThrowable0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockError0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", throwable0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ExceptionUtils exceptionUtils0 = new ExceptionUtils();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MockError mockError0 = new MockError("");
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockError0, class0, 1270);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError("O", mockThrowable0);
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfType((Throwable) mockError0, class0);
      assertSame(mockError0, throwable0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String[] stringArray0 = ExceptionUtils.getDefaultCauseMethodNames();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockThrowable mockThrowable0 = new MockThrowable(mockRuntimeException0);
      Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable0, stringArray0);
      assertSame(throwable0, mockRuntimeException0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      Class<Throwable> class0 = Throwable.class;
      Throwable throwable0 = ExceptionUtils.throwableOfThrowable((Throwable) mockRuntimeException0, class0);
      assertNull(throwable0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MockError mockError0 = new MockError();
      // Undeclared exception!
      try { 
        ExceptionUtils.rethrow((Throwable) mockError0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockError mockError0 = new MockError(mockThrowable0);
      Class<MockThrowable> class0 = MockThrowable.class;
      int int0 = ExceptionUtils.indexOfType((Throwable) mockError0, (Class<? extends Throwable>) class0, (-865));
      assertEquals(1, int0);
  }
}
