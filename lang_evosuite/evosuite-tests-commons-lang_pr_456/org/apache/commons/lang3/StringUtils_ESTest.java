/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 14:48:36 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      String string0 = StringUtils.center("ExceptionWasThrown", 2123, '+');
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, "qOb(");
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Nlo1%d$?tX[.cDI2*", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.repeat("Nlo1%d$?tX[.cDI2*", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = StringUtils.repeat('Z', 303);
      assertNotNull(string0);
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", (CharSequence) "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", 303);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = StringUtils.isAlpha("e");
      assertTrue(boolean0);
      
      int int0 = 101;
      int int1 = StringUtils.lastIndexOf((CharSequence) "e", 101);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.removeEnd("e", "e");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd("", "...");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.abbreviate("wT7>W4.ej{o-VTI#", (String) null, 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("wT7>W4.ej{o-VTI#", string3);
      
      charSequenceArray0[2] = (CharSequence) "wT7>W4.ej{o-VTI#";
      charSequenceArray0[3] = (CharSequence) "e";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String string0 = StringUtils.stripToNull("|vM");
      assertNotNull(string0);
      assertEquals("|vM", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "|vM", (CharSequence) "|vM");
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "|vM");
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("|vM", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "|vM", (CharSequence) charBuffer0);
      assertFalse(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("|vM", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.capacity());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String string0 = "r";
      String string1 = StringUtils.repeat("r", 8352);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.repeat('\'', 8352);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(";ulN", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, "s'}mY=vX&.", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("\n\n", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chop("\n\n");
      assertNotNull(string2);
      assertEquals("\n", string2);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      String string0 = StringUtils.repeat(", Lengh: ", 1283);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("org.junitpioneer.jupiter.TempDirectory\n", "&", 68, 22);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&upiter.TempDirectory\n", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "W6[[";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("W6[[", string2);
      
      String string3 = StringUtils.joinWith("MTvl(m8Sj;", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("W6[[", string3);
      
      String string4 = StringUtils.join((float[]) null, ';', 1283, 318);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String string0 = "e";
      String string1 = "NEN ,3jYC&*(z+}@Y?";
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "e";
      charSequenceArray0[1] = (CharSequence) "e";
      charSequenceArray0[2] = (CharSequence) "e";
      charSequenceArray0[3] = (CharSequence) "NEN ,3jYC&*(z+}@Y?";
      int int0 = 1114111;
      // Undeclared exception!
      StringUtils.repeat("", "p+Xe1^`3n$*3@L", 1114111);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String string0 = StringUtils.substring("P'F|@+O;b@k'", 677);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "P'F|@+O;b@k'", 'j');
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat("C~5 ", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category0, locale_Category2);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category2));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category2));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertNotNull(string0);
      assertEquals("DISPLAYFORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category2));
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = "Hc%KIy'";
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Hc%KIy'";
      // Undeclared exception!
      StringUtils.rightPad("Hc%KIy'", 65536, "Hc%KIy'");
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width is %d", '\u001C');
      assertNotNull(string0);
      assertEquals("\u001CMinimum abbreviation width is %d\u001C", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\u001CMinimum abbreviation width is %d\u001C";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[2] = (CharSequence) "\u001CMinimum abbreviation width is %d\u001C";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is %d";
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("?e4COHBljL=]i\"YA^3", "Z3v,D0$~<4M==========");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("?e4COHBljL=]i\"YA^3", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '\u001C', 0, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("blank_blank_blank_2014", "l", 14);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat(", Lengh: ", 58);
      assertNotNull(string0);
      assertEquals(", Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: ", string0);
      
      String string1 = StringUtils.abbreviate(", Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: ", "6", 98, 114);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6 , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , L6", string1);
      
      String string2 = StringUtils.unwrap("6 , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , L6", ", Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: ");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("6 , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , L6", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: , Lengh: ", 58, 32);
      assertEquals(34, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)108;
      String string3 = StringUtils.join(byteArray0, '6');
      assertArrayEquals(new byte[] {(byte)61, (byte)108}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("616108", string3);
      
      boolean boolean0 = StringUtils.endsWithAny("616108", stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String string0 = StringUtils.leftPad("XaaHk?q<Hj?23O", 8192, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      StringUtils.leftPad("XaaHk?q<Hj?23O", 8192, '#');
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = StringUtils.uncapitalize("\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'r', 2147483646, (-328));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("\n", "\n");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.prependIfMissing("G(BhT~@A,;(#r,i4#j", "\n", stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\nG(BhT~@A,;(#r,i4#j", string1);
      
      int int0 = StringUtils.ordinalIndexOf("G(BhT~@A,;(#r,i4#j", "\n", (-139));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrap("\n", "\n");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\n\n\n", string2);
      
      String string3 = StringUtils.trimToEmpty(".ohO}");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(".ohO}", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ".ohO}", (CharSequence) ", Lengh: ", 87);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      String string4 = StringUtils.chomp("\n\n\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("\n\n", string4);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.chomp("\r\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("A5@t-(3p$& rDN)>Yf]", 4, "phS`O'@F:<");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("A5@t-(3p$& rDN)>Yf]", string1);
      
      String string2 = StringUtils.stripStart("[vID!OB*j=b", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[vID!OB*j=b", string2);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      String string1 = StringUtils.removeEnd("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("\r", "\n");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\n\r\n", string2);
      
      String string3 = StringUtils.prependIfMissing("\n", "\r", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\r\n", string3);
      
      int int0 = StringUtils.ordinalIndexOf("\n", "\r\n", 87);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.wrap("\n", "\r\n");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\r\n\n\r\n", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n\r\n", (CharSequence) "\r\n\n\r\n", 87);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      String string5 = StringUtils.chomp("\r\n\n\r\n");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("\r\n\n", string5);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("L4g5YB!)P}C8");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeEnd("L4g5YB!)P}C8", "L4g5YB!)P}C8");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "L4g5YB!)P}C8");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L4g5YB!)P}C8\nL4g5YB!)P}C8", string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)36;
      String string2 = StringUtils.join(shortArray0, ';', (int) (short)36, (int) (short)36);
      assertArrayEquals(new short[] {(short)36}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.difference((String) null, "B'kZ_~X");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("B'kZ_~X", string3);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) ';';
      floatArray0[1] = (float) ';';
      floatArray0[2] = (float) (short)36;
      floatArray0[3] = (float) (short)36;
      floatArray0[4] = (float) (short)36;
      floatArray0[5] = (float) (short)36;
      floatArray0[6] = (float) (short)36;
      String string4 = StringUtils.join(floatArray0, 'o', 0, 2);
      assertArrayEquals(new float[] {59.0F, 59.0F, 36.0F, 36.0F, 36.0F, 36.0F, 36.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("59.0o59.0", string4);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.leftPad("", 8192, 'N');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[6] = "";
      stringArray0[1] = "e^ZfG(";
      stringArray0[2] = "Y";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(10, stringArray0.length);
      assertNotNull(string0);
      assertEquals("e^ZfG(", string0);
      
      String[] stringArray1 = StringUtils.substringsBetween("g\"w SIa?DEY", "Y", "Y");
      assertNull(stringArray1);
      
      String string1 = StringUtils.trimToNull("s`zpMBHE{Gb");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("s`zpMBHE{Gb", string1);
      
      boolean boolean0 = StringUtils.equalsAny("Y", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-5jy", "-5jy");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("-5jy"));
      
      ByteBuffer byteBuffer0 = charset0.encode("-5jy");
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(4, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      String string0 = StringUtils.join((Iterable<?>) set0, "-5jy");
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(string0);
      assertEquals("unicode-1-1-utf-8-5jyUTF8", string0);
      assertFalse(set0.contains("-5jy"));
      
      int int0 = StringUtils.indexOf((CharSequence) "unicode-1-1-utf-8-5jyUTF8", (CharSequence) "-5jy");
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat("offset cannot be negative", 58);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(string0, "6", 98, 114);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("6veoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset cannot be negativeoffset can6", string1);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.chop("\r\n");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("U^", "U^");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substring("Kff", 0);
      assertNotNull(string0);
      assertEquals("Kff", string0);
      
      String string1 = StringUtils.abbreviateMiddle("'lQb'd", ".", 3);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'.d", string1);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Can only resolve parameter of type ", "Can only resolve parameter of type ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 3);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("", 108);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("R@_ib5qo", "\n\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("R@_ib5qo", string2);
      
      String string3 = StringUtils.chomp("\n\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("\n", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "\n\r", 3452);
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      int int2 = StringUtils.ordinalIndexOf("R@_ib5qo", "R@_ib5qo", (-1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.deleteWhitespace("ioiova&^=%b");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("ioiova&^=%b", string4);
      
      String string5 = StringUtils.leftPad("ExpectedException", 2, " vs ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("ExpectedException", string5);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Can only resolve parameter of type ";
      objectArray0[1] = (Object) "ioiova&^=%b";
      objectArray0[2] = (Object) "ExpectedException";
      objectArray0[3] = (Object) "Can only resolve parameter of type ";
      objectArray0[4] = (Object) "\n\r";
      objectArray0[5] = (Object) "Can only resolve parameter of type ";
      objectArray0[6] = (Object) "Can only resolve parameter of type ";
      objectArray0[7] = (Object) "R@_ib5qo";
      String string6 = StringUtils.join(objectArray0, 'z', 3452, 108);
      assertEquals(8, objectArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = StringUtils.chomp("2V&&\"_3#{b@=*$7\"\r");
      assertNotNull(string0);
      assertEquals("2V&&\"_3#{b@=*$7\"", string0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String string0 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 5, "m");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(5));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains(5));
      
      String string1 = StringUtils.join(iterator0, 'y');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(treeSet0.contains(5));
      
      String string2 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "Search and Replace array lengths don't match: ", 'y');
      assertEquals(1, int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'y';
      charArray0[3] = 'y';
      charArray0[4] = 'y';
      charArray0[5] = 'y';
      charArray0[6] = 'y';
      String string3 = StringUtils.join(charArray0, 'y', 1, 5);
      assertArrayEquals(new char[] {'y', 'y', 'y', 'y', 'y', 'y', 'y'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("yyyyyyy", string3);
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase(" ", "Timeout", stringArray0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
      assertEquals(" Timeout", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" Timeout");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat(" Timeout", 1681);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      StringUtils.toCodePoints(string1);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.substringBetween(">Bs)2>", "0B_`t", "-5jySearch and Replace array lengths don't match: ");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("0B_`t");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.capitalize(" vs iQLG$t");
      assertNotNull(string1);
      assertEquals(" vs iQLG$t", string1);
      
      String string2 = StringUtils.normalizeSpace("DefaultLocale");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("DefaultLocale", string2);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("-5jySearch and Replace array lengths don't match: ", "DefaultLocale", locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(2, int0);
      
      // Undeclared exception!
      StringUtils.repeat(" vs iQLG$t", 65536);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = ".AU^$2Z";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("RC>C~", "RC>C~", ".AU^$2Z");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 2
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = StringUtils.substring("", 2444);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd("", "");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.difference(" ", "{]H--OE|kAIt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{]H--OE|kAIt", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("{]H--OE|kAIt");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("{]H--OE|kAIt");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "{]H--OE|kAIt", 65);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "ExceptionWasThrown", 1059, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("FL;1", "FL;1");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isEmpty("FL;1");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("FL;1", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.unwrap("W", "W");
      assertNotNull(string0);
      assertEquals("W", string0);
      
      String string1 = StringUtils.defaultIfBlank("FL;1", "ivVyk&L");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FL;1", string1);
      
      String string2 = StringUtils.rightPad("temp.dir", (-1), "temp.dir");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("temp.dir", string2);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "FL;1");
      assertEquals("FL;1", stringWriter0.toString());
      assertEquals("FL;1", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringWriter stringWriter2 = stringWriter1.append('1');
      assertEquals("FL;11", stringWriter0.toString());
      assertEquals("FL;11", stringWriter1.toString());
      assertEquals("FL;11", stringWriter2.toString());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringWriter2);
      
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      assertEquals("FL;11", stringWriter0.toString());
      assertEquals("FL;11", stringWriter1.toString());
      assertEquals("FL;11", stringWriter2.toString());
      assertEquals(5, stringBuffer0.length());
      assertEquals("FL;11", stringBuffer0.toString());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertNotNull(stringBuffer0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) stringBuffer0, 70);
      assertEquals("FL;11", stringWriter0.toString());
      assertEquals("FL;11", stringWriter1.toString());
      assertEquals("FL;11", stringWriter2.toString());
      assertEquals(5, stringBuffer0.length());
      assertEquals("FL;11", stringBuffer0.toString());
      assertSame(stringWriter0, stringWriter2);
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter2);
      assertSame(stringWriter1, stringWriter0);
      assertSame(stringWriter2, stringWriter0);
      assertSame(stringWriter2, stringWriter1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.rightPad("bZK_7y:P", 99);
      assertNotNull(string0);
      assertEquals("bZK_7y:P                                                                                           ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "bZK_7y:P";
      charSequenceArray0[1] = (CharSequence) "bZK_7y:P";
      charSequenceArray0[2] = (CharSequence) "bZK_7y:P                                                                                           ";
      charSequenceArray0[3] = (CharSequence) "bZK_7y:P                                                                                           ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) null, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("\r", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("\r");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string0 = StringUtils.prependIfMissing("\r", "\r", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", 13, 13);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-38);
      String string2 = StringUtils.join(byteArray0, 'J', 13, (int) (byte) (-67));
      assertArrayEquals(new byte[] {(byte) (-67), (byte)2, (byte)101, (byte) (-38)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      String string0 = StringUtils.remove("=~O*/0 cYbVx", '/');
      assertNotNull(string0);
      assertEquals("=~O*0 cYbVx", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '/';
      String string1 = StringUtils.join(longArray0, '&', 5, 5);
      assertArrayEquals(new long[] {47L}, longArray0);
      assertEquals(1, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "=~O*/0 cYbVx", (CharSequence) "", 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.repeat("offset cannot be negative", 58);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("offset cannot be negative", "AY5dh~MCuVP<PvJ", 98, 24);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("offset caAY5dh~MCuVP<PvJ", string1);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      String string0 = StringUtils.removeEnd("\r", "\n");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-4158L);
      longArray0[1] = (long) 's';
      longArray0[2] = (-1L);
      longArray0[3] = 831L;
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 's';
      longArray0[6] = (long) 4;
      longArray0[7] = (long) 's';
      String string1 = StringUtils.join(longArray0, '/', 1, 4);
      assertArrayEquals(new long[] {(-4158L), 115L, (-1L), 831L, 1L, 115L, 4L, 115L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("115/-1/831", string1);
      
      String string2 = StringUtils.mid("Threshold must not be negative", 1006, 4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.uncapitalize("\n");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("\n", string3);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.center("Faile to delete temp directory ", 34, "or");
      assertNotNull(string0);
      assertEquals("oFaile to delete temp directory or", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Faile to delete temp directory ", (CharSequence) "oFaile to delete temp directory or");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("or");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("or", string1);
      
      String string2 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+0z409z0z0z0z0z0z0z0z0z0", "oFaile to delete temp directory or", "p{InCombiningDiacriticalMarks}+0z409z0z0z0z0z0z0z0z0z0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("i{InCptbnnnngDnIrMnbnrICMIMks}+0z409z0z0z0z0z0z0z0z0z0", string2);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "or";
      objectArray0[1] = (Object) "\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0";
      objectArray0[2] = (Object) "Faile to delete temp directory ";
      objectArray0[3] = (Object) "or";
      objectArray0[4] = (Object) "p{InCombiningDiacriticalMarks}+0z409z0z0z0z0z0z0z0z0z0";
      objectArray0[5] = (Object) "\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0";
      objectArray0[6] = (Object) "\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0";
      objectArray0[7] = (Object) "\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0";
      objectArray0[8] = (Object) "Faile to delete temp directory ";
      String string3 = StringUtils.joinWith("\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0", objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("or\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0Faile to delete temp directory \t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0or\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0p{InCombiningDiacriticalMarks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0\t{InCibInIngDI{alImIa{nM{lks}+0z409z0z0z0z0z0z0z0z0z0Faile to delete temp directory ", string3);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.center("jcz[", 7, "Y;");
      assertNotNull(string0);
      assertEquals("Yjcz[Y;", string0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      String string0 = StringUtils.substringBetween("n RU9vPAyZG +Put?~", " ");
      assertNotNull(string0);
      assertEquals("RU9vPAyZG", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("RU9vPAyZG");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("ExpectedExceptdin", "ExpectedExceptdin", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String string0 = StringUtils.rightPad("bZK_7y:P", 99);
      assertNotNull(string0);
      assertEquals("bZK_7y:P                                                                                           ", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("bZK_7y:P                                                                                           ", "bZK_7y:P");
      assertEquals(0.69, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "bZK_7y:P", "bZK_7y:P                                                                                           ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("bZK_7y:P");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "\"!&jM");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)65;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\\', 4, (int) (byte)108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(", ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      String string1 = "ta/oL6%aXc2Y:I";
      String string2 = StringUtils.replaceEach("ta/oL6%aXc2Y:I", stringArray0, (String[]) null);
      assertEquals(2, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ta/oL6%aXc2Y:I", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(", "));
      
      // Undeclared exception!
      try { 
        treeSet0.tailSet((Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String string0 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", '\u001C');
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = StringUtils.repeat("[[t1+uxet#Q>g#dorg.junitpioneer.$upiter.DefaultLocaleExtension", 216);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      StringUtils.splitPreserveAllTokens(string1, "Minimum abbreviation width is %d", (-1));
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 'a';
      charArray0[2] = '?';
      charArray0[3] = 'p';
      charArray0[4] = 'a';
      charArray0[5] = 'k';
      charArray0[6] = '!';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'j', 'a', '?', 'p', 'a', 'k', '!'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertEquals("ja?pak!", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ja?pak!", charArray0);
      assertArrayEquals(new char[] {'j', 'a', '?', 'p', 'a', 'k', '!'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.getDigits("s'}mY=vX&.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", 'Q');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'Q';
      intArray0[1] = (int) 'Q';
      intArray0[2] = (int) 'Q';
      intArray0[3] = 1307;
      intArray0[4] = (int) 'Q';
      intArray0[5] = (int) 'Q';
      intArray0[6] = (int) 'Q';
      intArray0[7] = (-2288);
      intArray0[8] = (int) 'Q';
      String string1 = StringUtils.join(intArray0, '*', 1, 7);
      assertArrayEquals(new int[] {81, 81, 81, 1307, 81, 81, 81, (-2288), 81}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("81*81*1307*81*81*81", string1);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      String string0 = StringUtils.defaultString("W", "!d8^[Dce3");
      assertNotNull(string0);
      assertEquals("W", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "!d8^[Dce3", (CharSequence) "W");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("W");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = '4';
      charArray0[2] = 'W';
      charArray0[3] = 'j';
      charArray0[4] = 'M';
      charArray0[5] = 'T';
      charArray0[6] = ',';
      charArray0[7] = ' ';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "W", charArray0);
      assertArrayEquals(new char[] {'m', '4', 'W', 'j', 'M', 'T', ',', ' '}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "W", 3145, 51);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ", ", charArray0);
      assertArrayEquals(new char[] {','}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, int0);
      
      String string0 = StringUtils.wrapIfMissing(", ", ',');
      assertNotNull(string0);
      assertEquals(", ,", string0);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(mCW";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.mid("(mCW", 4, 4);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToEmpty("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase(string0, "{zt");
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "zyT$SL3xjgf,x2:E+`");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isMixedCase(string1);
      assertFalse(boolean0);
      
      String string2 = StringUtils.rotate("O-0L/~'aHgV", 49);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("'aHgVO-0L/~", string2);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'F', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("FF\u0000\u0000\u0000", string0);
      
      String string1 = StringUtils.swapCase(":.1mXy;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":.1MxY;", string1);
      
      String string2 = StringUtils.unwrap("FF\u0000\u0000\u0000", 'F');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("FF\u0000\u0000\u0000", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ":.1MxY;";
      charSequenceArray0[1] = (CharSequence) ":.1MxY;";
      charSequenceArray0[2] = (CharSequence) "FF\u0000\u0000\u0000";
      charSequenceArray0[3] = (CharSequence) "FF\u0000\u0000\u0000";
      charSequenceArray0[4] = (CharSequence) "FF\u0000\u0000\u0000";
      charSequenceArray0[5] = (CharSequence) "FF\u0000\u0000\u0000";
      charSequenceArray0[6] = (CharSequence) "FF\u0000\u0000\u0000";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[4] = 'F';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'F', '\u0000', '\u0000', 'F'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("FF\u0000\u0000F", string0);
      
      String string1 = StringUtils.swapCase(":.1mXy;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":.1MxY;", string1);
      
      String string2 = StringUtils.unwrap("FF\u0000\u0000F", 'F');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("F\u0000\u0000", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ":.1MxY;";
      charSequenceArray0[1] = (CharSequence) ":.1MxY;";
      charSequenceArray0[2] = (CharSequence) "FF\u0000\u0000F";
      charSequenceArray0[3] = (CharSequence) "FF\u0000\u0000F";
      charSequenceArray0[4] = (CharSequence) "F\u0000\u0000";
      charSequenceArray0[5] = (CharSequence) "F\u0000\u0000";
      charSequenceArray0[6] = (CharSequence) "FF\u0000\u0000F";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("\r", "\r", "\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1942;
      intArray0[1] = 3;
      intArray0[2] = (-225);
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 3;
      intArray0[7] = 3;
      String string2 = StringUtils.wrapIfMissing(" vs ", "+9eO~{P_I8,NKhN");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("+9eO~{P_I8,NKhN vs +9eO~{P_I8,NKhN", string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric("+9eO~{P_I8,NKhN vs +9eO~{P_I8,NKhN");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-264);
      shortArray0[1] = (short) (-2900);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)8;
      shortArray0[4] = (short)1978;
      shortArray0[5] = (short)16;
      shortArray0[6] = (short)10;
      String string3 = StringUtils.join(shortArray0, 'x', 0, 3);
      assertArrayEquals(new short[] {(short) (-264), (short) (-2900), (short)3, (short)8, (short)1978, (short)16, (short)10}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("-264x-2900x3", string3);
      
      String string4 = StringUtils.join((char[]) null, ',', (-860), 10);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = 'o';
      charArray0[2] = '1';
      charArray0[3] = '&';
      charArray0[4] = '3';
      charArray0[5] = 'K';
      charArray0[6] = '*';
      charArray0[7] = 'Z';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'L', 'o', '1', '&', '3', 'K', '*', 'Z'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "";
      stringArray0[2] = "'1";
      stringArray0[3] = "offset cannot be negative";
      stringArray0[4] = "w*4G";
      stringArray0[5] = "#)8'iyj";
      stringArray0[6] = "', is neither of type Map.Entry nor an Array";
      stringArray0[7] = "wW";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2707));
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.stripStart("l", (String) null);
      assertNotNull(string1);
      assertEquals("l", string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean3 = StringUtils.isAllLowerCase("l");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("org");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("ExpectedExceptdin");
      assertNotNull(string0);
      assertEquals("ExpectedExceptdin", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("ExpectedExceptdin");
      assertEquals(17, intArray0.length);
      assertNotNull(intArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)569;
      shortArray0[2] = (short)34;
      shortArray0[3] = (short)4157;
      shortArray0[4] = (short)56;
      shortArray0[5] = (short) (-1496);
      shortArray0[6] = (short) (-3054);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '^', (int) (short)4157, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = StringUtils.center("R?", 7, "R?");
      assertNotNull(string0);
      assertEquals("R?R?R?R", string0);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("N");
      assertArrayEquals(new int[] {78}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("N");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.chomp("t\n");
      assertNotNull(string0);
      assertEquals("t", string0);
      
      String string1 = StringUtils.normalizeSpace("t\n");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("t", string1);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, "v'NW5PLyGD");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeIgnoreCase("0g}bnOIndex: Locale must not be null", "v'NW5PLyGD");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0g}bnOIndex: Locale must not be null", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zyT$SL3xjgf,x2:E+x";
      stringArray0[1] = "";
      stringArray0[2] = "0g}bnOIndex: Locale must not be null";
      stringArray0[3] = "{zt";
      stringArray0[4] = "z>%tS@+/fm)(^[\"0";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " U]8@4QT5hS");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap("0g}bnOIndex: Locale must not be null", "Locale must not be null");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0g}bnOIndex: Locale must not be null", string2);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, ':');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rotate((String) null, Integer.MIN_VALUE);
      assertNull(string1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ':';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, ':', 1626, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" vs "));
      
      String string1 = StringUtils.repeat("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", (-2857));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.remove("", 'H');
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.right("Array and element cannot both be null", 4433);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Array and element cannot both be null", string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Array and element cannot both be null", (CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.substringAfter("&%fNMa", "g0P&$+e|%|kJ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("&%fNMa");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "g0P&$+e|%|kJ", (CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad("", 0, "FXd_u/x");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "g0P&$+e|%|kJ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang3.RegExUtils", 52);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(string0, "org.junitpioneer.jupiter.TempDirectory", 24, 98);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.org.junitpioneer.jupiter.TempDirectory", string1);
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[1] = "f^tsj";
      stringArray0[2] = "d6@'A3u WIA}3`0.0>0.0>0.0>0.0>0.0";
      stringArray0[3] = "-Hnt";
      stringArray0[4] = "org.apache.commons.lang3.RegExUtils";
      stringArray0[5] = "v5]a<KfHw`";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.capitalize("f^tsj");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("F^tsj", string1);
      
      String string2 = StringUtils.overlay("v5]a<KfHw`", "The Array must not be nullThe Array must not be null", (-3248), (-913));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("The Array must not be nullThe Array must not be nullv5]a<KfHw`", string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not be nullThe Array must not be nullv5]a<KfHw`", (CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.leftPad("f^tsj", (-913), "f^tsj");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("f^tsj", string3);
      
      String string4 = StringUtils.uncapitalize("X]OoB731[! ~tk8ga");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("x]OoB731[! ~tk8ga", string4);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.stripAccents("/k2iAE~TiGdW;V>D");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/k2iAE~TiGdW;V>D", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("/k2iAE~TiGdW;V>D"));
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      String string3 = StringUtils.removeEnd("/k2iAE~TiGdW;V>D", "WG");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("/k2iAE~TiGdW;V>D", string3);
      
      String string4 = StringUtils.wrapIfMissing("/k2iAE~TiGdW;V>D", "&");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&/k2iAE~TiGdW;V>D&", string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("WG");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("&");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '^';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {' ', '^'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.4666666666666666;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) '^';
      doubleArray0[3] = (double) ' ';
      doubleArray0[4] = (double) ' ';
      doubleArray0[5] = (double) ' ';
      doubleArray0[6] = (double) '^';
      doubleArray0[7] = (double) ' ';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'k', (-287), 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -287
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(4150);
      assertEquals(4150, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(4150, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4150, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(4150, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) "ExpectedExceptdin", (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "%fNMa2tL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      vector0.setSize(122);
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(122, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(122, vector0.size());
      assertFalse(vector0.contains(122));
      
      String string0 = StringUtils.join((List<?>) vector0, 'S', 4, (int) 'S');
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(122, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(122, vector0.size());
      assertNotNull(string0);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string0);
      assertFalse(vector0.contains(122));
      
      int int0 = StringUtils.ordinalIndexOf("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      vector0.setSize(122);
      assertEquals(122, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(122, vector0.capacity());
      assertFalse(vector0.contains(122));
      
      String string0 = StringUtils.join((List<?>) vector0, 'S', 4, 40);
      assertEquals(122, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", vector0.toString());
      assertEquals(122, vector0.capacity());
      assertNotNull(string0);
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", string0);
      assertFalse(vector0.contains(40));
      
      String string1 = StringUtils.removeIgnoreCase((String) null, "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS");
      assertNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = StringUtils.chomp("v ", "v ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("+[p\"8M2_jWxx1!='", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("+[p\"8M2_jWxx1!='", string1);
      
      String string2 = StringUtils.stripToEmpty("+[p\"8M2_jWxx1!='");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("+[p\"8M2_jWxx1!='", string2);
      
      String string3 = StringUtils.rightPad("T [_|giSV}m%F%^)", 31, "+[p\"8M2_jWxx1!='");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("T [_|giSV}m%F%^)+[p\"8M2_jWxx1!=", string3);
      
      String string4 = StringUtils.abbreviateMiddle("", "J(W]", 31);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removeStart("&&", "+[p\"8M2_jWxx1!='");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("&&", string5);
      
      boolean boolean0 = StringUtils.isAllLowerCase("v ");
      assertFalse(boolean0);
      
      String string6 = StringUtils.difference("J(W]", "");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.removeEnd("J(W]", "");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("J(W]", string7);
      
      String string8 = StringUtils.trimToEmpty("+[p\"8M2_jWxx1!='");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("+[p\"8M2_jWxx1!='", string8);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+[p\"8M2_jWxx1!='", 34, 31);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = StringUtils.mid("", (-2684), (-2684));
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-1);
      String string1 = StringUtils.join(byteArray0, '7');
      assertArrayEquals(new byte[] {(byte)11, (byte) (-2), (byte)11, (byte) (-1)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("117-27117-1", string1);
      
      int int0 = StringUtils.compare("", "The type must not be null", false);
      assertEquals((-25), int0);
      
      String string2 = StringUtils.chomp("\n");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.rightPad("", (int) (byte) (-2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "117-27117-1");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 16, 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...criticalMa...", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...acriticalM...", (CharSequence) "", 16);
      assertEquals(16, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate("^H29'Xf48+qRZ_@", 16, 16);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", (String) null, 21);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[1], charSequenceArray0[4]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Threshold must not be negative", "e", (-2130));
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      String string0 = "{}";
      String string1 = StringUtils.chomp("{}");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{}", string1);
      
      String string2 = "L";
      String string3 = StringUtils.replaceIgnoreCase("L", "WG", "{}");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("L", string3);
      
      String string4 = "fDS2!NB`\\e((+L#1?+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      char char0 = 'k';
      String string5 = StringUtils.reverseDelimited("5", 'k');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("5", string5);
      
      charSequenceArray0[0] = (CharSequence) "5";
      // Undeclared exception!
      StringUtils.repeat("WG", "5", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.rightPad("&", 1427);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string0, string0);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("uv ", "uv ", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Minimum abbreviation width with offset is %d"));
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'Z', 108, 33);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(arrayList0.contains("Minimum abbreviation width with offset is %d"));
      
      String string2 = StringUtils.removeIgnoreCase(" mA]`n\"", "8-@u$Gw#U");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" mA]`n\"", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      int int0 = StringUtils.indexOfAny((CharSequence) "uv ", charArray0);
      assertArrayEquals(new char[] {' ', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.removeIgnoreCase("org.junitpioneer.vintage.TmeoutExtension", "");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.TmeoutExtension", string0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'L', (-2028178998), (-497));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.truncate("", (int) ']', (int) ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", (-1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviateMiddle("", "", 1017);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) ']';
      floatArray0[1] = (float) ']';
      floatArray0[2] = (float) 1017;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'w', 0, 1017);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" vs "));
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-2964L);
      longArray0[1] = (long) 1;
      longArray0[2] = (-2964L);
      longArray0[3] = (-2964L);
      String string1 = " vs ";
      String string2 = StringUtils.rightPad("w", 2160, ' ');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = '*';
      charArray0[5] = 'M';
      charArray0[6] = ' ';
      charArray0[7] = '*';
      charArray0[8] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'M', '*', 'M', ' ', '*', 'I'}, charArray0);
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("MMMM*M *I", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        StringUtils.lastIndexOf((CharSequence) charBuffer0, (-2171), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("Failed to get parent directory from provider");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Failed to get parent directory from provider", " ");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("4zzS|x\"m=:ma");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("4zzS|x\"m=:ma"));
      
      int int0 = (-2857);
      String string0 = StringUtils.repeat("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", (-2857));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("org.junitpioneer.jupiter.TempDirectory\rcg'~H+^seo", '=');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory\rcg'~H+^seo", string1);
      
      boolean boolean1 = StringUtils.containsWhitespace("4zzS|x\"m=:ma");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("org.junitpioneer.jupiter.TempDirectory\rcg'~H+^seo");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.toRootUpperCase("_vuD");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("_VUD", string2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", 2040);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      // Undeclared exception!
      StringUtils.rightPad("4zzS|x\"m=:ma", 65536, 'M');
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      String string0 = StringUtils.mid("Minimum abbreviation width with offset is %d", 4261, 11);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("", (-1), "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.rightPad("", 8172, "");
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.center("", 3160, "");
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='";
      stringArray0[1] = "+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='";
      String string0 = StringUtils.replaceEach("+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='", string0);
      
      String string1 = StringUtils.leftPad("Array element ", (-1097));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array element ", string1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 0;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='", (CharSequence) "+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='", 2147483645);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String string0 = StringUtils.replaceAll("pZJ=#T`n6Die,b#", ";aHB4h/oEc@k$i*0?", "pZJ=#T`n6Die,b#");
      assertNotNull(string0);
      assertEquals("pZJ=#T`n6Die,b#", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "pZJ=#T`n6Die,b#", (CharSequence) ";aHB4h/oEc@k$i*0?", Integer.MAX_VALUE);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 3080, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = "', is neither of type Map.Entry nor an Array";
      String string2 = StringUtils.replaceIgnoreCase("', is neither of type Map.Entry nor an Array", "Failed to get parent directory from provider", "\r", 16);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("\r"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.contains("\r"));
      
      String string3 = " %BV:Z,jMl:";
      String string4 = StringUtils.stripToNull("\r");
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd("\n", (String) null);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "', is neither of type Map.Entry nor an Array";
      stringArray0[1] = "', is neither of type Map.Entry nor an Array";
      stringArray0[2] = "\n";
      stringArray0[3] = "', is neither of type Map.Entry nor an Array";
      stringArray0[4] = null;
      stringArray0[5] = "\r";
      stringArray0[6] = "\r";
      stringArray0[7] = " %BV:Z,jMl:";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "\n");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "\n", 4, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(", ", ',');
      assertNotNull(string0);
      assertEquals(", ,", string0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'o', (int) 'o', (int) 'o');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.removeAll("l&u8hl", "l&u8hl");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) null, "O=hYUdD", 29, (-980));
      assertNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O=hYUdD", "O=hYUdD", 160);
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("#z]s", "#z]s", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#z]s", string2);
      
      String string3 = StringUtils.join((byte[]) null, ';', 2159, 4);
      assertNull(string3);
      
      String string4 = StringUtils.normalizeSpace("NSro\u0006O|c!M1092~$");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("NSro\u0006O|c!M1092~$", string4);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      String string0 = StringUtils.getDigits("6E9q2A");
      assertNotNull(string0);
      assertEquals("692", string0);
      
      boolean boolean0 = StringUtils.isNumeric("692");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.repeat("di;c*Z7}P0Y`l", "2", 2535);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) "di;c*Z7}P0Y`l";
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) "2";
      charSequenceArray0[4] = (CharSequence) "di;c*Z7}P0Y`l";
      boolean boolean0 = StringUtils.endsWithAny(string0, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("/Uj))YE5x$V", "2", 2535);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/Uj))YE5x$V", string1);
      
      String string2 = StringUtils.wrapIfMissing("VG#bcw]@;c", "+5gfqCg}0;puh");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("+5gfqCg}0;puhVG#bcw]@;c+5gfqCg}0;puh", string2);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[3], (CharSequence) "+5gfqCg}0;puhVG#bcw]@;c+5gfqCg}0;puh");
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.truncate("4X5T6 ", 141, 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join((double[]) null, 'w', 2535, 2459);
      assertNull(string4);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'n';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String string0 = StringUtils.removeStart("D&", "D&");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "D&");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8192, "");
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.rightPad("", 8192);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8202, "");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      // Undeclared exception!
      StringUtils.rightPad("FX7Il`7*#I'Z7VfH`EX...0>0.0>0.0>0.0", 65536, 'n');
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeIgnoreCase((String) null, "");
      assertNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtils.swapCase("wNS}6D7=JC8eqQ<;##");
      assertNotNull(string1);
      assertEquals("Wns}6d7=jc8EQq<;##", string1);
      
      String string2 = StringUtils.unwrap("A)gx0O:^wW~!xfjN;og", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("A)gx0O:^wW~!xfjN;og", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "A)gx0O:^wW~!xfjN;og", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "A)gx0O:^wW~!xfjN;og");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.substringBetween("C>/;ZRL3s8`1g", (String) null, "BxJ`p|Bo;");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeStartIgnoreCase("", "fkn>{F]N%J>.PvJ3VE");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("v%/^Y4|'{zt", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("v%/^Y4|'{zt", string1);
      
      String string2 = StringUtils.abbreviateMiddle("Threshold must not be negative", (String) null, (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Threshold must not be negative", string2);
      
      String string3 = StringUtils.repeat(":.1mXy;", 10);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(":.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;", string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      String string4 = StringUtils.join(charArray0, ' ');
      assertArrayEquals(new char[] {' ', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("  \u0000", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I", "I", 10);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "Threshold must not be negative");
      assertEquals(1.0, double0, 0.01);
      
      String string5 = StringUtils.uncapitalize("fkn>{F]N%J>.PvJ3VE");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string5);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.trimToEmpty("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)4;
      int int0 = StringUtils.compareIgnoreCase("'lQb'd", "'lQb'd");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring("!S0ebg9ep^.UjVU8%Z", (int) (short)4);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("bg9ep^.UjVU8%Z", string2);
      
      String string3 = StringUtils.wrap("\n", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\r\n\r", string3);
      
      String string4 = StringUtils.abbreviateMiddle("p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", "\r", (short)4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("p{\r+", string4);
      
      String string5 = StringUtils.repeat("\n", (-1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      Object[] objectArray0 = new Object[0];
      String string6 = StringUtils.join(objectArray0, "\r");
      assertEquals(0, objectArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.left("<9fpNw'ml", 0);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.stripStart("p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", "I");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", string8);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      String string9 = StringUtils.join(intArray0, '+');
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("-1+-1", string9);
      
      int int1 = StringUtils.length("-1+-1");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "!S0ebg9ep^.UjVU8%Z", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(18, int2);
      
      String string10 = StringUtils.repeat(" v ", (int) (short)4);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      assertEquals(" v  v  v  v ", string10);
      
      int int3 = StringUtils.lastOrdinalIndexOf("!S0ebg9ep^.UjVU8%Z", "", 3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(18, int3);
      
      String string11 = StringUtils.abbreviateMiddle("/k2iAE~TiGdW;V>DWG", "bg9ep^.UjVU8%Z", 9);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertNotNull(string11);
      assertEquals("/k2iAE~TiGdW;V>DWG", string11);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.substringAfter("rkVh) E!1.hKDOT7+", "rkVh) E!1.hKDOT7+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "rkVh) E!1.hKDOT7+", 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("L1!|", 4, 'I');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L1!|", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "org.apache.commons.lang3.StringUtils");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("L1!|", "/k2iAE~TiGdW;V>D&");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("/k2iAE~TiGdW;V>D&L1!|/k2iAE~TiGdW;V>D&", string3);
      
      String string4 = StringUtils.abbreviateMiddle("D", (String) null, 5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("D", string4);
      
      String string5 = StringUtils.repeat("r|g,", 83);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,r|g,", string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'F';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      charArray0[6] = ' ';
      charArray0[7] = 'I';
      String string6 = StringUtils.join(charArray0, ' ');
      assertArrayEquals(new char[] {'I', 'I', 'I', 'F', ' ', ' ', ' ', 'I'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("I I I F       I", string6);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/k2iAE~TiGdW;V>D&L1!|/k2iAE~TiGdW;V>D&", "/k2iAE~TiGdW;V>D&", 5);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "`<w&\"5OSzjBNTg,o By", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("`<w&\"5OSzjBNTg,o By"));
      
      boolean boolean1 = linkedList0.add((Object) "`<w&\"5OSzjBNTg,o By");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("`<w&\"5OSzjBNTg,o By"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertTrue(linkedList0.contains("`<w&\"5OSzjBNTg,o By"));
      assertTrue(linkedList1.contains("`<w&\"5OSzjBNTg,o By"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertTrue(linkedList0.contains("`<w&\"5OSzjBNTg,o By"));
      assertTrue(linkedList1.contains("`<w&\"5OSzjBNTg,o By"));
      
      String string0 = StringUtils.center("0|", 49, "0|");
      assertNotNull(string0);
      assertEquals("0|0|0|0|0|0|0|0|0|0|0|00|0|0|0|0|0|0|0|0|0|0|0|0|", string0);
      
      String string1 = StringUtils.normalizeSpace("`<w&\"5OSzjBNTg,o By");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("`<w&\"5OSzjBNTg,o By", string1);
      
      boolean boolean2 = StringUtils.isWhitespace("0|");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>(49);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(49, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0|0|0|0|0|0|0|0|0|0|0|00|0|0|0|0|0|0|0|0|0|0|0|0|", "0|", 49);
      assertEquals(49, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[1] = (byte)11;
      String string0 = StringUtils.join(byteArray0, '7');
      assertArrayEquals(new byte[] {(byte)42, (byte)11, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string0);
      assertEquals("427117070", string0);
      
      int int0 = StringUtils.compare(" ", " ", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.chomp(" ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ", (int) (byte)42);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.compare("FH'hY3o:[ubb;hKGUk", "', has a length less than 2", false);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(31, int2);
      
      String string2 = StringUtils.chomp("o^m;;zodqp-QpCqlw(");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("o^m;;zodqp-QpCqlw(", string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, "o^m;;zodqp-QpCqlw(", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("', has a length less than 2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[1] = "";
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'W');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceFirst("", "", "MY");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MY", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "MY", (char[]) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.deleteWhitespace("m>j[at<_5&7ZSq");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("m>j[at<_5&7ZSq", string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "m>j[at<_5&7ZSq", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripAccents("d!");
      assertNotNull(string0);
      assertEquals("d!", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("Aborting to prote", "s@b>(wv8");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to prote", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "d!", (CharSequence) "d!");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.toRootLowerCase("Minimum abbreviation width is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("minimum abbreviation width is %d", string2);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'g';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '1';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'p', 'g', '~', '~', '1'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "minimum abbreviation width is %d");
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width is %d", "D@J", "Minimum abbreviation width is %d");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Aborting to prote");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int4 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "");
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(32, int4);
      
      String string3 = StringUtils.center("", (-1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Nlo1%d$?tX[.cDI2*";
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Nlo1%d$?tX[.cDI2*", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.remove("w3QQu%?}ls8", "!");
      assertNotNull(string1);
      assertEquals("w3QQu%?}ls8", string1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      String string2 = StringUtils.join(doubleArray0, '+', 3, (-1));
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 16, 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...criticalMa...", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...acriticalM...", (CharSequence) "", 16);
      assertEquals(16, int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      Set<String> set0 = charset1.aliases();
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertSame(charset1, charset0);
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      byte[] byteArray0 = StringUtils.getBytes("", charset1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertEquals("UTF-8", charset1.toString());
      assertSame(charset1, charset0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.unwrap((String) null, '-');
      assertNull(string0);
      
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = 45.0;
      doubleArray0[3] = (double) '-';
      doubleArray0[4] = (double) '-';
      String string1 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "}|8H";
      stringArray0[2] = null;
      stringArray0[3] = "Object varargs must not be null";
      stringArray0[4] = null;
      stringArray0[5] = null;
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'R';
      String string3 = StringUtils.join(charArray0, '0', 2422, 1025);
      assertArrayEquals(new char[] {'E', 'R'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "d,f3&HY4'_ldl?uZ", charSequenceArray0[0]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      assertEquals("d,f3&HY4'_ldl?uZ", charSequence0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "d,f3&HY4'_ldl?uZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Object varargs must not be null");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-911));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: ", "[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", (-3286));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase(", Length: ", ", Length: ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "fkn>{F]N%J>.PvJ3VE");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("v%/^Y4|'{zt", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("v%/^Y4|'{zt", string3);
      
      String string4 = StringUtils.abbreviateMiddle("Threshold must not be negative", (String) null, (-1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Threshold must not be negative", string4);
      
      String string5 = StringUtils.repeat(":.1mXy;", 10);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(":.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;:.1mXy;", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, ":.1mXy;");
      assertEquals(1, stringArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(", Length: ", string6);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      String string7 = StringUtils.join(charArray0, ' ');
      assertArrayEquals(new char[] {' ', ' '}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("   ", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("I", "I", 10);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.prependIfMissingIgnoreCase("v%/^Y4|'{zt", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("p{InCombiningDiacriticalMarks}+v%/^Y4|'{zt", string8);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      String string0 = StringUtils.center("^q@FMnG;Locale must not be null", 60, "org");
      assertNotNull(string0);
      assertEquals("orgorgorgorgor^q@FMnG;Locale must not be nullorgorgorgorgor", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("J>B=~]", "S$^[d-LSS]+Oox~^");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J>B=~]", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "^q@FMnG;Locale must not be null", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("O1RDd!'gNJ1w{}-");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("o1rdd!'gnj1w{}-", string2);
      
      int int1 = 372;
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "PQ$<g^i0", (CharSequence) "S$^[d-LSS]+Oox~^", 372);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(17, int2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "l,J5wi_W");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 17;
      floatArray0[1] = (float) 17;
      floatArray0[2] = (float) (byte)16;
      floatArray0[3] = (float) (byte)16;
      floatArray0[4] = (float) (byte)16;
      floatArray0[5] = (float) (-1);
      int int3 = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'j', Integer.MIN_VALUE, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.removeStart("Threshold must not be negative", "HpwJf)mnl");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      String string1 = StringUtils.stripToEmpty("}DZp\"a<Y66lajGlxq+");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}DZp\"a<Y66lajGlxq+", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("N2];QE3Ums", "N2];QE3Ums", "L2'f= E+mW", 64);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("L2'f= E+mW", string2);
      
      String string3 = StringUtils.left("Threshold must not be negative", (-3503));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[2] = (CharSequence) "}DZp\"a<Y66lajGlxq+";
      boolean boolean0 = StringUtils.equalsAny("N2];QE3Ums", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("The String must not be empty");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(64));
      
      String string4 = StringUtils.mid("The type must not be null", (-3503), (-3503));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.substringAfterLast("DefaultTim'Zone", "\"GyeCz");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("f8|&k48", "Object varargs must not be null", false);
      assertFalse(int1 == int0);
      assertEquals((-9), int1);
      
      String string0 = StringUtils.removeAll("Aborting to protect against StackOverflowError - output of one loop is the input of another", ";9;5@mvxI.9F");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.normalizeSpace("5>p`SUa");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("5>p`SUa", string1);
      
      String string2 = StringUtils.abbreviate("Object varargs must not be null", "'v>]$Zw/", 8159);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Object varargs must not be null", string2);
      
      String string3 = StringUtils.right("Object varargs must not be null", 6);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("e null", string3);
      
      String string4 = StringUtils.SPACE;
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" ", string4);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Y';
      charArray0[1] = '';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'O';
      charArray0[6] = 'O';
      charArray0[7] = 'O';
      charArray0[8] = 'O';
      int int2 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", charArray0);
      assertArrayEquals(new char[] {'Y', '', 'Y', 'Y', 'Y', 'O', 'O', 'O', 'O'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, 'N', (-340), (-340));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", "4'kj_}8F'%*)\"Zu]R/m");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      String string0 = StringUtils.mid("", (-2684), (-2684));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverseDelimited((String) null, 'G');
      assertNull(string1);
      
      String string2 = StringUtils.repeat("", 99);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replace("iQI;oO;{f", "", "", 99);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("iQI;oO;{f", string3);
      
      String string4 = StringUtils.difference("Minimum abbreviation width with offset is %d", "4{';'t|y6+MQDp=");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("4{';'t|y6+MQDp=", string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("6E9qA");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.capitalize("6E9qA");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("6E9qA", string5);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      longArray0[1] = (-601L);
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", (String) null, 0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(22, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.substringAfter("Locale must not be null", "6yw\"c(`j_");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripAccents("Minimum abbreviation width ith offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width ith offset is %d", string2);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("6yw\"c(`j_"));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains("6yw\"c(`j_"));
      assertFalse(list0.contains("6yw\"c(`j_"));
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet0.contains("6yw\"c(`j_"));
      assertFalse(list0.contains("6yw\"c(`j_"));
      assertFalse(linkedHashSet1.contains("6yw\"c(`j_"));
      
      String string3 = Locale.lookupTag(linkedList0, linkedHashSet1);
      assertEquals(0, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNull(string3);
      assertFalse(linkedHashSet0.contains("6yw\"c(`j_"));
      assertFalse(list0.contains("6yw\"c(`j_"));
      assertFalse(linkedHashSet1.contains("6yw\"c(`j_"));
      
      String string4 = locale1.getDisplayScript();
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.getFuzzyDistance(";O%ZCN5MX!Ltm", "j/mn6A0y5a^b4Od", locale1);
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(0, int0);
      
      String string5 = StringUtils.stripEnd("_ZuqPV3j1vkB", "Object varargs must not be null");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("_ZuqPV3j1vkB", string5);
      
      String string6 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = StringUtils.rotate("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 382);
      assertNotNull(string0);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", "ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", (-23));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "HpwJf)mnlu#&", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 17);
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad((String) null, 9);
      assertNull(string1);
      
      String string2 = StringUtils.wrap("", '\'');
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle("/Ku`^m|'", "/Ku`^m|'", 31);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/Ku`^m|'", string1);
      
      String string2 = StringUtils.leftPad("Minimum abbreviation width is %d", (-2401), "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is %d", string2);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(" ", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
      
      String string4 = StringUtils.stripEnd("", "Minimum abbreviation width is %d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      String string1 = StringUtils.removeStartIgnoreCase("+", "+");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.toRootLowerCase("[,3O:!");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[,3o:!", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "Strings must not be null", 3310);
      assertFalse(int1 == int0);
      assertEquals(27, int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.capitalize("**LvOSB!C4/0WWx ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("**LvOSB!C4/0WWx ", string3);
      
      String string4 = StringUtils.appendIfMissing("", "", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removePattern("\n", "Timeout");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("\n", string5);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("&", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string0 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(linkedList0.contains("\r"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      String string1 = StringUtils.wrapIfMissing("bZ.V SM$4cBnl3>", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\rbZ.V SM$4cBnl3>\r", string1);
      
      int int0 = StringUtils.compareIgnoreCase(" ", "Index: ", false);
      assertEquals((-73), int0);
      
      boolean boolean1 = StringUtils.isNotEmpty(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.left("d,f3&HY4'_ldl?uZ", 91);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("d,f3&HY4'_ldl?uZ", string2);
      
      String string3 = StringUtils.stripStart("org.apache.commons.lang3.Charsets", "Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(".apache.commons.lang3.Charsets", string3);
      
      int int1 = StringUtils.length("Index: ");
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], (CharSequence) "I");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.reverse("");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.difference("", "d,f3&HY4'_ldl?uZ");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("d,f3&HY4'_ldl?uZ", string5);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[2], (CharSequence) ".apache.commons.lang3.Charsets");
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = "Locale must not be null";
      String string1 = "kx%w\\LG^XJ\\";
      String[] stringArray0 = StringUtils.substringsBetween("Locale must not be null", "Locale must not be null", "kx%wLG^XJ");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Locale must not be null");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripToNull("kx%wLG^XJ");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("kx%wLG^XJ", string2);
      
      char char0 = '7';
      String string3 = StringUtils.unwrap("nnBQfzw", '7');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("nnBQfzw", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null");
      assertEquals(0, int0);
      
      String string4 = "org.apache.commons.lang3.ArrayUtils";
      char char1 = 'G';
      String string5 = StringUtils.remove("org.apache.commons.lang3.ArrayUtils", 'G');
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string5);
      
      String string6 = StringUtils.substringBetween("kx%wLG^XJ", "", "");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("cale must not be null[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g^q@FMnG;", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = " vs ";
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" vs ", string2);
      
      String string3 = StringUtils.leftPad("n&jr)`(7", 4100);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("Minimum abbreviation width is %d", 4100);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string5 = StringUtils.remove("Minimum abbreviation width is %d", 'l');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Minimum abbreviation width is %d", string5);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.abbreviate(string3, 4100, 4100);
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string3, 4100);
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string7));
      assertFalse(string3.equals((Object)string4));
      assertFalse(int1 == int0);
      assertEquals(4100, int1);
      
      String string8 = StringUtils.trimToEmpty("org.apache.commons.lang3.Charsets");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("org.apache.commons.lang3.Charsets", string8);
      
      // Undeclared exception!
      try { 
        Charset.forName("org.apache.commons.lang3.Charsets");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.lang3.Charsets
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      String string0 = StringUtils.upperCase(">V6Uhind1Y2");
      assertNotNull(string0);
      assertEquals(">V6UHIND1Y2", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'x';
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'Y';
      longArray0[1] = (long) 'x';
      longArray0[2] = (long) 'Y';
      longArray0[3] = (long) 'x';
      longArray0[4] = (long) 1;
      longArray0[5] = (long) 'x';
      longArray0[6] = (long) 3272;
      longArray0[7] = (long) 1;
      longArray0[8] = (long) 3272;
      String string1 = StringUtils.join(longArray0, 'x', 325710888, 2270);
      assertArrayEquals(new long[] {89L, 120L, 89L, 120L, 1L, 120L, 3272L, 1L, 3272L}, longArray0);
      assertEquals(9, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'Y', 'x', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("0.0>0.0>0.0>0.0>0.0", string0);
      
      String string1 = StringUtils.abbreviate("0.0>0.0>0.0>0.0>0.0", 16, 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...0>0.0>0.0>0.0", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0.0>0.0>0.0>0.0>0.0", (CharSequence) "HpwJf)mnlu#&", 16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.SPACE;
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      String string3 = StringUtils.stripEnd((String) null, "47XJb:cF");
      assertNull(string3);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "0.0>0.0>0.0>0.0>0.0";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "HpwJf)mnlu#&";
      charSequenceArray0[4] = (CharSequence) "47XJb:cF";
      charSequenceArray0[5] = (CharSequence) null;
      String string5 = StringUtils.defaultString("\r", (String) null);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "...0>0.0>0.0>0.0";
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string6 = StringUtils.join((List<?>) linkedList0, "?8ll*QcL", 76, (-1));
      assertEquals(0, linkedList0.size());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) ":.1mXy;", (-3286), 11);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ":.1mXy;", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.leftPad((String) null, (-3286));
      assertNull(string0);
      
      String string1 = StringUtils.center("9", 3, "9");
      assertNotNull(string1);
      assertEquals("999", string1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 4;
      intArray0[3] = (-3286);
      String string2 = StringUtils.join(intArray0, 'w', 0, (-1097));
      assertArrayEquals(new int[] {0, 0, 4, (-3286)}, intArray0);
      assertEquals(4, intArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "\n");
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfAny("\n", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string1 = StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 14, 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...iacritical...", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...Diacritica...", (CharSequence) "", 14);
      assertEquals((-1), int0);
      
      String string2 = "junit-pioneer";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "", "/Uj))YE5x$V@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(".x]]");
      assertNotNull(string0);
      assertEquals(".x]]", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.difference("ExceptionWasThrown", ".x]]");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".x]]", string1);
      
      String string2 = "jkt";
      String string3 = StringUtils.leftPad(".x]]", 24, "Object varargs must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Object varargs must .x]]", string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Object varargs must not be null"));
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "jkt", 2549, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2549) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("Minimum abbreviation width with offset is %d", charSequence0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", (-428));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-428);
      intArray0[1] = (-1);
      intArray0[2] = (-428);
      intArray0[3] = (-428);
      intArray0[4] = (-428);
      intArray0[5] = (-1);
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
      
      int int1 = StringUtils.compareIgnoreCase("p{ICombinngDiacriticalMarks}+", "p{ICombinngDiacriticalMarks}+", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.trimToEmpty((String) null);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width with offset is %d");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 5);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle("/Ku`^m|'", "/Ku`^m|'", 31);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/Ku`^m|'", string1);
      
      String string2 = StringUtils.leftPad("Minimum abbreviation width is %d", (-2401), "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is %d", string2);
      
      String string3 = StringUtils.SPACE;
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(" ", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      String string0 = StringUtils.removeAll("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(""));
      
      boolean boolean3 = linkedList1.add((Object) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(""));
      assertFalse(linkedList1.contains(""));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains(""));
      
      String string1 = StringUtils.join(iterator0, '<');
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertFalse(linkedList1.contains(""));
      
      String string2 = StringUtils.rightPad("S_?g_", (-3405));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("S_?g_", string2);
      
      String string3 = StringUtils.substringBeforeLast("S_?g_", "B(T");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("S_?g_", string3);
      
      String string4 = StringUtils.join(intArray1, '<');
      assertArrayEquals(new int[] {}, intArray1);
      assertSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.leftPad("", 0, '%');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.truncate("\"UFp~7che2%", 0, 0);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean4 = StringUtils.isNumericSpace("S_?g_");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      int int0 = StringUtils.ordinalIndexOf("B(T", "", 34);
      assertEquals(0, int0);
      
      String string7 = StringUtils.join(iterator0, "");
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(linkedList1.contains(0));
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.0F;
      String string0 = "T2o\\u O,;H";
      int int0 = StringUtils.compareIgnoreCase(string0, string0, false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeAll(string0, "The character must not be null");
      assertNotNull(string1);
      assertEquals("T2o\\u O,;H", string1);
      
      String string2 = StringUtils.normalizeSpace("QP");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("QP", string2);
      
      String string3 = StringUtils.abbreviate("The character must not be null", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 8159);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The character must not be null", string3);
      
      String string4 = StringUtils.right("ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another", 8159);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(" ", string5);
      
      String string6 = StringUtils.stripEnd("~hy9\"Z*gzW}O+d,L/L", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("~hy9\"Z*gzW}O+d,L/L", string6);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkft", "org.apache.commons.lang3.StringUtils", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) '=';
      floatArray0[2] = 8538.28F;
      floatArray0[3] = (-6532.0F);
      floatArray0[4] = (float) '=';
      String string3 = StringUtils.join(floatArray0, '=');
      assertArrayEquals(new float[] {0.0F, 61.0F, 8538.28F, (-6532.0F), 61.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("0.0=61.0=8538.28=-6532.0=61.0", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("0.0=61.0=8538.28=-6532.0=61.0");
      assertFalse(boolean0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.capitalize("s[ux{?%[h0R((@");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("S[ux{?%[h0R((@", string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "jkft", "^q@FMnG;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      assertFalse(stack0.contains("s[ux{?%[h0R((@"));
      
      String string6 = StringUtils.join((List<?>) stack0, "0.0=61.0=8538.28=-6532.0=61.0", (-1), (-1253));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(stack0.contains("s[ux{?%[h0R((@"));
      
      String string7 = StringUtils.getDigits("C9>jQ5$\"y}}/WUX]NM");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("95", string7);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("^q@FMnG;", "jkft");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      String string2 = StringUtils.wrapIfMissing("org.junitpioneer.vintage.TimeoutExtension", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string2);
      
      int int1 = StringUtils.compareIgnoreCase("h'ys:=aF{;PuWDu?nK", "=^9!s}ov.D9q$(", true);
      assertFalse(int1 == int0);
      assertEquals(43, int1);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String string3 = StringUtils.left("=^9!s}ov.D9q$(", 87);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("=^9!s}ov.D9q$(", string3);
      
      String string4 = StringUtils.stripStart("C", "org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("C", string4);
      
      int int2 = StringUtils.length("=^9!s}ov.D9q$(");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(14, int2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "h'ys:=aF{;PuWDu?nK", (CharSequence) "");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(18, int3);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains(""));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String string4 = StringUtils.normalizeSpace("offset cannot be negative");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("offset cannot be negative", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean5 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string5 = StringUtils.chop(" in an array of ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(" in an array of", string5);
      
      String string6 = StringUtils.removeStart((String) null, "");
      assertNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) null, 6);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 1, 1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(54);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(54, charBuffer0.remaining());
      assertEquals(54, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(54, charBuffer0.limit());
      assertEquals(54, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(54, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(54, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(54, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(54, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=54 cap=59]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(59, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(54, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      String string7 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteArray0.length);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("v ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains((-601L)));
      
      boolean boolean0 = StringUtils.isAlpha("v ");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = '';
      charArray0[5] = '';
      charArray0[6] = '';
      charArray0[7] = '';
      charArray0[8] = '';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'', '', '', '', '', '', '', '', ''}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("v", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "v ", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "[6=V+]9cNPWT@tg");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "v");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.upperCase("yHy=Wve}sM F=)]Aa");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("YHY=WVE}SM F=)]AA", string4);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.remove("C=~-\n", "~hy9\"Z*gzW}O+d,L/L");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("C=~-\n", string5);
      
      double[] doubleArray0 = new double[0];
      String string6 = StringUtils.join(doubleArray0, '', 0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '|', 1, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "*;jGcBio=h*r;@go", "*;jGcBio=h*r;@go");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.center("", 0, '=');
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = " in an array of gI?EH{@B{#fq&iyZ";
      stringArray0[2] = "";
      stringArray0[3] = "qw";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = " in an array of gI?EH{@B{#fq&iyZ";
      stringArray0[7] = "";
      String string1 = StringUtils.replaceEach(" in an array of gI?EH{@B{#fq&iyZ", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" in an array of gI?EH{@B{#fq&iyZ", string1);
      
      String string2 = StringUtils.wrap("DefaultTimeZone", '1');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("1DefaultTimeZone1", string2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "p)FXvnO*c<x}cU?i&", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("p)FXvnO*c<x}cU?i&", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.substringsBetween("aUwzLLKO4v<mL:#aUwzLLKO4v<mL:#", " in an array of gI?EH{@B{#fq&iyZ", (String) null);
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Threshold must not be negative", (CharSequence) null, (-2713));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.substringsBetween("", "s+sy~}d~3\"G^", " in an array of gI?EH{@B{#fq&iyZ");
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      boolean boolean2 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'P', (-624), (-624));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.CharSequenceUtils";
      String string1 = StringUtils.EMPTY;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.CharSequenceUtils";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny(" vs ", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(4, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("5", ".9@\"<F[", 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.center("", 0, ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", (-1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2167;
      String string4 = StringUtils.join(shortArray0, 'z');
      assertArrayEquals(new short[] {(short)2167}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("2167", string4);
      
      String string5 = StringUtils.removeStart("%fNMa", "&");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("%fNMa", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string6 = StringUtils.getDigits((String) null);
      assertNull(string6);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string7 = StringUtils.uncapitalize("");
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "2167";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      String string1 = StringUtils.join((float[]) null, '=');
      assertNull(string1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[4] = null;
      String[] stringArray2 = StringUtils.split("hO7$$", "W", 13);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "ExceptionWasThrown", (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("ExceptionWasThrown", stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) ":r", (-336));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ":r", (CharSequence) ":r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Locale.Category> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = linkedList0.offerFirst(locale_Category0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(locale_Category0));
      
      String string0 = "6\\w!%pz\"qeW~pkMNlo1%d$?tX[.cDI2*Nlo1%d$?tX[.cDI2*";
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "6w!%pz\"qeW~pkMNlo1%d$?tX[.cDI2*Nlo1%d$?tX[.cDI2*");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.startsWith("ExceptionWasThrown", "ExceptionWasThrown");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("^q@FMnG;");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.stripToNull("ExceptionWasThrown");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ExceptionWasThrown", string2);
      
      String string3 = StringUtils.truncate("ExceptionWasThrown", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replacePattern((String) null, "^q@FMnG;", "^q@FMnG;");
      assertNull(string4);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "^q@FMnG;", "");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("^q@FMnG;"));
      
      String string5 = StringUtils.join((List<?>) arrayList0, '=', 160, 160);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      assertFalse(arrayList0.contains("^q@FMnG;"));
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) " ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing("q=e)z9S%Meetv", "or", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("orq=e)z9S%Meetv", string0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{}");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.normalizeSpace("\r is not in the range '0' - '9'");
      assertNotNull(string0);
      assertEquals("is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.unwrap((String) null, '-');
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      charSequenceArray0[0] = null;
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) '-';
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains('-'));
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      String string1 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) string0, string0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.normalizeSpace("\r\r");
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence charSequence1 = StringUtils.defaultIfBlank((CharSequence) string0, (CharSequence) "");
      assertTrue(charSequence1.equals((Object)string2));
      assertTrue(charSequence1.equals((Object)string3));
      assertNotNull(charSequence1);
      assertEquals("", charSequence1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", (CharSequence) "");
      assertEquals(88, int0);
      
      String string4 = StringUtils.toRootLowerCase(string0);
      assertNull(string4);
      
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean2 = StringUtils.startsWithAny("\nC=~-", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'D');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2684));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.mid("", (-2684), (-2684));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited((String) null, 'N');
      assertNull(string2);
      
      String string3 = StringUtils.join((Iterator<?>) null, 'N');
      assertNull(string3);
      
      String string4 = "-bq4M~c]&>$b5QM";
      String string5 = StringUtils.rightPad("2PT?(^Ujgj2kef", 99);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("2PT?(^Ujgj2kef                                                                                     ", string5);
      
      String string6 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string6);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 12, 1695);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\n";
      stringArray0[1] = "0,f@8M>uEH`E";
      stringArray0[2] = "\n";
      stringArray0[3] = "0,f@8M>uEH`E";
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\n";
      stringArray1[1] = "0,f@8M>uEH`E";
      stringArray1[2] = "0,f@8M>uEH`E";
      stringArray1[3] = "Rg 19{";
      String string0 = StringUtils.replaceEach("\n", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\r", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String string0 = " but was: $..";
      String string1 = StringUtils.substringBetween(" but was: $..", " but was: $..", " but was: $..");
      assertNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = null;
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.chop(string1);
      assertNull(string3);
      
      String string4 = StringUtils.replacePattern(string1, "WZ&", "org.junitpioneer.jupiter.DefaultTimeZoneExtensaon");
      assertNull(string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 2360);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.reverse((String) null);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "U\"(\"LG,FQw\"XD*[5 ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "%>{;GcA;6n1%vh", 3133);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "Ufu");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, "`?z(YeOJq'U!N88+U|a", "ExceptionWasThrown ");
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "`?z(YeOJq'U!N88+U|a", (CharSequence) "ExceptionWasThrown ");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.repeat("org.junitpioneer.vintage.ExpectedExceptionExtension", (String) null, 0);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = StringUtils.substring("Locale must not be null", 42);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replace("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      int[] intArray0 = new int[9];
      String string2 = StringUtils.join(intArray0, '?');
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("0?0?0?0?0?0?0?0?0", string2);
      
      String string3 = StringUtils.leftPad("49", (-2013), '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("49", string3);
      
      String string4 = StringUtils.repeat('k', 805);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string4);
      
      StringUtils.leftPad("M`<", (-1), "y!W+kJ'?j");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.removeAll("0?0?0?0?0?0?0?0?0", "Locale must not be null");
      charSequenceArray0[0] = (CharSequence) "0?0?0?0?0?0?0?0?0";
      StringUtils.startsWithAny("M`<", charSequenceArray0);
      StringUtils.indexOf((CharSequence) "49", (CharSequence) "y!W+kJ'?j", 805);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.substringBefore(" ", " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("", " ");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertEquals(16, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "nKu-`,<85i<|HB");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate("|K", ".sg", (int) (short)52);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("|K", string3);
      
      String string4 = StringUtils.chop("|K");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("|", string4);
      
      String string5 = StringUtils.removeStart((String) null, " in an array of ");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "nKu-`,<85i<|HB", (CharSequence) "", (-22));
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "|K", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      String string6 = StringUtils.removeStart("E", (String) null);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("E", string6);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String[] stringArray0 = new String[12];
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'W');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "C!kjQv", (CharSequence) stringArray0[1], 5);
      assertEquals(12, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceFirst("", "C!kjQv", "MY");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(12, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = " vs ";
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      int int0 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) "\r");
      assertEquals(0, int0);
      
      String string2 = "Minimum abbreviation width with offset is %d*YkNvO;>w6(z$v5";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = "\r";
      String string3 = "GRj%,D/\\K$gQS7X";
      stringArray1[2] = "GRj%,D/K$gQS7X";
      stringArray1[3] = " vs ";
      stringArray1[4] = " vs ";
      stringArray1[5] = "p";
      stringArray1[6] = "Minimum abbreviation width with offset is %d*YkNvO;>w6(z$v5";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("Minimum abbreviation width with offset is %d*YkNvO;>w6(z$v5", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.chomp("", "!B`[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("+[p\"8M2_jWxx1!='", "+[p\"8M2_jWxx1!='");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToEmpty("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string2);
      
      String string3 = StringUtils.repeat("\n", 2431);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("[<wCZ#?Bnkw^Q6j?~++YJG&n&0e.d$`]g0&&O44d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("[<wCZ#?Bnkw^Q6j?~++YJG&n&0e.d$`]g0&&O44d", string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(boolean0);
      
      String string5 = StringUtils.replaceIgnoreCase(". The following paths could not be deleted (see suppressed exceptions for details): ", "!Si>16C|$TU>", "}DZp\"a<Y66lajGlxq+");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details): ", string5);
      
      String string6 = StringUtils.chomp("Threshold must not be negative");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("Threshold must not be negative", string6);
      
      String string7 = StringUtils.chop("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not se", string7);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = "&7iD:g@%";
      String string2 = StringUtils.trimToNull("&7iD:g@%");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&7iD:g@%", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ',';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, ':', 981, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rotate("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", 9);
      assertNotNull(string1);
      assertEquals("Ru`=h^ac\n@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'", string1);
      
      String string2 = StringUtils.truncate(")vO>Eq1/IiTYH0", 9, 9);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("iTYH0", string2);
      
      String string3 = StringUtils.right((String) null, 9);
      assertNull(string3);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-58), (-58));
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "AkmhRd/HBln}`|>5z&");
      assertEquals((-19), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "AkmhRd/HBln}`|>5z&", (CharSequence) "AkmhRd/HBln}`|>5z&", 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.substringAfterLast("...", "AkmhRd/HBln}`|>5z&");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring((String) null, (-1), (-19));
      assertNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.stripEnd("", "Cannot store ");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEnd("[<wCZ#?Bnkw^Q6j?~++", "YJG&n&0e.d$`]g0&&O44d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("[<wCZ#?Bnkw^Q6j?~++", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 2061);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("\r", 'r');
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("r\rr", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("r\rr", (-1), (-19));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      String string0 = StringUtils.center("", 0, ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("", (-1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2167;
      String string4 = StringUtils.join(shortArray0, 'z');
      assertArrayEquals(new short[] {(short)2167}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("2167", string4);
      
      String[] stringArray0 = StringUtils.split("~uT%lSThe Character must not be null", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "WFzD`/| E", "cn9X{Vk9Q");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.CharSequenceUtils", " vs ", (-3286));
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", "");
      assertEquals(42, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.CharSequenceUtils", ":.1mXy;", (-3286));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      
      String string6 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals(3, stringArray0.length);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("org.apache.common.lang3.CharSequenceUtil", string7);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[6] = '7';
      String string8 = StringUtils.join(charArray0, ' ');
      assertArrayEquals(new char[] {'7', '7', '7', '7', '\u0000', '\u0000', '7'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("7 7 7 7 \u0000 \u0000 7", string8);
      
      String string9 = StringUtils.replacePattern("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", "", "");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string9);
      
      String string10 = StringUtils.stripStart("YJG&n&0e.d$`", "Cannot store ");
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertNotNull(string10);
      assertEquals("YJG&n&0e.d$`", string10);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("offset cannot be negative", "RBGX&}wGm(C0");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 12
         // RBGX&}wGm(C0
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      String string1 = StringUtils.join((float[]) null, '=');
      assertNull(string1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[3] = "c";
      stringArray1[5] = null;
      String string2 = StringUtils.replaceEach("hO7$5", stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("hO7$5", string2);
      
      String string3 = StringUtils.abbreviateMiddle("ExceptionWasThrown", "Cz |mG1Y_yeOccawK=!", 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ExceptionWasThrown", string3);
      
      String string4 = StringUtils.replaceAll(string1, "ExceptionWasThrown", "LS2");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, "ExceptionWasThrown");
      assertFalse(boolean0);
      
      String string5 = StringUtils.trim(string1);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripStart("\"[*-m7U$%|", "\"[*-m7U$%|");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.split("pq$<g^", 'q');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'q', 'q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("qq", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "qq", (CharSequence) "TgyB%<dQZ8'lT", 16);
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string4 = StringUtils.stripToEmpty("The character must not be null");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("The character must not be null", string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) 'q';
      longArray0[2] = 1518L;
      longArray0[3] = (-352L);
      longArray0[4] = (long) (-41);
      String string5 = StringUtils.join(longArray0, 'q', 16, (-220));
      assertArrayEquals(new long[] {0L, 113L, 1518L, (-352L), (-41L)}, longArray0);
      assertEquals(5, longArray0.length);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "+@>";
      charSequenceArray0[1] = (CharSequence) "+@>";
      charSequenceArray0[2] = (CharSequence) "+@>";
      charSequenceArray0[3] = (CharSequence) "+@>";
      String string0 = StringUtils.overlay((String) null, "fu", (-1160), 4572);
      assertNull(string0);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "+@>";
      charSequenceArray0[6] = (CharSequence) "+@>";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertEquals("+@>", charSequence0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.rotate("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 382);
      assertNotNull(string0);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", "ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", 5);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", (-1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string1);
      
      String string2 = StringUtils.leftPad("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", 9, "Minimum abbreviation width is %d");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string2);
      
      String string3 = StringUtils.rotate("org.junitpioneer.jupiter.TempDirectory$CloseablePath", (-2559));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("oneer.jupiter.TempDirectory$CloseablePathorg.junitpi", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET";
      charSequenceArray0[1] = (CharSequence) "ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory$CloseablePath";
      charSequenceArray0[3] = (CharSequence) "ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S";
      charSequenceArray0[4] = (CharSequence) "ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S";
      int int1 = StringUtils.lastIndexOfAny("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "org.apache.commons.lang3.StringUtils", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("org.apache.commons.lang3.StringUtils"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("org.apache.commons.lang3.StringUtils"));
      
      String string3 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "^q@FMnG;", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase(">;=h`:SPFPH?COv?", "org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(">;=h`:SPFPH?COv?org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.defaultIfBlank("^q@FMnG;", "{!\";}1Vy8j*");
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("^q@FMnG;", string5);
      
      String string6 = StringUtils.reverse("^q@FMnG;");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(";GnMF@q^", string6);
      
      String[] stringArray1 = StringUtils.substringsBetween(">iKc6>qj}2rB-", "6(lH,", "^q@FMnG;");
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("org.apache.commons.lang3.StringUtils", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains("\r"));
      
      String string2 = StringUtils.rightPad("-bq4M~c]&>$b5QM", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-bq4M~c]&>$b5QM", string2);
      
      String string3 = StringUtils.abbreviate("Arguments cannot both be null", 2411);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Arguments cannot both be null", string3);
      
      String string4 = StringUtils.leftPad((String) null, (-397), "-bq4M~c]&>$b5QM");
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) null, (-397));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.stripStart("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "");
      assertEquals(1, int0);
      
      CharSequence charSequence0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) null, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      String string0 = " but was: ...";
      String string1 = StringUtils.remove(" but was: ...", " but was: ...");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = "Threshold must not be negative";
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)6;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short)1196;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'q', (int) (short)2, (int) (short)1196);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "junit";
      stringArray0[1] = "junit";
      stringArray0[2] = "junit";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "junit";
      stringArray1[1] = "junit";
      stringArray1[2] = "junit";
      String string0 = StringUtils.replaceEach("junit", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      assertEquals("junit", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("org.junitpioneer.jupiter.DefaultLocaleExtension", "\r", "K.}@'@@]-J'Z)", (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("junit"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("junit"));
      
      String string2 = StringUtils.replaceIgnoreCase("&38&5&127&38&5&12", (String) null, "&38&5&127&38&5&12");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&38&5&127&38&5&12", string2);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("junit");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string3 = StringUtils.capitalize("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("junit", " )wcv7`M 4'", stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string4);
      assertEquals("junit", string4);
      
      int int0 = StringUtils.compare("org.junitpioneer.jupiter.DefaultLocaleExtension", " )wcv7`M 4'", false);
      assertEquals(79, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension", (char[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "junit", 53);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("|[p\"8M2_jWxx1!='");
      assertNotNull(string0);
      assertEquals("|[p\"8M2_jWxx1!='", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "|[p\"8M2_jWxx1!='", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[0] = 0.0F;
      String string0 = StringUtils.replaceOnce((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter("...", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringAfterLast("...", "NMAt`{,f|,!d`tgZv");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEnd("C=~-\n", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("C=~-\n", string4);
      
      String[] stringArray0 = StringUtils.split("PxJvf@!", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.substringAfter(",@!vfYX*Tis@2[Bp", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "~s5u%;U2}IC~3I");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", 4, 1019);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I}3[", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.abbreviateMiddle("YmJ$Dsh?5P`040zX,{F", "\r", 1019);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("YmJ$Dsh?5P`040zX,{F", string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.CharSequenceUtils", " vs ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", "");
      assertEquals(42, int0);
      
      String string3 = StringUtils.substring("org.apache.commons.lang3.CharSequenceUtils", 42);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.CharSequenceUtilsFailed to delete temp directory org.apache.commons.lang3.CharSequenceUtils", string4);
      
      String string5 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.CharSequenceUtils", ":.1mXy;", (-3286));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      
      String string6 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals(1, stringArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string7);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.CharSequenceUtilsFailed to delete temp directory org.apache.commons.lang3.CharSequenceUtils", (CharSequence) ":.1mXy;", 42);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.mid("org.apache.commons.lang3.CharSequenceUtils", 53, (-1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("", string8);
      
      // Undeclared exception!
      StringUtils.indexOfIgnoreCase((CharSequence) string6, (CharSequence) " vs ");
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("~>T>NJ)TA;", (String) null, 28);
      assertNotNull(string0);
      assertEquals("~>T>NJ)TA;", string0);
      
      String string1 = StringUtils.substringAfterLast(", '", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", '", "~>T>NJ)TA;");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) ", '";
      charSequenceArray0[5] = (CharSequence) ", '";
      charSequenceArray0[6] = (CharSequence) "~>T>NJ)TA;";
      charSequenceArray0[7] = (CharSequence) null;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 28;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, '|');
      assertArrayEquals(new float[] {(-1.0F), 28.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-1.0|28.0|-1.0|-1.0", string2);
      
      String string3 = StringUtils.abbreviate((String) null, (-1), 28);
      assertNull(string3);
      
      String string4 = StringUtils.truncate("The Character must not be null", 14, 16);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("must not be null", string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("-1.0|28.0|-1.0|-1.0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[7], charSequenceArray0[6], (-1454));
      assertEquals(9, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[7]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      String string0 = StringUtils.substringAfter("rkVh) E!1.hKDOT7+", "rkVh) E!1.hKDOT7+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("L1!|", 4, 'I');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L1!|", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "rkVh) E!1.hKDOT7+", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEach("L1!|", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("L1!|", string2);
      
      String string3 = StringUtils.leftPad("GPb>neeLv>", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("GPb>neeLv>", string3);
      
      String string4 = StringUtils.center("L1!|", 4325, "");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-26);
      intArray0[1] = 4325;
      intArray0[2] = (-26);
      intArray0[3] = 0;
      intArray0[0] = 0;
      String string5 = StringUtils.mid("The type must not be null", 31, 53);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "L1!|", (CharSequence) "L1!|");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) string4;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) string4, (CharSequence) "L1!|");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertEquals(2160, int2);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join((Iterator<?>) null, "offset cannot be negative");
      assertNull(string3);
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string4 = StringUtils.difference("", "9\" LD.mOV[g@I9Ic");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("9\" LD.mOV[g@I9Ic", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean5 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string5 = StringUtils.chop(" in an array of ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(" in an array of", string5);
      
      String string6 = StringUtils.removeStart((String) null, "");
      assertNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) null, 6);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      try { 
        StringUtils.getBytes("...", "+yoh`>Ew =gHi");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "XTfB}");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String string0 = "WLH':K30$4<E[&9|]";
      String string1 = StringUtils.lowerCase("HpwJf)mnlu#&");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("hpwjf)mnlu#&", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("HpwJf)mnlu#&", "hpwjf)mnlu#&");
      assertEquals(0.89, double0, 0.01);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("HpwJf)mnlu#&", "'lQb'd");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '|';
      floatArray0[1] = (float) '|';
      floatArray0[2] = (float) '|';
      floatArray0[3] = (float) '|';
      String string2 = StringUtils.join(floatArray0, '|');
      assertArrayEquals(new float[] {124.0F, 124.0F, 124.0F, 124.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("124.0|124.0|124.0|124.0", string2);
      
      int int0 = 72;
      int int1 = 6;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("HpwJf)mnlu#&", 72, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = "Failed to delete temp directory uVb/64cB{xBJJ]";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Failed to delete temp directory uVb/64cB{xBJJ]", 5066, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      String string0 = StringUtils.repeat('2', 7);
      assertNotNull(string0);
      assertEquals("2222222", string0);
      
      int int0 = 0;
      char char0 = ']';
      String string1 = StringUtils.replaceChars("C//h$YPE};Tb\"l<t0lv", '&', ']');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C//h$YPE};Tb\"l<t0lv", string1);
      
      String string2 = StringUtils.unwrap("2222222", ']');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("2222222", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("C//h$YPE};Tb\"l<t0lv");
      assertTrue(boolean0);
      
      String string3 = StringUtils.capitalize(";Y$F%-@(`zzT");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(";Y$F%-@(`zzT", string3);
      
      int int1 = 3;
      String string4 = StringUtils.abbreviateMiddle("2222222", ";Y$F%-@(`zzT", 7);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("2222222", string4);
      
      int int2 = (-873);
      String string5 = StringUtils.center("\r", (-873), "u_2G-");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = 1;
      int int4 = 3272;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) '&';
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 3;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ']', 854, 3272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      String string2 = StringUtils.leftPad("n&jr)`(7", 4100);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("Minimum abbreviation width is %d", 4100);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlpha("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string4 = StringUtils.remove("Minimum abbreviation width is %d", 'l');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Minimum abbreviation width is %d", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "\r");
      assertEquals(32, int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("Minimum abbreviation width is %d");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric(string2);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.toRootUpperCase("Locale must not be null");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("LOCALE MUST NOT BE NULL", string5);
      
      int int1 = StringUtils.countMatches((CharSequence) "\r", (CharSequence) "n&jr)`(7");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.repeat('2', (-1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean3 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) string2, 4658);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string7 = StringUtils.rightPad(" vs ", 4658, 'o');
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) " vs ", 39, 5);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'o';
      charArray0[2] = 'l';
      charArray0[3] = 'o';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'o';
      boolean boolean5 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'2', 'o', 'l', 'o', 'l', 'l', 'o'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5);
      
      String string8 = StringUtils.repeat("Minimum abbreviation width is %d", "org.junitpioneer.jupiter.TempDirectory", 29);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      String string0 = StringUtils.center("", 0, ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) '>';
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) '>';
      String string2 = StringUtils.join(floatArray0, ' ');
      assertArrayEquals(new float[] {0.0F, (-1.0F), 62.0F, 0.0F, 62.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0.0 -1.0 62.0 0.0 62.0", string2);
      
      String string3 = StringUtils.abbreviate("", 1917, 1917);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 16);
      assertEquals(0, int0);
      
      String string4 = StringUtils.trimToEmpty("HpwJf)mnlu#&");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("HpwJf)mnlu#&", string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string5 = StringUtils.defaultString("", "HpwJf)mnlu#&");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.toRootLowerCase("Minimum abbreviation width with offset is %d");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("minimum abbreviation width with offset is %d", string6);
      
      boolean boolean0 = StringUtils.isNumericSpace("minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.getDigits("HENe=T'm&|,[]l1B!");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "HENe=T'm&|,[]l1B!", (CharSequence) "\r", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale2.getCountry());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("fran\u00E7ais", string2);
      
      String string3 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("ExpectedException");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "fran\u00E7ais", 0);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.trimToEmpty("ExpectedException");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("ExpectedException", string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("|#:ks~MZ", charset0);
      assertArrayEquals(new byte[] {(byte)124, (byte)35, (byte)58, (byte)107, (byte)115, (byte)126, (byte)77, (byte)90}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[4] = null;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 677.39F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) '>';
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) '>';
      String string0 = StringUtils.join(floatArray0, 'B');
      assertArrayEquals(new float[] {677.39F, (-1.0F), 0.0F, 0.0F, (-1.0F), 62.0F, (-1.0F), 62.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(string0);
      assertEquals("677.39B-1.0B0.0B0.0B-1.0B62.0B-1.0B62.0", string0);
      
      String string1 = StringUtils.abbreviate("677.39B-1.0B0.0B0.0B-1.0B62.0B-1.0B62.0", 16, 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...0.0B-1.0B6...", string1);
      
      int int0 = (-3954);
      String string2 = "\\u";
      // Undeclared exception!
      try { 
        StringUtils.truncate(string2, 16, (-3954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = 'F';
      charArray0[4] = 'T';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'e', 'F', 'T'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("FTeFT", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean2 = locale0.hasExtensions();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.chomp("C//h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C//h", string1);
      
      String string2 = StringUtils.wrap(" ", "C//h");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("C//h C//h", string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("C//h C//h", "C//h", 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string0);
      
      String string1 = StringUtils.chop("0Cg27ODn{Hmq(F[`");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0Cg27ODn{Hmq(F[", string1);
      
      String string2 = StringUtils.replacePattern("apqUedOwaw", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", "apqUedOwaw");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("apqUedOwaw", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "apqUedOwaw", 1213);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.reverse("U\"(\"LG,FQw\"XD*[5 ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(" 5[*DX\"wQF,GL\"(\"U", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance(",h8R1RS2v8YoTW<iZ`", ",h8R1RS2v8YoTW<iZ`");
      assertEquals(1.0, double0, 0.01);
      
      String string4 = StringUtils.replaceIgnoreCase("apqUedOwaw", "c^U@Fn}-!.N1{V<zc", "c^U@Fn}-!.N1{V<zc");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("apqUedOwaw", string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " 5[*DX\"wQF,GL\"(\"U", (CharSequence) " ~");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("apqUedOwaw", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.repeat("\r\n", 2301);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "\r\n", (CharSequence) string0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = "P'F|@+O;b@k'";
      String string1 = StringUtils.center("P'F|@+O;b@k'", 891);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                       P'F|@+O;b@k'                                                                                                                                                                                                                                                                                                                                                                                                                                                        ", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("                                                                                                                                                                                                                                                                                                                                                                                                                                                       P'F|@+O;b@k'                                                                                                                                                                                                                                                                                                                                                                                                                                                        ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("P'F|@+O;b@k'");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                                                                                                                                                                                                                                                                                                                                                                       P'F|@+O;b@k'                                                                                                                                                                                                                                                                                                                                                                                                                                                        ", (CharSequence) "P'F|@+O;b@k'", 891);
      assertEquals(439, int0);
      
      boolean boolean2 = StringUtils.containsWhitespace("P'F|@+O;b@k'");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "P'F|@+O;b@k'", (CharSequence) "                                                                                                                                                                                                                                                                                                                                                                                                                                                       P'F|@+O;b@k'                                                                                                                                                                                                                                                                                                                                                                                                                                                        ");
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      String string0 = StringUtils.wrapIfMissing((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("`0md >I\" y", "Aborting to prot", true);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("Index: ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left("`0md >I\" y", 1609);
      assertNotNull(string1);
      assertEquals("`0md >I\" y", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Index: ";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean1 = StringUtils.endsWithAny("Aborting to prot", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripStart("+yoh`>Ew =gHi", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("+yoh`>Ew =gHi", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("`S\"0%R'*uuPS%bn\"p-", (String) null);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle("+yoh`>Ew =gHi0C1UHmhz]B0_NVC", "Timeout", (-2152));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("+yoh`>Ew =gHi0C1UHmhz]B0_NVC", string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, 'R');
      assertNull(string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("`S\"0%R'*uuPS%bn\"p-", string5);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'H';
      charArray0[6] = 'R';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'R', 3, 2422);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.replaceChars("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", '!', 'l');
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", string0);
      
      String string1 = StringUtils.unwrap(" vs ", '.');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("NHu ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle("NHu ", "Search and Replace array lengths don't match: ", 2506);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("NHu ", string3);
      
      boolean boolean1 = StringUtils.isBlank(" vs ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 'l';
      longArray0[2] = (long) 99;
      longArray0[3] = (long) 0;
      String string4 = StringUtils.join(longArray0, '!', 3281, 90);
      assertArrayEquals(new long[] {1L, 108L, 99L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      String string0 = StringUtils.rotate("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 382);
      assertNotNull(string0);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", "ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", 5);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", (-1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, ']', 5, (-1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "\r");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("\r", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = ']';
      charArray0[2] = 'e';
      String string0 = StringUtils.join(charArray0, '$', 256, 256);
      assertArrayEquals(new char[] {'H', ']', 'e', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.right("Array element ", (-871));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.rotate("", (-871));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "J0A+";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "J0A+";
      charSequenceArray0[3] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.containsWhitespace(charSequenceArray0[0]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.rotate("J0A+", 5102);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("A+J0", string1);
      
      String string2 = StringUtils.removePattern("\r", "J0A+");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 11;
      longArray0[1] = (long) 16;
      longArray0[2] = (long) 14;
      longArray0[3] = (long) 'm';
      longArray0[4] = (long) 0;
      String string3 = StringUtils.join(longArray0, '%');
      assertArrayEquals(new long[] {11L, 16L, 14L, 109L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("11%16%14%109%0", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "A+J0", 14);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[1] = (CharSequence) "u#&";
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(10, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[0] = '';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'', 'T', 'e', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("Te\u0000", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "u#&";
      String string1 = StringUtils.stripToEmpty("u#&");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[1], (CharSequence[]) stringArray0);
      assertEquals(10, charSequenceArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.substringBefore("u#&", "u#&");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("Ob7Nnv?Q.Wq{8.", 119);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "MnG;", (CharSequence) "", 110);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "u#&", 45);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.substring("u#&", 1123, (-1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", ':');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("", "?", " vs GPb>neeLv>");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.truncate("", (int) (short)52);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "?";
      charSequenceArray0[1] = (CharSequence) " vs GPb>neeLv>";
      String string4 = StringUtils.rotate(" vs GPb>neeLv>", (short)52);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("GPb>neeLv> vs ", string4);
      
      charSequenceArray0[2] = (CharSequence) "GPb>neeLv> vs ";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "Minim(m abbreviation width with o8fset is %d";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "org.junitpioneer.vintage.TimeoutExtension";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("?", charSequence0);
      
      String string5 = StringUtils.substringBeforeLast(" vs GPb>neeLv>", "T|3x'K$6");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(" vs GPb>neeLv>", string5);
      
      String string6 = StringUtils.removePattern("org.junitpioneer.vintage.TimeoutExtension", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string6);
      
      String string7 = StringUtils.substringBetween("The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", (String) null);
      assertNull(string7);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 605.065212;
      doubleArray0[1] = (-1282.71223664);
      doubleArray0[2] = (-1402.63401);
      doubleArray0[3] = (-227.69);
      doubleArray0[4] = 0.1;
      String string1 = StringUtils.join(doubleArray0, 'm');
      assertArrayEquals(new double[] {605.065212, (-1282.71223664), (-1402.63401), (-227.69), 0.1}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("605.065212m-1282.71223664m-1402.63401m-227.69m0.1", string1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'm', 99, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.leftPad("^q@FMnG;", (-26));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      String string3 = StringUtils.center("[[t1+uxet#Q>g#d", 100, "[[t1+uxet#Q>g#d");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g", string3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 56;
      intArray0[1] = 0;
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "^q@FMnG;";
      String string4 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("^q@FMnG;", string4);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      String string1 = StringUtils.defaultIfBlank("ntage.ExpectedExceptionExtension", "ntage.ExpectedExceptionExtension");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ntage.ExpectedExceptionExtension", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) '|';
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) '|';
      floatArray0[7] = (float) '|';
      String string2 = StringUtils.join(floatArray0, '0');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 124.0F, 0.0F, 124.0F, 124.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("0.000.000.000.00124.000.00124.00124.0", string2);
      
      String string3 = StringUtils.abbreviate("ntage.ExpectedExceptionExtension", 16, 64);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ntage.ExpectedExceptionExtension", string3);
      
      String string4 = StringUtils.truncate("F@3pt/", 8, 2264);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("ntage.ExpectedExceptionExtension", "0.000.000.000.00124.000.00124.00124.0", 2264);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.substringBeforeLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("\r");
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.trimToEmpty("");
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.rightPad((String) null, (-299), 'b');
      assertNull(string6);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string7 = StringUtils.join(objectArray0, 'W');
      assertEquals(1, objectArray0.length);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.joinWith((String) null, stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, (-299));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 's');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removeEnd("^q@FMnG;", "C//h");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("^q@FMnG;", string5);
      
      String[] stringArray1 = StringUtils.split(string2, "r*JVP]");
      assertNull(stringArray1);
      
      String string6 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 's');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("sorg.apache.commons.lang3.StringUtils", string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.removeFirst(string2, "`|II=U}nw_b.");
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) string2, (CharSequence) null, 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.chomp("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string8);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, charSequenceArray0[0], (-210));
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.truncate("\r", 0, 4);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.leftPad("\r", 1424, "0)7");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Ka", 15, "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Ka\r\r\r\r\r\r\r\r\r\r\r\r\r", string3);
      
      String string4 = StringUtils.mid("Ka", 1424, (-210));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.wrap("blank_blank_blank_2014", '^');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("^blank_blank_blank_2014^", string5);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      String string2 = StringUtils.repeat("cr", 565);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("F!}w-wO", "+yoh`>Ew =gHi0C1UHmhz]B0_NVC", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("F!}w-wO", string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "~@O@/cT}I$l}2>fLj", 0, 5);
      assertEquals(6, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("~@O@/cT}I$l}2>fLjorg.junitpioneer.vintage.TimeoutExtension~@O@/cT}I$l}2>fLj~@O@/cT}I$l}2>fLj~@O@/cT}I$l}2>fLj", string5);
      
      String string6 = StringUtils.replace("#T@7XEc|>T:\"", (String) null, "bat,+M0`:KC");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      String string0 = StringUtils.removeAll("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("izGt+1y3$@8p", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.join((float[]) null, 'I');
      assertNull(string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "izGt+1y3$@8p";
      stringArray0[3] = "ur5CuK=rbgo";
      stringArray0[4] = "";
      stringArray0[5] = "izGt+1y3$@8p";
      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("\r", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "izGt+1y3$@8p", (CharSequence) "");
      assertEquals(0, int0);
      
      String string5 = StringUtils.deleteWhitespace("CT V<122V8D Fp-e&|Minimum abbreviation width with offset is %d");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("CTV<122V8DFp-e&|Minimumabbreviationwidthwithoffsetis%d", string5);
      
      String string6 = StringUtils.abbreviateMiddle("\r", "CTV<122V8DFp-e&|Minimumabbreviationwidthwithoffsetis%d", 725);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("\r", string6);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "HpwJf)mnl");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      String string2 = StringUtils.reverseDelimited("HpwJf)mnl", '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("HpwJf)mnl", string2);
      
      String string3 = StringUtils.stripToEmpty("}DZp\"a<Y66lajGlxq+");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("}DZp\"a<Y66lajGlxq+", string3);
      
      String string4 = StringUtils.repeat("u#&", 2431);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertTrue(boolean0);
      
      String string6 = StringUtils.stripToNull("NkI-");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("NkI-", string6);
      
      String string7 = StringUtils.stripStart(" ", " ");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int[] intArray0 = StringUtils.toCodePoints("HpwJf)mnl");
      assertArrayEquals(new int[] {72, 112, 119, 74, 102, 41, 109, 110, 108}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      String string8 = StringUtils.removeFirst("W#J=0rh5|sz3aJ$q$Ee", "io6E9qA");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("W#J=0rh5|sz3aJ$q$Ee", string8);
      
      String string9 = StringUtils.join((float[]) null, '}');
      assertNull(string9);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "HpwJf)mnl", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = new String[6];
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.abbreviate("junit-pioneer", ")$V*b3.`<qpJbK", 1578);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("junit-pioneer", string2);
      
      String string3 = StringUtils.removeStart("org.apache.commons.lang3.RegExUtils", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.RegExUtils", string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = "s'/n0D,;'2*M";
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "junit-pioneer", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.leftPad("s'/n0D,;'2*M", 1122, (String) null);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfter((String) null, string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNull(string7);
      
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.stripStart("s'/n0D,;'2*M", "CT V<122V8D Fp-e&|Minimum abbreviation width with offset is %d");
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals("'/n0D,;'2*M", string9);
      
      String string10 = StringUtils.join((int[]) null, '=');
      assertNull(string10);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("'/n0D,;'2*M", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(" ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" KqV=*", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.unwrap((String) null, '-');
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      charSequenceArray0[0] = null;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (-1410.91789925217);
      doubleArray0[3] = (double) '-';
      doubleArray0[4] = (double) '-';
      String string1 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String[] stringArray0 = new String[2];
      charSequenceArray0[3] = (CharSequence) null;
      stringArray0[1] = null;
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string2);
      
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.truncate("", 14);
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(charSequence1);
      
      charSequenceArray0[5] = null;
      String string4 = StringUtils.substringBeforeLast("", "maxWith cannot be negative");
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string5 = StringUtils.removePattern("", (String) null);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[7] = (CharSequence) "";
      String string6 = StringUtils.substringBetween((String) null, "7m5R1E=g4QlW 'K*+($");
      assertNull(string6);
      
      charSequenceArray0[8] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.substringAfter("rkVh) E!1.hKDOT7+", "rkVh) E!1.hKDOT7+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "rkVh) E!1.hKDOT7+", 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring("", (-2262));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 57);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.repeat("`Pi?hZ>f", 1);
      assertNotNull(string0);
      assertEquals("`Pi?hZ>f", string0);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.substringAfter("rkVh) E!1.hKDOT7+", "rkVh) E!1.hKDOT7+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "rkVh) E!1.hKDOT7+", 4);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("rkVh) E!1.hKDOT7+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissing((String) null, "rkVh) E!1.hKDOT7+", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 843);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.replacePattern("rkVh) E!1.hKDOT7+", (String) null, "j+ 0SHsVH<UCI981");
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("rkVh) E!1.hKDOT7+", string3);
      
      String string4 = StringUtils.difference("_H}g*yV?P]z*MIo)Z", "c3y3VEV");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("c3y3VEV", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'A', 843, 1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("c3y3VEV", 'A');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.repeat("", 1);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceOnceIgnoreCase("IqpJ&", "org.apache.commons.lang3.CharUtils", "_H}g*yV?P]z*MIo)Z");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("IqpJ&", string7);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "j+ 0SHsVH<UCI981", 1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "j+ 0SHsVH<UCI981", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(16, int2);
      
      String string8 = StringUtils.defaultString("j+ 0SHsVH<UCI981");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("j+ 0SHsVH<UCI981", string8);
      
      String string9 = StringUtils.stripAccents("");
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("", string9);
      
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "blank_blank_blank_2014");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.leftPad("", (-299));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("x", 5, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("  x  ", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.mid("4eK5ZU?8$IY.", 16, (-299));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'r', 1835, (-299));
      assertEquals(8, stringArray0.length);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.stripToEmpty("Minimum abbreviation width with offset is %d");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      
      String string8 = StringUtils.rightPad("", 16, "");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("                ", string8);
      
      String string9 = StringUtils.appendIfMissing((String) null, "", stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string9);
      
      String string10 = StringUtils.stripStart("0p-1p797p0p0p0p115p0p-1", " ");
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
      assertEquals("0p-1p797p0p0p0p115p0p-1", string10);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertArrayEquals(new int[] {32}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("", "e[?HTV4Sd");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // e[?HTV4Sd
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "1v", 172);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Failed to create custom temp directory", (String) null, 28);
      assertNotNull(string0);
      assertEquals("Failed to create custom temp directory", string0);
      
      String string1 = StringUtils.defaultIfBlank((String) null, ", '");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", '", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", '", "Failed to create custom temp directory");
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ", '";
      charSequenceArray0[1] = (CharSequence) ", '";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) ", '";
      charSequenceArray0[5] = (CharSequence) ", '";
      charSequenceArray0[4] = (CharSequence) "Failed to create custom temp directory";
      charSequenceArray0[7] = (CharSequence) null;
      float[] floatArray0 = new float[21];
      floatArray0[0] = (float) 28;
      floatArray0[1] = (float) 28;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      String string2 = StringUtils.join(floatArray0, '|');
      assertEquals(21, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("28.0|28.0|1.0|1.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0", string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.repeat("Failed to create custom temp directory", 28);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore(" vs ", "<bvM&Fzw7z");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(" vs ", string4);
      
      String string5 = StringUtils.replace(", '", "Failed to create custom temp directory", "28.0|28.0|1.0|1.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0|0.0", (-919));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(", '", string5);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)50;
      String string6 = StringUtils.join(byteArray0, 'p', 110, (int) (byte)1);
      assertArrayEquals(new byte[] {(byte)33, (byte)110, (byte)78, (byte) (-13), (byte) (-25), (byte) (-52), (byte)2, (byte)1, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      String string0 = StringUtils.removeEnd("\n", "\n");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("\n", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) " 7s ", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.center("", 0, ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string2 = StringUtils.remove("", ']');
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("...", "");
      assertEquals(3, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.leftPad("!If+ZhvN$ iQzX5fqL", (-1), "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("!If+ZhvN$ iQzX5fqL", string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("!If+ZhvN$ iQzX5fqL");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.difference("@M{!#bw$[A", "s'/n0D,;'2*M");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("s'/n0D,;'2*M", string4);
      
      String string5 = StringUtils.strip("!If+ZhvN$ iQzX5fqL");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("!If+ZhvN$ iQzX5fqL", string5);
      
      int int2 = StringUtils.length("!If+ZhvN$ iQzX5fqL");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(19, int2);
      
      try { 
        StringUtils.getBytes("!If+ZhvN$ iQzX5fqL", "?1~Sp-dHA{@pwUNf6(@M{!#bw$[A");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\rMinimum abbreviation width with offset is PdHNr-~*8QB<lgO$U", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.replacePattern("", "", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "", "59<");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter(". The following paths could not be deleted (see suppressed exceptions for details): ", "NK.;EHQrY[ay");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, ')', 0, 2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(")", string4);
      
      String string5 = StringUtils.lowerCase("X,");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("x,", string5);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.overlay("H5 ?Qy&8AMiNRH5 ?Qy&8AMiNR", "org.junitpioneer.jupiter.TempDirectory", 0, 2338);
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      String string1 = StringUtils.replaceFirst("H5 ?Qy&8AMiNRH5 ?Qy&8AMiNR", "r#Eo:.r1G<fTTu8/U", "org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("H5 ?Qy&8AMiNRH5 ?Qy&8AMiNR", string1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("org.junitpioneer.jupiter.TempDirectory", "5[O", 24);
      assertEquals((-1), int0);
      
      Locale locale0 = new Locale("H5 ?Qy&8AMiNRH5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNRH5 ?Qy&8AMiNR", "5[O");
      assertEquals("5[O", locale0.getVariant());
      assertEquals("H5 ?QY&8AMINRH5 ?QY&8AMINR", locale0.getCountry());
      assertEquals("h5 ?qy&8aminrh5 ?qy&8aminr", locale0.getLanguage());
      assertEquals("h5 ?qy&8aminrh5 ?qy&8aminr_H5 ?QY&8AMINRH5 ?QY&8AMINR_5[O", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase("5[O", locale0);
      assertEquals("5[O", locale0.getVariant());
      assertEquals("H5 ?QY&8AMINRH5 ?QY&8AMINR", locale0.getCountry());
      assertEquals("h5 ?qy&8aminrh5 ?qy&8aminr", locale0.getLanguage());
      assertEquals("h5 ?qy&8aminrh5 ?qy&8aminr_H5 ?QY&8AMINRH5 ?QY&8AMINR_5[O", locale0.toString());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("5[O", string3);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 24;
      intArray0[3] = 2338;
      intArray0[4] = 24;
      intArray0[5] = (-1);
      String string4 = StringUtils.join(intArray0, '8', 24, 0);
      assertArrayEquals(new int[] {0, 0, 24, 2338, 24, (-1)}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("|7B|='/Yh^$zIW85N", 'Z');
      assertNotNull(string0);
      assertEquals("|7B|='/Yh^$zIW85N", string0);
      
      String string1 = StringUtils.toRootLowerCase("|7B|='/Yh^$zIW85N");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("|7b|='/yh^$ziw85n", string1);
      
      String string2 = StringUtils.remove("@DefaultLocale can only be used with language tag if language, country, and variant are not set", 'c');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@DefaultLoale an only be used with language tag if language, ountry, and variant are not set", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("|7B|='/Yh^$zIW85N");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("|7b|='/yh^$ziw85n", 0, 'q');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("|7b|='/yh^$ziw85n", string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Comparator should not be null.", (CharSequence) " in an array of ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|7b|='/yh^$ziw85n";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "|='");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Search and Replace array lengths don't match:", string4);
      
      String string5 = StringUtils.abbreviate("up~yR5*q;pll", "<", 321);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("up~yR5*q;pll", string5);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.right("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", 1889);
      assertNotNull(string0);
      assertEquals("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", string0);
      
      boolean boolean0 = StringUtils.isBlank("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension";
      charSequenceArray0[1] = (CharSequence) "[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", "[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", (-680));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      
      String string2 = StringUtils.removeStart("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", "[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap((String) null, '!');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "eDb]vI`Zd|.";
      stringArray0[3] = "\r";
      stringArray0[4] = "\r";
      stringArray0[5] = "\r";
      stringArray0[6] = "MnG;";
      stringArray0[7] = "";
      stringArray0[8] = "\r";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("eDb]vI`Zd|.", ':');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(":eDb]vI`Zd|.:", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '#';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "MnG;", charArray0);
      assertArrayEquals(new char[] {'#', '#'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("\n", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.substringsBetween("\r", "Z/?sc1rN`Nx<F0Il\"", "");
      assertNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\r", (CharSequence) "\r", 291);
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.substringsBetween("\r", "MYtn?%", "-");
      assertNull(stringArray2);
      
      String string3 = StringUtils.truncate("Gdd?>yf", 0, 0);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "eDb]vI`Zd|.", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'T';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charArray0);
      assertArrayEquals(new char[] {'V', 'T'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.center("MW;t8*9SZ", 0, 'I');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MW;t8*9SZ", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\r", 59);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.mid("MW;t8*9SZ", (-1), 10);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("MW;t8*9SZ", string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.TempDirectory", (CharSequence) "MW;t8*9SZ");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("~>T>NJ)TA;", (String) null, 28);
      assertNotNull(string0);
      assertEquals("~>T>NJ)TA;", string0);
      
      String string1 = StringUtils.defaultIfBlank((String) null, ", '");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", '", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", '", "~>T>NJ)TA;");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ", '";
      charSequenceArray0[1] = (CharSequence) ", '";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) ", '";
      charSequenceArray0[5] = (CharSequence) ", '";
      charSequenceArray0[6] = (CharSequence) "~>T>NJ)TA;";
      charSequenceArray0[7] = (CharSequence) null;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 28;
      floatArray0[1] = (float) 28;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, '|');
      assertArrayEquals(new float[] {28.0F, 28.0F, (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("28.0|28.0|-1.0|-1.0", string2);
      
      String string3 = StringUtils.abbreviate((String) null, (-1), 28);
      assertNull(string3);
      
      String string4 = StringUtils.truncate("The Character must not be null", 14, 16);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("must not be null", string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("28.0|28.0|-1.0|-1.0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[7], charSequenceArray0[6], (-1454));
      assertEquals(9, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents(" ~");
      assertNotNull(string0);
      assertEquals(" ~", string0);
      
      String string1 = StringUtils.chop(" ~");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.replacePattern(" ~", " ", " ");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ~", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ~", 7);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.reverse(",h8R1RS2v8YoTW<iZ`");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("`Zi<WToY8v2SR1R8h,", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("`Zi<WToY8v2SR1R8h,", "U\"(\"LG,FQw\"XD*[5 ");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.replaceIgnoreCase(",h8R1RS2v8YoTW<iZ`", "U\"(\"LG,FQw\"XD*[5 ", " vs ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(",h8R1RS2v8YoTW<iZ`", string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) ",h8R1RS2v8YoTW<iZ`", (CharSequence) " vs ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\n");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\nStrings must not be ull", "\nStrings must not be ull", "bKLWNL,LI#(Zk\"Q");
      assertNotNull(string0);
      assertEquals("bKLWNL,LI#(LLILLII(", string0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "TB%<dQ8'lT");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("@M{!#bw$[A");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Z6{<", "+O,<,qgm$4i7@qKY*@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'Q';
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'Q'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("qqqQ", string2);
      
      String string3 = StringUtils.removeFirst("U=h", "qqqQ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("U=h", string3);
      
      String string4 = StringUtils.rotate("1", 1259);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("1", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.endsWithAny("s'}mY=vX&.", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removePattern("", "Search and Replace array lengths don't match: ");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.stripStart("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "HpwJf)mnlu#&", (CharSequence) "", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "HpwJf)mnlu#&";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.leftPad("^q@FMnG;", (-26));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      String string3 = StringUtils.uncapitalize("^q@FMnG;");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("^q@FMnG;", string3);
      
      String string4 = StringUtils.center("org.junitpioneer.vintage.ExpectedExceptionExtension", (-1074), "[[t1+uxet#Q>g#d");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("", "^q@FMnG;");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.mid("PQ$<g^i0", (-1), (-9));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "^q@FMnG;", (CharSequence) "4eK5ZU?8$kIY.");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.toRootLowerCase("");
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "^q@FMnG;", (CharSequence) "", 0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.substring("ExceptionWasThrown", 1486);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "Si#[o", "Can only resolve parameter of type ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Si#[o";
      objectArray0[1] = (Object) "offset cannot be negative";
      objectArray0[2] = (Object) "ExceptionWasThrown";
      String string2 = StringUtils.join(objectArray0, '!', 643, 6);
      assertEquals(3, objectArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("Aborting to prote@M{!#bw$[A");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Aborting to prote@M{!#bw$[A", string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "offset cannot be negative", 100);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.unwrap("j#DHd''DMt", "Ptp99Q|");
      assertNotNull(string0);
      assertEquals("j#DHd''DMt", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("j#DHd''DMt");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      String[] stringArray0 = StringUtils.split("Object varargs must not be null", 'Y');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.endsWith("j#DHd''DMt", "Object varargs must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "Ptp99Q|");
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'k';
      floatArray0[2] = (float) 'k';
      String string2 = StringUtils.join(floatArray0, '?', (-1033), (-1033));
      assertArrayEquals(new float[] {107.0F, 0.0F, 107.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("", "Ptp99Q|", "Can only resolve parameter of type ");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.join(objectArray0, 'k', 6, 6);
      assertEquals(2, objectArray0.length);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.trim("offset cannot be negative");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("offset cannot be negative", string5);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "offset cannot be negative", (CharSequence) "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1736));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-489));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.leftPad("", (-299));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("C!kjQv", 5, "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("C!kjQv", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.mid("4eK5ZU?8$kIY.", 16, (-299));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string6 = StringUtils.join((Object[]) stringArray0, 'r', 1835, (-299));
      assertEquals(8, stringArray0.length);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.stripToEmpty("Minimum abbreviation width with offset is %d");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      
      String string8 = StringUtils.rightPad("", 16, "?1~Sp-dHA{@pwUNf6(@M{!#bw$[A");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("?1~Sp-dHA{@pwUNf", string8);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.substringBeforeLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("\r");
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.join(byteArray0, 'W');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.rightPad((String) null, (-299), 'b');
      assertNull(string6);
      
      String string7 = StringUtils.abbreviateMiddle("offset cannot be negative", "", 5);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("offset cannot be negative", string7);
      
      String string8 = StringUtils.substring("EML4", (-2784), (-2784));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.repeat("QQyJ!<Y2u", (String) null, 36);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      assertEquals("QQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2uQQyJ!<Y2u", string9);
      
      String string10 = StringUtils.rightPad("", (-299), 'Q');
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String string0 = StringUtils.repeat("o", (String) null, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.substring("Locae must nt be null", 2);
      assertNotNull(string0);
      assertEquals("cae must nt be null", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cae must nt be null", "cae must nt be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("cae must nt be null", "M8rqW.", "cae must nt be null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cae must nt be null", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("cae must nt be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripAccents("cae must nt be null");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("cae must nt be null", string2);
      
      String string3 = StringUtils.chop("temp.dir");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("temp.di", string3);
      
      String string4 = StringUtils.rightPad("Js@Pe=", 507, 't');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Js@Pe=ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "U\"(\"LG,FQw\"XD*[5 ", 72);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.reverse("?,?@W4`=*tWokh?\"");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("\"?hkoWt*=`4W@?,?", string5);
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
      
      double double0 = StringUtils.getJaroWinklerDistance("wQty_5l;_5ieYwc:j[m", "cae must nt be null");
      assertEquals(0.4, double0, 0.01);
      
      String string7 = StringUtils.replaceIgnoreCase((String) null, "uey9z2^wF/.j\"(", "je'>yRPBlE");
      assertNull(string7);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "temp.dir", (CharSequence) "U\"(\"LG,FQw\"XD*[5 ");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      int int0 = 16;
      String string2 = StringUtils.replaceIgnoreCase("/k2iAE~TiGdW;V>D", "@~w>Q>VUXN ", "9O#EVWlX<,-wj", 16);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("/k2iAE~TiGdW;V>D", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("@~w>Q>VUXN "));
      
      boolean boolean0 = StringUtils.isAlpha("jkt");
      assertTrue(boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("'<", "Q?1:[Z|F9O#EVWlX<,-wj", 16);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("'<", string3);
      
      int int1 = 430;
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Q?1:[Z|F9O#EVWlX<,-wj", (CharSequence) "'<", 430);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.leftPad("'<", (-1), 'O');
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("'<", string4);
      
      char char0 = 'n';
      // Undeclared exception!
      try { 
        StringUtils.truncate("9O#EVWlX<,-wj", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[3] = 99;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2506;
      String string2 = StringUtils.replaceChars("NHu ", '&', '&');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("NHu ", string2);
      
      String string3 = StringUtils.unwrap("u_2G-", '&');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("u_2G-", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      int int0 = StringUtils.length("NHu ");
      assertEquals(4, int0);
      
      String string5 = StringUtils.substringBetween("}9u7Zv{L:%:gJ+\"cmn-", "");
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "+pV@R";
      charSequenceArray0[1] = (CharSequence) "NHu ";
      charSequenceArray0[2] = (CharSequence) "+pV@R";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[3] = 99;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2506;
      String string2 = StringUtils.replaceChars("NHu ", '&', '&');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NHu ", string2);
      
      String string3 = StringUtils.unwrap("u_2G-", '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("u_2G-", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("u#&");
      assertFalse(boolean0);
      
      String string4 = StringUtils.difference("u#&", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      String string5 = StringUtils.defaultIfEmpty("", "u_2G-");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("u_2G-", string5);
      
      String string6 = StringUtils.capitalize(";Y$F%-@(`zzT");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(";Y$F%-@(`zzT", string6);
      
      String string7 = StringUtils.abbreviateMiddle("NHu ", "p{InCombiningDiacriticalMarks}+", 3);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("NHu ", string7);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "NHu ", (CharSequence) "u#&", (-1));
      assertEquals((-1), int0);
      
      String string8 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", (-1), '&');
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("p{InCombiningDiacriticalMarks}+", string8);
      
      boolean boolean1 = StringUtils.isBlank(";Y$F%-@(`zzT");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2506;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 2506;
      longArray0[3] = (long) 99;
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) '&';
      longArray0[6] = (long) (-1);
      longArray0[7] = (-2964L);
      longArray0[8] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '&', 1, 3272);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.getDigits("s'}mY=vX&.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("s'}mY=vX&.");
      assertArrayEquals(new int[] {115, 39, 125, 109, 89, 61, 118, 88, 38, 46}, intArray0);
      assertEquals(10, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", "B>H-W", 65);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width witB>H-Wiation width with offset is %d", string1);
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.center("", 0, ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("?1~Sp-dHA{", "", (-302));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("@pwUNf6(@M{!#bw$[A", "?1~Sp-dHA{");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("?1~Sp-dHA{@pwUNf6(@M{!#bw$[A?1~Sp-dHA{", string2);
      
      String string3 = StringUtils.join(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("?1~Sp-dHA{", string3);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.join((byte[]) null, '9');
      assertNull(string4);
      
      String string5 = StringUtils.left("?1~Sp-dHA{", (byte)126);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("?1~Sp-dHA{", string5);
      
      boolean boolean1 = StringUtils.endsWithAny("7g~b3`-(a0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.stripStart("<g^", "%");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("<g^", string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "NHu ");
      assertNull(stringArray1);
      
      String string7 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "fP!lZ]W7/0I", (byte)30);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("org.apachefP!lZ]W7/0IringUtils", string7);
      
      String string8 = StringUtils.mid((String) null, (-302), 12);
      assertNull(string8);
      
      String string9 = StringUtils.toRootUpperCase(" ");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      assertEquals(" ", string9);
      
      int int0 = StringUtils.compare("&1epo~>ENQ]wH{al", "&1epo~>ENQ]wH{al", false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.substring("Locae must nt be null", 2);
      assertNotNull(string0);
      assertEquals("cae must nt be null", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cae must nt be null", "cae must nt be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("cae must nt be null", "M8rqW.", "cae must nt be null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cae must nt be null", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("cae must nt be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripAccents("cae must nt be null");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("cae must nt be null", string2);
      
      String string3 = StringUtils.chop("temp.dir");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("temp.di", string3);
      
      String string4 = StringUtils.rightPad("Js@Pe=", 507, 't');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Js@Pe=ttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "U\"(\"LG,FQw\"XD*[5 ", 72);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.reverse("?,?@W4`=*tWokh?\"");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\"?hkoWt*=`4W@?,?", string5);
      
      String string6 = StringUtils.replaceIgnoreCase("\"?hkoWt*=`4W@?,?", "cae must nt be null", "wQty_5l;_5ieYwc:j[m");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("\"?hkoWt*=`4W@?,?", string6);
      
      double double0 = StringUtils.getJaroWinklerDistance(",h8R1RS2v8YoTW<iZ`", "\"?hkoWt*=`4W@?,?");
      assertEquals(0.49, double0, 0.01);
      
      String string7 = StringUtils.replacePattern("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "C<8z", "...");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string7);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "cae must nt be null", charArray0);
      assertArrayEquals(new char[] {'t', 't', 't'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = StringUtils.truncate("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 2, 348);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("g.junitpioneer.jupiter.DefaultTimeZoneExtension", string8);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "cae must nt be null", (CharSequence) "temp.dir");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "J[(", (CharSequence) "y'Ru`U=h", 1027);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("<rG|t-\")+l", "", "J[(", (-45));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("<rG|t-\")+l", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("y'Ru`U=h");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      
      String string3 = StringUtils.join((List<?>) arrayList0, ';', 110, 7);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(arrayList0.contains(""));
      
      String string4 = StringUtils.removeIgnoreCase("AiNQfmjJ%Zu8", "]p3iK1P8}]Z");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("AiNQfmjJ%Zu8", string4);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("Locale must not be null");
      assertEquals(23, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("Locale must not be null");
      assertNotSame(intArray1, intArray0);
      assertEquals(23, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      String string0 = StringUtils.rightPad("", 98, "IC^/!`F");
      assertNotNull(string0);
      assertEquals("IC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`F", string0);
      
      boolean boolean0 = StringUtils.isNumeric("IC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`F");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "IC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`F", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("IC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`F");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Locale must not be null"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("Locale must not be null"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains("Locale must not be null"));
      
      String string1 = StringUtils.join(iterator0, 'Y');
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList1.contains("Locale must not be null"));
      
      String string2 = StringUtils.center("FPlZ!+&lz,j_", 0, "IC^/!`F");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("FPlZ!+&lz,j_", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("FPlZ!+&lz,j_", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("FPlZ!+&lz,j_", string3);
      
      String string4 = StringUtils.mid(" ", 0, (-3383));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "IC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`FIC^/!`F", (CharSequence) "Locale must not be null");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[4] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.leftPad("", (-299));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize("");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      
      Spliterator<Object> spliterator0 = priorityQueue0.spliterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(spliterator0);
      assertFalse(priorityQueue0.contains(""));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertEquals(0, priorityQueue0.size());
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(priorityQueue0.contains(""));
      
      String string4 = StringUtils.replaceIgnoreCase("BPEZ[^a{", "", " ", 21);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("BPEZ[^a{", string4);
      
      String string5 = StringUtils.substring("", (-299));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "BPEZ[^a{", 21);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      boolean boolean0 = StringUtils.isAlpha("^q@FMnG;");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((float[]) null, '=');
      assertNull(string3);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = "^q@FMnG;";
      stringArray1[2] = "^q@FMnG;";
      String string4 = StringUtils.replaceEach("jkt", stringArray0, (String[]) null);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("jkt", string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "jkt", (CharSequence) string3);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.deleteWhitespace("jkt");
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("jkt", string5);
      
      String string6 = StringUtils.abbreviateMiddle("Cz |mG1Y_yeOccawK=!", "Object varargs must not be null", (-576));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("Cz |mG1Y_yeOccawK=!", string6);
      
      String string7 = StringUtils.normalizeSpace("^q@FMnG;");
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("^q@FMnG;", string7);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("jkt"));
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(set0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(set0.contains("jkt"));
      assertFalse(linkedHashSet0.contains("jkt"));
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertNotNull(iterator0);
      assertFalse(set0.contains("jkt"));
      assertFalse(linkedHashSet0.contains("jkt"));
      
      String string8 = StringUtils.join(iterator0, "Q?1:[Z|F9O#EVWlX<,-wj");
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("unicode-1-1-utf-8Q?1:[Z|F9O#EVWlX<,-wjUTF8", string8);
      assertFalse(set0.contains("jkt"));
      assertFalse(linkedHashSet0.contains("jkt"));
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "J[(", (CharSequence) "y'Ru`U=h", 1027);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "&38&5&127";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "y'Ru`U=h";
      String string1 = StringUtils.join(objectArray0, '4', 395, 16);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.center((String) null, 16, 'o');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) '4';
      floatArray0[3] = (float) 395;
      floatArray0[4] = (float) 395;
      floatArray0[5] = (float) 395;
      String string3 = StringUtils.join(floatArray0, '5');
      assertArrayEquals(new float[] {52.0F, 16.0F, 52.0F, 395.0F, 395.0F, 395.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("52.0516.0552.05395.05395.05395.0", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "y'Ru`U=h");
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      String string4 = StringUtils.toRootLowerCase("");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "52.0516.0552.05395.05395.05395.0";
      boolean boolean1 = StringUtils.equalsAny("\r", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.leftPad("^7{", 1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^7{", string1);
      
      String string2 = StringUtils.center("^7{", 16, "Object varargs must not be null");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Object^7{Object ", string2);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 997;
      intArray0[1] = (int) 'n';
      intArray0[2] = 3;
      intArray0[3] = 16;
      intArray0[4] = 1043;
      intArray0[5] = 16;
      intArray0[6] = 4100;
      String string3 = StringUtils.join(intArray0, 'n', 4100, 51);
      assertArrayEquals(new int[] {997, 110, 3, 16, 1043, 16, 4100}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.rightPad("\n", 14, "$IU5(Wi,_YQHu^{W~Oy");
      assertNotNull(string0);
      assertEquals("\n$IU5(Wi,_YQHu", string0);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 2444);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "8kucA0GWHRn`9K");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      int int0 = (-2739);
      boolean boolean0 = StringUtils.contains((CharSequence) null, 2176);
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid((String) null, (-3235), (-2739));
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("D7i^K3 AIE%ZAZK`", ')');
      assertNotNull(string2);
      assertEquals("D7i^K3 AIE%ZAZK`", string2);
      
      String string3 = StringUtils.substring((String) null, (-3235));
      assertNull(string3);
      
      String string4 = StringUtils.repeat((String) null, 74);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replace("m=60c/PdB:", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-4292));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("m=60c/PdB:", string5);
      
      String string6 = StringUtils.stripToNull((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase("iQI;oO;{f", (String) null, "; GH^s$FPFOJD;:");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("iQI;oO;{f", string7);
      
      String string8 = StringUtils.deleteWhitespace("m=60c/PdB:");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("m=60c/PdB:", string8);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) "m=60c/PdB:");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("m=60c/PdB:", "iQI;oO;{f", "Locale must not be null");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // iQI;oO;{f
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      short[] shortArray0 = new short[0];
      String string1 = StringUtils.join(shortArray0, 'J');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "9O#EVWlX<,-wj");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("WFzD`/| E", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("gc|y$H", (CharSequence) null, (CharSequence[]) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("gc|y$H", string2);
      
      String string3 = StringUtils.defaultIfBlank("Locale must not be null", ".zYdsO+%yl_C`=./");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      String string4 = StringUtils.reverse("ehOi5K)1&Ha_imZ^");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("^Zmi_aH&1)K5iOhe", string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("gc|y$H", "org.junitpio", "WFzD`/| E");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "Minimum abbreviation width with offset is %d", 'f');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Locale must not be null";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2980;
      shortArray0[1] = (short)4;
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string0));
      
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains(string0));
      assertFalse(priorityQueue1.contains(string0));
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue1, "Locale must not be null");
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(priorityQueue0.contains("Locale must not be null"));
      assertFalse(priorityQueue1.contains("Locale must not be null"));
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-48));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'I';
      charArray0[2] = '{';
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'^', 'I', '{'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("^I{", string3);
      
      String string4 = StringUtils.join(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Locale must not be null", string4);
      
      String string5 = StringUtils.join(charArray0, 'J');
      assertArrayEquals(new char[] {'^', 'I', '{'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("^JIJ{", string5);
      
      String[] stringArray1 = StringUtils.split("org.junitpio", 'J');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.countMatches((CharSequence) "p{InCombiningDiacriticalMarks}+", 'I');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      char[] charArray0 = new char[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.wrapIfMissing("H5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNR");
      assertNotNull(string0);
      assertEquals("H5 ?Qy&8AMiNR", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "H5 ?Qy&8AMiNR", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("H5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNR");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.replace("org.junitpioneer.jupiter.DefaultLocaleExtension", " in an array of ", "H5 ?Qy&8AMiNR");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      
      String string2 = StringUtils.substring("org.junitpioneer.jupiter.DefaultLocaleExtension", 0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "y_,?G", " in an array of ");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte)98;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'W', (-8), (int) (byte) (-6));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[1] = "";
      String string0 = StringUtils.center("C!kjQv", 5, stringArray0[0]);
      assertEquals(12, stringArray0.length);
      assertNotNull(string0);
      assertEquals("C!kjQv", string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("\nC=~-", "", "Timeout");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\nC=~-", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = '6';
      charArray0[2] = '_';
      charArray0[3] = 'Y';
      charArray0[4] = 'U';
      charArray0[5] = 'B';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'O', '6', '_', 'Y', 'U', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "...");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string3 = StringUtils.substringBeforeLast("...", "org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("...", string3);
      
      String string4 = StringUtils.wrapIfMissing("\nC=~-", 'V');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("V\nC=~-V", string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "V\nC=~-V", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "...", charArray0);
      assertArrayEquals(new char[] {'O', '6', '_', 'Y', 'U', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("\nC=~-", "U3*ZHNZMC=|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", charArray0);
      assertArrayEquals(new char[] {'O', '6', '_', 'Y', 'U', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      char[] charArray0 = new char[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.wrapIfMissing("H5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNR");
      assertNotNull(string0);
      assertEquals("H5 ?Qy&8AMiNR", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "H5 ?Qy&8AMiNR", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("H5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNR");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = linkedList0.add((Object) " vs ");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(" vs "));
      assertFalse(linkedList0.contains("H5 ?Qy&8AMiNR"));
      
      String string1 = StringUtils.replace("org.junitpioneer.jupiter.DefaultLocaleExtension", " in an array of ", "H5 ?Qy&8AMiNR");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      
      String string2 = StringUtils.uncapitalize("H5 ?Qy&8AMiNR");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("h5 ?Qy&8AMiNR", string2);
      
      boolean boolean1 = StringUtils.isWhitespace("H5 ?Qy&8AMiNR");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[1] = (CharSequence) " in an array of ";
      charSequenceArray0[2] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[3] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      String string3 = StringUtils.prependIfMissingIgnoreCase("H5 ?Qy&8AMiNR", "org.junitpioneer.jupiter.DefaultLocaleExtension", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("H5 ?Qy&8AMiNR", string3);
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, 'b');
      assertEquals(1, linkedList0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(" vs ", string4);
      assertTrue(linkedList0.contains(" vs "));
      assertFalse(linkedList0.contains("H5 ?Qy&8AMiNR"));
      
      int int2 = StringUtils.length(" vs ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4, int2);
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "HpwJf)mnl");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      String string2 = StringUtils.reverseDelimited("HpwJf)mnl", '}');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("HpwJf)mnl", string2);
      
      String string3 = StringUtils.stripToEmpty("}DZp\"a<Y66lajGlxq+");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("}DZp\"a<Y66lajGlxq+", string3);
      
      String string4 = StringUtils.repeat("u#&", 2431);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertTrue(boolean0);
      
      String string6 = StringUtils.replaceChars("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 'Z', '}');
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string6);
      
      String string7 = StringUtils.unwrap("C//h", '}');
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("C//h", string7);
      
      boolean boolean1 = StringUtils.isMixedCase("C//h");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.difference("y/", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string8);
      
      int int0 = StringUtils.length(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertEquals(7293, int0);
      
      String string9 = StringUtils.defaultIfEmpty("}DZp\"a<Y66lajGlxq+", "gH2K(p8S[,,``*{8t");
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      assertEquals("}DZp\"a<Y66lajGlxq+", string9);
      
      String string10 = StringUtils.capitalize(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string8));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string9));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("bX");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&0sOSg{'Xf>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left(" vs ", (-3286));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("C=~-!Si>16C|$TU>", "&0sOSg{'Xf>AyRl");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("C=~-!Si>16C|$TU>", string1);
      
      boolean boolean0 = StringUtils.equalsAny("C=~-!Si>16C|$TU>", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("@DEFAULTLOC");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) " vs ";
      charSequenceArray0[1] = (CharSequence) "C=~-!Si>16C|$TU>";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "&0sOSg{'Xf>AyRl";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(" vs "));
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'z', 2459, 2459);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(arrayList0.contains(2459));
      
      String string3 = StringUtils.removeIgnoreCase("sgKE\u0005FQrv3.", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("sgKE\u0005FQrv3.", string3);
      
      String string4 = StringUtils.join((List<?>) arrayList0, "C=~-!Si>16C|$TU>", 2503, 32);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(arrayList0.contains("sgKE\u0005FQrv3."));
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("5$MgM^{;9203b{*\n", (String) null);
      assertNotNull(string0);
      assertEquals("5$MgM^{;9203b{*\n", string0);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[3] = 99;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2506;
      String string2 = StringUtils.replaceChars("NHu ", '&', '&');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("NHu ", string2);
      
      String string3 = StringUtils.unwrap("u_2G-", '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("u_2G-", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("u#&");
      assertFalse(boolean0);
      
      String string4 = StringUtils.difference("u#&", "p{InCombiningDiacriticalMarks}+");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      int int0 = StringUtils.length("NHu ");
      assertEquals(4, int0);
      
      String string5 = StringUtils.substringBetween("}9u7Zv{L:%:gJ+\"cmn-", "u#&");
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "+pV@R";
      charSequenceArray0[1] = (CharSequence) "NHu ";
      charSequenceArray0[2] = (CharSequence) "+pV@R";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.right(stringArray0[0], (-1));
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.toRootLowerCase("");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[0] = 0.0F;
      floatArray0[2] = 0.0F;
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.right((String) null, 1849);
      assertNull(string0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 75;
      intArray0[1] = 1849;
      intArray0[2] = 75;
      intArray0[3] = 0;
      intArray0[4] = (-20);
      intArray0[5] = (-104);
      intArray0[6] = 1849;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '*', (-1), 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "dlyMoRMLi&m";
      String string0 = StringUtils.replaceChars((String) null, 'E', 'E');
      assertNull(string0);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissing("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", "k}UnskN<Hp$4");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "k}UnskN<Hp$4", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("k}UnskN<Hp$4", "The type must not be null", "Jy");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("k}UnskN<Hp$4", string4);
      
      String string5 = StringUtils.center("maxWith cannot be negative", 0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("maxWith cannot be negative", string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Jy", charArray0);
      assertArrayEquals(new char[] {',', ',', ',', ',', ',', ',', ',', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", (CharSequence) "maxWith cannot be negative", 160);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.mid("27DdA1d", (-1), 0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      HashSet<Object> hashSet0 = new LinkedHashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string0 = StringUtils.join((Iterable<?>) null, '/');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'Z');
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 52, "k-o~\"");
      assertNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k-o~\"";
      stringArray0[1] = "k-o~\"";
      stringArray0[2] = "k-o~\"";
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string2);
      assertEquals("k-o~\"", string2);
      
      String string3 = StringUtils.removeFirst("9A3(", string0);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("9A3(", string3);
      
      String string4 = StringUtils.deleteWhitespace("k-o~\"");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("k-o~\"", string4);
      
      String string5 = StringUtils.removeIgnoreCase("9A3(", "k-o~\"");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("9A3(", string5);
      
      String string6 = StringUtils.replaceChars((String) null, "k-o~\"", (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("k-o~\"", (CharSequence) null, stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("k-o~\"", string7);
      
      String string8 = StringUtils.removeEnd("Q?1:[Z|F", "9O#EVWlX<,-wj");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("Q?1:[Z|F", string8);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("k-o~\"");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'Z', (-1), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.stripStart(" but was: ", " but was: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("search and replace array lengths don't match: ", string1);
      
      String string2 = StringUtils.toRootUpperCase("O+BMvLQW");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("O+BMVLQW", string2);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2687.19);
      doubleArray0[1] = 913.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 606.9;
      doubleArray0[5] = (-3024.0);
      doubleArray0[6] = 2.0;
      doubleArray0[7] = 627.9867449697444;
      doubleArray0[8] = 30.0;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '[', (-1877), 83);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1877
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("\r");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, "*;wA`s7.t?zKpy^");
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains("\r"));
      
      String string2 = StringUtils.replaceIgnoreCase("", "a4|Alw{c[HNF", "uhiWLe]", (-1));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'z';
      charArray0[2] = '[';
      charArray0[3] = ']';
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'W', 'z', '[', ']'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Wz[]", string3);
      
      String string4 = StringUtils.join((String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.join(charArray0, '_');
      assertArrayEquals(new char[] {'W', 'z', '[', ']'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("W_z_[_]", string5);
      
      String[] stringArray0 = StringUtils.split("P", 'R');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      String string6 = StringUtils.substring("p{InCombiningDiacriticalMarks}+", (-1), (-1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '\\');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("P'F|@+O;b@k'");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("P'F|@+O;b@k'", "+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='");
      assertEquals(0.24, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("p{InCombiningDiacriticalMarks}+", "4'kj_}8F'%*)\"Zu]R/m");
      assertEquals(0.36, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'T';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charArray0);
      assertArrayEquals(new char[] {'V', 'T'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.removeStart("Can only resolve parameter of type ", "org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Can only resolve parameter of type ", string1);
      
      String string2 = StringUtils.abbreviate("Can only resolve parameter of type ", "7`#X`On<KC5|", 1191);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Can only resolve parameter of type ", string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Can only resolve parameter of type ", (CharSequence) "7`#X`On<KC5|", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.mid("Can only resolve parameter of type ", 13, 5);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("lve p", string3);
      
      int int3 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("#O'", "The type must not be null", "Jy");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("#O'", string4);
      
      String string5 = StringUtils.center("maxWith cannot be negative", 0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("maxWith cannot be negative", string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Jy", charArray0);
      assertArrayEquals(new char[] {'8', '8', '8', '8', '8', '8', '8', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 46, '9');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string1);
      
      String string2 = StringUtils.replace(";r(jl-p.{['Y|A7:", (String) null, "Locale must not be null", 55);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(";r(jl-p.{['Y|A7:", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "Locale must not be null";
      stringArray0[2] = "Locale must not be null";
      stringArray0[4] = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "C!kjQv");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((Object[]) null, '9', (-67), (-67));
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Locale must not be null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Locale must not be null", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, string3, 97, 1431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", '\"');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TgyB%<dQZ8'lT";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      String string2 = StringUtils.repeat("", 565);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", "C!kjQvNHu ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.toRootLowerCase("uBgL4(mfxZ`");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("ubgl4(mfxz`", string5);
      
      String string6 = StringUtils.mid("", (-2440), 108);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.wrapIfMissing("", 'q');
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("!4`[");
      assertNotNull(string0);
      assertEquals("!4`[", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!4`[", (-2707));
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("Arguments cannot both be null", (-2707), (-1089));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited("!4`[", 'V');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("!4`[", string2);
      
      String string3 = StringUtils.leftPad((String) null, (-26));
      assertNull(string3);
      
      String string4 = StringUtils.center((String) null, 34, (String) null);
      assertNull(string4);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 34;
      intArray0[1] = 2569;
      intArray0[2] = (-1089);
      intArray0[3] = 114;
      intArray0[4] = 94;
      intArray0[5] = (int) 'V';
      intArray0[6] = (-2707);
      intArray0[7] = (-26);
      String string5 = StringUtils.join(intArray0, 'V', 4375, (-2707));
      assertArrayEquals(new int[] {34, 2569, (-1089), 114, 94, 86, (-2707), (-26)}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.strip("86YpFTg>''p,");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("86YpFTg>''p,", string6);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[4], (CharSequence) "");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[1], charSequenceArray0[3]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'B');
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB", string1);
      
      String string2 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB", 0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replacePattern("", "org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB", "org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceOnce("", " ", "");
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removeEndIgnoreCase("", "");
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.capitalize("");
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean3 = StringUtils.startsWith((CharSequence) null, charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string7 = StringUtils.chomp("");
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWith("\r", "\r");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(" vs ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.stripToNull("DefaultLocale");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("DefaultLocale", string1);
      
      String string2 = StringUtils.replacePattern((String) null, "gG.", " vs ");
      assertNull(string2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "DefaultLocale", "DefaultLocale");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.chomp("\r");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" but was: ...", " but was: ...", " but was: ...");
      assertNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Threshold must not be negative";
      stringArray0[1] = null;
      stringArray0[2] = " but was: ...";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = " but was: ...";
      String string1 = StringUtils.replaceEach("Threshold must not be negative", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertEquals("Threshold must not be negative", string1);
      
      String string2 = StringUtils.wrap("\n", '#');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("#\n#", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '#';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      boolean boolean0 = StringUtils.containsAny((CharSequence) " but was: ...", charArray0);
      assertArrayEquals(new char[] {'#', '#', '#', '#', '#', '#'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny(" but was: ...", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.substringsBetween(" but was: ...", "!Si>16C|$TU>", "Object varargs must not be null");
      assertNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "!Si>16C|$TU>", (CharSequence) "Threshold must not be negative", 291);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.substringsBetween(" but was: ...", "s`qoh", "!k,qd7");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.substring("Locae must nt be null", 2);
      assertNotNull(string0);
      assertEquals("cae must nt be null", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cae must nt be null", "cae must nt be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("cae must nt be null", "M8rqW.", "cae must nt be null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cae must nt be null", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("cae must nt be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "cae must nt be null";
      objectArray0[1] = (Object) "Locae must nt be null";
      objectArray0[2] = (Object) "cae must nt be null";
      objectArray0[3] = (Object) "cae must nt be null";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = object0;
      String string2 = StringUtils.join(objectArray0, 'W');
      assertEquals(5, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("cae must nt be null");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("cae must nt be null", string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("3r[", "cae must nt be null", (String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      String string4 = StringUtils.join(byteArray0, 'M');
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("-96", string4);
      
      String string5 = StringUtils.left("-96", (-1467));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.endsWithAny("Locae must nt be null", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.stripStart("0pD^", "@DEFAULTLOC");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("0pD^", string6);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween("", " ", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.center("", 0, ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEach("]NG!s4g-2RR0\"", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("]NG!s4g-2RR0\"", string2);
      
      String string3 = StringUtils.leftPad("", (-26));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.center("", (-1), "9");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ']', 100, 2569);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(charBuffer0.isDirect());
      assertEquals(51, charBuffer0.limit());
      assertEquals(51, charBuffer0.capacity());
      assertEquals(51, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", charBuffer0.toString());
      assertEquals(51, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(51, charBuffer0.limit());
      assertEquals(51, charBuffer0.capacity());
      assertEquals(51, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", charBuffer0.toString());
      assertEquals(51, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "HpwJf)mnl");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      String string2 = StringUtils.reverseDelimited("HpwJf)mnl", '}');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("HpwJf)mnl", string2);
      
      String string3 = StringUtils.stripToEmpty("}DZp\"a<Y66lajGlxq+");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("}DZp\"a<Y66lajGlxq+", string3);
      
      String string4 = StringUtils.repeat("u#&", 2431);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("}DZp\"a<Y66lajGlxq+"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.add(object0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("}DZp\"a<Y66lajGlxq+"));
      assertTrue(priorityQueue0.contains(object0));
      
      String string5 = StringUtils.left("}DZp\"a<Y66lajGlxq+", 2459);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("}DZp\"a<Y66lajGlxq+", string5);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "C//h";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "HpwJf)mnl";
      String string6 = StringUtils.join(objectArray0, "HpwJf)mnl", (-305), (-305));
      assertEquals(3, objectArray0.length);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "}DZp\"a<Y66lajGlxq+";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(object1));
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(object1));
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string7 = StringUtils.join((List<?>) linkedList0, '}', 2459, 2459);
      assertEquals(0, linkedList0.size());
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.removeIgnoreCase("u#&", "}DZp\"a<Y66lajGlxq+");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("u#&", string8);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<String> stack1 = new Stack<String>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      String string0 = Locale.lookupTag(stack0, stack1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayScript((Locale) null);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, "!Si>16C|$TU>", (-2016), 54);
      assertNull(string3);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string4 = StringUtils.join(objectArray0, 'b', 2303, 54);
      assertEquals(3, objectArray0.length);
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&0sOSg{'Xf>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&0sOSg{'Xf>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("-0kA*\"Nb{");
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat("org.junitpioneer.vintage.TimeoutExtension", 322);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string0, "-0kA*\"Nb{");
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Cv3";
      stringArray0[2] = "Cv3";
      String string1 = StringUtils.capitalize("x_n21H|NC3g9\t{okiL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("X_n21H|NC3g9\t{okiL", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("x_n21H|NC3g9\t{okiL");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBeforeLast("Cv3", "Cv3");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = "WD-QF!(";
      int int0 = 51;
      String string4 = StringUtils.rightPad("WD-QF!(", 51, "kz;G.Z+Hn4s6uxf");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("WD-QF!(kz;G.Z+Hn4s6uxfkz;G.Z+Hn4s6uxfkz;G.Z+Hn4s6ux", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("Cv3", "WD-QF!(", "Cv3");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 7
         // WD-QF!(
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" vs "));
      
      char[] charArray0 = new char[13];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\u0000', 1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.CharSequenceUtils", 591);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", "");
      assertEquals(42, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited("org.apache.commons.lang3.CharSequenceUtils", '4');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      
      String string6 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.CharSequenceUtils", ":.1mXy;", 591);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string6);
      
      String string7 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals(2, stringArray0.length);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals(" v ", string8);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string9 = StringUtils.substring(":.1mXy;", 591);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("", string9);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string3));
      
      Locale locale1 = new Locale(":.1mXy;", "", "b9/IBwQ=7FA?ARZS t");
      assertEquals("b9/IBwQ=7FA?ARZS t", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals(":.1mxy;__b9/IBwQ=7FA?ARZS t", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals(":.1mxy;", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Set<Character> set1 = locale1.getExtensionKeys();
      assertEquals("b9/IBwQ=7FA?ARZS t", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals(":.1mxy;__b9/IBwQ=7FA?ARZS t", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals(":.1mxy;", locale1.getLanguage());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set1);
      assertFalse(set1.contains('4'));
      
      int int1 = StringUtils.getFuzzyDistance(" vs ", "org.apache.commons.lang3.CharSequenceUtils", locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertFalse(int1 == int0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("fkn>{F]N%J>.PvJ3VE", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '4', (-942), 336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -942
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.replacePattern("", "", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "", "59<");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.capitalize("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter(". The following paths could not be deleted (see suppressed exceptions for details): ", "NK.;EHQrY[ay");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeFirst("zmAjdYJID[x", " but was: ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("zmAjdYJID[x", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, ')', 0, 2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(")", string5);
      
      String string6 = StringUtils.lowerCase("X,");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("x,", string6);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      
      String string2 = StringUtils.substringAfterLast("", "JPPo%MJt0MV,y");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(""));
      
      String string3 = StringUtils.replaceIgnoreCase("V@-]nM<p[48+\"M`V&d>", "", "ZGK6;KkU4d$SInpZ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("V@-]nM<p[48+\"M`V&d>", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("org.junitpioneer.jupiter.TempDirectory");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.capitalize("");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.center("qNJ", 3, "a&");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("qNJ", string5);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("\r", "qNJ", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("qNJ\r", string6);
      
      String string7 = StringUtils.appendIfMissing("/Uj))YE5x$V", "", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("/Uj))YE5x$V", string7);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'b');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      String string0 = "^q@FMnG;";
      String string1 = StringUtils.center("^q@FMnG;", 0, '=');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("^q@FMnG;", "^q@FMnG;", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.join((float[]) null, '=');
      assertNull(string2);
      
      int int2 = 1624;
      String string3 = "?8l";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("?8l", 17, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Cv3";
      stringArray0[2] = "Cv3";
      String string1 = StringUtils.capitalize("x_n21H|NC3g9\t{okiL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("X_n21H|NC3g9\t{okiL", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("x_n21H|NC3g9\t{okiL");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBeforeLast("Cv3", "Cv3");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string3 = locale0.getDisplayName();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Chinese (Taiwan)", string3);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      int int0 = StringUtils.getFuzzyDistance("Cv3", "Cv3", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(7, int0);
      
      String string4 = StringUtils.repeat('L', 7);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("LLLLLLL", string4);
      
      String string5 = StringUtils.leftPad("\":", 736, "#/66i7$1jB'Odsd@GJ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Odsd@GJ#/66i7$1jB'Ods\":", string5);
      
      String string6 = StringUtils.trimToNull("@DEFAULTLOC");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("@DEFAULTLOC", string6);
      
      boolean boolean1 = StringUtils.startsWithAny("@DEFAULTLOC", stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.toRootLowerCase((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      String string0 = StringUtils.rightPad("Ie!j='?To", 18, 'w');
      assertNotNull(string0);
      assertEquals("Ie!j='?Towwwwwwww", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ie!j='?To", (CharSequence) "Ie!j='?Towwwwwwww");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("s'}mY=vX&.");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("s'}mY=vX&.", "Ie!j='?Towwwwwwww");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("w", string2);
      
      String string3 = StringUtils.removeFirst("1", "1");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.rotate("", 18);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "s'}mY=vX&.";
      charSequenceArray0[1] = (CharSequence) "Ie!j='?Towwwwwwww";
      boolean boolean1 = StringUtils.endsWithAny("w", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Qb`i3r?FG333";
      stringArray0[1] = "Qb`i3r?FG333";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Qb`i3r?FG333", string0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'ru`u=h", string1);
      
      String string2 = StringUtils.remove("y'Ru`U=h", 'Z');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Comparator should not be null.", string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray0[1] = "Comparator should not be null.";
      stringArray0[2] = "Comparator should not be null.";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "y'Ru`U=h";
      charSequenceArray0[1] = (CharSequence) "y'Ru`U=h";
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.compareIgnoreCase("y'Ru`U=h", "u#&");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "y'Ru`U=h");
      assertEquals(3, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensiony'Ru`U=hComparator should not be null.y'Ru`U=hComparator should not be null.", string5);
      
      String string6 = StringUtils.unwrap("org.junitpioneer.vintage.ExpectedExceptionExtension", "s'/n0D,;'2*M");
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string6);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtensiony'Ru`U=hComparator should not be null.y'Ru`U=hComparator should not be null.", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(51, int2);
      
      String string7 = StringUtils.leftPad("Comparator should not be null.", 4, "Comparator should not be null.");
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("Comparator should not be null.", string7);
      
      String string8 = StringUtils.replace("DefaultLocale", (String) null, "io6E9qA", 4);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("DefaultLocale", string8);
      
      boolean boolean2 = StringUtils.isNumericSpace("org.junitpioneer.vintage.ExpectedExceptionExtensiony'Ru`U=hComparator should not be null.y'Ru`U=hComparator should not be null.");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string9 = StringUtils.strip("#!QkFfyG+RhaeQM4b", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("#!QkFfyG+RhaeQM4b", string9);
      
      String string10 = StringUtils.repeat('n', 0);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      assertEquals("", string10);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      String string11 = StringUtils.unwrap("org.junitpioneer.vintage.ExpectedExceptionExtensiony'Ru`U=hComparator should not be null.y'Ru`U=hComparator should not be null.", "Comparator should not be null.");
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertNotNull(string11);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensiony'Ru`U=hComparator should not be null.y'Ru`U=hComparator should not be null.", string11);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      String string2 = StringUtils.left("", (-41));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.stripStart("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("/Rx0aY7(){m&Cc=", "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.abbreviateMiddle("TgyB%<dQZ8'lT", (String) null, 1013);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("TgyB%<dQZ8'lT", string4);
      
      String string5 = StringUtils.wrapIfMissing("", 'q');
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("org.junitpioneer.jupiter.DefaultLocaleExtension", "org.junitpioneer.jupiter.DefaultLocaleExtension", "[[t1+uxet#Q>g#d");
      assertNotNull(string0);
      assertEquals("[[t1+uxet#Q>g#d", string0);
      
      String[] stringArray0 = StringUtils.split("X65]@)6bG(", 'b');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWith("X65]@)6bG(", "Failed to get parent directory from provider");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "Failed to get parent directory from provider");
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("X65]@)6Failed to get parent directory from providerG(", string1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1033);
      floatArray0[1] = (float) 'b';
      String string2 = StringUtils.join(floatArray0, 'b', 3, 3);
      assertArrayEquals(new float[] {(-1033.0F), 98.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("X65]@)6Failed to get parent directory from providerG(", "[[t1+uxet#Q>g#d", "h.c&@E)#/%8ucm");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("X65]@)6Failed to get parent directory from providerG(", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'b', (-1), (-1033));
      assertEquals(2, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.trim("\n");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String string0 = StringUtils.replaceChars("[", "[", "[");
      assertNotNull(string0);
      assertEquals("[", string0);
      
      String string1 = StringUtils.unwrap("[", 'u');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[", string1);
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceAll("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string1);
      
      boolean boolean0 = StringUtils.isAlpha("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      String string2 = StringUtils.join(objectArray0, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string2);
      
      String string3 = StringUtils.join(charArray0, 'j');
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("j", string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-3);
      String string4 = StringUtils.capitalize("M3 .P!E$B/[$");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("M3 .P!E$B/[$", string4);
      
      boolean boolean1 = StringUtils.isMixedCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.substringBeforeLast("+yoh`>Ew =gHi0C1UHmhz]B0_NVC", "M3 .P!E$B/[$");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("+yoh`>Ew =gHi0C1UHmhz]B0_NVC", string5);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string6 = locale0.getDisplayLanguage();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("Chinese", string6);
      
      String string7 = StringUtils.mid("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", (-1334), (byte)109);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must ", string7);
      
      int int0 = StringUtils.getFuzzyDistance("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "HpwJf)mnl", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(2, int0);
      
      String string8 = StringUtils.toRootLowerCase("+yoh`>Ew =gHi0C1UHmhz]B0_NVC");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("+yoh`>ew =ghi0c1uhmhz]b0_nvc", string8);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", (-206), (int) (byte)20);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string9 = StringUtils.chomp("}`Vf[j[nfjg7^>!M[V");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("}`Vf[j[nfjg7^>!M[V", string9);
      
      // Undeclared exception!
      try { 
        StringUtils.repeat("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "}`Vf[j[nfjg7^>!M[V", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Locale must not be null";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2980;
      shortArray0[1] = (short)4;
      String string1 = StringUtils.join(shortArray0, 'P');
      assertArrayEquals(new short[] {(short)2980, (short)4}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2980P4", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "WFzD`/| E");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("Locale must not be null", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "WFzD`/| E";
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("3");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("Locale must not be null");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Locale must not be null", string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("Locale must not be null", "a&", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Locale must not be null", string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, '_');
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("*;jGcBio=h*r;@go", "e", "e");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween("7R/I^D", "7R/I^D", " ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&0sOSg{'Xf>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&0sOSg{'Xf>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      String string0 = StringUtils.join((float[]) null, '>');
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate(" vs ", 1624, 17);
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "HpwJf)mnlu#&", (CharSequence) " vs ", 17);
      assertFalse(int1 == int0);
      assertEquals(12, int1);
      
      String string2 = StringUtils.replaceAll("&0sOSg{'Xf>AyRl", "xq]", "The String must not be empty");
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("&0sOSg{'Xf>AyRl", string2);
      
      String string3 = StringUtils.removePattern((String) null, "&0sOSg{'Xf>AyRl");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("C!kjQv", 'H');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("NHu ", "C!kjQv");
      assertNotNull(string0);
      assertEquals("C!kjQvNHu C!kjQv", string0);
      
      int int0 = StringUtils.compareIgnoreCase("C!kjQvNHu C!kjQv", "C!kjQvNHu C!kjQv");
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", 1027);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "NHu ", (CharSequence) "NHu ", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.center("NHu ", 1027, ';');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'H', 1027, 19);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "NHu ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      int int3 = StringUtils.indexOf((CharSequence) string2, (CharSequence) "");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      String string5 = StringUtils.remove((String) null, "Threshold must not be negative");
      assertNull(string5);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 19;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 'H';
      String string6 = StringUtils.join(doubleArray0, 'H', 3028, 19);
      assertArrayEquals(new double[] {0.0, 19.0, 0.0, 72.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      int int0 = StringUtils.compare("org.apache.commons.lang3.StringUtils", (String) null, true);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, (-2093064));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("z1SU'# EuVHse?m");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.right("5l!ox3C_#tUK ", 8);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("3C_#tUK ", string1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("Minimum abbreviation width is %d", "K dh{;3<9{hwM", "K dh{;3<9{hwM");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 3
         // K dh{;3<9{hwM
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "1+`'$Sx", (CharSequence) ",V7E");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("0v<=|OlN4#A'V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("W", "W");
      assertNotNull(string0);
      assertEquals("W", string0);
      
      String string1 = StringUtils.joinWith("j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replacePattern("jI7<WT9;Gq_j", "W", "W");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("jI7<WT9;Gq_j", string2);
      
      String string3 = StringUtils.substringBefore("+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension", "j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      
      String string4 = StringUtils.removeIgnoreCase("3'Q3@_1~unlqq3\"3", "+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("3'Q3@_1~unlqq3\"3", string4);
      
      boolean boolean1 = StringUtils.isNumeric("jI7<WT9;Gq_j");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = StringUtils.toCodePoints("3'Q3@_1~unlqq3\"3");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.repeat("jI7<WT9;Gq_j", (-1021));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.remove("+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension", '2');
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", (CharSequence) "W");
      assertEquals(135, int0);
      
      boolean boolean3 = StringUtils.containsWhitespace("3'Q3@_1~unlqq3\"3");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNumeric("3'Q3@_1~unlqq3\"3");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string7 = StringUtils.toRootUpperCase("");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.repeat('2', 5);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("22222", string8);
      
      boolean boolean5 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.contains((CharSequence) "", 0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
      
      String string9 = StringUtils.rightPad("<g^i0N", 5, 'j');
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("<g^i0N", string9);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "<g^i0N", (-176), 3452);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.vintage.TimeoutExtension", "+nkH@3ddGIq4q5c=p", 229);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("", "blank_blank_blank_2014");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 229;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (short)52;
      doubleArray0[4] = (double) 56;
      String string3 = StringUtils.join(doubleArray0, 'X');
      assertArrayEquals(new double[] {88.0, 229.0, 0.0, 52.0, 56.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("88.0X229.0X0.0X52.0X56.0", string3);
      
      String string4 = StringUtils.abbreviate("", "org.junitpioneer.jupiter.TempDirectoryCan only resolve parameter of type ", (-622), (-622));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", "Strings must not be null", true);
      assertEquals(1, int0);
      
      String string2 = StringUtils.right("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", (-2098));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 75;
      intArray0[1] = 0;
      intArray0[2] = (-104);
      intArray0[3] = 0;
      intArray0[4] = (-2098);
      intArray0[5] = (int) 'v';
      String string3 = StringUtils.join(intArray0, 'v', 32, 32);
      assertArrayEquals(new int[] {75, 0, (-104), 0, (-2098), 118}, intArray0);
      assertEquals(6, intArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, ")+I[F'oI1H");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "AkmhRd/HBln}`|>5z&");
      assertEquals((-19), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, (-19));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, "%xcSs", "AkmhRd/HBln}`|>5z&", (-19));
      assertNull(string0);
      
      String string1 = StringUtils.leftPad(".)'OzSF", 0);
      assertNotNull(string1);
      assertEquals(".)'OzSF", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'B');
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("0pD^", "", (String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray2);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", "},Rzwy+21T=93", 0);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(18, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("u#&", "u#&", (CharSequence[]) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("u#&", string4);
      
      String string5 = StringUtils.substringAfter((String) null, "j/mn6A0y5a^b4Od");
      assertNull(string5);
      
      String string6 = StringUtils.leftPad(" ", 0, "u#&");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals(" ", string6);
      
      String string7 = StringUtils.replaceChars(" ", "%xcSs", (String) null);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals(" ", string7);
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceChars("\r", "org.apache.commons.lang3.CharUtils", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "HaR'$+|";
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "HaR'$+|";
      stringArray1[1] = "M7EWpU{:9";
      stringArray1[2] = "HaR'$+|";
      stringArray1[3] = "HaR'$+|";
      stringArray1[4] = "HaR'$+|";
      stringArray1[5] = "HaR'$+|";
      stringArray1[6] = "HaR'$+|";
      stringArray1[7] = "HaR'$+|";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("HaR'$+|", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals(" vs ", string0);
      
      String[] stringArray1 = new String[10];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(" vs ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap("org.apache.commons.lang3.Charsets", (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.Charsets", string0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      String string1 = StringUtils.unwrap("(,YQ#`O_wO", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("(,YQ#`O_wO", string1);
      
      int int0 = StringUtils.compareIgnoreCase("M~#geNc';v:]B", "(,YQ#`O_wO", true);
      assertEquals(69, int0);
      
      String string2 = StringUtils.removeAll("M~#geNc';v:]B", "...");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("B", string2);
      
      String string3 = StringUtils.normalizeSpace("i$)Wlf%<|YN");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("i$)Wlf%<|YN", string3);
      
      String string4 = StringUtils.abbreviate(" is not in the range '0' - '9'", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)", 175);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(" is not in the range '0' - '9'", string4);
      
      String[] stringArray0 = StringUtils.split("LaunchTime", 'V');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.removeStart("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "/Uj))YE5x$V");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string5);
      
      String[] stringArray2 = new String[2];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = " is not in the range '0' - '9'";
      stringArray2[1] = "LaunchTime";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("9zOk|2:H]9F'tw|C&", stringArray0, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      String string3 = StringUtils.right("", 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) 'F';
      intArray0[2] = (-1);
      intArray0[3] = (int) 'T';
      intArray0[4] = 3404;
      intArray0[8] = (int) 'F';
      intArray0[2] = (-104);
      String string4 = StringUtils.left("ExceptionWasThrown", (-1344));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.endsWithAny("^q@FMnG;", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.stripStart("ExceptionWasThrown", "sirFGr32ov");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("ExceptionWasThrown", string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "^q@FMnG;");
      assertNull(stringArray1);
      
      String string6 = StringUtils.abbreviateMiddle("^q@FMnG;", "SxX'*L2j.2fz}Nz", 0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("^q@FMnG;", string6);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("x", "5qoIy.", 5);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("x", (String) null, false);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 123, (-9));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("x");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'e';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'F', 'e'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string0);
      assertEquals("FFe", string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("x", string1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-96);
      String string2 = StringUtils.join(byteArray0, 'e');
      assertArrayEquals(new byte[] {(byte)101, (byte) (-96)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("101e-96", string2);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.firstNonBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string3);
      
      String[] stringArray2 = StringUtils.split((String) null, "(#SAc2hJCSk", 2860);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      char[] charArray0 = new char[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.wrapIfMissing("H5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNR");
      assertNotNull(string0);
      assertEquals("H5 ?Qy&8AMiNR", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "H5 ?Qy&8AMiNR", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("H5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNR");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.replace("org.junitpioneer.jupiter.DefaultLocaleExtension", " in an array of ", "H5 ?Qy&8AMiNR");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      
      String string2 = StringUtils.uncapitalize("H5 ?Qy&8AMiNR");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("h5 ?Qy&8AMiNR", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("H5 ?Qy&8AMiNR");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[1] = (CharSequence) " in an array of ";
      charSequenceArray0[2] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[3] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      String string3 = StringUtils.prependIfMissingIgnoreCase("H5 ?Qy&8AMiNR", "org.junitpioneer.jupiter.DefaultLocaleExtension", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("H5 ?Qy&8AMiNR", string3);
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, 'b');
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(linkedList0.contains("H5 ?Qy&8AMiNR"));
      
      int int2 = StringUtils.length("");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Can only resolve parameter of type ");
      assertNotNull(string0);
      assertEquals("can only resolve parameter of type ", string0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertEquals(51, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[2], "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtension", 27);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.vintage.Ex", string1);
      
      String string2 = StringUtils.replacePattern("", "", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("", "", "59<");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("io", "io6E9qA");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("io", string4);
      
      String string5 = StringUtils.capitalize("");
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.substringAfter(". The following paths could not be deleted (see suppressed exceptions for details): ", "NK.;EHQrY[ay");
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replace("C!kjQvNHu ", "jCu`aXaT}SLv4|{OOS", "59<", 51);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("C!kjQvNHu ", string7);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0[2]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string8 = StringUtils.removeFirst("zmAjdYJID[x", " but was: ");
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("zmAjdYJID[x", string8);
      
      boolean boolean4 = StringUtils.isAllUpperCase("io");
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string9 = StringUtils.join((Object[]) charSequenceArray0, ')', 0, 2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension)", string9);
      
      String string10 = StringUtils.lowerCase("X,");
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
      assertEquals("x,", string10);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'o', 3, 2246);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang3.RegExUtils", (-1086));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "!";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.chop("]6bZ*?DdKAVdy|hL");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("]6bZ*?DdKAVdy|h", string2);
      
      String string3 = StringUtils.uncapitalize("4:4>rH!noVTIAOfaiH");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("4:4>rH!noVTIAOfaiH", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "]6bZ*?DdKAVdy|h", (CharSequence) "4:4>rH!noVTIAOfaiH");
      assertEquals(0, int0);
      
      String string4 = StringUtils.reverse("");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1086);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '#', 2, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Nlo1%d$?tX[.cDI2*", "Nlo1%d$?tX[.cDI2*", 134);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '^', 134, 2419);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 134
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      String string0 = StringUtils.trimToNull("!B`[");
      assertNotNull(string0);
      assertEquals("!B`[", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!B`[", (-2707));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!B`[";
      charSequenceArray0[1] = (CharSequence) "!B`[";
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "!B`[", 2, 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("!B`[");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = '';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'e', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FTe", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!B`[";
      stringArray0[1] = "!B`[";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("!B`[", string2);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[1], (CharSequence[]) stringArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.removeEndIgnoreCase("!B`[", "[6=V+]9cNPWT@tg");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("!B`[", string3);
      
      boolean boolean3 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "!B`[", (CharSequence) "[6=V+]9cNPWT@tg");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean5 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string4 = StringUtils.upperCase("FTe");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("FTE", string4);
      
      int int3 = StringUtils.indexOf((CharSequence) "!B`[", (CharSequence) "!B`[");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string5 = StringUtils.remove("!B`[", "Threshold must not be negative");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("!B`[", string5);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'e';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'F', 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringBefore("\r", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Failed to create default temp directory";
      stringArray0[1] = "$'pVPflARQiaQ&DDfz";
      stringArray0[2] = "[[t1+uxet#Q>g#d";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("$'pVPflARQiaQ&DDfz");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty(" in an array of ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("in an array of", string1);
      
      String string2 = StringUtils.join((int[]) null, '8');
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      
      String string4 = StringUtils.substring("[[t1+uxet#Q>g#d", 0, (-1081));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.defaultlocaleextension", string5);
      
      boolean boolean1 = StringUtils.isEmpty("[[t1+uxet#Q>g#d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.wrap("[[t1+uxet#Q>g#d", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("[[t1+uxet#Q>g#d", string6);
      
      String string7 = StringUtils.truncate(" but was: ", 13);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals(" but was: ", string7);
      
      String string8 = StringUtils.wrapIfMissing("[[t1+uxet#Q>g#d", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", string8);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) '8';
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 13;
      longArray0[5] = (long) '8';
      String string9 = StringUtils.join(longArray0, 'S', 3794, (-86));
      assertArrayEquals(new long[] {0L, 0L, 56L, 0L, 13L, 56L}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertNotNull(string9);
      assertEquals("", string9);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 0, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.stripToEmpty("fkn>{F]N%J>.PvJ3VE");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string6);
      
      String string7 = StringUtils.replaceEachRepeatedly("The Array must not be null", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("The Array must not be null", string7);
      
      String string8 = StringUtils.rotate("", (-3286));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.abbreviate("Md V`d7ldBwQ,96,`%1", "", (-1076), 31);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("Md V`d7ldBwQ,96,`%1", string9);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String string0 = StringUtils.getDigits("s'}mY=vX&.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "s'}mY=vX&.", (CharSequence) "", 74);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 17);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfBlank("", "%9y6z.x6rZOO");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%9y6z.x6rZOO", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%9y6z.x6rZOO", "");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "";
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 17;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) 17;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 1.0F;
      String string2 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {17.0F, (-1.0F), 1.0F, 1.0F, 17.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("17.0>-1.0>1.0>1.0>17.0>-1.0>1.0", string2);
      
      String string3 = StringUtils.abbreviate("%9y6z.x6rZOO", (-1), 1624);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("%9y6z.x6rZOO", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "HpwJf)mnlu#&", (CharSequence) "", 2166);
      assertFalse(int1 == int0);
      assertEquals(12, int1);
      
      String string4 = StringUtils.replaceAll("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", "C", "HpwJf)mnlu#&");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", string4);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("7R/I^D", "\r", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains("\r"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      long[] longArray0 = new long[7];
      longArray0[0] = (-1L);
      longArray0[2] = (long) 's';
      longArray0[3] = (long) 's';
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      String string2 = StringUtils.join(longArray0, 's');
      assertArrayEquals(new long[] {(-1L), 0L, 115L, 115L, (-1L), 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-1s0s115s115s-1s0s0", string2);
      
      String string3 = StringUtils.removeEnd("\r", "\n");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-3703), (-3703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 92
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Locale must not be null";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2980;
      shortArray0[1] = (short)4;
      String string1 = StringUtils.join(shortArray0, 'P');
      assertArrayEquals(new short[] {(short)2980, (short)4}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2980P4", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "WFzD`/| E");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("Locale must not be null", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "WFzD`/| E";
      String string2 = StringUtils.appendIfMissingIgnoreCase("3", "2980P4", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("32980P4", string2);
      
      String string3 = StringUtils.defaultIfBlank(".zYdsO+%yl_C`=./", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(".zYdsO+%yl_C`=./", string3);
      
      String string4 = StringUtils.reverse("2980P4");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("4P0892", string4);
      
      String[] stringArray1 = StringUtils.substringsBetween("{}", "Locale must not be null", "WFzD`/| E");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" 7s ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach(" 7s ", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals(" 7s ", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(" 7s ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("\r", "\r", "\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("\r");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string1 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string2 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(linkedList0.contains('B'));
      
      charSequenceArray0[5] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      boolean boolean3 = StringUtils.startsWithAny("\r", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string3 = StringUtils.difference("", "-bq4M~c]&>$b5QM");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("-bq4M~c]&>$b5QM", string3);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean5 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      String string4 = StringUtils.substringBeforeLast("qm4*Qb+K!=CnJZ[", "\r");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("qm4*Qb+K!=CnJZ[", string4);
      
      boolean boolean6 = linkedList0.add((Object) "qm4*Qb+K!=CnJZ[");
      assertEquals(1, linkedList0.size());
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6);
      assertFalse(linkedList0.contains('B'));
      assertTrue(linkedList0.contains("qm4*Qb+K!=CnJZ["));
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string5 = StringUtils.mid("'AX_ EW,&5", 1, 430);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("AX_ EW,&5", string5);
      
      int int1 = StringUtils.getFuzzyDistance(charSequenceArray0[4], "", locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.toRootLowerCase("\r");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("\r", string6);
      
      String string7 = StringUtils.removeEndIgnoreCase("-bq4M~c]&>$b5QM", "1#;02tb/1n");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("-bq4M~c]&>$b5QM", string7);
      
      String string8 = StringUtils.lowerCase("AX_ EW,&5");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("ax_ ew,&5", string8);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      String string0 = StringUtils.unwrap("\r", '#');
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.wrapIfMissing("\r", "\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      
      String string2 = StringUtils.rotate("", 442);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, '#');
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 5);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("i;TY7LWO)B{D)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("J0A+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("J0A+", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Threshold must not be negative");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("s4$", (-1853), ')');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("s4$", string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Threshold must not be negative");
      assertNotSame(stringArray2, stringArray1);
      assertEquals(10, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("\r");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(0, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("i;TY7LWO)B{D)", charSequence0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "i;TY7LWO)B{D)", (CharSequence) "s4$");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray4 = StringUtils.stripAll(stringArray3, "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray2);
      assertSame(stringArray4, stringArray3);
      assertEquals(0, stringArray3.length);
      assertEquals(0, stringArray4.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertNotNull(stringArray4);
      
      String string4 = StringUtils.normalizeSpace("}");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("}", string4);
      
      String string5 = StringUtils.abbreviate("|='/Yh^$zIW85N", "-`a?gnI;$@edi(82TU", 20);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("|='/Yh^$zIW85N", string5);
      
      String[] stringArray5 = StringUtils.split("\r", ')');
      assertNotSame(stringArray5, stringArray1);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray3);
      assertEquals(1, stringArray5.length);
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertNotNull(stringArray5);
      
      String[] stringArray6 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray6, stringArray3);
      assertNotSame(stringArray6, stringArray2);
      assertNotSame(stringArray6, stringArray4);
      assertNotSame(stringArray6, stringArray1);
      assertNotSame(stringArray6, stringArray5);
      assertNotSame(stringArray1, stringArray4);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray5);
      assertNotSame(stringArray1, stringArray6);
      assertEquals(1, stringArray6.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray1.equals((Object)stringArray4));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray5));
      assertNotNull(stringArray6);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("I7iD:g@%", (String) null);
      assertNotNull(string0);
      assertEquals("I7iD:g@%", string0);
      
      boolean boolean0 = StringUtils.isNumeric("I7iD:g@%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[3] = "c";
      stringArray1[4] = "%d|BD{F=se";
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.substringBetween("\n", " ", "ExceptionWasThrown");
      assertNull(string1);
      
      String string2 = StringUtils.stripEnd("@$i57hE`5hX", "^Wd8*]=!g~; @#ph{ )");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("@$i57hE`5hX", string2);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can only resolve parameter of type ";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Can only resolve parameter of type ", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("...", "s'/n0D,;'2*M");
      assertEquals((-69), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Can only resolve parameter of type ", (CharSequence) "s'/n0D,;'2*M");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.removeAll("...", "org.apache.commons.lang3.StringUtils");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...", string1);
      
      String string2 = StringUtils.join((List<?>) null, "...", 103, 3339);
      assertNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "...");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Stings ust not be null");
      assertNotNull(string0);
      assertEquals("Stingsustnotbenull", string0);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.leftPad("C", 1434, '\\');
      assertNotNull(string0);
      
      String string1 = StringUtils.join((char[]) null, '\\', 1434, 1434);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("C");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string2 = StringUtils.join(objectArray0, (String) null, 4491, 1434);
      assertEquals(1, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "7-bNQS3rm4MFky?in");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      longArray0[1] = (-1204L);
      int int0 = StringUtils.length("DefaultTimeZone");
      assertEquals(15, int0);
      
      String string1 = StringUtils.wrapIfMissing("cL)[=", (String) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cL)[=", string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.replaceIgnoreCase("org", "org", "2&{");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("2&{", string2);
      
      String string3 = StringUtils.normalizeSpace("cL)[=");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("cL)[=", string3);
      
      int int1 = StringUtils.compareIgnoreCase("\r", "cL)[=", false);
      assertFalse(int1 == int0);
      assertEquals((-86), int1);
      
      String string4 = StringUtils.substringAfterLast("2&{", "org");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
      
      String string5 = StringUtils.remove((String) null, '1');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = ']';
      charArray0[2] = 'e';
      charArray0[3] = '$';
      String string0 = StringUtils.join(charArray0, '$', 256, 256);
      assertArrayEquals(new char[] {'H', ']', 'e', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.right("Array element ", (-871));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissing("Array element ", "Array element ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Array element ", string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Array element ", charArray0);
      assertArrayEquals(new char[] {'H', ']', 'e', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'H', ']', 'e', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.prependIfMissing("", "Array element ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-499));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.stripToEmpty("RT");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("RT", string5);
      
      String string6 = StringUtils.trimToEmpty("C//h");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("C//h", string6);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string7 = StringUtils.replaceAll("C//h", "C//h", "");
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("", string7);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "Array element ", charArray0);
      assertArrayEquals(new char[] {'H', ']', 'e', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2455;
      shortArray0[2] = (short)2;
      String string8 = StringUtils.join(shortArray0, 'e');
      assertArrayEquals(new short[] {(short)0, (short)2455, (short)2}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("0e2455e2", string8);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      String string1 = StringUtils.unwrap("@DefaultLocale can only be used with language tag if language, country, and variant are not set", 'O');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string1);
      
      charSequenceArray0[1] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      String string2 = StringUtils.removeIgnoreCase((String) null, "]<WB6E~6((8ck");
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[2], charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replacePattern("C//h", "8", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("C//h", string3);
      
      String string4 = StringUtils.swapCase((String) null);
      assertNull(string4);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2926);
      shortArray0[1] = (short)641;
      shortArray0[2] = (short)502;
      shortArray0[3] = (short) (-1216);
      shortArray0[4] = (short) (-17);
      String string5 = StringUtils.join(shortArray0, '~', 55, 5);
      assertArrayEquals(new short[] {(short) (-2926), (short)641, (short)502, (short) (-1216), (short) (-17)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      assertFalse(stack0.contains((short) (-1216)));
      
      ListIterator<Object> listIterator0 = stack0.listIterator();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(stack0.contains((short) (-1216)));
      
      String string6 = StringUtils.join((Iterator<?>) listIterator0, "Timeout");
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      assertFalse(stack0.contains((short) (-1216)));
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      String string0 = StringUtils.capitalize("ommons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("Ommons.lang3.ArrayUtils", string0);
      
      String string1 = StringUtils.wrap("Ommons.lang3.ArrayUtils", '0');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0Ommons.lang3.ArrayUtils0", string1);
      
      String string2 = StringUtils.substringBetween("0Ommons.lang3.ArrayUtils0", "p{InCombiningDiacriticalMarks}+", "IUVjP");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "0Ommons.lang3.ArrayUtils0";
      charSequenceArray0[1] = (CharSequence) "0Ommons.lang3.ArrayUtils0";
      charSequenceArray0[2] = (CharSequence) "IUVjP";
      charSequenceArray0[3] = (CharSequence) "ommons.lang3.ArrayUtils";
      charSequenceArray0[4] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[5] = (CharSequence) "0Ommons.lang3.ArrayUtils0";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", "", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 11);
      assertEquals(0, int0);
      
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[1] = (CharSequence) "u#&";
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(10, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[0] = '';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'', 'T', 'e', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("Te\u0000", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "u#&";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[1], (CharSequence[]) stringArray0);
      assertEquals(10, charSequenceArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.repeat("u#&", 2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("u#&u#&", string2);
      
      String string3 = StringUtils.substringBefore("u#&u#&", "u#&");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("Ob7Nnv?Q.Wq{8.", 119);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "MnG;", (CharSequence) "", 110);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "u#&u#&", 45);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.reverse("$#q6<Gy8>+");
      assertNotNull(string0);
      assertEquals("+>8yG<6q#$", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "+>8yG<6q#$", (CharSequence) "$#q6<Gy8>+", 2);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("+>8yG<6q#$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[0] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("0.0>0.0>0.0>1.0>-1.0", string0);
      
      String string1 = StringUtils.abbreviate("0.0>0.0>0.0>1.0>-1.0", 16, 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...>0.0>1.0>-1.0", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0.0>0.0>0.0>1.0>-1.0", (CharSequence) "HpwJf)mnlu#&", 16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceAll("...>0.0>1.0>-1.0", "6s3%|oJapWNVIiUsT", "jNx{/W4,>`");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...>0.0>1.0>-1.0", string2);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(0));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains(0));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains(0));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains(0));
      
      boolean boolean1 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue1.contains("ExceptionWasThrown"));
      assertFalse(priorityQueue1.contains(0));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ExceptionWasThrownP^q@FMnG;", string3);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains(0));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains(0));
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      String string5 = StringUtils.join((int[]) null, '=');
      assertNull(string5);
      
      String string6 = StringUtils.leftPad("ExceptionWasThrown", (-1), '=');
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("ExceptionWasThrown", string6);
      
      String string7 = StringUtils.truncate("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 0, 830);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string7);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "%d|BD{F=se", (CharSequence) "P", 10);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.wrap("GLQ+KLK^G1V_/}/PE!", '=');
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("=GLQ+KLK^G1V_/}/PE!=", string8);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "jkt", (CharSequence) "ExceptionWasThrown");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.compare("LQbkT_rC`4C{a+T", "0~#4T#/,e");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(28, int3);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TB%<dQ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'O';
      charArray0[1] = 'q';
      charArray0[2] = ')';
      charArray0[3] = 'O';
      charArray0[4] = ')';
      charArray0[1] = 'q';
      String string2 = StringUtils.join(charArray0, 'b');
      assertArrayEquals(new char[] {'O', 'q', ')', 'O', ')', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Obqb)bOb)b\u0000", string2);
      
      String string3 = StringUtils.chop("|K|='/Yh^$zIW85N");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("|K|='/Yh^$zIW85", string3);
      
      String string4 = StringUtils.removeStart("0C1UHmhz]B0_NVC", "+yoh`>Ew =gHi");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("0C1UHmhz]B0_NVC", string4);
      
      String string5 = StringUtils.left("|K|='/Yh^$zIW85", 2744);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("|K|='/Yh^$zIW85", string5);
      
      String string6 = StringUtils.abbreviate("19thwuBG0ZXsv%", 3247);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("19thwuBG0ZXsv%", string6);
      
      String string7 = StringUtils.substring("|K|='/Yh^$zIW85", (-2463), 95);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("|K|='/Yh^$zIW85", string7);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceAll("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string1);
      
      boolean boolean0 = StringUtils.isAlpha("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      String string2 = StringUtils.join(objectArray0, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("j@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string2);
      
      String string3 = StringUtils.join(charArray0, 'j');
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("j", string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-3);
      String string4 = StringUtils.capitalize("M3 .P!E$B/[$");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("M3 .P!E$B/[$", string4);
      
      boolean boolean1 = StringUtils.isMixedCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.substringBeforeLast("+yoh`>Ew =gHi0C1UHmhz]B0_NVC", "M3 .P!E$B/[$");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("+yoh`>Ew =gHi0C1UHmhz]B0_NVC", string5);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string6 = StringUtils.mid("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", (-1334), (byte)109);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must ", string6);
      
      int int0 = StringUtils.getFuzzyDistance("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "HpwJf)mnl", locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(2, int0);
      
      String string7 = StringUtils.toRootLowerCase("+yoh`>Ew =gHi0C1UHmhz]B0_NVC");
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("+yoh`>ew =ghi0c1uhmhz]b0_nvc", string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "\r", (-206), (int) (byte)20);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.chomp("}`Vf[j[nfjg7^>!M[V");
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("}`Vf[j[nfjg7^>!M[V", string8);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.mid("The character must not be null", 0, 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Strings must not be null");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) "#O'");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-73);
      String string4 = StringUtils.join(byteArray0, 'z');
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte) (-73), (byte) (-73), (byte)2, (byte) (-73)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("-73z-73z-73z-73z2z-73", string4);
      
      String string5 = StringUtils.left("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", (byte) (-73));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean3 = StringUtils.endsWithAny("The type must not be null", (CharSequence[]) null);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.stripStart("`]", "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("`]", string6);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[3] = 99;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2506;
      String string2 = StringUtils.replaceChars("NHu ", '&', '&');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("NHu ", string2);
      
      String string3 = StringUtils.unwrap("u_2G-", '&');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("u_2G-", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("u#&");
      assertFalse(boolean0);
      
      String string4 = StringUtils.stripToNull("Pan?qf}9NFnAh$v");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Pan?qf}9NFnAh$v", string4);
      
      String string5 = StringUtils.replaceIgnoreCase("NHu ", " ", (String) null);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("NHu ", string5);
      
      String string6 = StringUtils.chomp("]%<|K3$+Gii#wb'c");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("]%<|K3$+Gii#wb'c", string6);
      
      String string7 = StringUtils.truncate("e", 101, 0);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      String string0 = StringUtils.chomp("temp.dir");
      assertNotNull(string0);
      assertEquals("temp.dir", string0);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = "Expected exception %s was not thrown.";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Expected exception %s was not thrown.", "Expected exception %s was not thrown.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = "'No~(:J^P4WK";
      String string3 = "HpwJf)mnlu#&";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("'No~(:J^P4WK", "HpwJf)mnlu#&");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 4
         // HpwJf)mnlu#&
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.split((String) null, 'V');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', (int) (short)52, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      String string2 = StringUtils.repeat("cr", 565);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "cr", "C!kjQvNHu ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "TgyB%<dQZ8'lT");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      String string5 = StringUtils.toRootLowerCase("uBgL4(mfxZ`");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("ubgl4(mfxz`", string5);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertEquals(51, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[2], "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtension", 27);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.vintage.Ex", string1);
      
      String string2 = StringUtils.replacePattern("", "", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("", "", "59<");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("io", "io6E9qA");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("io", string4);
      
      String string5 = StringUtils.capitalize("");
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.substringAfter(". The following paths could not be deleted (see suppressed exceptions for details): ", "NK.;EHQrY[ay");
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.replace("C!kjQvNHu ", "jCu`aXaT}SLv4|{OOS", "59<", 51);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("C!kjQvNHu ", string7);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", charSequenceArray0[2]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string8 = StringUtils.removeFirst("zmAjdYJID[x", " but was: ");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("zmAjdYJID[x", string8);
      
      boolean boolean4 = StringUtils.isAllUpperCase("io");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string9 = StringUtils.remove((String) null, ". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "e(y";
      stringArray0[2] = "e(y";
      stringArray0[3] = "e(y";
      String string0 = StringUtils.replaceEach("e(y", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("e(y", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("e(y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Failed to create default temp directory";
      stringArray0[1] = "$'pVPflARQiaQ&DDfz";
      stringArray0[2] = "[[t1+uxet#Q>g#d";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("$'pVPflARQiaQ&DDfz");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("$'pVPflARQiaQ&DDfz");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("$'pVPflARQiaQ&DDfz", string1);
      
      String string2 = StringUtils.join((int[]) null, '8');
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      
      String string4 = StringUtils.substring("[[t1+uxet#Q>g#d", 0, (-1081));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.chop("Array and element cannot both be null");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("Array and element cannot both be nul", string5);
      
      String string6 = StringUtils.removeStart("", "d\u0000%[");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "d\u0000%[", (CharSequence) "", (-2763));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.mid((String) null, 2374, (-2989));
      assertNull(string7);
      
      String string8 = StringUtils.replaceIgnoreCase("$'pVPflARQiaQ&DDfz", (String) null, "$'pVPflARQiaQ&DDfz", 9);
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("$'pVPflARQiaQ&DDfz", string8);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "$'pVPflARQiaQ&DDfz", (CharSequence) "Array and element cannot both be null");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Failed to create default temp directory", (CharSequence) "$'pVPflARQiaQ&DDfz");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = StringUtils.difference("", (String) null);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 5);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("i;TY7LWO)B{D)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.CR;
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      String string3 = StringUtils.replaceAll(".S0j", "", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(".S0j", string3);
      
      String string4 = StringUtils.substringBefore("Array and element cannot both be null", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Array and element cannot both be null", string4);
      
      boolean boolean0 = StringUtils.isAlpha("Array and element cannot both be null");
      assertFalse(boolean0);
      
      String string5 = StringUtils.join((Object[]) null, "");
      assertNull(string5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = 'O';
      charArray0[2] = 'D';
      charArray0[3] = '$';
      String string6 = StringUtils.join(charArray0, '?');
      assertArrayEquals(new char[] {'H', 'O', 'D', '$'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("H?O?D?$", string6);
      
      String string7 = StringUtils.rightPad("", 121, 'H');
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH", string7);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.prependIfMissing(" ", "dlyMoRMLi&m", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'T';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charArray0);
      assertArrayEquals(new char[] {'V', 'T'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.replace("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string1);
      
      String string2 = StringUtils.uncapitalize("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.TempDirectory";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension";
      String string3 = StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.jupiter.DefaultLocaleExtension", "org.junitpioneer.jupiter.TempDirectory", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      
      int int2 = StringUtils.length("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(47, int2);
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.capitalize("The character must not be null");
      assertNotNull(string0);
      assertEquals("The character must not be null", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("The character must not be null", "The character must not be null");
      assertEquals(1.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "The character must not be null";
      charSequenceArray0[1] = (CharSequence) "The character must not be null";
      charSequenceArray0[2] = (CharSequence) "The character must not be null";
      charSequenceArray0[3] = (CharSequence) "The character must not be null";
      charSequenceArray0[4] = (CharSequence) "The character must not be null";
      charSequenceArray0[5] = (CharSequence) "The character must not be null";
      charSequenceArray0[6] = (CharSequence) "The character must not be null";
      charSequenceArray0[7] = (CharSequence) "The character must not be null";
      boolean boolean0 = StringUtils.endsWithAny("The character must not be null", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceAll("", "Index: ", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      Locale locale0 = new Locale("NHu C!kjQv");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("nhu c!kjqv", locale0.getLanguage());
      assertEquals("nhu c!kjqv", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("nhu c!kjqv", locale0.getLanguage());
      assertEquals("nhu c!kjqv", locale0.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("nhu c!kjqv", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("nhu c!kjqv", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Locale.Category> unaryOperator1 = UnaryOperator.identity();
      assertNotNull(unaryOperator1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean1 = arrayList0.add((Locale.LanguageRange) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(locale1));
      
      Locale locale2 = Locale.lookup(arrayList0, priorityQueue0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertNull(locale2);
      assertFalse(priorityQueue0.contains(locale1));
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = locale0.getDisplayScript(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("nhu c!kjqv", locale0.getLanguage());
      assertEquals("nhu c!kjqv", locale0.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("nhu c!kjqv", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("nhu c!kjqv", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.lowerCase("DefaultTimeZone", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("nhu c!kjqv", locale0.getLanguage());
      assertEquals("nhu c!kjqv", locale0.toString());
      assertSame(locale0, locale1);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("defaulttimezone", string3);
      
      String string4 = StringUtils.center("_Aj3m6s\"fDrnwg*6~", (-2046), "C=~-\n");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("_Aj3m6s\"fDrnwg*6~", string4);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("?1~Sp-dHA{", "?1~Sp-dHA{", 1199);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("C=~-", "\n");
      assertNotNull(string0);
      assertEquals("\nC=~-\n", string0);
      
      String string1 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("r&Aj?VWK@");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)10;
      String string2 = StringUtils.join(byteArray0, '*');
      assertArrayEquals(new byte[] {(byte)30, (byte) (-2), (byte) (-25), (byte)126, (byte)10}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("30*-2*-25*126*10", string2);
      
      String string3 = StringUtils.left("7g~b3`-(a0", 1199);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("7g~b3`-(a0", string3);
      
      boolean boolean1 = StringUtils.endsWithAny("r&Aj?VWK@", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.stripStart("?1~Sp-dHA{", (String) null);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("?1~Sp-dHA{", string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("?1~Sp-dHA{", (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, "Failed to create custom temp directory", (byte)126);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      boolean boolean0 = StringUtils.isAlpha("^q@FMnG;");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((float[]) null, '=');
      assertNull(string3);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = "^q@FMnG;";
      stringArray1[2] = "^q@FMnG;";
      stringArray1[3] = "c";
      stringArray1[4] = "%d|BD{F=se";
      stringArray1[5] = null;
      String string4 = StringUtils.replaceEach("hO7$5", stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("hO7$5", string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "c", (CharSequence) "^q@FMnG;");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.deleteWhitespace("c");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("c", string5);
      
      String string6 = StringUtils.abbreviateMiddle(".}Ak:0%y`5~", "Cz |mG1Y_yeOccawK=!", 0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(".}Ak:0%y`5~", string6);
      
      String string7 = StringUtils.normalizeSpace("ExceptionWasThrown");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("ExceptionWasThrown", string7);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, ';');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String string0 = StringUtils.substring("Locae must nt be null", 2);
      assertNotNull(string0);
      assertEquals("cae must nt be null", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cae must nt be null", "cae must nt be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("cae must nt be null", "M8rqW.", "cae must nt be null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cae must nt be null", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("cae must nt be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'x';
      charArray0[2] = 'u';
      charArray0[3] = '\'';
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-40);
      String string2 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte) (-105), (byte)2, (byte)18, (byte)1, (byte) (-40)}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\uFFFD\u0002\u0012\u0001\uFFFD", string2);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("cae must nt be null", "M8rqW.", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(1, int0);
      
      String string3 = StringUtils.swapCase("I8,");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("i8,", string3);
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("(*c0XB%1t}", "(*c0XB%1t}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 1
         // (*c0XB%1t}
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      String string0 = StringUtils.capitalize("jQ'BOe3=:4QmzgG");
      assertNotNull(string0);
      assertEquals("JQ'BOe3=:4QmzgG", string0);
      
      String string1 = StringUtils.join((Object[]) null, "Array element ");
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace("JQ'BOe3=:4QmzgG");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("JQ'BOe3=:4QmzgG", string2);
      
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.jupiter.DefaultTimeZoneExtension", (String) null, true);
      assertEquals(1, int0);
      
      String string3 = "+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("jQ'BOe3=:4QmzgG", "+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.leftPad("^q@FMnG;", (-26));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      String string3 = StringUtils.center("[[t1+uxet#Q>g#d", 100, "[[t1+uxet#Q>g#d");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g", string3);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 56;
      intArray0[1] = 0;
      String string4 = StringUtils.joinWith("mCl", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      String string3 = StringUtils.right("", 0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) 'F';
      intArray0[2] = (-1);
      intArray0[3] = (int) 'T';
      intArray0[4] = 3404;
      intArray0[5] = (int) 'F';
      intArray0[2] = (-104);
      intArray0[7] = 256;
      intArray0[8] = (-20);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '?', (-20), 70);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("J0A+", "Aborting to protect against StackOverflowError - output of one loop is the input of another", false);
      assertEquals(9, int0);
      
      String string1 = StringUtils.stripStart(" vs ", "J0A+");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      String string2 = StringUtils.stripToNull("abK-9i@");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("abK-9i@", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("LaunchTime", "=#s", "LaunchTime");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("LaunchTime", string3);
      
      String string4 = StringUtils.center("BZ(Q~|6U@", 9);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("BZ(Q~|6U@", string4);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = '8';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "BZ(Q~|6U@", charArray0);
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', '8', 'T', 'T'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      try { 
        StringUtils.getBytes("abK-9i@", "abK-9i@");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, " ");
      assertNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      int int0 = StringUtils.ordinalIndexOf(" ", (CharSequence) null, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissing("!/pO+wlhZ@T*XaeyVi", "!/pO+wlhZ@T*XaeyVi", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("!/pO+wlhZ@T*XaeyVi", string0);
      
      boolean boolean0 = StringUtils.isNumeric("!/pO+wlhZ@T*XaeyVi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains("offset cannot be negative"));
      
      charSequenceArray0[5] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String string4 = StringUtils.difference("", "-bq4M~c]&>$b5QM");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("-bq4M~c]&>$b5QM", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean5 = StringUtils.equals((CharSequence) "", charSequenceArray0[5]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      String string5 = StringUtils.chop(" in an array of ");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(" in an array of", string5);
      
      String string6 = StringUtils.removeStart((String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.removePattern("-bq4M~c]&>$b5QM", " in an array of");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("-bq4M~c]&>$b5QM", string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "-bq4M~c]&>$b5QM");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", (String) null, "Failed to get parent directory from provider");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("Search and Replace array lengths don't match: ", string8);
      
      String string9 = StringUtils.join((Object[]) charSequenceArray0, " in an array of", 0, 1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      assertEquals("\r", string9);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.replaceChars("!B`[", "", "!B`[");
      assertNotNull(string0);
      assertEquals("!B`[", string0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.RegExUtils", (-820), 'C');
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.RegExUtils", (CharSequence) "org.apache.commons.lang3.RegExUtils");
      assertEquals(1, int0);
      
      int int1 = StringUtils.compare("NHu ^q@FMnG;", "org.apache.commons.lang3.RegExUtils", false);
      assertFalse(int1 == int0);
      assertEquals((-33), int1);
      
      String string1 = StringUtils.defaultIfBlank("org.apache.commons.lang3.RegExUtils", "C//h");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.RegExUtils", string1);
      
      String string2 = StringUtils.truncate("org.apache.commons.lang3.RegExUtils", 457, 1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("org.apache.commons.lang3.RegExUtils"));
      
      Spliterator<Object> spliterator0 = treeSet0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(treeSet0.contains("org.apache.commons.lang3.RegExUtils"));
      
      boolean boolean0 = treeSet0.add("");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("org.apache.commons.lang3.RegExUtils"));
      
      String string3 = StringUtils.join((Iterable<?>) treeSet0, '`');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("org.apache.commons.lang3.RegExUtils"));
      
      String string4 = StringUtils.difference("}y/w9v\"|@oP[", "Q4eG ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Q4eG ", string4);
      
      String string5 = StringUtils.replaceChars("DCqF", "", "Arguments cannot both be null");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("DCqF", string5);
      
      String string6 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Search and Replace array lengths don't match: ", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[5] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[7] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[8] = (CharSequence) "C//h";
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet1.contains(locale_Category1));
      
      String string0 = StringUtils.join(iterator0, '$');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertNotNull(string0);
      assertEquals("DISPLAY", string0);
      assertTrue(enumSet0.contains(locale_Category1));
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("%d|BD{F=se"));
      
      boolean boolean1 = priorityQueue1.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("%d|BD{F=se"));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("^q@FMnG;P^q@FMnG;", string3);
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("%d|BD{F=se"));
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      int int1 = StringUtils.indexOfAny((CharSequence) "%d|BD{F=se", (char[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.trimToEmpty("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)23;
      shortArray0[1] = (short) (-1890);
      shortArray0[2] = (short)3;
      String string3 = StringUtils.join(shortArray0, 'a');
      assertArrayEquals(new short[] {(short)23, (short) (-1890), (short)3}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("23a-1890a3", string3);
      
      String[] stringArray1 = StringUtils.split("...", "WFzD`/| E", (int) (short)2980);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "WFzD`/| E", "0#(");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "WFzD`/| E";
      charSequenceArray0[1] = (CharSequence) "23a-1890a3";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "0#(";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("0#(", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String string0 = StringUtils.rightPad("Ie!j='?To", 18, 'w');
      assertNotNull(string0);
      assertEquals("Ie!j='?Towwwwwwww", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ie!j='?To", (CharSequence) "Ie!j='?Towwwwwwww");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("s'}mY=vX&.");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", 'Q');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("w", string2);
      
      String string3 = StringUtils.removeFirst("1", "1");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "s'}mY=vX&.", (CharSequence) "Ie!j='?To", (-2378));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("Failed to get parent directory from provider");
      assertNotNull(string0);
      assertEquals("Failed to get parent directory from provider", string0);
      
      String string1 = StringUtils.chop("Failed to get parent directory from provider");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provide", string1);
      
      String string2 = StringUtils.join((Object[]) null, '', 1027, 1121);
      assertNull(string2);
      
      String string3 = StringUtils.center("Failed to get parent directory from provide", 14, 'o');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Failed to get parent directory from provide", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Failed to get parent directory from provider", 59);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '\"', 1517, 1517);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'q', 8192, 1366);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.unwrap("TgyB%<dQZ8'lT", "TgyB%<dQZ8'lT");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.capitalize("jQ'BOe3=:4QmzgG");
      assertNotNull(string0);
      assertEquals("JQ'BOe3=:4QmzgG", string0);
      
      String string1 = StringUtils.replaceOnce("Array element ", (String) null, "JQ'BOe3=:4QmzgG");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array element ", string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Array element ", "jQ'BOe3=:4QmzgG");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 's';
      String string3 = StringUtils.leftPad((String) null, 1619, "JQ'BOe3=:4QmzgG");
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("o@)%.", (-1749));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("o@)%.", string4);
      
      boolean boolean1 = StringUtils.isNumericSpace("o@)%.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.difference(" B#{&p", "jQ'BOe3=:4QmzgG");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("jQ'BOe3=:4QmzgG", string5);
      
      int int0 = StringUtils.length("Array element ");
      assertEquals(14, int0);
      
      byte[] byteArray0 = StringUtils.getBytes("Array element ", (String) null);
      assertEquals(14, byteArray0.length);
      assertNotNull(byteArray0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "jQ'BOe3=:4QmzgG";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string6 = StringUtils.join(objectArray0, '\u001D', 1926, 1619);
      assertEquals(2, objectArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.rightPad("Strings must not be null", (-14), '%');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.replace("x", "@sP=eU+\"[KUC;6Dsk", "Minimum abbreviation width with offset is %d", 396);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("x", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";r(jl-p.{['Y|A7:";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "j6:Eoj`usj6:Eoj`us");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '%', 2551, 25);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Strings must not be null";
      boolean boolean4 = StringUtils.containsAny((CharSequence) "j6:Eoj`usj6:Eoj`us", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "j6:Eoj`usj6:Eoj`us", 97, 25);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = "/";
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" vs ", "org.apache.commons.lang3.CharSequenceUtils", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.CharSequenceUtils", "");
      assertEquals(42, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.CharSequenceUtils", ":.1mXy;", (-3286));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string6);
      
      String string7 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals(2, stringArray0.length);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals(" v ", string8);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '4';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[5] = '4';
      charArray0[6] = '7';
      String string9 = StringUtils.rightPad("", (int) '4', "");
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("                                                    ", string9);
      
      String string10 = StringUtils.replacePattern(":.1mXy;", "", "");
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertNotNull(string10);
      assertEquals(":.1mXy;", string10);
      
      String string11 = StringUtils.abbreviate("&38&5&127", 11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertNotNull(string11);
      assertEquals("&38&5&127", string11);
      
      String string12 = StringUtils.remove("&38&5&127", "                                                    ");
      assertTrue(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string8));
      assertNotNull(string12);
      assertEquals("&38&5&127", string12);
      
      String string13 = StringUtils.mid((String) null, (-2479), (-3286));
      assertNull(string13);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Cv3";
      stringArray0[2] = "Cv3";
      String string1 = "x_n21H|NC3g9\\t{okiL";
      String string2 = StringUtils.capitalize("x_n21H|NC3g9\t{okiL");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("X_n21H|NC3g9\t{okiL", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("x_n21H|NC3g9\t{okiL");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBeforeLast("Cv3", "Cv3");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string4 = locale0.getDisplayName();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("Chinese (Taiwan)", string4);
      
      boolean boolean1 = StringUtils.isNumericSpace("Cv3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.difference((String) null, "x_n21H|NC3g9\t{okiL");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("x_n21H|NC3g9\t{okiL", string5);
      
      int int0 = StringUtils.length("X_n21H|NC3g9\t{okiL");
      assertEquals(18, int0);
      
      try { 
        StringUtils.getBytes("Chinese (Taiwan)", "bdCn`='t");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "\n?s ");
      assertNotNull(string0);
      assertEquals("\n?s ", string0);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String string0 = StringUtils.chomp("e");
      assertNotNull(string0);
      assertEquals("e", string0);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.chomp("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.mid("", (-2716), (-2716));
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("", "The type must not be null", false);
      assertEquals((-25), int0);
      
      String string1 = StringUtils.chomp("t\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("t", string1);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "HpwJf)mnl");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      String string2 = StringUtils.mid("C//h", 40, 40);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.reverseDelimited("HpwJf)mnl", '}');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("HpwJf)mnl", string3);
      
      String string4 = StringUtils.stripToEmpty("}DZp\"a<Y66lajGlxq+");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("}DZp\"a<Y66lajGlxq+", string4);
      
      String string5 = StringUtils.repeat("u#&", 2431);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[0];
      String string6 = StringUtils.join(byteArray0, '}');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "org.junitpioneer.jupiter.TempDirectory$CloseablePath");
      assertTrue(boolean0);
      
      String string7 = StringUtils.replace("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "", "", (-741));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string7);
      
      String string8 = StringUtils.stripToNull("NkI-");
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("NkI-", string8);
      
      String string9 = StringUtils.replaceIgnoreCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "io6E9qA", " ");
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string9);
      
      String string10 = StringUtils.chomp("e");
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertNotNull(string10);
      assertEquals("e", string10);
      
      String string11 = StringUtils.truncate("n;zj0?p", 40, 14);
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string10));
      assertTrue(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertNotNull(string11);
      assertEquals("", string11);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertEquals(51, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[2], "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtension", 27);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.vintage.Ex", string1);
      
      String string2 = StringUtils.replacePattern("", "", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("", "", "59<");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("io", "io6E9qA");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("io", string4);
      
      String string5 = StringUtils.capitalize("");
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.replace("Locale must not be nullLocale must not be null", "", "T'Ss", 51);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Locale must not be nullLocale must not be null", string6);
      
      boolean boolean3 = StringUtils.isNumericSpace("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string7 = StringUtils.strip("\n", "T'Ss");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("\n", string7);
      
      String string8 = StringUtils.mid("org.junitpio", (-2264), 27);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals("org.junitpio", string8);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.mid("", (-2727), 16);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = new String[6];
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.abbreviate("junit-pioneer", ")$V*b3.`<qpJbK", 1578);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("junit-pioneer", string2);
      
      String string3 = StringUtils.removeStart("p{InCombiningDiacriticalMarks}+", "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "junit-pioneer", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.leftPad("s'/n0D,;'2*M", 1122, (String) null);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter((String) null, string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNull(string6);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains('B'));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2980;
      shortArray0[1] = (short)2980;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)2980;
      shortArray0[4] = (short) (-1890);
      shortArray0[5] = (short)2419;
      shortArray0[6] = (short) (-1890);
      shortArray0[7] = (short)2980;
      shortArray0[8] = (short)2980;
      String string2 = StringUtils.join(shortArray0, 'x');
      assertArrayEquals(new short[] {(short)2980, (short)2980, (short) (-1), (short)2980, (short) (-1890), (short)2419, (short) (-1890), (short)2980, (short)2980}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("2980x2980x-1x2980x-1890x2419x-1890x2980x2980", string2);
      
      String[] stringArray0 = StringUtils.split("", "", (int) (short) (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", "WFzD`/| E");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string3 = StringUtils.wrap("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", string3);
      
      boolean boolean4 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("org.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtilsorg.apache.commons.lang3.ArrayUtils", charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(105, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[3] = "\r";
      stringArray0[4] = "\r";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-2302);
      shortArray0[3] = (short)23;
      String string3 = StringUtils.rightPad(string2, 3066);
      assertEquals(6, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("9", "\r");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("9", string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("-bq4M~c]&>$b5QM");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = StringUtils.trimToNull("!B`[");
      assertNotNull(string0);
      assertEquals("!B`[", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!B`[", (-2707));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!B`[";
      charSequenceArray0[1] = (CharSequence) "!B`[";
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "!B`[", 2, 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("!B`[");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 'F';
      String string1 = StringUtils.join(longArray0, 's');
      assertArrayEquals(new long[] {(-1L), 70L}, longArray0);
      assertEquals(2, longArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1s70", string1);
      
      String string2 = StringUtils.removeEnd("-1s70", "org.junitpioneer.jupiter.DefaultLocaleExtension[[t1+uxet#Q>g#d");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-1s70", string2);
      
      String[] stringArray0 = StringUtils.split("!B`[", "p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string3 = StringUtils.join((byte[]) null, 'B');
      assertNull(string3);
      
      boolean boolean4 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], (CharSequence) null);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = "j6:Eoj`us";
      int int0 = 24;
      String string1 = StringUtils.repeat("j6:Eoj`us", "j6:Eoj`us", 24);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", (CharSequence) "j6:Eoj`us", 24);
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "j6:Eoj`us", (-984));
      assertFalse(boolean0);
      
      int int2 = (-1777);
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-984), (-1777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -984
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 46, 'E');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string1);
      
      String string2 = StringUtils.replace(";r(jl-p.{['Y|A7:", (String) null, "Locale must not be null", 55);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(";r(jl-p.{['Y|A7:", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "Locale must not be null";
      stringArray0[3] = "Locale must not be null";
      stringArray0[3] = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      stringArray0[4] = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "C!kjQv");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removeAll("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(stringArray0[2]);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Locale must not be null", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "org.junitpioneer.jupiter.DefaultTimeZoneExtension", 97, 1431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.remove("IND}Jl@X(:imsw<g]0u", (String) null);
      assertNotNull(string0);
      assertEquals("IND}Jl@X(:imsw<g]0u", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "IND}Jl@X(:imsw<g]0u", (CharSequence) "IND}Jl@X(:imsw<g]0u");
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("IND}Jl@X(:imsw<g]0u", "IND}Jl@X(:imsw<g]0u");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("IND}Jl@X(:imsw<g]0u", string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "*b");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("#j55_Xvh", ";Wk=L5`q", 36);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[1] = "";
      String string0 = StringUtils.center("C!kjQv", 5, stringArray0[0]);
      assertEquals(12, stringArray0.length);
      assertNotNull(string0);
      assertEquals("C!kjQv", string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'W');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "C!kjQv", (CharSequence) "C!kjQv", 5);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceFirst("", "C!kjQv", "MY");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      char[] charArray0 = new char[0];
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.wrapIfMissing("H5 ?Qy&8AMiNR", "H5 ?Qy&8AMiNR");
      assertNotNull(string0);
      assertEquals("H5 ?Qy&8AMiNR", string0);
      
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToEmpty("");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[1] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[5] = (CharSequence) "H5 ?Qy&8AMiNR";
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "H5 ?Qy&8AMiNR", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringBefore("H5 ?Qy&8AMiNR", "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("H5 ?Qy&8AMiNRH5 ?Qy&8AMiNR", 5);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("y&8AMiNRH5 ?Qy&8AMiNR", string4);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[4], charSequenceArray0[0], 110);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "MnG;", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "!B`[";
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ':';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[0] = '';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'', 'T', 'e', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("Te\u0000", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "!B`[";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("!B`[", string1);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[1], (CharSequence[]) stringArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.repeat("!B`[", 2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("!B`[!B`[", string2);
      
      String string3 = StringUtils.substringBefore("!B`[!B`[", "!B`[");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "Te\u0000", charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.replace("[6=V+]9cNPWT@tg", "!B`[", "org.junitpioneer.jupiter.DefaultLocaleExtension", 2);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("[6=V+]9cNPWT@tg", string4);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.replaceChars("Object varargs must not be null", 'Q', 'B');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Object varargs must not be null", string1);
      
      String string2 = StringUtils.substring("O7b", (-841), (-841));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("", "\r\n");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = "C//h";
      String string5 = StringUtils.removeEnd((String) null, "Q4eG");
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.split("offset cannot be negative", "Y@gW.,4(#kb8");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.wrapIfMissing("Q4eG", '>');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(">Q4eG>", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("X\"a5!eQQs(ki9R", 29, (-841));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfterLast("Cannot store ", "Cannot store ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substring("", 0, 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEnd("C//h", "");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("C//h", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", (int) '>');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("Q4eGcHloOF%", '>');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(">Q4eGcHloOF%>", string5);
      
      String string6 = StringUtils.truncate("", 2685, 29);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = "j#DHd''DMt";
      // Undeclared exception!
      try { 
        StringUtils.unwrap("j#DHd''DMt", "j#DHd''DMt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("@DEFAULT");
      assertNotNull(string0);
      assertEquals("@DEFAULT", string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Failed to create custom temp directory");
      assertEquals(38, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(38, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(38, charBuffer0.capacity());
      assertEquals("Failed to create custom temp directory", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(38, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(38, charBuffer0.position());
      assertEquals(38, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(38, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(38, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(38, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=38 cap=41]", byteBuffer0.toString());
      assertEquals(41, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("Failed to create custom temp directory");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverseDelimited("", '7');
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      String string2 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("Failed to delete temp directory ", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Failed to delete temp directory ", string3);
      
      String string4 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(":.1mXy;", string4);
      
      String string5 = StringUtils.stripToEmpty("fkn>{F]N%J>.PvJ3VE");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("The Array must not be null", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("The Array must not be null", string6);
      
      String string7 = StringUtils.rotate("", (-3286));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("", string7);
      
      long[] longArray0 = new long[0];
      String string8 = StringUtils.join(longArray0, '4', 17, 17);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("", string8);
      
      byte[] byteArray0 = StringUtils.getBytes("Failed to delete temp directory ", (Charset) null);
      assertEquals(32, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us");
      assertNotNull(string0);
      assertEquals("j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(135, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(" vs ");
      assertNotNull(string0);
      assertEquals("vs", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("sVl~hwtA5Dn qF", "");
      assertNotNull(string0);
      assertEquals("sVl~hwtA5Dn qF", string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "sVl~hwtA5Dn qF", false);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("sVl~hwtA5Dn qF");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left("d,f3&HY4'_ldl?uZ", 1609);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("d,f3&HY4'_ldl?uZ", string1);
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "I", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.repeat((String) null, 2151);
      assertNull(string3);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) null, 2151, (-1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Minimum abbreviation width is %d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.substring("Locale must not be null", 2);
      assertNotNull(string0);
      assertEquals("cale must not be null", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cale must not be null", "cale must not be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("cale must not be null", "M8rqW.", "cale must not be null");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cale must not be null", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("cale must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      boolean boolean2 = StringUtils.isAlphanumericSpace("M8rqW.");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "cale must not be null";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.containsWhitespace("cale must not be null");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string2 = StringUtils.rotate("cale must not be null", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("ale must not be nullc", string2);
      
      String string3 = StringUtils.removePattern("cale must not be null", " Q4eG");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("cale must not be null", string3);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = (long) 'Y';
      longArray0[4] = 0L;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 'Y';
      String string4 = StringUtils.join(longArray0, '_');
      assertArrayEquals(new long[] {0L, 0L, 0L, 89L, 0L, 2L, 89L}, longArray0);
      assertEquals(7, longArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("0_0_0_89_0_2_89", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("cale must not be null", "", 11);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.stripStart("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = "J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB";
      String string1 = StringUtils.defaultString("J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB", string1);
      
      charSequenceArray0[0] = (CharSequence) "J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB";
      int int0 = 36;
      String string2 = StringUtils.rotate("J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB", 36);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("BJ0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|f", string2);
      
      charSequenceArray0[1] = (CharSequence) "BJ0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|f";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)99;
      byteArray0[0] = (byte)99;
      char char0 = '|';
      String string3 = StringUtils.join(byteArray0, '|');
      assertArrayEquals(new byte[] {(byte)99}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("99", string3);
      
      charSequenceArray0[2] = (CharSequence) "99";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB";
      String string4 = StringUtils.replaceEach("5_AK[L\"[~(>#H4zS", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("5_AK[L\"[~(>#H4zS", string4);
      
      charSequenceArray0[3] = (CharSequence) "5_AK[L\"[~(>#H4zS";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = "pY`EwENt";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.forName("J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // J0A+Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "X0K`1@\"", (CharSequence) "X0K`1@\"", 5);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, '^');
      assertNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) string0;
      String string2 = StringUtils.prependIfMissingIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", (CharSequence) null, charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string2);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, "C//h");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isMixedCase("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("qk!JpL=-0L3", (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNull(string4);
      
      String[] stringArray2 = new String[8];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "C//h";
      stringArray2[1] = null;
      stringArray2[2] = null;
      stringArray2[3] = null;
      stringArray2[4] = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      stringArray2[5] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray2[6] = null;
      stringArray2[7] = null;
      String string5 = StringUtils.firstNonBlank(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(8, stringArray2.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(string5);
      assertEquals("C//h", string5);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are notset");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", "5IYCu'&eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", "5IYCu'&eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "|(GbA4";
      stringArray0[4] = "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET";
      stringArray0[5] = "5IYCu'&eE!;#?*9";
      stringArray0[6] = "#O'";
      stringArray0[7] = null;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("|(GbA4"));
      
      float[] floatArray0 = new float[0];
      String string4 = StringUtils.join(floatArray0, 'R');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.normalizeSpace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", string5);
      
      String string6 = StringUtils.substringAfterLast("Failed to create default temp directory", string2);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("The type must not be null", "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.startsWithAny("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string7 = StringUtils.join((Object[]) stringArray0, "5IYCu'&eE!;#?*9");
      assertEquals(8, stringArray0.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("5IYCu'&eE!;#?*9@DefaultLocale can only be used with language tag if language, country, and variant are not set5IYCu'&eE!;#?*9The type must not be null5IYCu'&eE!;#?*9|(GbA45IYCu'&eE!;#?*9@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET5IYCu'&eE!;#?*95IYCu'&eE!;#?*95IYCu'&eE!;#?*9#O'5IYCu'&eE!;#?*9", string7);
      
      String string8 = StringUtils.upperCase("The type must not be null");
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("THE TYPE MUST NOT BE NULL", string8);
      
      String string9 = StringUtils.join((short[]) null, 'G');
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceChars("Qnkit", "\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Qnkit", string1);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ExpectedException");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("ExpectedException"));
      
      String string0 = StringUtils.replaceChars("", "\n^q@", "+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ExpectedException", 2274, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'ru`u=h", string1);
      
      String string2 = StringUtils.remove("y'Ru`U=h", 'Z');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      String string3 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Comparator should not be null.", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("y'Ru`U=h");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "y'Ru`U=h", (CharSequence) "Comparator should not be null.");
      assertTrue(boolean0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "H7;F3;=x,pwtphuZNS~");
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.normalizeSpace("y'Ru`U=h");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("y'Ru`U=h", string4);
      
      String string5 = StringUtils.abbreviate("", "Comparator should not be null.", 0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceChars("[[t1+uxet#Q>g#d", "Comparator should not be null.", "org.junitpioneer.jupiter.DefaultLocaleExtension[[t1+uxet#Q>g#d");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("[[i1+exri#Q>g#.", string6);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      String string0 = StringUtils.replaceChars("0p-1p797p0p0p0p115p0p-1[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", "0p-1p797p0p0p0p115p0p-1[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", "TJ");
      assertNotNull(string0);
      assertEquals("TJJJTJTJTJJTJJJ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "TJJJTJTJTJJTJJJ", 2);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "TJJJTJTJTJJTJJJ";
      stringArray0[1] = "0p-1p797p0p0p0p115p0p-1[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension";
      stringArray0[2] = "Y(h:V%~_";
      stringArray0[3] = "TJJJTJTJTJJTJJJ";
      stringArray0[4] = "TJ";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("TJJJTJTJTJJTJJJ", string1);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Rm", "Rm", "Rm");
      assertNotNull(string0);
      assertEquals("Rm", string0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) " ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("The type must not be null");
      assertNotNull(string0);
      assertEquals("Thetypemustnotbenull", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The type must not be null", (CharSequence) "Thetypemustnotbenull");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, "1v");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.leftPad(" B#{&p", 50, " B#{&p");
      assertNotNull(string0);
      assertEquals(" B#{&p B#{&p B#{&p B#{&p B#{&p B#{&p B#{&p B B#{&p", string0);
      
      String string1 = StringUtils.leftPad((String) null, (-2154));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference("4o*?k}).$X;)<", "Locale must not be null5&<tgP");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Locale must not be null5&<tgP", string2);
      
      int int0 = StringUtils.length(" B#{&p");
      assertEquals(6, int0);
      
      byte[] byteArray1 = StringUtils.getBytes((String) null, "");
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(0, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Locale must not be null5&<tgP";
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'i', (-1), 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'F', (int) (byte) (-41), 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -41
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can only resolve parameter of type ";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Can only resolve parameter of type ", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("...", "s'/n0D,;'2*M");
      assertEquals((-69), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Can only resolve parameter of type ", (CharSequence) "s'/n0D,;'2*M");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      char char0 = '\'';
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\'', (-1), (int) (byte)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      String string0 = StringUtils.unwrap("j#DHd''DMt", "Ptp99Q|");
      assertNotNull(string0);
      assertEquals("j#DHd''DMt", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("j#DHd''DMt");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "j#DHd''DMt";
      objectArray0[1] = (Object) "j#DHd''DMt";
      String string1 = StringUtils.leftPad("Cannot store ", 120);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                           Cannot store ", string1);
      
      String string2 = StringUtils.center("&FiTCd[T", 120, "j#DHd''DMt");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("HYc[`Ak$\"`s].+", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("HYc[`Ak$\"`s].+", string3);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-96);
      String string4 = StringUtils.join(byteArray0, '$');
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte)0, (byte)65, (byte)5, (byte) (-51), (byte) (-65), (byte) (-96)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("-1$57$0$65$5$-51$-65$-96", string4);
      
      String string5 = StringUtils.left("j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'", 120);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'";
      charSequenceArray0[2] = (CharSequence) "                                                                                                           Cannot store ";
      charSequenceArray0[3] = (CharSequence) "Cannot store ";
      charSequenceArray0[4] = (CharSequence) "HYc[`Ak$\"`s].+";
      boolean boolean1 = StringUtils.endsWithAny("Cannot store ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.defaultString("");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (char[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1325));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.difference("e", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-619L);
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '+';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'\'', '+'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains("\r"));
      
      String string1 = StringUtils.swapCase("\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'Z');
      assertEquals(3, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" ZvsZ ", string2);
      
      String string3 = StringUtils.stripToEmpty(" vs ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("vs", string3);
      
      boolean boolean2 = StringUtils.isNumericSpace("vs");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.trimToNull("\r");
      assertNull(string4);
      
      String string5 = StringUtils.wrap("org.apache.commons.lang3.StringUtilsUS|-adX#@2Rq", '3');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("3org.apache.commons.lang3.StringUtilsUS|-adX#@2Rq3", string5);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 2169, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.substringBetween("y'Ru`U=h", "y'Ru`U=h");
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("y'Ru`U=h");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeStart("D7)pzxcf", "o@)%.");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("D7)pzxcf", string3);
      
      String string4 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "s'/n0D,;'2*M");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "y'Ru`U=h", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.leftPad((String) null, (-1), "y'Ru`U=h");
      assertNull(string5);
      
      String string6 = StringUtils.replace((String) null, "beb>D~Kel|0R", (String) null, (-1));
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string7 = StringUtils.strip((String) null, "org.apache.commons.lang3.CharUtils");
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.substringsBetween("s'/n0D,;'2*M", (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("c", "j6:Eoj`us");
      assertNotNull(string0);
      assertEquals("c", string0);
      
      int int0 = StringUtils.compareIgnoreCase("j6:Eoj`us", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("c", 18, '^');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("c^^^^^^^^^^^^^^^^^", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("+oY47T=%l");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("c^^^^^^^^^^^^^^^^^");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "!XfO#?AlbzV(k2L", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.capitalize("+oY47T=%l");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("+oY47T=%l", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("c^^^^^^^^^^^^^^^^^");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string3 = StringUtils.join(intArray0, '[', 4, (-1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String[] stringArray2 = new String[0];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string4 = StringUtils.firstNonBlank(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNull(string4);
      
      String string5 = StringUtils.firstNonBlank(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "HpwJf)mnl");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("u#&", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[3] = 99;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2506;
      String string2 = StringUtils.replaceChars("NHu ", '&', '&');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("NHu ", string2);
      
      String string3 = StringUtils.unwrap("u_2G-", '&');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("u_2G-", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "NHu ";
      boolean boolean0 = StringUtils.startsWithAny("u_2G-", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase("HpwJf)mnl");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.difference("u#&", "HpwJf)mnl");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("HpwJf)mnl", string4);
      
      int int0 = StringUtils.length("NHu ");
      assertEquals(4, int0);
      
      String string5 = StringUtils.overlay("`+LxGkU]9WN!#qp-cm", "HpwJf)mnl", 0, (-4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("HpwJf)mnl`+LxGkU]9WN!#qp-cm", string5);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase((String) null, charSequenceArray0[0], charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "u#&", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.defaultIfEmpty("", "+pV@R");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("+pV@R", string7);
      
      String string8 = StringUtils.normalizeSpace("+pV@R");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("+pV@R", string8);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.substringBefore(" ", " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviate(" ", "", 2713, 2713);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Failed to create default temp directory";
      stringArray0[1] = "$'pVPflARQiaQ&DDfz";
      stringArray0[2] = "[[t1+uxet#Q>g#d";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("$'pVPflARQiaQ&DDfz");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty(" in an array of ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("in an array of", string1);
      
      String string2 = StringUtils.join((int[]) null, '8');
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      
      String string4 = StringUtils.substring("[[t1+uxet#Q>g#d", 0, (-1081));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.defaultlocaleextension", string5);
      
      boolean boolean1 = StringUtils.isEmpty("[[t1+uxet#Q>g#d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.wrap("[[t1+uxet#Q>g#d", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("[[t1+uxet#Q>g#d", string6);
      
      String string7 = StringUtils.truncate(" but was: ", 13);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(" but was: ", string7);
      
      String string8 = StringUtils.wrapIfMissing("[[t1+uxet#Q>g#d", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", string8);
      
      String string9 = StringUtils.abbreviate("Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", "Failed to create default temp directory", 13, 1006);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string0));
      assertNotNull(string9);
      assertEquals("Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", string9);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("2Un4IMp g 4~qm<", "2Un4IMp g 4~qm<");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.joinWith("2Un4IMp g 4~qm<", stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("2Un4IMp g 4~qm<", string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.joinWith("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("Aborting to protect against StackOverflowError - output of one loop is the input of another", objectArray0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'c', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", ".1rTm]\"p,F@>N\"");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".1rTm]\"p,F@>N\"", string1);
      
      int int0 = StringUtils.length(".1rTm]\"p,F@>N\"");
      assertEquals(14, int0);
      
      String string2 = StringUtils.overlay(".1rTm]\"p,F@>N\"", "aUwzLLKO4v<mL:#", (-1), 49);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("aUwzLLKO4v<mL:#", string2);
      
      boolean boolean0 = StringUtils.isAlpha(".1rTm]\"p,F@>N\"");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "aUwzLLKO4v<mL:#";
      objectArray0[3] = (Object) ".1rTm]\"p,F@>N\"";
      objectArray0[4] = (Object) (byte)0;
      String string3 = StringUtils.joinWith("aUwzLLKO4v<mL:#", objectArray0);
      assertEquals(5, objectArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("0aUwzLLKO4v<mL:#aUwzLLKO4v<mL:#aUwzLLKO4v<mL:#aUwzLLKO4v<mL:#.1rTm]\"p,F@>N\"aUwzLLKO4v<mL:#0", string3);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|B_{F?se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("ExceptionWasThrown"));
      
      boolean boolean1 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("%d|B_{F?se"));
      
      String string3 = StringUtils.repeat("ExceptionWasThrown", "%d|B_{F?se", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "m", (-1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '=', '='}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("========", string5);
      
      boolean boolean2 = StringUtils.isAlpha("P");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "^q@FMnG;";
      charSequenceArray0[1] = (CharSequence) "^q@FMnG;";
      charSequenceArray0[2] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[3] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "P";
      charSequenceArray0[5] = (CharSequence) "^q@FMnG;";
      charSequenceArray0[6] = (CharSequence) "========";
      charSequenceArray0[7] = (CharSequence) "ExceptionWasThrown";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      String string0 = StringUtils.getDigits("6E9q2A");
      assertNotNull(string0);
      assertEquals("692", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("692");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-2702);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'U', (-1847), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1847
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.SPACE;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[6], charSequenceArray0[2]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.swapCase("N");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("n", string2);
      
      String string3 = StringUtils.unwrap("n", 'F');
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("n", string3);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)708;
      shortArray0[1] = (short)671;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-3864);
      shortArray0[4] = (short)32;
      shortArray0[5] = (short) (-2511);
      shortArray0[6] = (short)4628;
      shortArray0[7] = (short)222;
      shortArray0[8] = (short)3823;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '1', (int) (short) (-1), 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      String string0 = StringUtils.substring("org.junitpioneer.jupiter.TempDirectory", 2);
      assertNotNull(string0);
      assertEquals("g.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.TempDirectory", "g.junitpioneer.jupiter.TempDirectory");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("cSP5~0H", "g.junitpioneer.jupiter.TempDirectory", "\n");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("cSP5~0H", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("M8rqW.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = 'u';
      int int0 = StringUtils.indexOfAny((CharSequence) "g.junitpioneer.jupiter.TempDirectory", charArray0);
      assertArrayEquals(new char[] {'q', 'u', 'u', 'u', 'u', 'u'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(3, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.containsAny((CharSequence) "cSP5~0H", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.join((long[]) null, ')', (-2860), 3);
      assertNull(string2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase((CharSequence) null, "M8rqW.");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.leftPad("iL1;kx ", 1683, (String) null);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "iL1;kx ";
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, charSequenceArray0[4]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'q', 2077, 2077);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String string0 = StringUtils.leftPad("D4\"g<)h", 10, "eM-rdc]dOs5S}5");
      assertNotNull(string0);
      assertEquals("eM-D4\"g<)h", string0);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) ":.1mXy;", (-3286), 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ":.1mXy;", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric(" vs ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" vs "));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(" vs "));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains(" vs "));
      
      String string0 = StringUtils.join(iterator0, 'F');
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(linkedList1.contains(":.1mXy;"));
      
      String string1 = StringUtils.rightPad(">#/cG", (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(">#/cG", string1);
      
      String string2 = StringUtils.substringBeforeLast(">#/cG", ">#/cG");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '<';
      intArray0[1] = 0;
      intArray0[2] = (-3286);
      intArray0[3] = (int) 'F';
      intArray0[4] = 0;
      String string3 = StringUtils.join(intArray0, 'z');
      assertArrayEquals(new int[] {60, 0, (-3286), 70, 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("60z0z-3286z70z0", string3);
      
      String string4 = StringUtils.leftPad(":.1mXy;", 60, 'F');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:.1mXy;", string4);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) ">#/cG", "j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string5 = StringUtils.repeat('<', (-1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.leftPad(" vs ", 60, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:.1mXy;");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:.1 vs ", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean3 = StringUtils.startsWithAny("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:.1 vs ", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceFirst(") /", "", "?2Mb");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("?2Mb) /", string3);
      
      Locale locale0 = new Locale("NHu ", "x#");
      assertEquals("nhu ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("nhu _X#", locale0.toString());
      assertEquals("X#", locale0.getCountry());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean3 = locale0.hasExtensions();
      assertEquals("nhu ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("nhu _X#", locale0.toString());
      assertEquals("X#", locale0.getCountry());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertEquals("nhu ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("nhu _X#", locale0.toString());
      assertEquals("X#", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("X#", string4);
      
      int int0 = StringUtils.lastOrdinalIndexOf("\r", ") /", 1834);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.lowerCase("e", locale0);
      assertEquals("nhu ", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("nhu _X#", locale0.toString());
      assertEquals("X#", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string5);
      assertEquals("e", string5);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "org.apache.commons.lang3.StringUtils", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("jkt"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("jkt"));
      
      String string3 = StringUtils.replaceIgnoreCase("VSy?oz]tDC~", "^q@FMnG;", "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("VSy?oz]tDC~", string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("a&", "VSy?oz]tDC~", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("VSy?oz]tDC~a&", string5);
      
      String string6 = StringUtils.right("+yoh`>Ew =gH", 4);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(" =gH", string6);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      String string0 = StringUtils.removePattern("|eoxhp&@m.M9OfvN7;p.", "|eoxhp&@m.M9OfvN7;p.");
      assertNotNull(string0);
      assertEquals("|eoxhp&@m.M9OfvN7;p.", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "|eoxhp&@m.M9OfvN7;p.", 57);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 5);
      assertNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("i;TY7LWO)B{D)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertNotSame(stringArray2, stringArray1);
      assertEquals(5, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("i;TY7LWO)B{D)", "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.uncapitalize("");
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat('&', 127);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) 5;
      longArray0[2] = (long) '&';
      longArray0[3] = (long) 5;
      longArray0[4] = (long) 127;
      String string5 = StringUtils.join(longArray0, '&');
      assertArrayEquals(new long[] {38L, 5L, 38L, 5L, 127L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("38&5&38&5&127", string5);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("", "jJ4CC1X", 55);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(0, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      
      String string6 = StringUtils.substringAfter("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", "jJ4CC1X");
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string7);
      
      String string8 = StringUtils.stripToNull("GIfC[K[");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("GIfC[K[", string8);
      
      Locale locale0 = Locale.forLanguageTag("UesR+T@{8hL9");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string9 = StringUtils.lowerCase("i;TY7LWO)B{D)", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("i;ty7lwo)b{d)", string9);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "i;ty7lwo)b{d)", 55);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.replaceEach("p|,&V~>>4,", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("p|,&V~>>4,", string0);
      
      String string1 = StringUtils.wrap("p|,&V~>>4,", 'D');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Dp|,&V~>>4,D", string1);
      
      String string2 = StringUtils.swapCase("Dp|,&V~>>4,D");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("dP|,&v~>>4,d", string2);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String string0 = StringUtils.repeat("&", 5066);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("wp.o-]gYP%7F2gm}k*", (String[]) null, (String[]) null);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("wp.o-]gYP%7F2gm}k*", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("wp.o-]gYP%7F2gm}k*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 28, "U^");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", 4, 1019);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I}3[", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeFirst("I}3[", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("I}3[", string3);
      
      String string4 = StringUtils.leftPad("", 187, "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("                                                                                                                                                                                           ", string4);
      
      String string5 = StringUtils.swapCase("");
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.unwrap("", 'I');
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String string0 = StringUtils.getDigits("x|QzM{ju4");
      assertNotNull(string0);
      assertEquals("4", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "x|QzM{ju4", (CharSequence) "4", 788);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.substringBetween("^q@FMnG;", "Locale must not be null");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      int int0 = 1015;
      String string1 = StringUtils.center((String) null, 1015);
      assertNull(string1);
      
      String string2 = StringUtils.center((String) null, 32);
      assertNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      String string3 = locale0.getDisplayScript();
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String string0 = StringUtils.rotate("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 382);
      assertNotNull(string0);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", "ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", 5);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripAccents("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ET@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT S", string1);
      
      String string2 = StringUtils.getDigits("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String string0 = StringUtils.strip(" ", "\r");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.split("=?`Iz@XyrVW!|", " vs ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.overlay("DefaultTimeZone", ", '", (-62), 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", 'DefaultTimeZone", string1);
      
      String string2 = StringUtils.replaceFirst("=?`Iz@XyrVW!|", "AP", ", 'DefaultTimeZone");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("=?`Iz@XyrVW!|", string2);
      
      Locale locale0 = new Locale("\r", " vs ");
      assertEquals("\r", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(" VS ", locale0.getCountry());
      assertEquals("\r_ VS ", locale0.toString());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("\r", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(" VS ", locale0.getCountry());
      assertEquals("\r_ VS ", locale0.toString());
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(" ", ", '", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.lowerCase(" ", locale0);
      assertEquals("\r", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(" VS ", locale0.getCountry());
      assertEquals("\r_ VS ", locale0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(" ", string3);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale0.stripExtensions();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string1 = locale2.getDisplayLanguage(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fran\u00E7ais", string1);
      
      String string2 = StringUtils.upperCase("", locale1);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeStartIgnoreCase("fran\u00E7ais", "Jv^#");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("fran\u00E7ais", string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("fran\u00E7ais");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "mUN";
      stringArray0[4] = "Jv^#";
      stringArray0[5] = "fran\u00E7ais";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("mUN", string4);
      
      boolean boolean2 = StringUtils.startsWithAny("fran\u00E7ais", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNotEmpty("");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty(" 7s ", " 7s ");
      assertNotNull(string0);
      assertEquals(" 7s ", string0);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      String string2 = StringUtils.repeat("cr", 565);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.leftPad(" but was: ", 56, "");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("                                               but was: ", string3);
      
      String string4 = StringUtils.swapCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.unwrap(string2, 'q');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '9');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("\r");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(""));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains(""));
      
      String string1 = StringUtils.join(iterator0, '<');
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList1.contains(""));
      
      String string2 = StringUtils.rightPad("S_?g_", (-3405));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("S_?g_", string2);
      
      String string3 = StringUtils.substringBeforeLast("S_?g_", "B(T");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("S_?g_", string3);
      
      String string4 = StringUtils.join(intArray1, '<');
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("13", string4);
      
      String string5 = StringUtils.leftPad("", 0, '%');
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.truncate("\"UFp~7che2%", 0, 0);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean3 = StringUtils.isNumericSpace("S_?g_");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = StringUtils.ordinalIndexOf("B(T", "", 34);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("?1~Sp-dHA{", "?1~Sp-dHA{", 1199);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("C=~-", "\n");
      assertNotNull(string0);
      assertEquals("\nC=~-\n", string0);
      
      String string1 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("r&Aj?VWK@");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "u#&", 361);
      assertNull(stringArray1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, "org.junitpioneer.jupiter.TempDirectory$CloseablePath", (CharSequence[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter("~c2F0RLZgV", "AalLN{DyA6o zwb");
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.rightPad("", 2627, 'O');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits(string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertEquals(1, stringArray0.length);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeFirst("", "The String must not be empty");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.rotate("1", 2627);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("1", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("The String must not be empty", 2627, (-1497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "9k", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      int int1 = StringUtils.length((CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      String string0 = StringUtils.capitalize("jQ'BOe3=:4QmzgG");
      assertNotNull(string0);
      assertEquals("JQ'BOe3=:4QmzgG", string0);
      
      String string1 = StringUtils.replaceOnce("Array element ", (String) null, "JQ'BOe3=:4QmzgG");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array element ", string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Array element ", "jQ'BOe3=:4QmzgG");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (long) 's';
      longArray0[2] = (-1L);
      longArray0[3] = 1L;
      longArray0[5] = (-1L);
      longArray0[6] = (-3095L);
      longArray0[7] = (long) 's';
      String string3 = StringUtils.substringAfterLast("Array element ", "Array element ");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEnd("JQ'BOe3=:4QmzgG", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("JQ'BOe3=:4QmzgG", string4);
      
      String[] stringArray0 = StringUtils.split("", "yA)eJ1");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 5);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("i;TY7LWO)B{D)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("J0A+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("J0A+", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Threshold must not be negative");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("s4$", (-1853), ')');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("s4$", string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Threshold must not be negative");
      assertNotSame(stringArray2, stringArray1);
      assertEquals(10, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("\r");
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(0, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray3);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals("i;TY7LWO)B{D)", charSequence0);
      
      String[] stringArray4 = StringUtils.stripAll(stringArray3, "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray4);
      assertSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertEquals(0, stringArray3.length);
      assertEquals(0, stringArray4.length);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertNotNull(stringArray4);
      
      String string4 = StringUtils.normalizeSpace("}");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("}", string4);
      
      String string5 = StringUtils.abbreviate("|='/Yh^$zIW85N", "`BnK+s", 20);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("|='/Yh^$zIW85N", string5);
      
      String[] stringArray5 = StringUtils.split("\r", ')');
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray1);
      assertEquals(1, stringArray5.length);
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertNotNull(stringArray5);
      
      String[] stringArray6 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray4);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray5);
      assertNotSame(stringArray1, stringArray6);
      assertNotSame(stringArray6, stringArray3);
      assertNotSame(stringArray6, stringArray5);
      assertNotSame(stringArray6, stringArray1);
      assertNotSame(stringArray6, stringArray4);
      assertNotSame(stringArray6, stringArray2);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray6.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray4));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertNotNull(stringArray6);
      
      String string6 = StringUtils.removeStart("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB", "J0A+");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB", string6);
      
      String string7 = StringUtils.replaceEachRepeatedly("&38&5&127", stringArray6, stringArray4);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray4);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray5);
      assertNotSame(stringArray1, stringArray6);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray5);
      assertSame(stringArray3, stringArray4);
      assertNotSame(stringArray3, stringArray6);
      assertSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray5);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray6);
      assertNotSame(stringArray6, stringArray3);
      assertNotSame(stringArray6, stringArray5);
      assertNotSame(stringArray6, stringArray1);
      assertNotSame(stringArray6, stringArray4);
      assertNotSame(stringArray6, stringArray2);
      assertEquals(1, stringArray1.length);
      assertEquals(0, stringArray3.length);
      assertEquals(0, stringArray4.length);
      assertEquals(1, stringArray6.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray4));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray5));
      assertFalse(stringArray1.equals((Object)stringArray6));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray5));
      assertFalse(stringArray3.equals((Object)stringArray6));
      assertFalse(stringArray4.equals((Object)stringArray5));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray6));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertNotNull(string7);
      assertEquals("&38&5&127", string7);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(string3));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, (String) null, 5, 20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 20
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "", 34, 57);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 57
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("", "j6:Eoj`us");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("j6:Eoj`us", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("", 18, '^');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^^^^^^^^^^^^^^^^^^", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("+oY47T=%l");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("^^^^^^^^^^^^^^^^^^");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "!XfO#?AlbzV(k2L", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.capitalize("+oY47T=%l");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("+oY47T=%l", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("^^^^^^^^^^^^^^^^^^");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.replaceChars("io6E9qA", '2', '[');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("io6E9qA", string3);
      
      boolean boolean3 = StringUtils.startsWithAny("^^^^^^^^^^^^^^^^^^", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("");
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string4 = StringUtils.difference("Y>2e{", "io6E9qA");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("io6E9qA", string4);
      
      int int1 = StringUtils.length("^^^^^^^^^^^^^^^^^^");
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      String string5 = StringUtils.overlay("io6E9qA", "Aborting to protect against StackOverflowError - output of one loop is the input of another@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nullQu^&58A<[d?O", 127, 127);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("io6E9qAAborting to protect against StackOverflowError - output of one loop is the input of another@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nullQu^&58A<[d?O", string5);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Y>2e{", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("t\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEnd("org.apache.commons.lang3.StringUtils", "US|-adX#@2Rq");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("org.apache.commons.lang3.StringUtils");
      assertEquals(36, intArray0.length);
      assertNotNull(intArray0);
      
      String string2 = StringUtils.trimToEmpty("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB", string2);
      
      int[] intArray1 = StringUtils.toCodePoints("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
      assertNotSame(intArray1, intArray0);
      assertEquals(31, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "US|-adX#@2Rq", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB"));
      
      String string3 = StringUtils.join(iterator0, 'G');
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB"));
      
      String string4 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils", 9);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.substringBeforeLast((String) null, "#/N%");
      assertNull(string5);
      
      String string6 = StringUtils.join(intArray1, 'f');
      assertNotSame(intArray1, intArray0);
      assertEquals(31, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("81f52f101f71f99f72f108f127f111f79f70f37f81f86f100f122f58f67f99f91f53f105f40f36f66f44f119f77f124f102f66", string6);
      
      String string7 = StringUtils.leftPad("Q4eGcHloOF%", 9, 'G');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("Q4eGcHloOF%", string7);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, "Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string8 = StringUtils.repeat('\"', (-1144));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("[[t1+uxet#Q>g#d");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty("[&$IW");
      assertNotNull(string1);
      assertEquals("[&$IW", string1);
      
      String string2 = StringUtils.join((int[]) null, 'q');
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty((String) null);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("Locale must not be null", (int) (short)52, (int) (short)52);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isEmpty(" in an array of ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.wrap("", "^.ltY_@m9]pL&ya!");
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("maxWith cannot be negative", (-1081));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Failed to create default temp directory";
      stringArray0[1] = "$'pVPflARQiaQ&DDfz";
      stringArray0[2] = "[[t1+uxet#Q>g#d";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("$'pVPflARQiaQ&DDfz");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty(" in an array of ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("in an array of", string1);
      
      String string2 = StringUtils.join((int[]) null, '8');
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      
      String string4 = StringUtils.substring("[[t1+uxet#Q>g#d", 0, (-1081));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("org.junitpioneer.jupiter.defaultlocaleextension", string5);
      
      boolean boolean1 = StringUtils.isEmpty("[[t1+uxet#Q>g#d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.wrap("[[t1+uxet#Q>g#d", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("[[t1+uxet#Q>g#d", string6);
      
      String string7 = StringUtils.truncate(" but was: ", 13);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(" but was: ", string7);
      
      String string8 = StringUtils.center("$'pVPflARQiaQ&DDfz", 0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("$'pVPflARQiaQ&DDfz", string8);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "[[t1+uxet#Q>g#d", (CharSequence) "[[t1+uxet#Q>g#d", (-1078));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", 4, 1019);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I}3[", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeFirst("I}3[", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("I}3[", string3);
      
      String string4 = StringUtils.upperCase("");
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "I}3[");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.remove("blank_blank_blank_2014", "I}3[");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("blank_blank_blank_2014", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "blank_blank_blank_2014";
      charSequenceArray0[2] = (CharSequence) "blank_blank_blank_2014";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "blank_blank_blank_2014";
      charSequenceArray0[8] = (CharSequence) "I}3[";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("G;", "h: 0", "blank_blank_blank_2014");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("G;", string6);
      
      String string7 = StringUtils.repeat('Z', 1532);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      char char0 = '=';
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      char char1 = '6';
      char char2 = '~';
      String string2 = StringUtils.rightPad("ExceptionWasThrown", 0, '~');
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ExceptionWasThrown", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "ExceptionWasThrown", 322);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.reverse("rEfQq,@Bw+,q!Z.>G");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("G>.Z!q,+wB@,qQfEr", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("^q@FMnG;", "U\"(\"LG,FQw\"XD*[5 ");
      assertEquals(0.28, double0, 0.01);
      
      String string4 = "y'Ru`U=hu#&";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("G>.Z!q,+wB@,qQfEr", "U\"(\"LG,FQw\"XD*[5 ", "y'Ru`U=hu#&");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // U\"(\"LG,FQw\"XD*[5 
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[0] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("0.0>0.0>0.0>1.0>-1.0", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0.0>0.0>0.0>1.0>-1.0", "0.0>0.0>0.0>1.0>-1.0");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.DefaultTimeZoneExtension", "l", "0.0>0.0>0.0>1.0>-1.0");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.Defau0.0>0.0>0.0>1.0>-1.0tTimeZoneExtension", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "0.0>0.0>0.0>1.0>-1.0";
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[3] = object1;
      String string2 = StringUtils.join(objectArray0, 'y');
      assertEquals(4, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = 'y';
      charArray0[4] = '>';
      charArray0[5] = 'y';
      charArray0[6] = '<';
      charArray0[7] = '>';
      charArray0[8] = '>';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "0.0>0.0>0.0>1.0>-1.0yyjava.lang.Object@25c57edfyjava.lang.Object@35c3db88", charArray0);
      assertArrayEquals(new char[] {'y', '>', '>', 'y', '>', 'y', '<', '>', '>'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string3 = StringUtils.normalizeSpace("org.junitpioneer.jupiter.Defau0.0>0.0>0.0>1.0>-1.0tTimeZoneExtension");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.Defau0.0>0.0>0.0>1.0>-1.0tTimeZoneExtension", string3);
      
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.Defau0.0>0.0>0.0>1.0>-1.0tTimeZoneExtension";
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceAll("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string1);
      
      boolean boolean0 = StringUtils.isAlpha("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      String string2 = StringUtils.join(objectArray0, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string2);
      
      String string3 = StringUtils.join(charArray0, 'j');
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("j", string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)20;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "R,gTb#o5{55q0j";
      stringArray0[1] = "j@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      stringArray0[2] = "j@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      stringArray0[3] = "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      stringArray0[4] = "j";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("R,gTb#o5{55q0j", string4);
      
      String string5 = StringUtils.join(objectArray0, 'j');
      assertEquals(2, objectArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("jj@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string5);
      
      boolean boolean1 = StringUtils.isNumericSpace("\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.trimToNull("Object varargs must not be null");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("Object varargs must not be null", string6);
      
      String string7 = StringUtils.wrap("org.apache.commons.lang3.Charsets", 'j');
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("jorg.apache.commons.lang3.Charsetsj", string7);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      String string0 = StringUtils.wrap("maxWith cannot be negative", 'b');
      assertNotNull(string0);
      assertEquals("bmaxWith cannot be negativeb", string0);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("2[&&M\"_3#{b@=*$7\"\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.substring("P'F|@+O;b@k'", 695);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String string0 = StringUtils.repeat('X', (-886));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap(", Length: ", 'X');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", Length: ", string1);
      
      String string2 = "C!kjQv";
      String string3 = StringUtils.replacePattern("Arguments cannot both be null", "C!kjQv", "Arguments cannot both be null");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Arguments cannot both be null", string3);
      
      String string4 = StringUtils.substring("Y%7RoX]f{^E5IvP0", 103);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.center("{{1<siVQ1J(g", (-886), (String) null);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("{{1<siVQ1J(g", string5);
      
      String string6 = StringUtils.upperCase("Arguments cannot both be null");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("ARGUMENTS CANNOT BOTH BE NULL", string6);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) "ARGUMENTS CANNOT BOTH BE NULL";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'X', (-2291), 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)11;
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains((byte)16));
      
      String string0 = StringUtils.join((List<?>) stack0, "y;", 32, (int) (byte)11);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(stack0.contains((byte)16));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (int) (byte)16);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rightPad((String) null, 112, 'T');
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1611), (int) (byte)16);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat((String) null, (String) null, 32);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      String string0 = "j6:Eoj`us";
      int int0 = 7;
      String string1 = StringUtils.repeat("j6:Eoj`us", "j6:Eoj`us", 7);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "j6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`usj6:Eoj`us", (CharSequence) "j6:Eoj`us", 7);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "j6:Eoj`us", (-984));
      assertFalse(boolean0);
      
      int int2 = (-1777);
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-984), (-1777));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -984
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.repeat("/\"w%=P|?^e", "/\"w%=P|?^e", (-506));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "oZg.apache.commons.lang3.Carsets", (CharSequence) "p[yd`vjd#7f,\n", 22);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) ":.1mXy;", (-3286), 0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = 'F';
      charArray0[4] = 'T';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'e', 'F', 'T'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("FTeFT", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.swapCase(":.1mXy;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":.1MxY;", string1);
      
      String string2 = StringUtils.unwrap("FTeFT", 'F');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("FTeFT", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" be null");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(":.1mXy;"));
      
      boolean boolean2 = arrayList0.add((Object) ":.1mXy;");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(":.1mXy;"));
      assertFalse(arrayList0.contains(0));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains(":.1mXy;"));
      assertFalse(arrayList0.contains(0));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(":.1mXy;", string3);
      assertTrue(arrayList0.contains(":.1mXy;"));
      assertFalse(arrayList0.contains(0));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("search and replace array lengths don't match: search and replace array lengths don't match: ", string4);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2707));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.mid("", (-2707), (-2707));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited((String) null, 'N');
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("a2\"?X'~?W9`j}*6=!aT");
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("a2\"?X'~?W9`j}*6=!aT", string3);
      
      String string4 = StringUtils.repeat("", 99);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "a2\"?X'~?W9`j}*6=!aT", "io6E9A");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replace("iQI;oO;{f", "", "", 99);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("iQI;oO;{f", string5);
      
      String string6 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string6);
      
      String string7 = StringUtils.replaceIgnoreCase("/##[c2dZ#%y6", "io6E9A", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("/##[c2dZ#%y6", string7);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = 'N';
      charArray0[4] = 'N';
      charArray0[5] = 'N';
      charArray0[6] = 'N';
      charArray0[7] = 'N';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "/##[c2dZ#%y6", charArray0);
      assertArrayEquals(new char[] {'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.mid("\r", 1331, 1331);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited("@", '&');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@", string2);
      
      String string3 = StringUtils.stripToEmpty("XP%Vc6E%p'r/");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("XP%Vc6E%p'r/", string3);
      
      String string4 = StringUtils.repeat("org.apache.commons.lang3.ArrayUtils", 99);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "@", "a2\"?X'~?W9`j}*6=!aT");
      assertTrue(boolean0);
      
      String string5 = StringUtils.replace("MAN'F57'k z.8]uO+", "The type must not be null", "\r", 54);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("MAN'F57'k z.8]uO+", string5);
      
      String string6 = StringUtils.stripToNull(" ");
      assertNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase("r[9Ty9l.7VAWo*aj", "b$*^+.PB4 8", "WTKZiK2B[N>RYAy[;");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("r[9Ty9l.7VAWo*aj", string7);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "@", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("s'/n0}D,;'2*M", "+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals(72, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "...", (CharSequence) "...");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = 50;
      String string2 = StringUtils.leftPad(" B#{&p", 50, "s'/n0}D,;'2*M");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("s'/n0}D,;'2*Ms'/n0}D,;'2*Ms'/n0}D,;'2*Ms'/n0 B#{&p", string2);
      
      String string3 = StringUtils.leftPad("org.apache.commons.lang3.CharUtils", 2682);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.apache.commons.lang3.CharUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.difference("s'/n0}D,;'2*M", "b\u0004_@$S`NX");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("b\u0004_@$S`NX", string4);
      
      int int3 = StringUtils.length("4o*?a}).$X;)<");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(13, int3);
      
      try { 
        StringUtils.getBytes("+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension", "\"LfOGHNu~7+}{OLWd%");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string0 = "#O'";
      String string1 = StringUtils.replace("#O'", "Can only resolve parameter of type ", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#O'", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("Can only resolve parameter of type ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("#O'", "Can only resolve parameter of type ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("#O'", "Can only resolve parameter of type ", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 36
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      String string0 = StringUtils.repeat('2', 7);
      assertNotNull(string0);
      assertEquals("2222222", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "2222222", (CharSequence) "2222222", 13);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) null, '2', 13, 395);
      assertNull(string1);
      
      String string2 = StringUtils.center("&38&5&127", 7, '2');
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&38&5&127", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&38&5&127");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string3 = StringUtils.join(floatArray0, '4');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("0.0", string3);
      
      String string4 = StringUtils.normalizeSpace("&38&5&127");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("&38&5&127", string4);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("&38&5&127", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("~>T>NJ)TA;", (String) null, 28);
      assertNotNull(string0);
      assertEquals("~>T>NJ)TA;", string0);
      
      String string1 = StringUtils.defaultIfBlank((String) null, ", '");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", '", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", '", "~>T>NJ)TA;");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ", '";
      charSequenceArray0[1] = (CharSequence) ", '";
      charSequenceArray0[2] = (CharSequence) ", '";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) ", '";
      charSequenceArray0[5] = (CharSequence) ", '";
      charSequenceArray0[6] = (CharSequence) "~>T>NJ)TA;";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "~>T>NJ)TA;";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(charSequenceArray0[6]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.containsWhitespace("~>T>NJ)TA;");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.rotate(" is not in the range '0' - '9'", 11);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("e '0' - '9' is not in the rang", string2);
      
      String string3 = StringUtils.removePattern(" is not in the range '0' - '9'", "e '0' - '9' is not in the rang");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(" is not in the range '0' - '9'", string3);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 'm');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("wqOG:yTN", "u#&", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.wrap((String) null, "wqOG:yTN");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceAll("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string1);
      
      boolean boolean0 = StringUtils.isAlpha("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      String string2 = StringUtils.join(objectArray0, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("j@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string2);
      
      String string3 = StringUtils.join(charArray0, 'j');
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("j", string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-73);
      String string4 = StringUtils.join(byteArray0, 'v');
      assertArrayEquals(new byte[] {(byte) (-96), (byte)20, (byte)109, (byte) (-3), (byte)69, (byte) (-73)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("-96v20v109v-3v69v-73", string4);
      
      String string5 = StringUtils.left("\r", (byte) (-96));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.endsWithAny("j", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.stripStart("&<V]eFfS9SSH6OdWF", "");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("&<V]eFfS9SSH6OdWF", string6);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("\n", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.substring("\n", (-992));
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.abbreviateMiddle("|TN:4dG49Hdd$;9_B\"j", "_o{s5>8haPQ~U1_>hM", 2362);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("|TN:4dG49Hdd$;9_B\"j", string1);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      String string0 = StringUtils.capitalize("s'}mY=vX&.");
      assertNotNull(string0);
      assertEquals("S'}mY=vX&.", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("S'}mY=vX&.");
      assertArrayEquals(new int[] {83, 39, 125, 109, 89, 61, 118, 88, 38, 46}, intArray0);
      assertEquals(10, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("Ie!j'?To");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Ie!j'?To", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join(intArray0, '!', (-1), (-1361));
      assertArrayEquals(new int[] {83, 39, 125, 109, 89, 61, 118, 88, 38, 46}, intArray0);
      assertEquals(10, intArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat('!', (-1361));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "^q@FMnG;", "HpwJf)mnlu#&");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace((String) null, (String) null, "^q@FMnG;", 769);
      assertNull(string3);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase((String) null, "jkt", "ExceptionWasThrown");
      assertNull(string5);
      
      String string6 = StringUtils.trimToNull("Uf");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("Uf", string6);
      
      String string7 = StringUtils.normalizeSpace((String) null);
      assertNull(string7);
      
      int int1 = StringUtils.compareIgnoreCase("jkt", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(0));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains(0));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains(0));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains(0));
      
      boolean boolean1 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains(0));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("ExceptionWasThrown"));
      assertFalse(priorityQueue1.contains(0));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ExceptionWasThrownP^q@FMnG;", string3);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("ExceptionWasThrown"));
      assertFalse(priorityQueue1.contains("jkt"));
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("P", " vs ", (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("fN i;xY+~", "P", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("PfN i;xY+~", string5);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("o]0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "offset cannot be negative", true);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("offset cannot be negative");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      String string2 = StringUtils.removeAll("TgyB%<dQZ8'lT", "nKu-`,<85i<|HB");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("TgyB%<dQZ8'lT", string2);
      
      String string3 = StringUtils.join((List<?>) null, "org.junitpioneer.vintage.TimeoutExtension", 2013, 1486);
      assertNull(string3);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "J[(", (CharSequence) "y'Ru`U=h", 1027);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "&38&5&127";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "y'Ru`U=h";
      String string1 = StringUtils.join(objectArray0, '4', 395, 16);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.center((String) null, 16, 'o');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) '4';
      floatArray0[3] = (float) 395;
      floatArray0[4] = (float) 395;
      floatArray0[5] = (float) 395;
      String string3 = StringUtils.join(floatArray0, '5');
      assertArrayEquals(new float[] {52.0F, 16.0F, 52.0F, 395.0F, 395.0F, 395.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("52.0516.0552.05395.05395.05395.0", string3);
      
      String string4 = StringUtils.normalizeSpace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string4);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("$Za^L4.", "$Za^L4.");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.stripToEmpty("fkn>{F]N%J>.PvJ3VE");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string6);
      
      String string7 = StringUtils.replaceEachRepeatedly("The Array must not be null", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("The Array must not be null", string7);
      
      String string8 = StringUtils.rotate("", (-3286));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("", string8);
      
      long[] longArray0 = new long[0];
      String string9 = StringUtils.join(longArray0, '4', 17, 17);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = '*';
      charArray0[3] = '|';
      charArray0[4] = 's';
      charArray0[5] = 'b';
      charArray0[6] = ')';
      String string2 = StringUtils.join(charArray0, 'O');
      assertArrayEquals(new char[] {'u', '*', '\u0000', '|', 's', 'b', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("uO*O\u0000O|OsObO)", string2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'O';
      doubleArray0[1] = (double) '*';
      String string3 = StringUtils.chop("+yoh`>Ew =gHi");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("+yoh`>Ew =gH", string3);
      
      String string4 = StringUtils.removeStart("org.junitpioneer.jupiter.DefaultLocaleExtension", "+yoh`>Ew =gH");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension", (CharSequence) null, 9);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.mid("org.junitpioneer.jupiter.DefaultLocaleExtension", (-886), (-1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "org.junitpioneer.jupiter.DefaultLocaleExtension", 0);
      assertFalse(boolean0);
      
      String string6 = StringUtils.stripToEmpty("");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "\r";
      stringArray0[4] = "\r";
      stringArray0[5] = "\r";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)4;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)76;
      shortArray0[5] = (short)2419;
      String[] stringArray1 = StringUtils.splitByWholeSeparator("HpwJf)mnl", "", (int) (short)4);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "HpwJf)mnl");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (int) (short)2419, (int) (short)3);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("'h ]4'J`>k", "l!4Z;D bj]SxW& #", false);
      assertFalse(int1 == int0);
      assertEquals((-69), int1);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.unwrap((String) null, '-');
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 1, 1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing((String) null, '-');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("%d|BD{F=se");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(charSequence0);
      
      boolean boolean1 = StringUtils.containsWhitespace("^q@FMnG;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = "\\u";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, string3, 30);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNull(stringArray1);
      
      String string4 = StringUtils.wrapIfMissing("^q@FMnG;", "a&");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("a&^q@FMnG;a&", string4);
      
      String string5 = StringUtils.join((String[]) null);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.isEmpty("%d|BD{F=se");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("38&5&38&5", "^q@FMnG;", (-21));
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string6 = StringUtils.trimToEmpty("uh");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("uh", string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("cBa`2%<r", "uh", stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(string7);
      assertEquals("uhcBa`2%<r", string7);
      
      String string8 = StringUtils.substringAfter("r&Aj?VWK@", "ExceptionWasThrown");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("", string8);
      
      String string9 = StringUtils.repeat("J0A+", 93);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
      assertEquals("J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+J0A+", string9);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("cBa`2%<r");
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      boolean boolean0 = linkedList0.add((Object) iterator0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 's');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = "\r";
      String string1 = StringUtils.removeAll("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("\r");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains("\r"));
      
      boolean boolean3 = linkedList1.add((Object) null);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(linkedList1.contains("\r"));
      
      char char0 = '<';
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, '<');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.copyOf(enumSet0);
      assertEquals(2, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      
      String string0 = StringUtils.join(iterator0, '$');
      assertEquals(2, enumSet0.size());
      assertNotSame(enumSet0, enumSet1);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertNotNull(string0);
      assertEquals("DISPLAY$FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("Cannot store ", '>', '>');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Cannot store ", string1);
      
      String string2 = StringUtils.substring("", 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("Cannot store ", "");
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Cannot store ", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Cannot store ", "");
      assertEquals(0.0, double0, 0.01);
      
      String string4 = StringUtils.removeEnd("C//h", "");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("C//h", string4);
      
      String[] stringArray0 = StringUtils.split("Cannot store ", "Cannot store ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("Q4eGcHloOF%", '>');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(">Q4eGcHloOF%>", string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string6 = StringUtils.CR;
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("\r", string6);
      
      int int1 = StringUtils.getFuzzyDistance("r*JVP]", "\r", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string7 = StringUtils.replaceIgnoreCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "Cannot store ", "A.vI&");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string7);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      long[] longArray0 = new long[0];
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.left("The type must not be null", 0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.equalsAny("The type must not be null", stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOf((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) "The type must not be null", 109);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.repeat("#O'", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 's');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removeEnd("^q@FMnG;", "C//h");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("^q@FMnG;", string5);
      
      String[] stringArray1 = StringUtils.split("", "r*JVP]");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 's');
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("sorg.apache.commons.lang3.StringUtils", string6);
      
      Vector<String> vector0 = new Vector<String>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("5IYCu'`eE!;#?*9"));
      
      String string7 = StringUtils.join((List<?>) vector0, "", 116, (-1));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(vector0.contains("5IYCu'`eE!;#?*9"));
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "|(GbA4";
      stringArray0[4] = "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET";
      stringArray0[5] = "5IYCu'`eE!;#?*9";
      stringArray0[6] = "#O'";
      stringArray0[7] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string4);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compareIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "s'/n0D,;'2*M");
      assertEquals((-51), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "5IYCu'`eE!;#?*9", (CharSequence) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.leftPad("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 896, string2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEqualsstring5);
      
      String string6 = StringUtils.removePattern("Array element ", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Array element ", string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string2, (CharSequence) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.replaceIgnoreCase("5IYCu'`eE!;#?*9", "Search and Replace array lengths don't match: ", "Skzp'HIMsuR");
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("5IYCu'`eE!;#?*9", string7);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.stripEnd("X%GF)S[om'd?4:3", "X%GF)S[om'd?4:3");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits("q&");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("tT;9", "X%GF)S[om'd?4:3");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringBetween("org.aace.commons.lang3.ChaUtils", "");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "org.aace.commons.lang3.ChaUtils");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains(""));
      
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean3 = linkedList0.add((Object) charSequenceArray0[3]);
      assertEquals(1, linkedList0.size());
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains("\r"));
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean4 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5);
      
      String string4 = StringUtils.difference("", "-bq4M~c]&>$b5QM");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("-bq4M~c]&>$b5QM", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean6 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      String string5 = StringUtils.chop(" in an array of ");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(" in an array of", string5);
      
      String string6 = StringUtils.removeStart((String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.replace("", "\r", (String) null, 1);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      
      boolean boolean7 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7);
      
      String string8 = StringUtils.strip((String) null, " in an array of");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(70, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
      assertEquals(70, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.replaceEach("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(70, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError - output of one loop is the input of another", string1);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Nlo1%d$?tX[.cDI*", "v ");
      assertNotNull(string0);
      assertEquals("Nlo1%d$?tX[.cDI*", string0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'e');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String string0 = StringUtils.substringBefore("v ", "v ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = null;
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'S', 4, 40);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 40
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^q@FMnG;", 'H');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("^q@FMnG;", "NHu ");
      assertNotNull(string0);
      assertEquals("NHu ^q@FMnG;NHu ", string0);
      
      int int0 = StringUtils.compareIgnoreCase("\"/@&z`0^", "_*9v6+=TX^<:");
      assertEquals((-61), int0);
      
      String string1 = StringUtils.left("Q4eGcHloOF%", (-61));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2002);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.center("\"/@&z`0^", 2327, 'B');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("QVdz:Cc[5i($B,wM|fB", "Q4eGcHloOF%");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("QVdz:Cc[5i($B,wM|fB", string3);
      
      String string4 = StringUtils.join((int[]) null, '|', 1027, (-112));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isBlank("_*9v6+=TX^<:");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("Q4eGcHloOF%");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains('H'));
      
      boolean boolean2 = stack0.add((Object) "\"/@&z`0^");
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[\"/@&z`0^]", stack0.toString());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(stack0.contains("\"/@&z`0^"));
      assertFalse(stack0.contains('H'));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'B', (-2790), (-1533));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2790
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      String string2 = StringUtils.repeat("cr", 565);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "cr", "C!kjQvNHu ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.junitpioneer.vintage.TimeoutExtension", "", 12);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      String string3 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'q', 'q', 'q'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("qqqqqq", string3);
      
      String string4 = StringUtils.getDigits("");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains("\r"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains("\r"));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string4 = StringUtils.difference("", "-bq4M~c]&>$b5QM");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("-bq4M~c]&>$b5QM", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean5 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String string5 = StringUtils.chop(" in an array of ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(" in an array of", string5);
      
      String string6 = StringUtils.removeStart((String) null, "");
      assertNull(string6);
      
      String string7 = StringUtils.removePattern("-bq4M~c]&>$b5QM", " in an array of");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("-bq4M~c]&>$b5QM", string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "-bq4M~c]&>$b5QM");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string8 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", (String) null, "Failed to get parent directory from provider");
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      assertEquals("Search and Replace array lengths don't match: ", string8);
      
      String string9 = StringUtils.join((Object[]) charSequenceArray0, " in an array of", 0, 1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals("\r", string9);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.reverse((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.unwrap((String) null, '-');
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      charSequenceArray0[0] = null;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '-';
      doubleArray0[1] = (double) '-';
      doubleArray0[2] = (-1410.91789925217);
      doubleArray0[3] = (double) '-';
      doubleArray0[4] = (double) '-';
      String string1 = StringUtils.join(doubleArray0, '-', (-1357), (-1357));
      assertArrayEquals(new double[] {45.0, 45.0, (-1410.91789925217), 45.0, 45.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.replace((String) null, "Minimum abbreviation width with offset is %d", "?", 14);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = null;
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string3);
      
      charSequenceArray0[3] = (CharSequence) null;
      String string4 = StringUtils.truncate("", 14);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      CharSequence charSequence1 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(charSequence1);
      
      charSequenceArray0[5] = null;
      String string5 = StringUtils.substringBeforeLast("", "maxWith cannot be negative");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      charSequenceArray0[6] = (CharSequence) "";
      String string6 = StringUtils.removePattern("", (String) null);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      charSequenceArray0[7] = (CharSequence) "";
      String string7 = StringUtils.substringBetween((String) null, "7m5R1E=g4QlW 'K*+($");
      assertNull(string7);
      
      charSequenceArray0[8] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, "HO9tSbt3CQ*!k*YBd_", 2236, 590);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.GERMANY;
      assertEquals("de_DE", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = locale1.getDisplayName();
      assertEquals("de_DE", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("German (Germany)", string1);
      
      String string2 = locale1.getDisplayName();
      assertEquals("de_DE", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("German (Germany)", string2);
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      
      String string4 = locale0.getDisplayVariant();
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int0 = StringUtils.getFuzzyDistance("", "HO9tSbt3CQ*!k*YBd_", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, int0);
      
      String string5 = StringUtils.removeStart("Y>2e{", " be null");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("Y>2e{", string5);
      
      String string6 = StringUtils.removeStartIgnoreCase("^q@FMnG;C//h", "Y>2e{");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("^q@FMnG;C//h", string6);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(""));
      
      String string7 = StringUtils.join((List<?>) stack0, '/', 2236, 108);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("", string7);
      assertFalse(stack0.contains(""));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '/';
      charArray0[7] = '/';
      charArray0[8] = '/';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'/', '/', '/', '/', '/', '/', '/', '/', '/'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.substringBetween("4", "4");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("4");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultString("6b.Q?n.u]<2");
      assertNotNull(string1);
      assertEquals("6b.Q?n.u]<2", string1);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ExpectedException");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Ex", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "Ex", (CharSequence) "ExpectedException");
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("Ex", charSequence0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("ExpectedException", "Ex", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.repeat('2', 7);
      assertNotNull(string0);
      assertEquals("2222222", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "2222222", (CharSequence) "2222222", 13);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((Object[]) null, '2', 13, 395);
      assertNull(string1);
      
      String string2 = StringUtils.center("&38&5&127", 7, '2');
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&38&5&127", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&38&5&127");
      assertNull(stringArray0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("2222222"));
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultString((String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      String string5 = StringUtils.leftPad("&38&5&127", (-2968));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("&38&5&127", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "ze(@nheOj$u", (CharSequence) "&38&5&127");
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      String string6 = StringUtils.toRootLowerCase("L<MsX=Cgm3u':N");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("l<msx=cgm3u':n", string6);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertEquals(51, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[2], "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtension", 27);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.vintage.Ex", string1);
      
      String string2 = StringUtils.replacePattern("", "", (String) null);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("", "", "59<");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("io", "io6E9qA");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("io", string4);
      
      String string5 = StringUtils.capitalize("");
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.substringAfter(". The following paths could not be deleted (see suppressed exceptions for details): ", "NK.;EHQrY[ay");
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String[] stringArray0 = new String[0];
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("fran\u00E7ais", string2);
      
      String string3 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-44);
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {(byte)87, (byte)76, (byte)76, (byte)3, (byte) (-44)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("WLL\u0003\uFFFD", string4);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[0] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("0.0>0.0>0.0>1.0>-1.0", string0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1890);
      shortArray0[1] = (short) (-1890);
      shortArray0[2] = (short) (-1890);
      shortArray0[3] = (short) (-1890);
      shortArray0[4] = (short) (-1890);
      String string1 = StringUtils.join(shortArray0, 'a');
      assertArrayEquals(new short[] {(short) (-1890), (short) (-1890), (short) (-1890), (short) (-1890), (short) (-1890)}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1890a-1890a-1890a-1890a-1890", string1);
      
      String[] stringArray0 = StringUtils.split("#3nD%", "31XXc\"vh0[?2#j", (int) (short) (-1890));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "31XXc\"vh0[?2#j", "-1890a-1890a-1890a-1890a-1890");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("0.0>0.0>0.0>1.0>-1.0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("31XXc\"vh0[?2#j", "0.0>0.0>0.0>1.0>-1.0", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("31XXc\"vh0[?2#j0.0>0.0>0.0>1.0>-1.0", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.defaultIfBlank("WFzD`/| E", "Minimum abbreviation width is %d");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("WFzD`/| E", string3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-66);
      try { 
        StringUtils.toString(byteArray0, "zGM*e");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      try { 
        StringUtils.toString(byteArray0, "^+d`<S:M:");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "\r";
      stringArray0[4] = "\r";
      stringArray0[5] = "\r";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-2302);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)76;
      shortArray0[5] = (short)2419;
      shortArray0[6] = (short)2980;
      String string3 = StringUtils.abbreviate("\r", 56, (int) (short)76);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      String string4 = StringUtils.truncate((String) null, 2796, 315);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.ordinalIndexOf("\r", "\r", 56);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.left((String) null, 13);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Array element ");
      assertNotNull(string0);
      assertEquals("Array element", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Array element", 15);
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("l0`F|", (-516), (-2707));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited("l0`F|", '2');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("l0`F|", string2);
      
      String string3 = StringUtils.stripToEmpty("a2\"?X'~?W9`j}*6=!aT");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("a2\"?X'~?W9`j}*6=!aT", string3);
      
      String string4 = StringUtils.repeat((String) null, (-516));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "a2\"?X'~?W9`j}*6=!aT", "io6E9qA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replace("", "Array element ", "I;oO;{fEE", 882);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string6);
      
      String string7 = StringUtils.replaceIgnoreCase("f'xMG'C", "f'xMG'C", "org.apache.commons.lang3.RegExUtils");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("org.apache.commons.lang3.RegExUtils", string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "v\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-1585), 'N');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.repeat('2', 7);
      assertNotNull(string0);
      assertEquals("2222222", string0);
      
      CharSequence[] charSequenceArray0 = null;
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("2222222");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripAccents("Failed to get parent directory from provider");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provider", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("2222222");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.chop("Failed to get parent directory from provider");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Failed to get parent directory from provide", string2);
      
      String string3 = StringUtils.rightPad("Failed to get parent directory from provide", 7, '6');
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Failed to get parent directory from provide", string3);
      
      String string4 = "U\"(\"LG,FQw\"XD*[5 ";
      String string5 = StringUtils.join((Object[]) stringArray0, "U\"(\"LG,FQw\"XD*[5 ");
      assertEquals(1, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("2222222", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Failed to get parent directory from provide", 7);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.trimToSize();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(string1));
      assertFalse(set0.contains(string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("2222222", ",h8R1RS2v8YoTW<iZ`", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("Strirgs must not be null", "Strirgs must not be null", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      String[] stringArray1 = StringUtils.splitByCharacterType("Strings must not be null");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split((String) null);
      assertNull(stringArray2);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) "#O'");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.capitalize("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string4);
      
      boolean boolean3 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.chop("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SE", string5);
      
      String string6 = StringUtils.removeStart("<g^i0N", " in an array of ");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("<g^i0N", string6);
      
      String string7 = StringUtils.removePattern("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "<g^i0N");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string7);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) string2);
      assertEquals((-1), int0);
      
      String string8 = StringUtils.replaceIgnoreCase((String) null, "<g^i0N", "x,08FR^JtlRCK");
      assertNull(string8);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "maxWith cannot be negative", (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String string0 = StringUtils.chomp("Ho[Lt+}");
      assertNotNull(string0);
      assertEquals("Ho[Lt+}", string0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Ho[Lt+}");
      assertEquals("Ho[Lt+}", stringWriter0.toString());
      assertEquals("Ho[Lt+}", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertEquals("Ho[Lt+}", stringWriter0.toString());
      assertEquals("Ho[Lt+}", stringWriter1.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals("Ho[Lt+}", stringBuffer0.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) stringBuffer0, (CharSequence) stringBuffer0);
      assertEquals("Ho[Lt+}", stringWriter0.toString());
      assertEquals("Ho[Lt+}", stringWriter1.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals("Ho[Lt+}", stringBuffer0.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 2262);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.stripAccents("/k2iAE~TiGdW;V>D");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/k2iAE~TiGdW;V>D", string1);
      
      String string2 = StringUtils.mid((String) null, 2147483533, 2147483533);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "/k2iAE~TiGdW;V>D", 2147483533);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Locale must not be null", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "AkmhRd/HBln}`|>5z&");
      assertEquals((-19), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, (-19));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chomp((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.leftPad(".)'OzSF", 0);
      assertNotNull(string1);
      assertEquals(".)'OzSF", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'B');
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split("", 'B');
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertNotNull(stringArray2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2506;
      intArray0[1] = (-19);
      intArray0[2] = (int) 'B';
      String string4 = StringUtils.join(intArray0, '', 4, (-968));
      assertArrayEquals(new int[] {2506, (-19), 66}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2707));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.mid("", (-2707), (-2707));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeAll((String) null, "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertNull(string2);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      String string3 = StringUtils.join(list0, (String) null, (-480), (-2707));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("a`)LCidIi3N`@X", "A#fob");
      assertNotNull(string0);
      assertEquals("a`)LCidIi3N`@X", string0);
      
      String string1 = StringUtils.reverseDelimited("A#fob", '1');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("A#fob", string1);
      
      String string2 = StringUtils.stripToEmpty("A#fob");
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("A#fob", string2);
      
      String string3 = StringUtils.repeat("A#fob", 90);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("A#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fobA#fob", string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "A#fob", "A#fob");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replace((String) null, "iQI;oO;{f", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", 2932);
      assertNull(string4);
      
      String string5 = StringUtils.stripToNull("/N-7?hi@w>L&5CO-");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("/N-7?hi@w>L&5CO-", string5);
      
      String string6 = StringUtils.replaceIgnoreCase("", "pARJIw3'7/t|vS", "DM4[r");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.trimToNull("");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 17);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfBlank("", "%9y6z.x6rZOO");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%9y6z.x6rZOO", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%9y6z.x6rZOO", "");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "C=~-", 169);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.TempDirectory$CloseablePath", "");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.junitpioneer.jupiter.TempDirectory$CloseablePath", string2);
      
      String string3 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean3 = StringUtils.isEmpty(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("%9y6z.x6rZOO", "r&Aj?VWK@", 0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("Failed to delete temp directory ", "C=~-", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("C=~-Failed to delete temp directory ", string4);
      
      String string5 = StringUtils.substringAfter("", "");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertEquals(17, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.abbreviateMiddle("&M0sSg{'Xfw>AyRl", ":.1mXy;", (-3286));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("&M0sSg{'Xfw>AyRl", string6);
      
      String string7 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals(2, stringArray0.length);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("&M0Sg{'Xfw>AyRl", string8);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '7';
      String string9 = StringUtils.join(charArray0, ' ');
      assertArrayEquals(new char[] {'7', '7', '7', '7', '4', '4', '7'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("7 7 7 7 4 4 7", string9);
      
      String string10 = StringUtils.rightPad((String) null, 0, ' ');
      assertNull(string10);
      
      boolean boolean0 = StringUtils.isAlpha(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) ":.1mXy;");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.removeEnd("\n", (String) null);
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Z^C-6;C|6{", "Z^C-6;C|6{", "Z^C-6;C|6{", 101);
      assertNotNull(string0);
      assertEquals("Z^C-6;C|6{", string0);
      
      Locale locale0 = new Locale("Z^C-6;C|6{", "Z^C-6;C|6{");
      assertEquals("", locale0.getVariant());
      assertEquals("z^c-6;c|6{", locale0.getLanguage());
      assertEquals("z^c-6;c|6{_Z^C-6;C|6{", locale0.toString());
      assertEquals("Z^C-6;C|6{", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("Z^C-6;C|6{", "Z^C-6;C|6{", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("z^c-6;c|6{", locale0.getLanguage());
      assertEquals("z^c-6;c|6{_Z^C-6;C|6{", locale0.toString());
      assertEquals("Z^C-6;C|6{", locale0.getCountry());
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("ExceptionWasThrown"));
      
      boolean boolean0 = priorityQueue0.addAll(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertFalse(linkedList0.contains("ExceptionWasThrown"));
      
      boolean boolean1 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("ExceptionWasThrown"));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue0, "ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("^q@FMnG;", string3);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      String string4 = StringUtils.replaceIgnoreCase("h: 0", "h: 0", "p{InCombiningDiacriticalMarks}+", 76);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'=', '=', '='}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("===", string5);
      
      String string6 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.join(charArray0, 'E');
      assertArrayEquals(new char[] {'=', '=', '='}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("=E=E=", string7);
      
      String[] stringArray1 = StringUtils.split("!QH4rH39w~D", '=');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      assertEquals(Locale.Category.FORMAT, locale_Category0);
      
      boolean boolean0 = priorityQueue0.add(locale_Category0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "");
      assertEquals(1, priorityQueue0.size());
      assertNotNull(string0);
      assertEquals("FORMAT", string0);
      assertFalse(priorityQueue0.contains(""));
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)48;
      String string0 = StringUtils.join(shortArray0, 'q', 56, (-2481));
      assertArrayEquals(new short[] {(short)48}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "TgyB%<dQZ8'lT", (CharSequence) "TgyB%<dQZ8'lT");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNotBlank("TgyB%<dQZ8'lT");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("TgyB%<dQZ8'lT");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.center((String) null, (int) (short)48, 'q');
      assertNull(string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "TgyB%<dQZ8'lT";
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) "TgyB%<dQZ8'lT";
      String string2 = " vs ";
      String string3 = StringUtils.replaceFirst((String) null, " vs ", "yP");
      assertNull(string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Collection<Locale> collection0 = null;
      LinkedHashSet<Locale> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<Locale>((Collection<? extends Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      int int0 = StringUtils.compare("4'kj_}8F'*>\"ZuY]R/m", "4'kj_}8F'*>\"ZuY]R/m");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = linkedList0.add(object0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains(object0));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean4 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5);
      
      String string4 = StringUtils.difference("", "9\" LD.mOV[g@I9Ic");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("9\" LD.mOV[g@I9Ic", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean6 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6);
      
      String string5 = StringUtils.chop(" in an array of ");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(" in an array of", string5);
      
      String string6 = StringUtils.removeStart((String) null, "");
      assertNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) null, 6);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0[3], (CharSequence) " in an array of ");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.compare((String) null, "");
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("bR&", "pTj$XGJH@d/");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'v');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(".x]]", '\"');
      assertNotNull(string0);
      assertEquals("\".x]]\"", string0);
      
      String string1 = "\\u";
      boolean boolean0 = StringUtils.isAlpha(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing("\".x]]\"", '\"');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\".x]]\"", string2);
      
      int int1 = StringUtils.countMatches((CharSequence) string1, '\"');
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = "#O'";
      String string2 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string3);
      
      String string4 = "The type must not be null";
      String string5 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("The type must not be null", string5);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      long[] longArray0 = new long[0];
      String string6 = StringUtils.join(longArray0, 's');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.removeEnd("^q@FMnG;", "C//h");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("^q@FMnG;", string7);
      
      String[] stringArray1 = StringUtils.split(string3, "r*JVP]");
      assertNull(stringArray1);
      
      String string8 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 's');
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("sorg.apache.commons.lang3.StringUtils", string8);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      String string3 = StringUtils.right("", 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'T';
      String string4 = StringUtils.repeat("+O,<,qgm$4i7@qKY*", (-732));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", ", Length: ");
      assertTrue(boolean0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.defaultString("ze(@nheOj$u");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("ze(@nheOj$u", string6);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "C!kjQvNHu ", (CharSequence) "^q@FMnG;");
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("C!kjQvNHu ", charSequence0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: ", (CharSequence) "C!kjQvNHu ");
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string7 = StringUtils.toRootLowerCase("^q@FMnG;");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("^q@fmng;", string7);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertEquals(17, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.stripToEmpty("fkn>{F]N%J>.PvJ3VE");
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string6);
      
      String string7 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ":.1mXy;", "");
      assertTrue(boolean0);
      
      String string8 = StringUtils.replace(":.1mXy;", string7, "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-956));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals(":.1mXy;", string8);
      
      String string9 = StringUtils.stripToNull("8o#M\"UdhFy;<$zL>");
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("8o#M\"UdhFy;<$zL>", string9);
      
      boolean boolean1 = StringUtils.startsWithAny(":.1mXy;", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string10 = StringUtils.replaceAll("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", ":.1mXy;", "+=G(sf");
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string3));
      assertNotNull(string10);
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string10);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nullQu^&58A<[d?O");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[1] = "";
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 5);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringBefore("", "a^");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("Cannot store ", '>', '>');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Cannot store ", string1);
      
      String string2 = StringUtils.substring("", 0, 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("Cannot store ", "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Cannot store ", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Cannot store ", "");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Cannot store ";
      String string4 = StringUtils.left("", 0);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "hi@`@Ul^ldywm?cWz";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) "", 98);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(13, int1);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap("", "+oY47T=%l");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "', has a length less than 2", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.rightPad((String) null, 2302, '$');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("io6E9qA");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "!XfO#?AlbzV(k2L");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.capitalize("yD9hBw:`KN{8\r=>qL");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("YD9hBw:`KN{8\r=>qL", string2);
      
      boolean boolean2 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.replaceChars("org.junitpioneer.vintage.TimeoutExtension", '2', 'Y');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string3);
      
      boolean boolean3 = StringUtils.startsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string4 = StringUtils.difference("nHOqK$1,N!?UOF9s[d", (String) null);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("nHOqK$1,N!?UOF9s[d", string4);
      
      int int2 = StringUtils.length("+oY47T=%l");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(10, int2);
      
      String string5 = StringUtils.overlay("aUwzLLKO4v<mL:#", (String) null, 2302, (-2379));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("", "+oY47T=%l");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad((String) null, 2302, '$');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("io6E9qA");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "!XfO#?AlbzV(k2L");
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("yD9hBw:`KN{8\r=>qL");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("YD9hBw:`KN{8\r=>qL", string2);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceChars("org.junitpioneer.vintage.TimeoutExtension", '2', 'Y');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string3);
      
      boolean boolean2 = StringUtils.isMixedCase("Locale must not be null");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.difference("nHOqK$1,N!?UOF9s[d", (String) null);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("nHOqK$1,N!?UOF9s[d", string4);
      
      int int1 = StringUtils.length("+oY47T=%l");
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      String string5 = StringUtils.overlay("aUwzLLKO4v<mL:#", (String) null, 2302, (-2379));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      
      String string2 = StringUtils.substringAfterLast("", "JPPo%MJt0MV,y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.replacePattern("k", (String) null, "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("k", string3);
      
      String string4 = StringUtils.replaceOnce("59<", "k", "?ES?m-");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("59<", string4);
      
      String string5 = StringUtils.removeEndIgnoreCase(" ", "io6E9qA");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(" ", string5);
      
      String string6 = StringUtils.capitalize("59<");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("59<", string6);
      
      String string7 = StringUtils.substringAfter((String) null, "NHu ");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "\r", (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.wrapIfMissing(" ", 'B');
      assertNotNull(string0);
      assertEquals("B B", string0);
      
      String string1 = StringUtils.toRootLowerCase("7R/I^D");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("7r/i^d", string1);
      
      String string2 = StringUtils.replaceChars("\r", "vdf'ote 7s ", "4}");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\r", string2);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.removeAll("^q@FMnG;", "^q@FMnG;");
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("^q@FMnG;");
      assertArrayEquals(new int[] {94, 113, 64, 127, 70, 77, 110, 71, 59}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("^q@FMnG;");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "^q@FMnG;", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("^q@FMnG;");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("^q@FMnG;"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      String string1 = StringUtils.join(iterator0, 'b');
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      String string2 = StringUtils.rightPad("Fzp)vRuvKN%x(~", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Fzp)vRuvKN%x(~", string2);
      
      String string3 = StringUtils.join((List<?>) linkedList0, '7', 0, (-4));
      assertEquals(0, linkedList0.size());
      assertNotSame(linkedList0, linkedList1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains("^q@FMnG;"));
      
      String string4 = StringUtils.removeIgnoreCase("T$", "^M+P-)KC(kP2");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("T$", string4);
      
      String string5 = StringUtils.EMPTY;
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;", 28);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.stripToEmpty("fkn>{F]N%J>.PvJ3VE");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string6);
      
      String string7 = StringUtils.wrapIfMissing("v%/^Y4|'{zt", "2tL");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("2tLv%/^Y4|'{zt2tL", string7);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "fkn>{F]N%J>.PvJ3VE");
      assertFalse(charBuffer0.isDirect());
      assertEquals(18, charBuffer0.remaining());
      assertEquals(18, charBuffer0.capacity());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("fkn>{F]N%J>.PvJ3VE", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Failed to delete temp directory ", (-3286));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      longArray0[1] = (-601L);
      String string1 = StringUtils.removeAll(";O%ZCN5MX!Ltm", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(";O%ZCN5MX!Ltm", string1);
      
      String string2 = StringUtils.join((List<?>) null, "O=hYUdD", (-1107), (-1107));
      assertNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "twuW)D]9;cEgQ0n");
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'c', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", ".1rTm]\"p,F@>N\"");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(".1rTm]\"p,F@>N\"", string1);
      
      int int0 = StringUtils.length(".1rTm]\"p,F@>N\"");
      assertEquals(14, int0);
      
      String string2 = StringUtils.overlay(".1rTm]\"p,F@>N\"", "aUwzLLKO4v<mL:#", (-1), 49);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("aUwzLLKO4v<mL:#", string2);
      
      boolean boolean0 = StringUtils.isAlpha(".1rTm]\"p,F@>N\"");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-162.6473F);
      floatArray0[2] = (float) (byte)0;
      String string3 = StringUtils.join(floatArray0, 'c');
      assertArrayEquals(new float[] {(-1.0F), (-162.6473F), 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("-1.0c-162.6473c0.0", string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".1rTm]\"p,F@>N\"";
      stringArray0[1] = ".1rTm]\"p,F@>N\"";
      stringArray0[2] = "aUwzLLKO4v<mL:#";
      stringArray0[3] = ".1rTm]\"p,F@>N\"";
      stringArray0[4] = "aUwzLLKO4v<mL:#";
      stringArray0[5] = ".1rTm]\"p,F@>N\"";
      String string4 = StringUtils.replaceEach("-1.0c-162.6473c0.0", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("-1.0c-162.6473c0.0", string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ".1rTm]\"p,F@>N\"", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.deleteWhitespace(".1rTm]\"p,F@>N\"");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(".1rTm]\"p,F@>N\"", string5);
      
      String string6 = StringUtils.abbreviateMiddle("aUwzLLKO4v<mL:#", "gZ03OJbxc<S?v E", 115);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("aUwzLLKO4v<mL:#", string6);
      
      String string7 = StringUtils.normalizeSpace("j6:Eoj`usj6:Eoj`us");
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("j6:Eoj`usj6:Eoj`us", string7);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertEquals(17, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.abbreviateMiddle("&M0sSg{'Xfw>AyRl", ":.1mXy;", (-3286));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("&M0sSg{'Xfw>AyRl", string6);
      
      String string7 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((Object[]) stringArray0, "");
      assertEquals(2, stringArray0.length);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("&M0Sg{'Xfw>AyRl", string8);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '7';
      String string9 = StringUtils.join(charArray0, ' ');
      assertArrayEquals(new char[] {'7', '7', '7', '7', '4', '4', '7'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      assertEquals("7 7 7 7 4 4 7", string9);
      
      String string10 = StringUtils.rightPad((String) null, 0, ' ');
      assertNull(string10);
      
      String string11 = StringUtils.abbreviate("&38&5&127", 11);
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string6));
      assertNotNull(string11);
      assertEquals("&38&5&127", string11);
      
      String string12 = StringUtils.remove("&38&5&127", "7 7 7 7 4 4 7");
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string4));
      assertTrue(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string9));
      assertNotNull(string12);
      assertEquals("&38&5&127", string12);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("i}9s1J&77nvk-G^Hf", "i}9s1J&77nvk-G^Hf", (-1997));
      assertNotNull(string0);
      assertEquals("i}9s1J&77nvk-G^Hf", string0);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      int int0 = 17;
      String string0 = StringUtils.abbreviateMiddle((String) null, "", 17);
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "%9y6z.x6rZOO", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = " is not in the range '0' - '9'";
      String string3 = StringUtils.strip("", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", "z(lJ9#kN's^V0]0I,");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // z(lJ9#kN's^V0]0I,
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "Can only resolve parameter of type ";
      stringArray0[2] = "";
      stringArray0[3] = "Can only resolve parameter of type ";
      stringArray0[4] = "Can only resolve parameter of type ";
      stringArray0[5] = "";
      stringArray0[6] = "Can only resolve parameter of type ";
      stringArray0[7] = "Can only resolve parameter of type ";
      stringArray0[8] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Can only resolve parameter of type ", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = "s'/n0D,;'2*M";
      int int0 = StringUtils.compareIgnoreCase("", "Can only resolve parameter of type ");
      assertEquals((-35), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSETThe type must not be null";
      String string3 = StringUtils.leftPad("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", (-1), "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSETThe type must not be null");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", string3);
      
      String string4 = StringUtils.leftPad("Aborting to prote", 669);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEqualsborting to prote", string4);
      
      // Undeclared exception!
      try { 
        Charset.forName("4o*?k}).$X;)<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 4o*?k}).$X;)<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2707));
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("Strings must not be null", 2970, 2970);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2707);
      intArray0[1] = (-2707);
      String string2 = StringUtils.join(intArray0, 'Q', 99, (-1724));
      assertArrayEquals(new int[] {(-2707), (-2707)}, intArray0);
      assertEquals(2, intArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeIgnoreCase("HpwJf)mnlu#&", "HG}");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("HpwJf)mnlu#&", string3);
      
      String string4 = StringUtils.truncate("Strings must not be null", 1750);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("Strings must not be null", string4);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("ExpectedExceptdin");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("ExpectedExceptdin");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "The type must not be null", 'i');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 0);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.appendIfMissingIgnoreCase("ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string1);
      assertEquals("ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      String string2 = StringUtils.rightPad("lAP+(EKg>Tf0-U./{*W", 0, '0');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("lAP+(EKg>Tf0-U./{*W", string2);
      
      String string3 = StringUtils.replace("lAP+(EKg>Tf0-U./{*W", "38&5&38&5&127HpwJf)mnl", ";r(jl-p.{['Y|A7:", 55);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("lAP+(EKg>Tf0-U./{*W", string3);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "<gA@@5+5");
      assertNull(stringArray0);
      
      String string4 = StringUtils.join((Object[]) null, '~', 1, (-67));
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("lAP+(EKg>Tf0-U./{*W");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.join((Object[]) null, (String) null, (-5328), 1310);
      assertNull(string5);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, ";r(jl-p.{['Y|A7:", 1310);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.replace((String) null, "[t*vrrSIWw", (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      longArray0[1] = (-601L);
      String string1 = StringUtils.removeAll(";O%ZCN5MX!Ltm", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(";O%ZCN5MX!Ltm", string1);
      
      String string2 = "U*8Llon@>a";
      String[] stringArray1 = StringUtils.split("U*8Llon@>a");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";O%ZCN5MX!Ltm", (CharSequence) ";O%ZCN5MX!Ltm");
      assertTrue(boolean0);
      
      String string3 = StringUtils.capitalize("\r");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      boolean boolean1 = StringUtils.isMixedCase("\r");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.removeStartIgnoreCase("!5VV>P0SD", "\r");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("!5VV>P0SD", string4);
      
      boolean boolean2 = StringUtils.startsWithAny("!5VV>P0SD", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isMixedCase("!5VV>P0SD");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.difference("\r", ";O%ZCN5MX!Ltm");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(";O%ZCN5MX!Ltm", string5);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string6 = StringUtils.left("%GDEu}/'FE`", (-374));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("!5VV>P0SD", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String string0 = StringUtils.prependIfMissing((String) null, "dlyMoRMLi&m", (CharSequence[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.swapCase("4}!8J");
      assertNotNull(string1);
      assertEquals("4}!8j", string1);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.substringBetween("y'Ru`U=h", "y'Ru`U=h");
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("y'Ru`U=h");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Comparator should not be null.", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains(false));
      
      String string4 = StringUtils.join((List<?>) vector0, "org.apache.commons.lang3.CharSequenceUtils", 0, (-139));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(vector0.contains((-139)));
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "(H", (-139));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase((String) null, "\r", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.repeat('h', (-720));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      
      boolean boolean1 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      
      Spliterator<Object> spliterator0 = priorityQueue1.spliterator();
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(spliterator0);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ExceptionWasThrownP^q@FMnG;", string3);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      String string5 = StringUtils.substring("NHu ", (-1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(" ", string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ExceptionWasThrown", (CharSequence) "ExceptionWasThrown", 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("", 2270);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '\\');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase(";ulN", "org.junitpioneer.jupiter.TempDirectory", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals(";ulNorg.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ";ulN", (CharSequence) ";ulNorg.junitpioneer.jupiter.TempDirectory");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "\r";
      stringArray0[5] = "\r";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-2302);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)76;
      shortArray0[5] = (short)2419;
      shortArray0[6] = (short)2980;
      String string3 = StringUtils.abbreviate("\r", 56, (int) (short)76);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      String string4 = StringUtils.truncate((String) null, 2796, 315);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.ordinalIndexOf("\r", "\r", 56);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "X(Wc;wG>7'@.8yBQ");
      assertEquals(6, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("\rX(Wc;wG>7'@.8yBQ\rX(Wc;wG>7'@.8yBQ\rX(Wc;wG>7'@.8yBQ\rX(Wc;wG>7'@.8yBQX(Wc;wG>7'@.8yBQ\r", string5);
      
      String string6 = StringUtils.appendIfMissing("\r", "\rX(Wc;wG>7'@.8yBQ\rX(Wc;wG>7'@.8yBQ\rX(Wc;wG>7'@.8yBQ\rX(Wc;wG>7'@.8yBQX(Wc;wG>7'@.8yBQ\r", stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("\r", string6);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(";ulN", "'bkU0R988YU");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("'bkU0R988YU", ";ulN", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("'bkU0R988YU;ulN", string0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("6E9q2A", ";ulN");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("6E9q2A", ";ulN", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("6E9q2A", string0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("\r");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "\r";
      stringArray0[3] = "\r";
      stringArray0[4] = "\r";
      stringArray0[5] = "\r";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-2302);
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)76;
      shortArray0[5] = (short)2419;
      shortArray0[6] = (short)2980;
      shortArray0[7] = (short) (-1890);
      String string3 = StringUtils.join(shortArray0, 'a');
      assertArrayEquals(new short[] {(short)3, (short)4, (short) (-2302), (short)4, (short)76, (short)2419, (short)2980, (short) (-1890)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("3a4a-2302a4a76a2419a2980a-1890", string3);
      
      String[] stringArray1 = StringUtils.split("WFzD`/| E", "\r", (int) (short) (-1890));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "0#(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("\r", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Strings must not be null", "\r", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Strings must not be null\r", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.defaultIfBlank("\r", "Strings must not be null\r");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Strings must not be null\r", string5);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(";ulN", ";ulN");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("+[\"8M_jWxx1!='", ";ulN", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("+[\"8M_jWxx1!=';ulN", string0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "]zCVW8XrG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\r", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.rightPad("*WU6t -7#/", 3092, 'w');
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(string0, ' ');
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "*WU6t -7#/";
      String string2 = StringUtils.abbreviateMiddle("Aborting to protect against StackOverflowError - output of one loop is the input of another", "/k2iAE~TiGdW;V>DWG", 3092);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      
      String string3 = StringUtils.repeat("*WU6t -7#/", 3092);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '*';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = 'w';
      charArray0[5] = ' ';
      charArray0[6] = 'w';
      charArray0[7] = 'w';
      String string4 = StringUtils.join(charArray0, ' ');
      assertArrayEquals(new char[] {'*', ' ', ' ', ' ', 'w', ' ', 'w', 'w'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("*       w   w w", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("~Zz7jw$]J~m+I", "+", 10);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("+", string1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.uncapitalize("~Zz7jw$]J~m+I");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("~Zz7jw$]J~m+I", string5);
      
      boolean boolean0 = StringUtils.isWhitespace("*       w   w w");
      assertFalse(boolean0);
      
      String string6 = StringUtils.chomp("TimeoutTimeout");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("TimeoutTimeout", string6);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.split(";ulN", " ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are notset");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", "5IYCu'&eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", "5IYCu'&eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "|(GbA4";
      stringArray0[4] = "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET";
      stringArray0[5] = "5IYCu'&eE!;#?*9";
      stringArray0[6] = "#O'";
      stringArray0[7] = null;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("#O'"));
      
      List<String> list0 = new ArrayList<String>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("#O'"));
      
      String string4 = StringUtils.join(list0, string2, 1951, 1951);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      assertFalse(list0.contains("#O'"));
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string5);
      
      String[] stringArray1 = StringUtils.split("^q@FMnG;iQI;oO;{fEE", "!", 9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, (-2481));
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      String string2 = StringUtils.rightPad("!XfO#?AlbzV(k2L", (int) (short)52, 'q');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("!XfO#?AlbzV(k2Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("~poItl.");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isMixedCase("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.replaceChars("!XfO#?AlbzV(k2Lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", '2', 'Y');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("!XfO#?AlbzV(kYLqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", string4);
      
      boolean boolean2 = StringUtils.startsWithAny("!XfO#?AlbzV(kYLqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isMixedCase("!XfO#?AlbzV(kYLqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string5 = StringUtils.difference("TgyB%<dQZ8'lT", "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("est '%s' was supposed to run no longer than %d ms but ran %d ms.", string5);
      
      int int1 = StringUtils.length("\r");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string6 = StringUtils.overlay("!XfO#?AlbzV(kYLqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", "", (-41), (short)52);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.leftPad("^q@FMnG;", (-26));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      String string3 = StringUtils.center("[[t1+uxet#Q>g#d", 100, "[[t1+uxet#Q>g#d");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g#d[[t1+uxet#Q>g", string3);
      
      String string4 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("^q@FMnG;", string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string5 = StringUtils.deleteWhitespace("73wMWg&r");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("73wMWg&r", string5);
      
      String string6 = StringUtils.abbreviateMiddle(".}Ak:0%y`5~", (String) null, (-1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(".}Ak:0%y`5~", string6);
      
      String string7 = StringUtils.normalizeSpace(" is not in the range '0' - '9'");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("is not in the range '0' - '9'", string7);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("s ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("s ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chop("\r\n");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.chop("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 4578);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "J[(", (CharSequence) "y'Ru`U=h", 1027);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "&38&5&127";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "y'Ru`U=h";
      String string1 = StringUtils.join(objectArray0, '4', 395, 16);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.center((String) null, 16, 'o');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "");
      assertNull(stringArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) '4';
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) '4';
      floatArray0[3] = (float) 395;
      floatArray0[4] = (float) 395;
      floatArray0[5] = (float) 395;
      String string3 = StringUtils.join(floatArray0, '5');
      assertArrayEquals(new float[] {52.0F, 16.0F, 52.0F, 395.0F, 395.0F, 395.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("52.0516.0552.05395.05395.05395.0", string3);
      
      String string4 = StringUtils.normalizeSpace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string4);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ExpectedExceptdin");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.ordinalIndexOf("ExpectedExceptdin", "ExpectedExceptdin", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {2592.0F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("2592.0>0.0>0.0>1.0>-1.0", string0);
      
      String string1 = StringUtils.getDigits("2592.0>0.0>0.0>1.0>-1.0");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2592000001010", string1);
      
      String string2 = StringUtils.substringBeforeLast("b|NouR; )Vg9", "b|NouR; )Vg9");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "2592000001010", "im/A)<\"p'G\"{]-");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("\r", "\r", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      String string0 = StringUtils.getDigits("=n>@zL8dc");
      assertNotNull(string0);
      assertEquals("8", string0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.getDigits("Failed to get parent directory from provider");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("~fk-53rCZ=fDal", 108);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removePattern(string1, "C!kjQv");
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace(string2, "6E9qA", "Locale must not be null", (-1148));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("38&5&38&5", 1904, '2');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf(string4, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.center("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", (-1148), "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.center("ExpectedException", (-2606), "ExpectedException");
      assertNotNull(string0);
      assertEquals("ExpectedException", string0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAny("Aborting to protect against StackOverflowError - o_tput of one loop isthe input of another", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, '1');
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(priorityQueue0.contains('1'));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String string0 = StringUtils.getDigits("h");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "h", "h");
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("nKu-`,<85i<|HB", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isEmpty("Nlo1%d$?tX[.cDI2*");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("Nlo1%d$?tX[.cDI2*", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '2');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("n$t_kPGw,Kjk7", '\u001E');
      assertNotNull(string0);
      assertEquals("\u001En$t_kPGw,Kjk7\u001E", string0);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "", ", Length: 0");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull(", Length: 0");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(", Length: 0", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(", Length: 0", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = null;
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      longArray0[2] = (-3095L);
      longArray0[3] = (-1L);
      String string3 = StringUtils.join(longArray0, 's');
      assertArrayEquals(new long[] {1L, 0L, (-3095L), (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("1s0s-3095s-1", string3);
      
      String string4 = StringUtils.removeEnd(", Length: 0", "NHu ");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(", Length: 0", string4);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing(", Length: 0", 's');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("s, Length: 0s", string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.difference("^q@FMnG;", "ExceptionWasThrown");
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      String string1 = StringUtils.leftPad("ExceptionWasThrown", (-1), "jkt");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string2 = StringUtils.replaceEach("A6?,zKNOsJ:.xV", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("A6?,zKNOsJ:.xV", string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string3 = StringUtils.wrap("]6|WXjm_LB2*;10", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("]6|WXjm_LB2*;10", string3);
      
      byte[] byteArray0 = StringUtils.getBytes("A6?,zKNOsJ:.xV", charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "ExceptionWasThrown", (String) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("10]6|WXjm_LB2*;", '1');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("10]6|WXjm_LB2*;1", string4);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("maxWith cannot be negative");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.capitalize("jQ'BOe3=:4QmzgG");
      assertNotNull(string0);
      assertEquals("JQ'BOe3=:4QmzgG", string0);
      
      String string1 = StringUtils.replaceOnce("Array element ", (String) null, "JQ'BOe3=:4QmzgG");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Array element ", string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Array element ", "jQ'BOe3=:4QmzgG");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = (long) 's';
      longArray0[2] = (-1L);
      longArray0[3] = 1L;
      longArray0[4] = (-3095L);
      longArray0[5] = (-1L);
      longArray0[6] = (-3095L);
      longArray0[7] = (long) 's';
      String string3 = StringUtils.join(longArray0, '>');
      assertArrayEquals(new long[] {1L, 115L, (-1L), 1L, (-3095L), (-1L), (-3095L), 115L}, longArray0);
      assertEquals(8, longArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("1>115>-1>1>-3095>-1>-3095>115", string3);
      
      String string4 = StringUtils.removeEnd("JQ'BOe3=:4QmzgG", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("JQ'BOe3=:4QmzgG", string4);
      
      String[] stringArray0 = StringUtils.split("1>115>-1>1>-3095>-1>-3095>115", "yA)eJ1");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("maxWith cannot be negative");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.removeAll("TgyB%<dQZ8'lT", "nKu-`,<85i<|HB");
      assertNotNull(string0);
      assertEquals("TgyB%<dQZ8'lT", string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string1 = StringUtils.reverseDelimited("L4lX/J>XG6[#*", '%');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L4lX/J>XG6[#*", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(" ", "L4lX/J>XG6[#*");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("\n");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("jkt"));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("jkt"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains("jkt"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("jkt"));
      
      boolean boolean1 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains("jkt"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("jkt"));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ExceptionWasThrownP^q@FMnG;", string3);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      
      int int1 = StringUtils.compareIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string4 = locale0.getScript();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean2 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.upperCase("-c-wl634e\"+xDU", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("-C-WL634E\"+XDU", string5);
      
      String string6 = StringUtils.join((Object[]) stringArray0, "org.apache.commons.lang3.StringUtils");
      assertEquals(0, stringArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "-c-wl634e\"+xDU", (CharSequence) "P");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNumericSpace("%d|BD{F=se");
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.startsWithAny("ExceptionWasThrownP^q@FMnG;", (CharSequence[]) null);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5);
      
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "ExceptionWasThrown";
      stringArray1[1] = "org.apache.commons.lang3.StringUtils";
      stringArray1[2] = "^q@FMnG;";
      stringArray1[3] = "y'Ru`U=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null";
      stringArray1[4] = "-c-wl634e\"+xDU";
      stringArray1[5] = "^q@FMnG;";
      stringArray1[6] = "p{InCombiningDiacriticalMarks}+";
      stringArray1[7] = "*x.tS@?";
      String string7 = StringUtils.join(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("ExceptionWasThrownorg.apache.commons.lang3.StringUtils^q@FMnG;y'Ru`U=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null-c-wl634e\"+xDU^q@FMnG;p{InCombiningDiacriticalMarks}+*x.tS@?", string7);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      String string1 = StringUtils.right("", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'T';
      String string2 = "+O,<,qgm$4i7\\@qKY*";
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", ", Length: ");
      assertTrue(boolean0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "^q@FMnG;";
      stringArray1[2] = "^q@FMnG;";
      stringArray1[3] = ", Length: ";
      stringArray1[4] = ", Length: ";
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "^q@FMnG;", (CharSequence) ", Length: ");
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("^q@FMnG;", charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Bsrn\u001DwN;$NE45", (CharSequence) "Bsrn\u001DwN;$NE45");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase(" ", "", false);
      assertEquals(1, int0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = locale0.getScript();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean2 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = locale0.getDisplayName();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("English", string3);
      
      String string4 = StringUtils.upperCase("\n", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\n", string4);
      
      String string5 = locale0.getDisplayScript();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "(");
      assertEquals(7, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("((\n((((", string6);
      
      boolean boolean3 = StringUtils.contains((CharSequence) " ", (CharSequence) "((\n((((");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNumericSpace("");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      boolean boolean5 = StringUtils.startsWithAny(charSequenceArray0[0], (CharSequence[]) null);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      
      String string2 = StringUtils.substringAfterLast("", "JPPo%MJt0MV,y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'm');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) 'm';
      doubleArray0[2] = (double) 'm';
      doubleArray0[3] = 1.0;
      String string4 = StringUtils.join(doubleArray0, 'm');
      assertArrayEquals(new double[] {109.0, 109.0, 109.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("109.0m109.0m109.0m1.0", string4);
      
      String string5 = StringUtils.join((Iterable<?>) linkedList0, "C8InXLi;r0I'xF!NS");
      assertEquals(0, linkedList0.size());
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can only resolve parameter of type ";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Can only resolve parameter of type ", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("...", "s'/n0D,;'2*M");
      assertEquals((-69), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Can only resolve parameter of type ", (CharSequence) "s'/n0D,;'2*M");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = 50;
      String string1 = StringUtils.leftPad("!If+ZhvN$ iQzX5fqL", 50, " B#{&p");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" B#{&p B#{&p B#{&p B#{&p B#{&p !If+ZhvN$ iQzX5fqL", string1);
      
      String string2 = StringUtils.leftPad("!If+ZhvN$ iQzX5fqL", (-69));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("!If+ZhvN$ iQzX5fqL", string2);
      
      boolean boolean1 = StringUtils.isNumericSpace(" B#{&p");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.difference("!If+ZhvN$ iQzX5fqL", "!If+ZhvN$ iQzX5fqL");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int3 = StringUtils.length("Can only resolve parameter of type ");
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(35, int3);
      
      try { 
        StringUtils.getBytes("Can only resolve parameter of type ", "Can only resolve parameter of type ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      try { 
        StringUtils.getBytes("or", "or");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.prependIfMissing("", ", ", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", ", string1);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing(" vs ", "dlyMoRMLi&m", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("dlyMoRMLi&m vs ", string0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissingIgnoreCase("AEf_nsX^,]bM", "AEf_nsX^,]bM", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("AEf_nsX^,]bM", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("AEf_nsX^,]bM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      longArray0[1] = (-601L);
      String string1 = StringUtils.removeAll(";O%ZCN5MX!Ltm", " vs ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(";O%ZCN5MX!Ltm", string1);
      
      String string2 = StringUtils.join((List<?>) null, "O=hYUdD", (-1107), (-1107));
      assertNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\r", " vs ", (-1107));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase(";O%ZCN5MX!Ltm", "\n", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("\n;O%ZCN5MX!Ltm", string3);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("a`)LCidIi3N`@X", "A#fob");
      assertNotNull(string0);
      assertEquals("a`)LCidIi3N`@X", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "a`)LCidIi3N`@X", (CharSequence) "a`)LCidIi3N`@X");
      assertTrue(boolean0);
      
      String string1 = StringUtils.left("A#fob", 5040);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("A#fob", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "A#fob";
      charSequenceArray0[1] = (CharSequence) "A#fob";
      charSequenceArray0[2] = (CharSequence) "a`)LCidIi3N`@X";
      charSequenceArray0[3] = (CharSequence) "A#fob";
      boolean boolean1 = StringUtils.equalsAny("a`)LCidIi3N`@X", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("a`)LCidIi3N`@X");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(12, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("A#fob"));
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'z', 2455, (-958));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(arrayList0.contains("A#fob"));
      
      String string3 = StringUtils.removeIgnoreCase("a`)LCidIi3N`@X", "a`)LCidIi3N`@X");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      String string1 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      String string2 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.toRootLowerCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("@defaultlocale can only be used with language tag if language, country, and variant are not set", string3);
      
      String string4 = StringUtils.chop("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`U=h");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`U=", string4);
      
      boolean boolean2 = StringUtils.isAlphaSpace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.rightPad((String) null, 0, ')');
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split((String) null);
      assertNull(stringArray1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (CharSequence) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string6 = StringUtils.capitalize("@defaultlocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("@defaultlocale can only be used with language tag if language, country, and variant are not set", string6);
      
      boolean boolean4 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.startsWithAny("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", (CharSequence[]) null);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5);
      
      // Undeclared exception!
      try { 
        Charset.forName(" ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //  
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("X4_s(l\"'C", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("X4_s(l\"'C", charset0);
      assertArrayEquals(new byte[] {(byte)88, (byte)52, (byte)95, (byte)115, (byte)40, (byte)108, (byte)34, (byte)39, (byte)67}, byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(9, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertNotNull(locale2);
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("fran\u00E7ais", string2);
      
      String string3 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("ExpectedException");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.truncate("C=~-Expected exception %s was not thrown.", 40, 40);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(".", string5);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      char char0 = 'Z';
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'ru`u=h", string1);
      
      String string2 = StringUtils.remove("y'Ru`U=h", 'Z');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      char char1 = ')';
      String string3 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Comparator should not be null.", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = 76;
      String string4 = StringUtils.rotate("i]X{0YT$Yu;cNP~S", 0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("i]X{0YT$Yu;cNP~S", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern(".}) l`9Pb?6", "Qu^&58A<[d?O@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 131
         // Qu^&58A<[d?O@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null
         //                                                                                                                                    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.rotate("Sj@D@k+)cdy,!n-Ql", 0);
      assertNotNull(string0);
      assertEquals("Sj@D@k+)cdy,!n-Ql", string0);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'ru`u=h", string1);
      
      String string2 = StringUtils.remove("y'Ru`U=h", 'Z');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      String string3 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Comparator should not be null.", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("y'Ru`U=h");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "y'Ru`U=h", (CharSequence) "Comparator should not be null.");
      assertTrue(boolean0);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "H7;F3;=x,pwtphuZNS~");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.normalizeSpace("y'Ru`U=h");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("y'Ru`U=h", string4);
      
      String string5 = StringUtils.abbreviate("", "Comparator should not be null.", 0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.remove("[[t1+uxet#Q>g#d", "");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("[[t1+uxet#Q>g#d", string6);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains("\r"));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      String string4 = StringUtils.difference("", "9\" LD.mOV[g@I9Ic");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("9\" LD.mOV[g@I9Ic", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean5 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      String string5 = StringUtils.upperCase("");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.remove("", "");
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      String string0 = StringUtils.strip(",");
      assertNotNull(string0);
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "#u#&");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("i:[@&8a:K?", "$|VzQ4xe> !BcSdO]");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.strip("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FR", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string2 = locale0.getDisplayCountry();
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("France", string2);
      
      String string3 = locale1.getDisplayLanguage(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("fran\u00E7ais", string3);
      
      String string4 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("ExpectedException");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "fran\u00E7ais";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean3 = StringUtils.startsWithAny("ExpectedException", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = StringUtils.countMatches((CharSequence) "ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.ordinalIndexOf("\r", " ", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("", (-2939));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removePattern("y'Ru`U=h", "6E9qA");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'Ru`U=h", string1);
      
      String string2 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "gK*(cWH|kLZ)+K%^2I", "fi2K>M|B7[bi", (-4746));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string2);
      
      String string3 = StringUtils.rightPad("fi2K>M|B7[bi", 0, 'f');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("fi2K>M|B7[bi", string3);
      
      int int1 = StringUtils.ordinalIndexOf("fi2K>M|B7[bi", "", (-768));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      longArray0[1] = (-1204L);
      longArray0[2] = 0L;
      String string1 = StringUtils.left("\r", 2459);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      boolean boolean0 = StringUtils.equalsAny("\r", stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(" vs "));
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'z', Integer.MAX_VALUE, 2459);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(arrayList0.contains(" vs "));
      
      String string3 = StringUtils.removeIgnoreCase("", "E`B,*l&Cr~:GMphI49M");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      String string0 = StringUtils.swapCase("Rm");
      assertNotNull(string0);
      assertEquals("rM", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Rm", (CharSequence) "rM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      String string0 = StringUtils.replaceOnce((String) null, "~>T>NJ)TA;", "i6sL'{?`7Md9'");
      assertNull(string0);
      
      char char0 = 'k';
      String string1 = "-|G)ijN]FV|O=";
      String[] stringArray0 = StringUtils.split("-|G)ijN]FV|O=", ')');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWith("~>T>NJ)TA;", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+");
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("-|Gp{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+ijN]FV|O=", string2);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 28;
      floatArray0[1] = (float) (-1033);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) (-1033);
      floatArray0[4] = (float) ')';
      floatArray0[5] = (float) (-1033);
      char char1 = '8';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '8', (-1033), 28);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1033
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("Nlo1%d$?tX[.cDI2*", "Nlo1%d$?tX[.cDI2*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // Nlo1%d$?tX[.cDI2*
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ExpectedExceptdin", "ExpectedExceptdin");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(17, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can only resolve parameter of type ";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Can only resolve parameter of type ", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("...", "s'/n0D,;'2*M");
      assertEquals((-69), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Can only resolve parameter of type ", (CharSequence) "s'/n0D,;'2*M");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.leftPad("!If+ZhvN$ iQzX5fqL", 50, " B#{&p");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" B#{&p B#{&p B#{&p B#{&p B#{&p !If+ZhvN$ iQzX5fqL", string1);
      
      String string2 = StringUtils.replace("Can only resolve parameter of type ", "4o*?k}).$X;)<", "...", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Can only resolve parameter of type ", string2);
      
      boolean boolean1 = StringUtils.isNumericSpace(" B#{&p");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.strip(">Z9gCJUn'Am", "Can only resolve parameter of type ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(">Z9gCJUn'A", string3);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Nlo1%d$?tX[.cDI2*", (CharSequence) "Nlo1%d$?tX[.cDI2*");
      assertEquals(0, int0);
      
      String string0 = StringUtils.join((Object[]) null, "Nlo1%d$?tX[.cDI2*", 7, 7);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = "Locale must not be null";
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isNotBlank("Locale must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("Locale must not be null");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = null;
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'B');
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("BLocale must not be nullBBLocale must not be nullBB", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-2729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cv3", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Cv3", "Cv3", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.right("", 5);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = (-740);
      intArray0[3] = (-3078);
      intArray0[4] = 5;
      intArray0[5] = (-740);
      intArray0[6] = (-740);
      intArray0[7] = 5;
      intArray0[8] = 0;
      boolean boolean1 = StringUtils.isBlank("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String string0 = "N5[$=";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("N5[$=", "N5[$=", "N5[$=");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // N5[$=
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("C!kjQv", 'H');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("NHu ", "C!kjQv");
      assertNotNull(string0);
      assertEquals("C!kjQvNHu C!kjQv", string0);
      
      int int0 = StringUtils.compareIgnoreCase("_*9v6+=TX^<:", "_*9v6+=TX^<:");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("&38&5&127", 32, 'S');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&38&5&127SSSSSSSSSSSSSSSSSSSSSSS", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, ",+K");
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("C!kjQv", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "C!kjQvNHu C!kjQv", 102);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = "Aborting to prote";
      String string4 = StringUtils.reverse("Aborting to prote");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("etorp ot gnitrobA", string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("_*9v6+=TX^<:", "&38&5&127SSSSSSSSSSSSSSSSSSSSSSS");
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("etorp ot gnitrobA", "(", "ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 1
         // (
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String string0 = StringUtils.center("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 14, 'p');
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      
      String string2 = StringUtils.substringAfterLast("", "JPPo%MJt0MV,y");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(locale0));
      
      arrayList0.trimToSize();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(locale0));
      
      Locale locale1 = Locale.lookup(linkedList0, arrayList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(locale1);
      assertFalse(arrayList0.contains(locale0));
      
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Locale locale2 = Locale.ROOT;
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.toString());
      assertEquals("", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getLanguage());
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotSame(locale0, locale2);
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (-1L);
      longArray0[1] = (-3095L);
      longArray0[2] = (long) 's';
      longArray0[3] = (-1L);
      String string3 = StringUtils.join(longArray0, 'X');
      assertArrayEquals(new long[] {(-1L), (-3095L), 115L, (-1L)}, longArray0);
      assertEquals(4, longArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("-1X-3095X115X-1", string3);
      
      String string4 = StringUtils.removeEnd("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = StringUtils.split("NHu ", "@mW$A");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.length("JPPo%MJt0MV,y");
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "", ", Length: 0");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull(", Length: 0");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(", Length: 0", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(", Length: 0", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = null;
      long[] longArray0 = new long[4];
      longArray0[0] = 1L;
      longArray0[1] = 0L;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'm';
      String string3 = StringUtils.join(floatArray0, ')');
      assertArrayEquals(new float[] {109.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("109.0", string3);
      
      double[] doubleArray0 = new double[0];
      String string4 = StringUtils.join(doubleArray0, 't');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("q");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("q", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("s'}mY=vX&.", "s'}mY=vX&.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("s'}mY=vX&.", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.chop("t\n");
      assertNotNull(string0);
      assertEquals("t", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "t\n", (CharSequence) "t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cv3", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Cv3", "Cv3", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.right("", 5);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = (-740);
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(false));
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'J', 12, 9);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(arrayList0.contains(false));
      
      String string2 = StringUtils.removeIgnoreCase("", "Strings must not be null");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.EMPTY;
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", (-486));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'T';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charArray0);
      assertArrayEquals(new char[] {'V', 'T'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.removeStart("Can only resolve parameter of type ", "org.junitpioneer.jupiter.TempDirectory");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Can only resolve parameter of type ", string1);
      
      boolean boolean0 = StringUtils.isBlank("('?s)");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Can only resolve parameter of type ");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringBetween("offset cannot be negative", "ExpectedException");
      assertNull(string2);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Can only resolve parameter of type ", (CharSequence) null, 3018);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String string0 = StringUtils.replaceAll("t\n", "t\n", "t\n");
      assertNotNull(string0);
      assertEquals("t\n", string0);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceAll("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string1);
      
      boolean boolean0 = StringUtils.isAlpha("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 'j';
      objectArray0[1] = (Object) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      String string2 = StringUtils.join(objectArray0, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h");
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("j@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string2);
      
      String string3 = StringUtils.join(charArray0, 'j');
      assertArrayEquals(new char[] {'j'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("j", string3);
      
      String string4 = StringUtils.rightPad("Qu^&58A<[d?O", 3687, 'j');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String string0 = "LHAG zF([>si9QL|";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("SN@$?[|$Am/<YQ", "LHAG zF([>si9QL|");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // LHAG zF([>si9QL|
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'i', 98, 3);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.difference("Failed to create dault temp directoryFailed to create dault temp directory", "FL;1");
      assertNotNull(string0);
      assertEquals("L;1", string0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, 'K');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains('K'));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('K'));
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'E');
      assertEquals(0, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isNumericSpace("^q@FMnG;");
      assertFalse(boolean0);
      
      String string5 = StringUtils.trimToNull("^q@FMnG;");
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("^q@FMnG;", string5);
      
      String string6 = StringUtils.difference("jkt", "jkt");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width is %d");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "9k", (CharSequence) "9k", 37);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2707));
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rightPad((String) null, 0, "");
      assertNull(string1);
      
      String string2 = StringUtils.chomp((String) null, "iRdOQZ#wrIAEy");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'ru`u=h", string1);
      
      String string2 = StringUtils.remove("y'Ru`U=h", 'Z');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("y'Ru`U=h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("y'Ru`U=h", "y'Ru`U=h");
      assertTrue(boolean0);
      
      String string3 = StringUtils.trim("y'Ru`U=h");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("y'Ru`U=h", string3);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.repeat('Z', 515);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string4);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 2395L;
      longArray0[2] = (long) 'Z';
      String string5 = StringUtils.join(longArray0, '&');
      assertArrayEquals(new long[] {0L, 2395L, 90L}, longArray0);
      assertEquals(3, longArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("0&2395&90", string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: 0NHu ", "Failed to delete temp directory ", 46);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.wrapIfMissing("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", "y'Ru`U=h");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("y'Ru`U=h@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`U=h", string6);
      
      String string7 = StringUtils.join(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string7);
      assertEquals(", Length: 0NHu ", string7);
      
      boolean boolean2 = StringUtils.isEmpty(", Length: 0NHu ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string8 = StringUtils.wrapIfMissing("Qu^&58A<[d?O", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null");
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nullQu^&58A<[d?O@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", string8);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Qu^&58A<[d?O");
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(12, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("Qu^&58A<[d?O", charBuffer0.toString());
      assertEquals(12, charBuffer0.capacity());
      assertEquals(12, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(12, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ", Length: 0NHu ", (CharSequence) "Failed to delete temp directory ", 515);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.split("\r", "\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      String string1 = StringUtils.swapCase("offset cannot be negative");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("OFFSET CANNOT BE NEGATIVE", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " vs ", (CharSequence) "\r", 322);
      assertEquals(4, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " vs ", (String) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("OFFSET CANNOT BE NEGATIVE", '3');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("3OFFSET CANNOT BE NEGATIVE3", string2);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.split("\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains('='));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('='));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "^q@FMnG;", "HpwJf)mnlu#&");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace((String) null, (String) null, "^q@FMnG;", 769);
      assertNull(string3);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase((String) null, "jkt", "ExceptionWasThrown");
      assertNull(string5);
      
      String string6 = StringUtils.trimToNull("Uf");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("Uf", string6);
      
      String string7 = StringUtils.normalizeSpace((String) null);
      assertNull(string7);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.trimToNull("!B`[");
      assertNotNull(string0);
      assertEquals("!B`[", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "!B`[", (-2707));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "!B`[";
      charSequenceArray0[1] = (CharSequence) "!B`[";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "!B`[", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "!B`[", 2, 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("!B`[");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = '';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'e', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("FTe", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!B`[";
      stringArray0[1] = "!B`[";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("!B`[", string2);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[1], (CharSequence[]) stringArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.removeEndIgnoreCase("!B`[", "[6=V+]9cNPWT@tg");
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("!B`[", string3);
      
      boolean boolean3 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "!B`[", (CharSequence) "[6=V+]9cNPWT@tg");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean5 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string4 = StringUtils.leftPad(" in an array of ", (-2707), "HL3~_K,MT90>Efv");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(" in an array of ", string4);
      
      String string5 = StringUtils.swapCase(" in an array of ");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(" IN AN ARRAY OF ", string5);
      
      String string6 = StringUtils.unwrap("FTe", '^');
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("FTe", string6);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[4] = 'T';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'T', '\u0000', '\u0000', 'T'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("FT\u0000\u0000T", string0);
      
      String string1 = StringUtils.swapCase(":.1mXy;");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":.1MxY;", string1);
      
      String string2 = StringUtils.unwrap("FT\u0000\u0000T", 'F');
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("FT\u0000\u0000T", string2);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String string0 = StringUtils.defaultString("Aborting to protect against StackOverflowError - output of one loop is the input of another", "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(91, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.substring(", Length: ", 6414, 1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "vdD:\u0005v";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[0] = (CharSequence) "X0K`1@\"";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(11, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" ", "c/'_q<>1;c.y]zf=c/'_q<>1;c.y]zf=");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle(" ", "", 80);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      boolean boolean0 = StringUtils.isEmpty("c/'_q<>1;c.y]zf=c/'_q<>1;c.y]zf=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      String string0 = StringUtils.removePattern("7iD:g@%", "7iD:g@%");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("ks:XD~h>I@V1N7xv0", "R;n3!w+P~V", 55);
      assertNotNull(string0);
      assertEquals("ks:XD~h>I@V1N7xv0", string0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = '';
      charArray0[4] = 'h';
      charArray0[5] = 'T';
      charArray0[6] = 'e';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'', '', '', '', 'h', 'T', 'e'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertEquals("hTe", string0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.repeat("temp.dir", (-1108));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("", "");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("", (-1), ':');
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "[6=V+]9cNPWT@tg", (CharSequence) "");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.replace("?1~Sp-dHA{", (String) null, "?1~Sp-dHA{", (-571));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("?1~Sp-dHA{", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-1), (-1108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8$t_kPGw,Kjkx", "8$t_kPGw,Kjkx", (-166));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("N!o5Huz#;l57 ", (String) null);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 5);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("i;TY7LWO)B{D)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("J0A+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("J0A+", string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertNotSame(stringArray2, stringArray1);
      assertEquals(5, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("i;TY7LWO)B{D)", "J0A+");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trim("J0A+");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("J0A+", string3);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.repeat('&', 127);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) 5;
      longArray0[2] = (long) '&';
      longArray0[3] = (long) 5;
      longArray0[4] = (long) 127;
      String string5 = StringUtils.join(longArray0, '&');
      assertArrayEquals(new long[] {38L, 5L, 38L, 5L, 127L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("38&5&38&5&127", string5);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("J0A+", (String) null, 13);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      
      String string6 = StringUtils.wrapIfMissing("38&5&38&5&127", "HpwJf)mnl");
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("HpwJf)mnl38&5&38&5&127HpwJf)mnl", string6);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string7 = StringUtils.wrapIfMissing("", "#rVqKY`.3{");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      String string0 = StringUtils.center("\r", 0, '=');
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String string1 = "ExceptionWasThrown";
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "\r";
      stringArray1[1] = "\r";
      stringArray1[2] = "\r";
      String string2 = "";
      stringArray1[3] = "";
      stringArray1[4] = "\r";
      stringArray1[5] = "ExceptionWasThrown";
      String string3 = StringUtils.replaceIgnoreCase("dg4dL", "$", "$", 307);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("dg4dL", string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.add(object0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue1.size());
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue1.contains(object0));
      assertTrue(priorityQueue0.contains(object0));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      // Undeclared exception!
      try { 
        priorityQueue1.add("$");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "!B`[", "!B`[");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "!B`[", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("sttI'BE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.stripToEmpty("fkn>{F]N%J>.PvJ3VE");
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string6);
      
      String string7 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", 336);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) ":.1mXy;", "");
      assertTrue(boolean0);
      
      String string8 = StringUtils.replace(":.1mXy;", string7, "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-956));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals(":.1mXy;", string8);
      
      String string9 = StringUtils.stripToNull("8o#M\"UdhFy;<$zL>");
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      assertEquals("8o#M\"UdhFy;<$zL>", string9);
      
      String string10 = StringUtils.replaceIgnoreCase("'t.M=^5", "junit-pioneer", "junit-pioneer");
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertNotNull(string10);
      assertEquals("'t.M=^5", string10);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.repeat("/KWgbZ_", 2270);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[2] = 0.0F;
      String string0 = "T2o\\u O,;H";
      int int0 = StringUtils.compareIgnoreCase(string0, string0, false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeAll(string0, "The character must not be null");
      assertNotNull(string1);
      assertEquals("T2o\\u O,;H", string1);
      
      String string2 = StringUtils.normalizeSpace("QP");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("QP", string2);
      
      String string3 = StringUtils.abbreviate("The character must not be null", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 8159);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("The character must not be null", string3);
      
      String string4 = StringUtils.right("ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another", 8159);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      
      String string5 = StringUtils.SPACE;
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(" ", string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      int int1 = StringUtils.indexOfAny((CharSequence) string0, charArray0);
      assertArrayEquals(new char[] {'O'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string3));
      assertFalse(int1 == int0);
      assertEquals(6, int1);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "\r");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("~>T>NJ)TA;", (String) null, 28);
      assertNotNull(string0);
      assertEquals("~>T>NJ)TA;", string0);
      
      String string1 = StringUtils.defaultIfBlank((String) null, ", '");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(", '", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", '", "~>T>NJ)TA;");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\''}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      int int0 = 17;
      String string0 = StringUtils.abbreviateMiddle((String) null, "", 17);
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "%9y6z.x6rZOO", (String) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = " is not in the range '0' - '9'";
      String string3 = StringUtils.rotate("%9y6z.x6rZOO", 76);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("rZOO%9y6z.x6", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", "z(lJ9#kN's^V0]0I,");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // z(lJ9#kN's^V0]0I,
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String string1 = StringUtils.LF;
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\n", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Cv3";
      charSequenceArray0[1] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate((String) null, 40, 9);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String string0 = StringUtils.substring("e#tl-$3&BWU.", (-175), (-175));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("M!%GlF,-", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("M!%GlF,-", string1);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "^q@FMnG;", "^q@FMnG;");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Cv3";
      String string1 = StringUtils.join((int[]) null, 'l');
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("Aborting to prote");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Aborting to prote", string2);
      
      String string3 = StringUtils.substring("Aborting to prote", (-1081), 0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.lowerCase(" ");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(" ", string4);
      
      boolean boolean0 = StringUtils.isEmpty("Aborting to prote");
      assertFalse(boolean0);
      
      String string5 = StringUtils.wrap("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string5);
      
      String string6 = StringUtils.truncate((String) null, 4);
      assertNull(string6);
      
      String string7 = StringUtils.replace((String) null, "", (String) null, 101);
      assertNull(string7);
      
      boolean boolean1 = StringUtils.isNumericSpace("Cv3");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Cv3", (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", "/}Ar!ln_");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.substring("\r", (-1), (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Failed to create default temp directory";
      stringArray0[1] = "$'pVPflARQiaQ&DDfz";
      stringArray0[2] = "[[t1+uxet#Q>g#d";
      String string0 = StringUtils.join(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Failed to create default temp directory$'pVPflARQiaQ&DDfz[[t1+uxet#Q>g#d", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("$'pVPflARQiaQ&DDfz");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty(" in an array of ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("in an array of", string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "$'pVPflARQiaQ&DDfz");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.substring("u#&", (-1), (-2019));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "OU*'m~07(d'qa :");
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertEquals(3, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string3 = StringUtils.replace("g(JxF}s~p|", "in an array of", "Threshold must not be negative");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("g(JxF}s~p|", string3);
      
      charSequenceArray0[0] = (CharSequence) "g(JxF}s~p|";
      charSequenceArray0[1] = (CharSequence) "Failed to create default temp directory";
      charSequenceArray0[2] = (CharSequence) "Failed to create default temp directory";
      charSequenceArray0[3] = (CharSequence) "OU*'m~07(d'qa :";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "$'pVPflARQiaQ&DDfz", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '_', 16, 16);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      String string0 = StringUtils.removeAll("fu", "fu");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "fu");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("fran\u00E7ais", string2);
      
      String string3 = locale0.getDisplayScript();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("ExpectedException");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = locale0.getDisplayLanguage(locale1);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("fran\u00E7ais", string5);
      
      String[] stringArray0 = new String[0];
      String string6 = locale1.toLanguageTag();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("fr-FR", string6);
      
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string7);
      
      String string8 = StringUtils.rightPad("T", 0);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals("T", string8);
      
      String string9 = StringUtils.substringBeforeLast("org.apache.commons.lang3.StringUtils", "The extension is active, but the corresponding annotation could not be found. (This may be a bug.)");
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
      assertEquals("org.apache.commons.lang3.StringUtils", string9);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'y';
      intArray0[1] = 0;
      intArray0[2] = (int) 'y';
      String string10 = StringUtils.join(intArray0, 'y');
      assertArrayEquals(new int[] {121, 0, 121}, intArray0);
      assertEquals(3, intArray0.length);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertNotNull(string10);
      assertEquals("121y0y121", string10);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "sB");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      char char0 = 'Z';
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'ru`u=h", string1);
      
      String string2 = StringUtils.remove("y'Ru`U=h", 'Z');
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'Ru`U=h", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      char char1 = ')';
      String string3 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Comparator should not be null.", string3);
      
      float[] floatArray0 = new float[0];
      String string4 = StringUtils.join(floatArray0, 'Z');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviate("", 0, 13);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Fu_FE*RgnC$3{-", 35, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "e,\"", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", 4, 1019);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I}3[", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeFirst("I}3[", "\r");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("I}3[", string3);
      
      String string4 = StringUtils.upperCase("");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "I}3[");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.remove("blank_blank_blank_2014", "I}3[");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("blank_blank_blank_2014", string5);
      
      String string6 = StringUtils.rightPad("xVc(;U>P*~b{\"^`oRw", (-189), 'x');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("xVc(;U>P*~b{\"^`oRw", string6);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("I}3[", "I}3[");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String string0 = StringUtils.chomp("io", "6E9qA");
      assertNotNull(string0);
      assertEquals("io", string0);
      
      String string1 = StringUtils.uncapitalize("}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-33);
      boolean boolean0 = StringUtils.isAlphaSpace("io");
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad("fetEuZ,", (int) (byte) (-33), ')');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("fetEuZ,", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("NHu C!kjQv");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.defaultString("io");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("io", string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "6E9qA", (CharSequence) "io");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.capitalize("{S5:yV] 3[2: _[");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("{S5:yV] 3[2: _[", string4);
      
      boolean boolean2 = StringUtils.isMixedCase("fetEuZ,");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.substringBeforeLast("fetEuZ,", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("fetEuZ,", string5);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("fetEuZ,", "io", locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "AkmhRd/HBln}`|>5z&");
      assertEquals((-19), int0);
      
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, (-19));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = null;
      String string2 = "%xcSs";
      int int1 = 141;
      String string3 = StringUtils.replaceIgnoreCase((String) null, "%xcSs", "AkmhRd/HBln}`|>5z&", 141);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad(".)'OzSF", 0);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(".)'OzSF", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'B');
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.trimToNull((String) null);
      assertNull(string6);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray2);
      
      int int2 = 0;
      String[] stringArray3 = StringUtils.splitByWholeSeparator(".)'OzSF", "", 0);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains('B'));
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        stack0.remove((-283));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -283
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("%9y6z.x6rZOO", "", "%9y6z.x6rZOO");
      assertNotNull(string0);
      assertEquals("%9y6z.x6rZOO", string0);
      
      String[] stringArray0 = StringUtils.split("Failed to get parent directory from provider", 'k');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWith("Failed to get parent directory from provider", "Failed to get parent directory from provider");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "RI:w6CKW\rbAL=P%SNS");
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provider", string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'k', (-1033), (-1033));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.rightPad("", 0);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.substringBeforeLast("%9y6z.x6rZOO", "Failed to get parent directory from provider");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("%9y6z.x6rZOO", string4);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (int) 'k';
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1033);
      intArray0[5] = (int) 'k';
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1033);
      String string5 = StringUtils.join(intArray0, 'k');
      assertArrayEquals(new int[] {0, 107, 0, 0, (-1033), 107, 0, 0, (-1033)}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("0k107k0k0k-1033k107k0k0k-1033", string5);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "=o.Ok3O~~mn<");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 107);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.reverseDelimited("", '7');
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int1 = StringUtils.compareIgnoreCase("&M0sSg{'Xfw>AyRl", "");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      String string3 = StringUtils.removeStartIgnoreCase(":.1mXy;", ":.1mXy;");
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.wrap("Failed to delete temp directory ", "fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("fkn>{F]N%J>.PvJ3VEFailed to delete temp directory fkn>{F]N%J>.PvJ3VE", string4);
      
      String string5 = StringUtils.reverseDelimited(":.1mXy;", '4');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(":.1mXy;", string5);
      
      String string6 = StringUtils.replaceIgnoreCase((String) null, "53^", "fkn>{F]N%J>.PvJ3VE", 17);
      assertNull(string6);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '4';
      charArray0[3] = '7';
      charArray0[4] = '7';
      boolean boolean0 = StringUtils.containsAny((CharSequence) ":.1mXy;", charArray0);
      assertArrayEquals(new char[] {'7', '7', '4', '7', '7'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string7 = StringUtils.substringAfterLast("HpwJf)mnlu#&", "");
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("", string7);
      
      String string8 = StringUtils.removeEndIgnoreCase((String) null, "io6E9qA");
      assertNull(string8);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.abbreviate("", 6);
      assertFalse(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 5);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("i;TY7LWO)B{D)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("J0A+");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("J0A+", string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertNotSame(stringArray2, stringArray1);
      assertEquals(5, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("i;TY7LWO)B{D)", "J0A+");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trim("J0A+");
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("J0A+", string3);
      
      String string4 = StringUtils.repeat('&', 127);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&", string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) '&';
      longArray0[1] = (long) 5;
      longArray0[2] = (long) '&';
      longArray0[3] = (long) 5;
      longArray0[4] = (long) 127;
      String string5 = StringUtils.join(longArray0, '&');
      assertArrayEquals(new long[] {38L, 5L, 38L, 5L, 127L}, longArray0);
      assertEquals(5, longArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("38&5&38&5&127", string5);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("J0A+", (String) null, 13);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      
      String string6 = StringUtils.wrapIfMissing("38&5&38&5&127", "HpwJf)mnl");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("HpwJf)mnl38&5&38&5&127HpwJf)mnl", string6);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.replaceEachRepeatedly("J0A+", stringArray1, stringArray1);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(1, stringArray1.length);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertNotNull(string7);
      assertEquals("J0A+", string7);
      
      String string8 = StringUtils.rotate("HpwJf)mnl", 108);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals("HpwJf)mnl", string8);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("ExceptionWasThrown"));
      
      boolean boolean0 = priorityQueue0.addAll(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertFalse(linkedList0.contains("ExceptionWasThrown"));
      
      boolean boolean1 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains("ExceptionWasThrown"));
      
      boolean boolean2 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue1.contains("ExceptionWasThrown"));
      assertFalse(priorityQueue1.contains(0));
      
      boolean boolean3 = priorityQueue1.add("");
      assertEquals(1, priorityQueue0.size());
      assertEquals(3, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue1.contains("ExceptionWasThrown"));
      assertFalse(priorityQueue1.contains(0));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(3, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("P^q@FMnG;PExceptionWasThrown", string3);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      assertTrue(priorityQueue1.contains("ExceptionWasThrown"));
      assertFalse(priorityQueue1.contains(0));
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      String string5 = StringUtils.stripToEmpty("8Ot<S");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("8Ot<S", string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, (String[]) null);
      assertEquals(0, stringArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      
      String string7 = StringUtils.rotate("HpwJf)mnl", (-1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("pwJf)mnlH", string7);
      
      String string8 = StringUtils.overlay("P^q@FMnG;PExceptionWasThrown", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", 0, (-1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setP^q@FMnG;PExceptionWasThrown", string8);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("FR", locale2.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("fran\u00E7ais", string2);
      
      String string3 = locale0.getDisplayScript();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("ExpectedException");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[0];
      String string5 = locale1.toLanguageTag();
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("fr-FR", string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "fran\u00E7ais";
      charSequenceArray0[3] = (CharSequence) null;
      String string7 = StringUtils.substringBeforeLast("", "");
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("", string7);
      
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale3.getVariant());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zh_TW", locale3.toString());
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) null, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("maxWith cannot be negative", "maxWith cannot be negative");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(charSequence0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = StringUtils.difference("Minimum abbreviation width with offset is %d", "&&(q/4?7A|e|Z|l");
      assertNotNull(string0);
      assertEquals("&&(q/4?7A|e|Z|l", string0);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\r", (CharSequence) " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[3], charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = null;
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'B');
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Borg.junitpioneer.vintage.ExpectedExceptionExtensionBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBB", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-2729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.capitalize("or");
      assertNotNull(string0);
      assertEquals("Or", string0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[2] = (CharSequence) "-bq4M~c]&>$b5QM";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string2 = StringUtils.join(charArray0, 'B');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals(0, linkedList0.size());
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(linkedList0.contains("\r"));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("-bq4M~c]&>$b5QM");
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      String string4 = StringUtils.difference("", "9\" LD.mOV[g@I9Ic");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("9\" LD.mOV[g@I9Ic", string4);
      
      int int0 = StringUtils.length(charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      boolean boolean5 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      String string5 = StringUtils.chop(" in an array of ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(" in an array of", string5);
      
      String string6 = StringUtils.removeStart((String) null, "");
      assertNull(string6);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) null, 6);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("%9y6z.x6rZOO", "", "%9y6z.x6rZOO");
      assertNotNull(string0);
      assertEquals("%9y6z.x6rZOO", string0);
      
      String[] stringArray0 = StringUtils.split("Failed to get parent directory from provider", 'k');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWith("Failed to get parent directory from provider", "Failed to get parent directory from provider");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "RI:w6CKW\rbAL=P%SNS");
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provider", string1);
      
      String string2 = StringUtils.left("Failed to get parent directory from provider", (-1033));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2972);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("6E9qA", (-95), '/');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("6E9qA", string3);
      
      String string4 = StringUtils.removeStart("", "");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((int[]) null, '-', (-95), 19);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isBlank("RI:w6CKW\rbAL=P%SNS");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2910);
      shortArray0[1] = (short) (-1112);
      shortArray0[2] = (short) (-3632);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)4;
      shortArray0[6] = (short)321;
      shortArray0[7] = (short)4;
      shortArray0[8] = (short)86;
      String string6 = StringUtils.join(shortArray0, 'Y');
      assertArrayEquals(new short[] {(short) (-2910), (short) (-1112), (short) (-3632), (short) (-1), (short) (-1), (short)4, (short)321, (short)4, (short)86}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("-2910Y-1112Y-3632Y-1Y-1Y4Y321Y4Y86", string6);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.startsWith("\r", "\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("\r", "f&u");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("f&u\rf&u", string1);
      
      String[] stringArray0 = StringUtils.split("rPSAh4utY#", "f&u");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("f&u\rf&u", "\r");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.truncate("^H29'Xf48+qRZ_@", 0, 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat("f&u", "^H29'Xf48+qRZ_@", (-844));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "^H29'Xf48+qRZ_@");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "|(GbA4";
      stringArray0[4] = "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET";
      boolean boolean2 = StringUtils.contains((CharSequence) "#O'", 65);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("h: 0", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", 65);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "@DefaultLocale can only be used with language tag if language, country, and variant are not set", 2366, (-1548));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("5IYCu'`eE!;#?*9", "", true);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String string0 = StringUtils.rightPad("X65]@)6bG(", 1, "X65]@)6bG(");
      assertNotNull(string0);
      assertEquals("X65]@)6bG(", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "X65]@)6bG(", (CharSequence) "X65]@)6bG(");
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) (-1033);
      String string1 = StringUtils.join(floatArray0, '<', 1, (-1033));
      assertArrayEquals(new float[] {1.0F, 1.0F, (-1033.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", 1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", string2);
      
      String string3 = StringUtils.substringBeforeLast("C!kjQvNHu ", "The type must not be null");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("C!kjQvNHu ", string3);
      
      int[] intArray0 = new int[0];
      String string4 = StringUtils.join(intArray0, '<');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "X65]@)6bG(", "NHu ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.repeat("1v", 31);
      assertNotNull(string0);
      assertEquals("1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v1v", string0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      String string0 = StringUtils.repeat("r", 8352);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      String string2 = StringUtils.repeat("cr", 565);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "cr", "C!kjQvNHu ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replace("cr", "Array element ", "", (-647));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("cr", string3);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.repeat("or", (-853));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("s'}mY=vX&.", "s'}mY=vX&.");
      assertNotNull(string0);
      assertEquals("s'}mY=vX&.", string0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'Q';
      floatArray0[1] = (float) 'Q';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'Q', (-2093064), 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2093064
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 2592.0F;
      objectArray0[2] = (Object) "RI:w6CKW\rbAL=P%SNS";
      objectArray0[3] = (Object) 0.0F;
      objectArray0[4] = (Object) 2592.0F;
      objectArray0[5] = (Object) 0.0F;
      objectArray0[7] = (Object) 2592.0F;
      String string0 = StringUtils.join(objectArray0, "RI:w6CKW\rbAL=P%SNS");
      assertEquals(8, objectArray0.length);
      assertNotNull(string0);
      assertEquals("0.0RI:w6CKW\rbAL=P%SNS2592.0RI:w6CKW\rbAL=P%SNSRI:w6CKW\rbAL=P%SNSRI:w6CKW\rbAL=P%SNS0.0RI:w6CKW\rbAL=P%SNS2592.0RI:w6CKW\rbAL=P%SNS0.0RI:w6CKW\rbAL=P%SNSRI:w6CKW\rbAL=P%SNS2592.0", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'p', (-1033), 23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1033
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("%9y6z.x6rZOO", "", "%9y6z.x6rZOO");
      assertNotNull(string0);
      assertEquals("%9y6z.x6rZOO", string0);
      
      String[] stringArray0 = StringUtils.split("Failed to get parent directory from provider", 'k');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWith("Failed to get parent directory from provider", "Failed to get parent directory from provider");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) '>';
      String string1 = StringUtils.join(floatArray0, 'k');
      assertArrayEquals(new float[] {(-1.0F), 62.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("-1.0k62.0", string1);
      
      String string2 = StringUtils.abbreviate("Failed to get parent directory from provider", 606, 1620);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to get parent directory from provider", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("HpwJf)mnlu#&", (-41), (-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0.0F;
      String string0 = StringUtils.removeStart("\"T7KSG.}tU~O[KijY", "");
      assertNotNull(string0);
      assertEquals("\"T7KSG.}tU~O[KijY", string0);
      
      String string1 = StringUtils.join((int[]) null, 'k', (-1), (-3198));
      assertNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '.', (-2818), 12);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.removeStart("%fNMa", "");
      assertNotNull(string0);
      assertEquals("%fNMa", string0);
      
      String string1 = StringUtils.chomp("", "%fNMa");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace(",V7E");
      assertNotNull(string0);
      assertEquals(",V7E", string0);
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("+[\"8M_jWxx1!='");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("+[\"8M_jWxx1!='", stringArray0);
      assertEquals(13, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ":.1mXy;", (-3286), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("&M0sSg{'Xfw>AyRl");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = 'F';
      charArray0[4] = 'T';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'e', 'F', 'T'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("FTeFT", string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&M0", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-65);
      byteArray0[4] = (byte) (-96);
      String string2 = StringUtils.join(byteArray0, 'T');
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-65), (byte) (-65), (byte) (-96)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-96T-96T-65T-65T-96", string2);
      
      String string3 = StringUtils.left("yY@Q$", 3410);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("yY@Q$", string3);
      
      boolean boolean1 = StringUtils.endsWithAny("FTeFT", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "AkmhRd/HBln}`|>5z&");
      assertEquals((-19), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, (-19));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, "%xcSs", "AkmhRd/HBln}`|>5z&", (-19));
      assertNull(string0);
      
      String string1 = StringUtils.leftPad(".)'OzSF", 0);
      assertNotNull(string1);
      assertEquals(".)'OzSF", string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'B');
      assertEquals(0, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("0pD^", "", (String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray2);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-96);
      String string4 = StringUtils.join(byteArray0, 'B');
      assertArrayEquals(new byte[] {(byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96), (byte) (-96)}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("-96B-96B-96B-96B-96B-96", string4);
      
      String string5 = StringUtils.left((String) null, (byte) (-96));
      assertNull(string5);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      String string6 = "\\u";
      String string7 = StringUtils.stripStart("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String[] stringArray0 = new String[12];
      boolean boolean0 = StringUtils.endsWithAny("e^", stringArray0);
      assertEquals(12, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.unwrap("j#DHd''DMt", "Ptp99Q|");
      assertNotNull(string0);
      assertEquals("j#DHd''DMt", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("j#DHd''DMt");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "j#DHd''DMt";
      objectArray0[1] = (Object) "j#DHd''DMt";
      String string1 = StringUtils.join(objectArray0, "'");
      assertEquals(2, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j#DHd''DMt'j#DHd''DMt", string1);
      
      String string2 = StringUtils.leftPad("Cannot store ", 120);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("                                                                                                           Cannot store ", string2);
      
      String string3 = StringUtils.trimToNull("Ptp99Q|");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Ptp99Q|", string3);
      
      String string4 = StringUtils.center("&FiTCd[T", 120, "j#DHd''DMt");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'", string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("HYc[`Ak$\"`s].+", "");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("HYc[`Ak$\"`s].+", string5);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-65);
      byteArray0[7] = (byte) (-96);
      String string6 = StringUtils.join(byteArray0, '$');
      assertArrayEquals(new byte[] {(byte) (-1), (byte)57, (byte) (-96), (byte)65, (byte)5, (byte) (-51), (byte) (-65), (byte) (-96)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("-1$57$-96$65$5$-51$-65$-96", string6);
      
      String string7 = StringUtils.left("j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'", 120);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals("j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'", string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "j#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd&FiTCd[Tj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd''DMtj#DHd'";
      charSequenceArray0[1] = (CharSequence) "HYc[`Ak$\"`s].+";
      charSequenceArray0[2] = (CharSequence) "                                                                                                           Cannot store ";
      charSequenceArray0[3] = (CharSequence) "Cannot store ";
      charSequenceArray0[4] = (CharSequence) "HYc[`Ak$\"`s].+";
      boolean boolean1 = StringUtils.endsWithAny("Cannot store ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny(", '", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.chomp("io", "6E9qA");
      assertNotNull(string0);
      assertEquals("io", string0);
      
      String string1 = StringUtils.uncapitalize("}");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("}", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("'AM", "'AM", "'AM");
      assertNotNull(string0);
      assertEquals("'AM", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("'AM", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("'AM", "'AM", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) "j#DHd''DMt";
      String string0 = StringUtils.join(objectArray0, "'");
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      assertEquals("'j#DHd''DMt", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j#DHd''DMt";
      stringArray0[1] = "'j#DHd''DMt";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "'j#DHd''DMt";
      stringArray0[5] = "j#DHd''DMt";
      stringArray0[6] = "Ptp99Q|";
      stringArray0[8] = "Ptp99Q|";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("j#DHd''DMt", string1);
      
      String string2 = StringUtils.join(objectArray0, 'V');
      assertEquals(2, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Vj#DHd''DMt", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("Vj#DHd''DMt");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToNull("p^tTWz");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("p^tTWz", string3);
      
      String string4 = StringUtils.wrap("", 'F');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'n');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String string0 = StringUtils.center("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", 5, "Y;");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.isAlpha("\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("\n", 54, "");
      assertNotNull(string0);
      assertEquals("                          \n                           ", string0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("%9y6z.x6rZOO", "", "%9y6z.x6rZOO");
      assertNotNull(string0);
      assertEquals("%9y6z.x6rZOO", string0);
      
      String[] stringArray0 = StringUtils.split("Failed to get parent directory from provider", 'k');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWith("Failed to get parent directory from provider", "Failed to get parent directory from provider");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "RI:w6CKW\rbAL=P%SNS");
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provider", string1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'k', (-1033), (-1033));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnce("n7z;`Y", "offset cannot be negative", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("n7z;`Y", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'k', 6, 6);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.trim("Failed to get parent directory from provider");
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("Failed to get parent directory from provider", string5);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Array element ", "");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceFirst("org.apache.commons.lang3.CharUtils", "", "@DefaultLocale can on y be used witO language tag if language, country, and variant are not set");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DefaultLocale can on y be used witO language tag if language, country, and variant are not setorg.apache.commons.lang3.CharUtils", string1);
      
      String string2 = StringUtils.substringBetween("", "", (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isEmpty("org.apache.commons.lang3.CharUtils");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Jm8@EI :=tW", "@DefaultLocale can on y be used witO language tag if language, country, and variant are not setorg.apache.commons.lang3.CharUtils");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[5] = 'V';
      charArray0[1] = '9';
      charArray0[2] = 'F';
      charArray0[3] = '~';
      charArray0[4] = 'b';
      charArray0[5] = '\"';
      String string3 = StringUtils.join(charArray0, '\"');
      assertArrayEquals(new char[] {'\u0000', '9', 'F', '~', 'b', '\"'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\u0000\"9\"F\"~\"b\"\"", string3);
      
      String string4 = StringUtils.substringBetween((String) null, "U}#u.d>J`Vj?3zvs^Q%", "\u0000\"9\"F\"~\"b\"\"");
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Jm8@EI :=tW", '&');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = StringUtils.mid("", (-2684), (-2684));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      String string0 = StringUtils.abbreviate("VWHX<+ 7L lW#dxR8A", Integer.MAX_VALUE, 11);
      assertNotNull(string0);
      assertEquals("...lW#dxR8A", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("VWHX<+ 7L lW#dxR8A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      String string0 = StringUtils.abbreviate("0,f@8M>uEH`E", 11, 11);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("q{e<r<%o#oj @38aPbk", (-932), (-3883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, '>');
      assertArrayEquals(new float[] {2592.0F, 0.0F, 0.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("2592.0>0.0>0.0>1.0>-1.0", string0);
      
      String string1 = StringUtils.abbreviate("2592.0>0.0>0.0>1.0>-1.0", 16, 16);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("...>0.0>1.0>-1.0", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("HpwJf)mnlu#&", (-3954), (-3954));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      String string0 = StringUtils.defaultString("k |55cQx]D", "%PRQ");
      assertNotNull(string0);
      assertEquals("k |55cQx]D", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "k |55cQx]D", 188, 188);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-2442L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      String string0 = StringUtils.join(longArray0, 'Q');
      assertArrayEquals(new long[] {(-2442L), 0L, 0L, 1L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      assertNotNull(string0);
      assertEquals("-2442Q0Q0Q1Q0", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "-2442Q0Q0Q1Q0", 65);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-2442Q0Q0Q1Q0", "", 65);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Fn&_HQNO3A/$oz}=");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "-2442Q0Q0Q1Q0", 65, 65);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("", "", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.removeAll("^q@FMnG;", "^q@FMnG;");
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("^q@FMnG;");
      assertArrayEquals(new int[] {94, 113, 64, 127, 70, 77, 110, 71, 59}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("^q@FMnG;");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "^q@FMnG;", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("^q@FMnG;");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("^q@FMnG;"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      String string1 = StringUtils.join(iterator0, 'b');
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("^q@FMnG;");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string2 = StringUtils.join((Object[]) null, "", (-283), 7);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.chomp("io", "6E9qA");
      assertNotNull(string0);
      assertEquals("io", string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-43);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6E9qA";
      stringArray0[1] = "io";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "io");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join((Object[]) stringArray1, 'X', 108, (int) (byte) (-43));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("6E9qA");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "io", (CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.join((Object[]) stringArray1, "", 634, 0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.toRootLowerCase("C!kjQvNHu ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("c!kjqvnhu ", string4);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.mid("\r", 0, 2147483533);
      assertNotNull(string0);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.mid("\r", 1243, 1243);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "[");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      String[] stringArray1 = StringUtils.splitByCharacterType("Strings must not be null");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(10, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.split((String) null);
      assertNull(stringArray2);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, (CharSequence) "#O'");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.capitalize("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string4);
      
      boolean boolean3 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.substringBeforeLast("<g^i0N", "[A+/I5F6=");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("<g^i0N", string5);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string6 = StringUtils.mid("HpwJf)mnl", 0, 430);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("HpwJf)mnl", string6);
      
      int int0 = StringUtils.getFuzzyDistance("5IYCu'`eE!;#?*9", "HpwJf)mnl", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int0);
      
      String string7 = StringUtils.toRootLowerCase("HpwJf)mnl");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("hpwjf)mnl", string7);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.stripToNull("\n");
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "\n";
      stringArray0[2] = " ";
      stringArray0[3] = "\r";
      stringArray0[4] = " ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      String string0 = StringUtils.difference("fu ", (String) null);
      assertNotNull(string0);
      assertEquals("fu ", string0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("FRA", locale2.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotNull(locale2);
      
      String string2 = locale1.getDisplayLanguage(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("fran\u00E7ais", string2);
      
      String string3 = locale0.getDisplayScript();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("ExpectedException");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[0];
      String string5 = locale1.toLanguageTag();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("fr-FR", string5);
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "fran\u00E7ais";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean3 = StringUtils.startsWithAny("ExpectedException", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      String string7 = StringUtils.difference("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string7);
      
      int int0 = StringUtils.length("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertNotNull(string0);
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("y'ru`u=h", string1);
      
      String string2 = StringUtils.chop("y'ru`u=h");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("y'ru`u=", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Comparator should not be null.", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("y'Ru`U=h");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "y'Ru`U=h", (CharSequence) "Comparator should not be null.");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.capitalize("");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.isMixedCase("Comparator should not be null.");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.startsWithAny("", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isMixedCase("\r");
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string5 = StringUtils.difference("y'ru`u=h", "Comparator should not be null.");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("Comparator should not be null.", string5);
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      String string0 = StringUtils.difference(", ", ", ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfter("\r", " ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringAfter("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String string0 = StringUtils.substringAfter("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.swapCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("\r"));
      
      boolean boolean2 = arrayList0.add((Object) "");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(arrayList0.contains("\r"));
      assertTrue(arrayList0.contains(""));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("\r"));
      assertTrue(arrayList0.contains(""));
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertTrue(listIterator0.hasPrevious());
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(arrayList0.contains("\r"));
      assertTrue(arrayList0.contains(""));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      boolean boolean3 = StringUtils.isEmpty("");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", (CharSequence) "Nlo1&%d$?X[.cD2*");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertEquals(51, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[2], "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'E');
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensionEEEorg.junitpioneer.vintage.ExpectedExceptionExtensionEE", string1);
      
      String string2 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtensionEEEorg.junitpioneer.vintage.ExpectedExceptionExtensionEE", 27);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("org.junitpioneer.vintage.Ex", string2);
      
      String string3 = StringUtils.replacePattern("", "", (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceOnce("", "", "59<");
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.removeEndIgnoreCase("io", "io6E9qA");
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("io", string5);
      
      String string6 = StringUtils.capitalize("");
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[2], 51);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string7 = StringUtils.substringAfter(". The following paths could not be deleted (see suppressed exceptions for details): ", "NK.;EHQrY[ay");
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'V');
      assertEquals(18, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("VVVVVVVVVVVVVVVVV", string0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "VVVVVVVVVVVVVVVVV", "Locale must not be null^q@FMnG;");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringAfter("{?h%}qRx|", "9iO6{WdK");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("or");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "org.apache.commons.lang3.StringUtils", 0);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains('='));
      
      Locale locale0 = new Locale("Izuc00)");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("izuc00)", locale0.toString());
      assertEquals("izuc00)", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("izuc00)", locale0.toString());
      assertEquals("izuc00)", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("izuc00)", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("izuc00)", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("izuc00)", locale0.toString());
      assertEquals("izuc00)", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2488.9575F;
      floatArray0[2] = (float) 0;
      String string3 = StringUtils.join(floatArray0, '=');
      assertArrayEquals(new float[] {0.0F, 2488.9575F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("0.0=2488.9575=0.0", string3);
      
      String string4 = StringUtils.join((double[]) null, 'U');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 5084;
      String string0 = StringUtils.join(doubleArray0, 'T');
      assertArrayEquals(new double[] {0.0, 5084.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("0.0T5084.0T0.0", string0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      
      String string2 = StringUtils.substringAfterLast("", "JPPo%MJt0MV,y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) priorityQueue0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode0);
      assertEquals(0, linkedList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertFalse(list1.contains(locale0));
      
      Locale locale1 = Locale.ROOT;
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'm');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'm';
      doubleArray0[1] = (double) 'm';
      doubleArray0[2] = (double) 'm';
      doubleArray0[3] = 1.0;
      String string4 = StringUtils.join(doubleArray0, 'm');
      assertArrayEquals(new double[] {109.0, 109.0, 109.0, 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("109.0m109.0m109.0m1.0", string4);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("'za>qKtdbezy,", 'K');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Qb`i3r?FG333", 'Q');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("]zCVW8XrG", 'G');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      
      boolean boolean1 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ExceptionWasThrownP^q@FMnG;", string3);
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '=', '='}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("========", string5);
      
      String string6 = StringUtils.join(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.join(charArray0, 'J');
      assertArrayEquals(new char[] {'=', '=', '=', '=', '=', '=', '=', '='}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("=J=J=J=J=J=J=J=", string7);
      
      String[] stringArray1 = StringUtils.split("=J=J=J=J=J=J=J=", '=');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(7, stringArray1.length);
      assertEquals(7, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", true);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      stringArray0[4] = "TgyB%<dQZ8'lT";
      stringArray0[5] = "";
      boolean boolean1 = StringUtils.isAlpha("org.junitpioneer.vintage.TimeoutExtension");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "org.apache.commons.lang3.CharSequenceUtils");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "kg}v 2<^S";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("kg}v 2<^S", "kg}v 2<^S", false);
      assertEquals(0, int0);
      
      String string2 = StringUtils.right("T4j<]gw;", 61);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("T4j<]gw;", string2);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-740);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-3078);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'v', (-3081), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3081
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("\r", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("\r", "\"OB}I%cJ-33R^&2G");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\r", string1);
      
      String string2 = StringUtils.substringAfter("\r", "\r");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.substringAfterLast(" ", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", " ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int0 = (-299);
      String string2 = StringUtils.leftPad("", (-299));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.center("", 100, "DefaultLocale");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("DefaultLocaleDefaultLocaleDefaultLocaleDefaultLocaDefaultLocaleDefaultLocaleDefaultLocaleDefaultLoca", string3);
      
      String string4 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.strip(">SPEq+AE,6k8;");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(">SPEq+AE,6k8;", string5);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) ">SPEq+AE,6k8;", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = "Z/?sc1rN`Nx<F0Il\"";
      String[] stringArray1 = StringUtils.substringsBetween("", "nQ$E,&)%o~<M`Tsn8p", "");
      assertNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "nQ$E,&)%o~<M`Tsn8p", (CharSequence) "", 291);
      assertFalse(int1 == int0);
      assertEquals(19, int1);
      
      String[] stringArray2 = StringUtils.substringsBetween("YEy=", ">SPEq+AE,6k8;", ")");
      assertNull(stringArray2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", 18, (-299));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains('='));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('='));
      
      boolean boolean0 = priorityQueue0.addAll(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(priorityQueue0.contains('='));
      assertFalse(linkedList0.contains('='));
      
      boolean boolean1 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue1.contains("^q@FMnG;"));
      assertFalse(priorityQueue1.contains('='));
      
      boolean boolean2 = priorityQueue1.add("ExceptionWasThrown");
      assertEquals(1, priorityQueue0.size());
      assertEquals(2, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains('='));
      assertTrue(priorityQueue1.contains("ExceptionWasThrown"));
      assertFalse(priorityQueue1.contains('='));
      
      boolean boolean3 = priorityQueue1.add("");
      assertEquals(1, priorityQueue0.size());
      assertEquals(3, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      assertTrue(priorityQueue1.contains(""));
      assertFalse(priorityQueue1.contains("%d|BD{F=se"));
      
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals(1, priorityQueue0.size());
      assertEquals(3, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("P^q@FMnG;PExceptionWasThrown", string3);
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      assertTrue(priorityQueue1.contains(""));
      assertFalse(priorityQueue1.contains("%d|BD{F=se"));
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      String string5 = StringUtils.replaceIgnoreCase("\"M*PsD$;", (String) null, "p{InCombiningDiacriticalMarks}+", 101);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("\"M*PsD$;", string5);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "%d|BD{F=se", charArray0);
      assertArrayEquals(new char[] {'=', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      String string6 = StringUtils.substringAfterLast("io6E9qA", "");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals("", string6);
      
      String string7 = StringUtils.removeEndIgnoreCase("io6E9qA", "^q@FMnG;");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals("io6E9qA", string7);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.substring("^q@FMnG;", (-171));
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertArrayEquals(new short[] {(short)52}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", false);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      stringArray0[4] = "TgyB%<dQZ8'lT";
      stringArray0[5] = "";
      String string2 = StringUtils.substring("TgyB%<dQZ8'lT", (-41));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("TgyB%<dQZ8'lT", string2);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 2169);
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid((String) null, (-3235), (-2707));
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("D7i^K3 AIE%ZAZK`", ')');
      assertNotNull(string2);
      assertEquals("D7i^K3 AIE%ZAZK`", string2);
      
      String string3 = StringUtils.stripToEmpty((String) null);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat((String) null, 74);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replace("m=60c/PdB:", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", "@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-4292));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals("m=60c/PdB:", string5);
      
      String string6 = StringUtils.stripToNull("");
      assertNull(string6);
      
      String string7 = StringUtils.replaceIgnoreCase("iQI;oO;{f", (String) null, "; GH^s$FPFOJD;:");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("iQI;oO;{f", string7);
      
      String string8 = StringUtils.deleteWhitespace("m=60c/PdB:");
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals("m=60c/PdB:", string8);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (CharSequence) "m=60c/PdB:");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      String string1 = StringUtils.rightPad("org.junitpioneer.jupiter.DefaultTimeZoneExtension", 46, 'E');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string1);
      
      String string2 = StringUtils.replace(";r(jl-p.{['Y|A7:", (String) null, "Locale must not be null", 55);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(";r(jl-p.{['Y|A7:", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "Locale must not be null";
      stringArray0[2] = "Locale must not be null";
      stringArray0[3] = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      stringArray0[4] = "org.junitpioneer.jupiter.DefaultTimeZoneExtension";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "C!kjQv");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((Object[]) null, 'E', (-67), (-67));
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Locale must not be null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Locale must not be null", (CharSequence[]) stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "org.junitpioneer.jupiter.DefaultTimeZoneExtension", 97, 1431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.split("\r", "\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.right("*WU6t -7#/", 308);
      assertNotNull(string0);
      assertEquals("*WU6t -7#/", string0);
      
      boolean boolean0 = StringUtils.isBlank("*WU6t -7#/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      String string0 = StringUtils.stripStart("l$I*5'", "");
      assertNotNull(string0);
      assertEquals("l$I*5'", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "l$I*5'");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.stripEnd(" ", "");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnce("", "", "C!kjQvNHu ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "|q$iPW>][>?";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "C!kjQvNHu ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.right("t\n", (-882));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("org.junitpioneer.jupiter.TempDirectory", (-3078));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-3078);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'v', (-740), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -740
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.removeEnd("\r", "");
      assertNotNull(string0);
      assertEquals("\r", string0);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("Cannot store ", '>', '>');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Cannot store ", string1);
      
      String string2 = StringUtils.substring("", 0, 0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("Cannot store ", "");
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Cannot store ", string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("Cannot store ", "");
      assertEquals(0.0, double0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Cannot store ";
      String string4 = StringUtils.removeEnd("", "");
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      charSequenceArray0[1] = (CharSequence) "";
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string5 = StringUtils.lowerCase(";$/sT#F", locale1);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("IT", locale1.getCountry());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(";$/st#f", string5);
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((Object[]) null, ',', (-639), (-639));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Locale must not be null", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)66;
      String string1 = StringUtils.join(byteArray0, 'y');
      assertArrayEquals(new byte[] {(byte)0, (byte)66}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0y66", string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("Locale must not be null");
      assertFalse(boolean0);
      
      String string3 = StringUtils.remove("lG_S'['r/-ajN27]", 'b');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("lG_S'['r/-ajN27]", string3);
      
      String string4 = StringUtils.wrap("lG_S'['r/-ajN27]", "Locale must not be null");
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("Locale must not be nulllG_S'['r/-ajN27]Locale must not be null", string4);
      
      String string5 = StringUtils.join((Object[]) null, 'b', 0, (int) (byte)66);
      assertNull(string5);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'y';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 'y';
      longArray0[4] = (long) 'y';
      longArray0[5] = (long) (byte)0;
      String string6 = StringUtils.join(longArray0, 'b');
      assertArrayEquals(new long[] {121L, 0L, 0L, 121L, 121L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("121b0b0b121b121b0", string6);
      
      String string7 = StringUtils.removeEnd("org.junitpioneer.jupiter.DefaultLocaleExtension", "");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string7);
      
      String[] stringArray0 = StringUtils.split("", "[ =rq1ZI!'vi6KU0d");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'c', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) null, ';', (int) (byte)0, (int) (byte)0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'm', 2147, 2147);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(arrayList0.contains('m'));
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = StringUtils.stripStart("C5%NlbLZq8", "Locale must not be null");
      assertNotNull(string0);
      assertEquals("C5%NlbLZq8", string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("C5%NlbLZq8"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.add(object0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.contains("C5%NlbLZq8"));
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'Z', 52, 16);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.contains("C5%NlbLZq8"));
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNull(string1);
      
      char char0 = '|';
      String string2 = StringUtils.join((Object[]) stringArray0, '|');
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("|||||||", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-1920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      short[] shortArray0 = new short[11];
      String string0 = StringUtils.join(shortArray0, '[');
      assertEquals(11, shortArray0.length);
      assertNotNull(string0);
      assertEquals("0[0[0[0[0[0[0[0[0[0[0", string0);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String string0 = StringUtils.remove("N?9K!B_klW/)4FD6", "?++~wPHMo)=p");
      assertNotNull(string0);
      assertEquals("N?9K!B_klW/)4FD6", string0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-4699);
      shortArray0[2] = (short) (-2234);
      shortArray0[3] = (short) (-380);
      shortArray0[4] = (short)3179;
      shortArray0[5] = (short)2649;
      shortArray0[6] = (short) (-1230);
      shortArray0[7] = (short)122;
      String string1 = StringUtils.join(shortArray0, 'm');
      assertArrayEquals(new short[] {(short)0, (short) (-4699), (short) (-2234), (short) (-380), (short)3179, (short)2649, (short) (-1230), (short)122}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0m-4699m-2234m-380m3179m2649m-1230m122", string1);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      
      String string0 = StringUtils.join((Iterable<?>) set0, (String) null);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(string0);
      assertEquals("unicode-1-1-utf-8UTF8", string0);
      assertFalse(set0.contains(string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "unicode-1-1-utf-8UTF8");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-74);
      String string1 = StringUtils.join(byteArray0, '~', (int) (byte)1, (-4996));
      assertArrayEquals(new byte[] {(byte)96, (byte)64, (byte)1, (byte) (-74)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      String string0 = StringUtils.rightPad("Ie!j='?To", 18, 'w');
      assertNotNull(string0);
      assertEquals("Ie!j='?Towwwwwwww", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ie!j='?To", (CharSequence) "Ie!j='?Towwwwwwww");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("s'}mY=vX&.");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, " ");
      assertNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", "s'}mY=vX&.", "s'}mY=vX&.", 18);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSET", string3);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      String string4 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'7'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("7", string4);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("?1~Sp-dHA{", "?1~Sp-dHA{", 1199);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("C=~-", "\n");
      assertNotNull(string0);
      assertEquals("\nC=~-\n", string0);
      
      String string1 = StringUtils.join(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isEmpty("r&Aj?VWK@");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Comparator should not be null.", 5);
      assertNull(stringArray1);
      
      String string2 = StringUtils.center((String) null, 1199, "r&Aj?VWK@");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.replaceEachRepeatedly("Strings must not be null", (String[]) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Strings must not be null", string3);
      
      String string4 = StringUtils.rotate("heIGcS0i<;C&b{u9t||", 16);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("GcS0i<;C&b{u9t||heI", string4);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = StringUtils.join((Iterable<?>) set0, "");
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(string0);
      assertEquals("unicode-1-1-utf-8UTF8", string0);
      assertFalse(set0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.center("KA9_2/.Dxd*EfdOx$p", (-143), '`');
      assertNotNull(string0);
      assertEquals("KA9_2/.Dxd*EfdOx$p", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("KA9_2/.Dxd*EfdOx$p");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(priorityQueue0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach(" ", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.stripAccents(" ");
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&0sOSg{'Xf>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("&0sOSg{'Xf>AyRl", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("&0sOSg{'Xf>AyRl", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("'<", "&0sOSg{'Xf>AyRl", "&0sOSg{'Xf>AyRl", (-3286));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("'<", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains((-3286)));
      
      boolean boolean0 = StringUtils.isAlpha("'<");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((float[]) null, '1');
      assertNull(string2);
      
      String string3 = StringUtils.replaceEach("'<", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("'<", string3);
      
      String string4 = StringUtils.CR;
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("\r", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\r", (CharSequence) "jkt");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.deleteWhitespace("%d|BD{F=se");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("%d|BD{F=se", string5);
      
      String string6 = StringUtils.abbreviateMiddle("CYiQxl=", "A:!T@", 725);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals("CYiQxl=", string6);
      
      String string7 = StringUtils.normalizeSpace("LaunchTime");
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals("LaunchTime", string7);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" 7s ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach(" 7s ", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals(" 7s ", string0);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("+[p\"8M2_jWxx1!='");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceEach("org.junitpioneer.jupiter.DefaultTimeZoneExtension", stringArray0, stringArray0);
      assertEquals(15, stringArray0.length);
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string0);
      
      String string1 = StringUtils.swapCase("org.junitpioneer.jupiter.DefaultTimeZoneExtension");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ORG.JUNITPIONEER.JUPITER.dEFAULTtIMEzONEeXTENSION", string1);
      
      String string2 = StringUtils.unwrap("+[p\"8M2_jWxx1!='", '8');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("+[p\"8M2_jWxx1!='", string2);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = ']';
      charArray0[2] = 'e';
      String string0 = StringUtils.join(charArray0, '$', 256, 256);
      assertArrayEquals(new char[] {'H', ']', 'e', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("M#'_Y!tVya5 ", 'H');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = "bExpected exception %s was not thrown.";
      stringArray1[2] = "M#'_Y!tVya5 ";
      stringArray1[3] = "M#'_Y!tVya5 ";
      stringArray1[4] = "bExpected exception %s was not thrown.";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(5, stringArray1.length);
      assertEquals(5, stringArray2.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string1 = StringUtils.removeStart(" s", "PA)J`{xMBa.fc");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" s", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("M#'_Y!tVya5 ", stringArray2, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringBeforeLast("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.rotate("", 237);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("org.junitpioneer.vintage.TimeoutExtension", " C<BF#$-pFo:*_mK}");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.junitpioneer.vintage.TimeoutExtension", (CharSequence) "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.substringAfterLast("\n", "qU`is*2IjM?_q^?B");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(linkedList0.contains('B'));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "-bq4M~c]&>$b5QM";
      String string1 = StringUtils.join((List<?>) null, "Array element ", (-1138), 50);
      assertNull(string1);
      
      int int0 = StringUtils.compare("(qk.", (String) null);
      assertEquals(1, int0);
      
      String string2 = StringUtils.removeStart("...", " but was: ");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("...", string2);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string3 = StringUtils.rotate((String) null, 1);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2707));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.mid("", (-2707), (-2707));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited((String) null, 'N');
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("a2\"?X'~?W9`j}*6=!aT");
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("a2\"?X'~?W9`j}*6=!aT", string3);
      
      String string4 = StringUtils.repeat("", 99);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "a2\"?X'~?W9`j}*6=!aT", "io6E9qA");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replace("iQI;oO;{f", "", "", 99);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("iQI;oO;{f", string5);
      
      String string6 = StringUtils.stripToNull("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string6);
      
      String string7 = StringUtils.replaceIgnoreCase("/##[c2dZ#%y6", "io6E9qA", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals("/##[c2dZ#%y6", string7);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      int int0 = StringUtils.compare("org.apache.commons.lang3.StringUtils", "] XEKR", true);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Minimum abbreviation widt is %d", "Minimum abbreviation widt is %d");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.rotate("\n", (-1));
      assertNotNull(string0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", (String) null, 0);
      assertEquals(22, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rotate("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", 0);
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("t\n");
      assertNotNull(string0);
      assertEquals("t", string0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEachRepeatedly(" is not in the range '0' - '9'\r", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals(" is not in the range '0' - '9'\r", string0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("P'F|@+O;b@k'", "P'F|@+O;b@k'");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      String string0 = StringUtils.substringBetween(" but was: $..", " but was: $..", " but was: $..");
      assertNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = null;
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chop(string0);
      assertNull(string2);
      
      int int0 = StringUtils.compare(string0, "2FS9ain1YpR<_b", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, "Can only resolve parameter of type ", 1951, 1951);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(stack0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) " ", (CharSequence) " ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "outExtension", (-655), (-655));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Mo");
      assertNotNull(string0);
      assertEquals("Mo", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Mo", (CharSequence) "Mo");
      assertTrue(boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Mo");
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertEquals("Mo", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "Mo");
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(2, charBuffer0.limit());
      assertEquals("Mo", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("a`)LCidIi3N`@X", "A#fob");
      assertNotNull(string0);
      assertEquals("a`)LCidIi3N`@X", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "a`)LCidIi3N`@X", (CharSequence) "a`)LCidIi3N`@X");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("A#fob", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("A#fob", string1);
      
      String string2 = StringUtils.join((List<?>) null, "a`)LCidIi3N`@X", (-480), (-3060));
      assertNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.substringBetween(" ", "\r", "\r");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny(", '", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.normalizeSpace("e=v{IA\u0003hVwdVhfv'$#");
      assertNotNull(string0);
      assertEquals("e=v{IA\u0003hVwdVhfv'$#", string0);
      
      String string1 = StringUtils.substringBetween("e=v{IA\u0003hVwdVhfv'$#", "!\"mUU#!$0gN", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.capitalize("S)^5^cko5tr");
      assertNotNull(string0);
      assertEquals("S)^5^cko5tr", string0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String string0 = StringUtils.substringBetween("\r", "\r");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "\r");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringBetween("\r", "\r");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "ExpectedExceptdin", (CharSequence) "ExpectedExceptdin");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '<', 4, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      String string1 = StringUtils.join((float[]) null, '=');
      assertNull(string1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[4] = null;
      String string2 = StringUtils.replaceEach("hO7$$", stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("hO7$$", string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "ExceptionWasThrown", (CharSequence) string1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("ExceptionWasThrown");
      assertEquals(18, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String string0 = StringUtils.upperCase("^q@'FMt{nG;");
      assertNotNull(string0);
      assertEquals("^Q@'FMT{NG;", string0);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      int int0 = StringUtils.indexOf((CharSequence) "vs ", (CharSequence) "vs ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "y)H", (CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can only resolve parameter of type ";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Can only resolve parameter of type ", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Can only resolve parameter of type ", (CharSequence) "Can only resolve parameter of type ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripToEmpty("Search and Replace array lengths don't match: ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Search and Replace array lengths don't match:", string1);
      
      String string2 = StringUtils.repeat("Can only resolve parameter of type ", (-1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Can only resolve parameter of type ", "Can only resolve parameter of type ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("Search and Replace array lengths don't match:", (String) null, "HW}$95>bG/H)~ww", (-1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Search and Replace array lengths don't match:", string3);
      
      String string4 = StringUtils.stripToNull("s'}mY=vX&.!Si>16C|$TU>");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("s'}mY=vX&.!Si>16C|$TU>", string4);
      
      String string5 = StringUtils.replaceIgnoreCase("n5ekekKU;O/1ijp,&g]", "HW}$95>bG/H)~ww", "...");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("n5ekekKU;O/1ijp,&g]", string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "HW}$95>bG/H)~ww", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", " vs ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast(" vs ", ":.1mXy;");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("fkn>{F]N%J>.PvJ3VE", "v%/^Y4|'{zt");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("fkn>{F]N%J>.PvJ3VE", string1);
      
      String string2 = StringUtils.replaceEach(":.1mXy;", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(":.1mXy;", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "J>B=~]pq$<g^i0", "Failed to get parent directory from provider");
      assertFalse(boolean0);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "fkn>{F]N%J>.PvJ3VE", (CharSequence) " vs ");
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals("fkn>{F]N%J>.PvJ3VE", charSequence0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "fkn>{F]N%J>.PvJ3VE", (CharSequence) "\nC=~-");
      assertEquals(18, int0);
      
      String string4 = StringUtils.toRootLowerCase("fkn>{F]N%J>.PvJ3VE");
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("fkn>{f]n%j>.pvj3ve", string4);
      
      int int1 = StringUtils.length("");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.compare("6QO*Y+T", "\nC=~-", false);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(44, int3);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Cv3", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Cv3", "Cv3", false);
      assertEquals(0, int0);
      
      String string0 = StringUtils.right("", 5);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 5;
      intArray0[2] = (-740);
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'J', 12, 9);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(arrayList0.contains(5));
      
      int int1 = StringUtils.length("");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.chop("");
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.removeStart((String) null, "}");
      assertNull(string3);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) " in an array of ", 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      boolean boolean0 = priorityQueue0.add("^q@FMnG;");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(priorityQueue0.contains("%d|BD{F=se"));
      assertTrue(priorityQueue0.contains("^q@FMnG;"));
      
      String string3 = StringUtils.replaceChars((String) null, 'U', '+');
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("^q@FMnG;", '+');
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("^q@FMnG;", string4);
      
      boolean boolean1 = StringUtils.isMixedCase("^q@FMnG;");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.difference("NHu ", " but was: ");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(" but was: ", string5);
      
      int int1 = StringUtils.length("^q@FMnG;");
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string6 = StringUtils.defaultIfEmpty("ExceptionWasThrown", "...");
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("ExceptionWasThrown", string6);
      
      String string7 = StringUtils.capitalize("<aTLBaIT@lg");
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      assertEquals("<aTLBaIT@lg", string7);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(250, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, '\'');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Object varargs must not be null", "Object varargs must not be null");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("Object varargs must not be null", '(', '(');
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("HpwJf)mnl", "HpwJf)mnl", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("HpwJf)mnl", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.abbreviate((String) null, 0);
      assertNull(string1);
      
      int int1 = StringUtils.countMatches((CharSequence) null, 'R');
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.replaceChars("", 'R', '}');
      assertNotNull(string2);
      assertEquals("", string2);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      // Undeclared exception!
      try { 
        stack0.set(1148, locale_Category0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1148
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "e", (CharSequence) "e");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String string0 = StringUtils.rightPad("f_zi>;saBw4", 2, "f_zi>;saBw4");
      assertNotNull(string0);
      assertEquals("f_zi>;saBw4", string0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("Minimum abbreviation width is %d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      String string0 = StringUtils.remove("0", 'a');
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", 'a');
      assertNotNull(string0);
      assertEquals("org.pche.commons.lng3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\rMinimum abbreviation width with offset is PdHNr-~*8QB<lgO$U", (CharSequence) "j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("93S|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String string0 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", '_');
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("P'F|@+O;b@k'", "ExpectedExceptding@6Jjj) kV(x", locale1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.split("", " ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("\n\r", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("\n\r", string0);
      
      String string1 = StringUtils.substringAfterLast("Minimum abbreviation width with offset is %d", " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%d", string1);
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("dlyMoRMLi&m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("XAQMm/", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("X0K`1@\"", "K d{;3<9{hwM");
      assertNotNull(string0);
      assertEquals("X0K`1@\"", string0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      String string0 = StringUtils.removePattern("The Array must not be null", "The Array must not be null");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((float[]) null, '7', (-1591), (-1591));
      assertNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = " is not in the range '0' - '9'";
      stringArray0[3] = "";
      stringArray0[4] = "The Array must not be null";
      stringArray0[5] = "";
      stringArray0[6] = "The Array must not be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, ';');
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 129);
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid((String) null, (-319), 68);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited((String) null, 'N');
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat(",uS", (-1911));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replace("9|DY)b;nTfSjR6/i:", (String) null, (String) null, 10);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("9|DY)b;nTfSjR6/i:", string5);
      
      String string6 = StringUtils.stripToNull("Qu^&58A<[d?O@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("Qu^&58A<[d?O@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be null", string6);
      
      String string7 = StringUtils.replaceIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "", "/##[c2dZ#%y6");
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string7);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, '9');
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertEquals("0.090.090.090.090.0", string0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains(""));
      
      String string2 = StringUtils.rightPad("-bq4M~c]&>$b5QM", 0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("-bq4M~c]&>$b5QM", string2);
      
      String string3 = StringUtils.substringBeforeLast("-bq4M~c]&>$b5QM", "");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("-bq4M~c]&>$b5QM", string3);
      
      String string4 = StringUtils.join(intArray0, 'y');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "\r", "=o.Ok3O~~mn<");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("ExpectedExceptding@6Jjj) kV(x", "ExpectedExceptding@6Jjj) kV(x", "P'F|@+O;b@k");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 22
         // ExpectedExceptding@6Jjj) kV(x
         //                       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, "", 17);
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "%9y6z.x6rZOO", (String) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("r&Aj?VWK@");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.trimToNull("H7;F3;=x,pwtphuZNS~");
      assertNotNull(string2);
      assertEquals("H7;F3;=x,pwtphuZNS~", string2);
      
      String string3 = StringUtils.abbreviate((String) null, "H7;F3;=x,pwtphuZNS~", (-2613));
      assertNull(string3);
      
      String string4 = StringUtils.truncate("ExpectedExceptionAborting to protect against StackOverflowError - output of one loop is the input of another", 17, 32);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("Aborting to protect against Stac", string4);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object3));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      String string0 = StringUtils.join(objectArray0, ')');
      assertEquals(6, objectArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "java.lang.Object@1babf047)java.lang.Object@2168f0ba)java.lang.Object@649b260)java.lang.Object@41a5ad68)java.lang.Object@5c844d3)java.lang.Object@63c389f0", (CharSequence) "java.lang.Object@1babf047)java.lang.Object@2168f0ba)java.lang.Object@649b260)java.lang.Object@41a5ad68)java.lang.Object@5c844d3)java.lang.Object@63c389f0");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("java.lang.Object@1babf047)java.lang.Object@2168f0ba)java.lang.Object@649b260)java.lang.Object@41a5ad68)java.lang.Object@5c844d3)java.lang.Object@63c389f0", "java.lang.Object@1babf047)java.lang.Object@2168f0ba)java.lang.Object@649b260)java.lang.Object@41a5ad68)java.lang.Object@5c844d3)java.lang.Object@63c389f0", "java.lang.Object@1babf047)java.lang.Object@2168f0ba)java.lang.Object@649b260)java.lang.Object@41a5ad68)java.lang.Object@5c844d3)java.lang.Object@63c389f0");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 24
         // java.lang.Object@1babf047)java.lang.Object@2168f0ba)java.lang.Object@649b260)java.lang.Object@41a5ad68)java.lang.Object@5c844d3)java.lang.Object@63c389f0
         //                         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "x97IFr", (CharSequence) "x97IFr");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.capitalize("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string0);
      
      String string1 = StringUtils.replaceFirst("org.apache.commons.lang3.CharUtils", "", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not setorg.apache.commons.lang3.CharUtils", string1);
      
      String string2 = StringUtils.substringBetween("", "", (String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isEmpty("org.apache.commons.lang3.CharUtils");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Jm8@EI :=tW", "@DefaultLocale can only be used with language tag if language, country, and variant are not setorg.apache.commons.lang3.CharUtils");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = '9';
      charArray0[2] = 'F';
      charArray0[3] = '~';
      charArray0[4] = 'b';
      charArray0[5] = '\"';
      String string3 = StringUtils.join(charArray0, '\"');
      assertArrayEquals(new char[] {'V', '9', 'F', '~', 'b', '\"'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("V\"9\"F\"~\"b\"\"", string3);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "", 5);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray1 = StringUtils.split("i;TY7LWO)B{D)");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.capitalize("J0A+");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("J0A+", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Threshold must not be negative");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("s4$", (-1853), ')');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("s4$", string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Threshold must not be negative");
      assertNotSame(stringArray2, stringArray1);
      assertEquals(10, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String[] stringArray3 = StringUtils.split("\r");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertEquals(0, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray3);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray3));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals("i;TY7LWO)B{D)", charSequence0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "i;TY7LWO)B{D)", (CharSequence) "s4$");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray4 = StringUtils.stripAll(stringArray3, "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray4);
      assertNotSame(stringArray4, stringArray2);
      assertSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray1);
      assertEquals(0, stringArray3.length);
      assertEquals(0, stringArray4.length);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertNotNull(stringArray4);
      
      String string4 = StringUtils.normalizeSpace("}");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertNotNull(string4);
      assertEquals("}", string4);
      
      String string5 = StringUtils.abbreviate("|='/Yh^$zIW85N", "`BnK+s", 20);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("|='/Yh^$zIW85N", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1), (-27));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String string0 = StringUtils.leftPad("m!krSMj8Ql69att", (-1693), 'Y');
      assertNotNull(string0);
      assertEquals("m!krSMj8Ql69att", string0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Rbm>Bl@M0O~_", "Rbm>Bl@M0O~_");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'T';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.junitpioneer.jupiter.TempDirectory", charArray0);
      assertArrayEquals(new char[] {'V', 'T'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.substringsBetween("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "\n");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = " ";
      String string1 = StringUtils.firstNonBlank(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, stringArray1);
      assertEquals(1, stringArray1.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray1);
      assertEquals(1, stringArray1.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "&");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "AkmhRd/HBln}`|>5z&");
      assertEquals((-19), int0);
      
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, (-19));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = null;
      String string2 = "%xcSs";
      int int1 = 141;
      String string3 = StringUtils.replaceIgnoreCase((String) null, "%xcSs", "AkmhRd/HBln}`|>5z&", 141);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad(".)'OzSF", 0);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(".)'OzSF", string4);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'B');
      assertEquals(0, stringArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.trimToNull((String) null);
      assertNull(string6);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", (String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray2);
      
      int int2 = 0;
      String[] stringArray3 = StringUtils.splitByWholeSeparator(".)'OzSF", "", 0);
      assertNotSame(stringArray3, stringArray0);
      assertEquals(1, stringArray3.length);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains("AkmhRd/HBln}`|>5z&"));
      
      Object object0 = null;
      // Undeclared exception!
      try { 
        stack0.remove((-283));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -283
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("wUP(@AvP(,~", "wUP(@AvP(,~", "wUP(@AvP(,~");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = StringUtils.swapCase("VZp<E/");
      assertNotNull(string0);
      assertEquals("vzP<e/", string0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(",V7E");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ",V7E", (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfAny((CharSequence) "The Character must not be null", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast("@DefaultLocale can only be used with language tag if language, country, and variant are not set", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "";
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 's');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.valueOf((char[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.join(stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string6);
      
      String string7 = StringUtils.join((char[]) null, 'E');
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.split((String) null, 'E');
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(8, stringArray2.length);
      assertEquals(8, stringArray0.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String string0 = StringUtils.rightPad("%9y6z.x6rZOO", 1, "%9y6z.x6rZOO");
      assertNotNull(string0);
      assertEquals("%9y6z.x6rZOO", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "%9y6z.x6rZOO", (CharSequence) "%9y6z.x6rZOO");
      assertEquals(1, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("%9y6z.x6rZOO", "%9y6z.x6rZOO", "%9y6z.x6rZOO");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("%9y6z.x6rZOO", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "g$Nn+W*^";
      charSequenceArray0[1] = (CharSequence) "%9y6z.x6rZOO";
      charSequenceArray0[2] = (CharSequence) "%9y6z.x6rZOO";
      charSequenceArray0[3] = (CharSequence) "g$Nn+W*^";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap(" ", '\'');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(" ", string2);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", 4, 1019);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("I}3[", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeFirst("I}3[", "\r");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("I}3[", string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.swapCase("");
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>(treeSet0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("\r"));
      
      boolean boolean3 = arrayList0.add((Object) "NHu ");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("NHu "));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("NHu "));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("NHu ", string3);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("NHu "));
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '&';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'-', '&'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertEquals("-&", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "(bIftN}BbT", (CharSequence) "-&");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      String string0 = StringUtils.removePattern("-", "-");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 85);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      
      String string2 = StringUtils.substringAfterLast("", "JPPo%MJt0MV,y");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale1 = Locale.lookup(linkedList0, (Collection<Locale>) null);
      assertEquals(0, linkedList0.size());
      assertNull(locale1);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.lowerCase("org.junitpioneer.jupiter.TempDirectory", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("org.junitpioneer.jupiter.tempdirectory", string3);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "\r\n", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank(" ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'J');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Locale must not be nullLocale must not be null", 1019, 328);
      assertNotNull(string0);
      assertEquals("Locale must not be nullLocale must not be null", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Index: ", "_sqHW\"", "_sqHW\"", 65);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Index: ", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "Locale must not be nullLocale must not be null");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Index: ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "-");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isNumeric("Locale must not be nullLocale must not be null");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeFirst("%UgWi u", (String) null);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("%UgWi u", string2);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Locale must not be nullLocale must not be null", "Locale must not be nullLocale must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "\r");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 0, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.swapCase("Z5QY");
      assertNotNull(string0);
      assertEquals("z5qy", string0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("&M0sSg{'Xfw>AyRl", " vs ", (-3286));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("&M0sSg{'Xfw>AyRl", " vs ", false);
      assertEquals(6, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ":.1mXy;", (-3286), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("&M0sSg{'Xfw>AyRl");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = 'F';
      charArray0[4] = 'T';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'F', 'T', 'e', 'F', 'T'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertEquals("FTeFT", string0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&M0", string1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) " vs ", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.removeEndIgnoreCase(":.1mXy;", "&M0sSg{'Xfw>AyRl");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(":.1mXy;", string2);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "&M0", (CharSequence) "&M0sSg{'Xfw>AyRl");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean3 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.leftPad("NHu ", (-1), "Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("NHu ", string3);
      
      String string4 = StringUtils.swapCase(":.1mXy;");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(":.1MxY;", string4);
      
      String string5 = StringUtils.unwrap("FTeFT", 'F');
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("FTeFT", string5);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertNotNull(object4);
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object0));
      assertNotNull(object5);
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object4));
      assertNotNull(object6);
      
      objectArray0[6] = object6;
      String string0 = StringUtils.join(objectArray0, '_', 1633, 1633);
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Cv3";
      stringArray0[2] = "Cv3";
      stringArray0[3] = "Cv3";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Cv3");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.normalizeSpace("Cv3");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Cv3", string1);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.replaceAll("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", "Comparator should not be null.", "C!kjQvNHu ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h", string1);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      objectArray0[1] = (Object) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      String string2 = StringUtils.join(objectArray0, ", Length: 0NHu ");
      assertEquals(3, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((char[]) null, 'q');
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(", Length: 0NHu ", 1943, 'q');
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 0, 2973);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Jo?", "The character must not be null");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Jo?", string2);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean4 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      String string3 = StringUtils.upperCase("Aborting to prote");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("ABORTING TO PROTE", string3);
      
      int int3 = StringUtils.indexOf((CharSequence) string1, (CharSequence) "Aborting to prote");
      assertEquals(4, stringArray0.length);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.remove("The character must not be null", "The character must not be null");
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.join((double[]) null, 'T', 1273, 40);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'S');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" vs ", string1);
      
      String string2 = StringUtils.leftPad("n&jr)`(7", 4100);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("\nC=~-", "", "\nC=~-", 632);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\nC=~-", string3);
      
      boolean boolean0 = StringUtils.isAlpha(" vs ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((float[]) null, '\\');
      assertNull(string4);
      
      String string5 = StringUtils.CR;
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("\r", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\nC=~-", (CharSequence) " vs ");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.deleteWhitespace("3-Lxetdj<||v/v72_");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("3-Lxetdj<||v/v72_", string6);
      
      String string7 = StringUtils.abbreviateMiddle("-", "9o74+!Wt?)+O3V", 725);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals("-", string7);
      
      String string8 = StringUtils.normalizeSpace("\r");
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = StringUtils.uncapitalize("\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join(doubleArray0, '#');
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.join(objectArray0, "");
      assertEquals(1, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[1] = '5';
      charArray0[2] = '3';
      charArray0[3] = '|';
      charArray0[4] = 's';
      charArray0[5] = 'b';
      charArray0[6] = ')';
      String string2 = StringUtils.join(charArray0, 'O');
      assertArrayEquals(new char[] {'u', '5', '3', '|', 's', 'b', ')'}, charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("uO5O3O|OsObO)", string2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'O';
      doubleArray0[1] = (double) '5';
      String string3 = StringUtils.join(doubleArray0, '#', (-278), (-1867));
      assertArrayEquals(new double[] {79.0, 53.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate("m%Lj", 2732);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("m%Lj", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "m%Lj", (-278), 1420);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      String[] stringArray0 = new String[17];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(17, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.overlay("J}[H", "J}[H", 804, (-616));
      assertNotNull(string0);
      assertEquals("J}[H", string0);
      
      boolean boolean1 = StringUtils.isWhitespace("J}[H");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.remove("J}[H", '8');
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("J}[H", string1);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", "Y}TwB'%B");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '\\');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("&");
      assertFalse(boolean0);
      
      String string1 = StringUtils.overlay("&", "&", (-364), (-364));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&&", string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("&&");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("&");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isNumericSpace("&");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0.0F;
      String string0 = StringUtils.join(objectArray0, '8', 332, (-2818));
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center(" but was: ", (-250), 'Q');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" but was: ", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("!y0ad", "!y0ad");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.trimToEmpty("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)4;
      String string2 = StringUtils.stripStart("\r", "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\r", string2);
      
      String string3 = StringUtils.stripToNull("\r");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "6gPTN(.l~";
      charSequenceArray0[3] = (CharSequence) "6gPTN(.l~";
      charSequenceArray0[4] = (CharSequence) "6gPTN(.l~";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.lowerCase("");
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.overlay((String) null, (String) null, 127, (-285));
      assertNull(string5);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "6gPTN(.l~");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("+[\"8M_jWxx1!='", "+[\"8M_jWxx1!='");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("O20o", "O20o");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.junitpioneer.jupiter.TempDirectory");
      assertNotNull(string0);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.junitpioneer.jupiter.TempDirectory");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory", "org.junitpioneer.jupiter.TempDirectory");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string1);
      
      String string2 = StringUtils.substringAfterLast("", "JPPo%MJt0MV,y");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>(22);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string2));
      
      ArrayList<String> arrayList1 = new ArrayList<String>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains(string2));
      assertFalse(arrayList1.contains(string2));
      
      boolean boolean1 = arrayList1.add("");
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(string2));
      assertFalse(arrayList1.contains("org.junitpioneer.jupiter.TempDirectory"));
      assertTrue(arrayList1.contains(string2));
      
      String string3 = StringUtils.join((Iterable<?>) arrayList0, '/');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertFalse(arrayList0.contains(string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("z)}p)@rE_bNH5");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.overlay("", "$qE0zz2%", (-1277), 22);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals("$qE0zz2%", string4);
      
      String string5 = StringUtils.upperCase("YNfvL_`g+$*eL{r");
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("YNFVL_`G+$*EL{R", string5);
      
      String string6 = StringUtils.remove("org.junitpioneer.jupiter.TempDirectory", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOTSETThe type must not be null");
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.jupiter.TempDirectory", string6);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      String string0 = "\r";
      String string1 = StringUtils.strip(" ", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      
      String[] stringArray0 = StringUtils.split("=?`Iz@XyrVW!|", " vs ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = "DefaultTimeZone";
      String string3 = StringUtils.overlay("DefaultTimeZone", ", '", (-62), 0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(", 'DefaultTimeZone", string3);
      
      String string4 = "AP";
      String string5 = null;
      String string6 = StringUtils.replaceFirst("=?`Iz@XyrVW!|", "AP", (String) null);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals("=?`Iz@XyrVW!|", string6);
      
      ArrayList<String> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<String>((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      String string0 = StringUtils.overlay("P'F|@+O;b@k'", "P'F|@+O;b@k'", 677, 677);
      assertNotNull(string0);
      assertEquals("P'F|@+O;b@k'P'F|@+O;b@k'", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "P'F|@+O;b@k'", "P'F|@+O;b@k'P'F|@+O;b@k'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      String string0 = "\r";
      String string1 = StringUtils.removeAll("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      String string0 = StringUtils.rightPad("Cv3", 1112, 'k');
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.getDigits(")vO>Eq1/IiTYH0");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("10", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.StringUtils", "10");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeFirst("mw0G nO(6", string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("mw0G nO(6", string2);
      
      String string3 = StringUtils.rotate("", 1112);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      String string4 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 9, 1112);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("e.commons.lang3.StringUtils", string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "mw0G nO(6");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumeric("10");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringBeforeLast("\r", "\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = enumSet0.contains(class0);
      assertEquals(2, enumSet0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.join(iterator0, '`');
      assertEquals(2, enumSet0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("DISPLAY`FORMAT", string2);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("\n");
      assertArrayEquals(new int[] {10}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      String string0 = StringUtils.removeAll("^q@FMnG;", "^q@FMnG;");
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("^q@FMnG;");
      assertArrayEquals(new int[] {94, 113, 64, 127, 70, 77, 110, 71, 59}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("^q@FMnG;");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "^q@FMnG;", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("^q@FMnG;");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("^q@FMnG;"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      String string1 = StringUtils.join(iterator0, 'b');
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList1.contains("^q@FMnG;"));
      
      String string2 = StringUtils.rightPad("Fzp)vRuvKN%x(~", 0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Fzp)vRuvKN%x(~", string2);
      
      String string3 = StringUtils.substringBeforeLast("\r", "io");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\r", string3);
      
      String string4 = StringUtils.join(intArray0, 'w');
      assertArrayEquals(new int[] {94, 113, 64, 127, 70, 77, 110, 71, 59}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("94w113w64w127w70w77w110w71w59", string4);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "=o.Ok3O~~mn<", "g6L=>94e");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, 'B');
      assertEquals(0, linkedList0.size());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList0.contains("\r"));
      
      String string2 = StringUtils.replaceOnce("", (String) null, (String) null);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\r";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) iterator0;
      objectArray0[3] = (Object) iterator0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) "\r";
      objectArray0[7] = (Object) "";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'B', (-2818), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, ' ');
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(treeSet0.contains(' '));
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = StringUtils.substring("145", 64, 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "145", 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("ExceptionWasThrown"));
      
      String string1 = StringUtils.join((float[]) null, '=');
      assertNull(string1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[3] = "c";
      stringArray1[5] = null;
      String string2 = StringUtils.replaceEach("hO7$5", stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("hO7$5", string2);
      
      String string3 = StringUtils.abbreviateMiddle("ExceptionWasThrown", "Cz |mG1Y_yeOccawK=!", 0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("ExceptionWasThrown", string3);
      
      String string4 = StringUtils.replaceAll(string1, "ExceptionWasThrown", "LS2");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, "ExceptionWasThrown");
      assertFalse(boolean0);
      
      String string5 = StringUtils.lowerCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String string0 = StringUtils.rotate("m>", 101);
      assertNotNull(string0);
      assertEquals(">m", string0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'V');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("ExpectedExceptdin");
      assertNotNull(string0);
      assertEquals("ExpectedExceptdin", string0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String string0 = StringUtils.rotate("@H[#_L'&", (-565));
      assertNotNull(string0);
      assertEquals("L'&@H[#_", string0);
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Cv3";
      stringArray0[2] = "Cv3";
      stringArray0[3] = "Cv3";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Cv3");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.substring("O\"hO[?g'3B", 123, 123);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String string0 = StringUtils.substringBetween("\r", "\r");
      assertNull(string0);
      
      String string1 = StringUtils.wrap(",-k_ /nR*L", (String) null);
      assertNotNull(string1);
      assertEquals(",-k_ /nR*L", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ",-k_ /nR*L", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBeforeLast((String) null, ",-k_ /nR*L");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("+yoh`>Ew =gHorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertNotNull(string0);
      assertEquals("+yoh`>ew =ghorg.junitpioneer.jupiter.defaultlocaleextension", string0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      stringArray0[1] = "";
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "h'5aTU~r");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("Failed to get parent directory from provider");
      assertNotNull(string0);
      assertEquals("Failed to get parent directory from provider", string0);
      
      String string1 = StringUtils.chop("Failed to get parent directory from provider");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provide", string1);
      
      String string2 = StringUtils.join((Object[]) null, '', 1027, 1121);
      assertNull(string2);
      
      String string3 = StringUtils.center("Failed to get parent directory from provide", 14, 'o');
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Failed to get parent directory from provide", string3);
      
      String string4 = StringUtils.repeat('', 1121);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("&:q9(IPy`H5", 62, "Q4eGcHloOF%QVdz:Cc[5i($B,wM|fB");
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("Q4eGcHloOF%QVdz:Cc[5i($B,wM|fBQ4eGcHloOF%QVdz:Cc[&:q9(IPy`H5", string5);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.uncapitalize((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.chomp("io", "6E9qA");
      assertNotNull(string0);
      assertEquals("io", string0);
      
      String string1 = StringUtils.uncapitalize("");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      String string0 = StringUtils.chomp("\nStrings must not be ull", "bKLWNL,LI#(Zk\"Q");
      assertNotNull(string0);
      assertEquals("\nStrings must not be ull", string0);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      int int0 = StringUtils.compare("\r", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertEquals(12, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, (String) null, 4, 25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'M');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.rightPad("Nu`9_M0T!", 0, 'U');
      assertNotNull(string0);
      assertEquals("Nu`9_M0T!", string0);
      
      String string1 = StringUtils.replace(";r(jl-p.{['Y|A7:", " ", " ", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(";r(jl-p.{['Y|A7:", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";r(jl-p.{['Y|A7:";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " ");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.join((Object[]) stringArray1, 'U', 0, (-1811));
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Nu`9_M0T!");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) ";r(jl-p.{['Y|A7:", (CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "org.junitpioneer.jupiter.DefaultLocaleExtension", 8, 1993);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "i";
      String string0 = StringUtils.replace("i", "l^Ib^39r{|[#ILF$x", "org.junitpioneer.jupiter.TempDirectory$CloseablePathrpn\r", 0);
      assertNotNull(string0);
      assertEquals("i", string0);
      
      charSequenceArray0[1] = (CharSequence) "i";
      String string1 = StringUtils.prependIfMissing("i", "i", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("i", string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`=h^ac\n", (String) null, 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.swapCase("ExceptionWasThrownExceptionWasThrown");
      assertNotNull(string1);
      assertEquals("eXCEPTIONwAStHROWNeXCEPTIONwAStHROWN", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "eXCEPTIONwAStHROWNeXCEPTIONwAStHROWN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" fu", "");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "t\n", 71);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "t\n", (CharSequence) "t\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("or");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("'AM", "'AM", "'AM");
      assertNotNull(string0);
      assertEquals("'AM", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      // Undeclared exception!
      try { 
        StringUtils.upperCase("'AM", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("#nO*IgqUbj{mc");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("#nO*IgqUbj{mc", stringArray0);
      assertEquals(10, stringArray0.length);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      boolean boolean0 = StringUtils.equalsIgnoreCase(",'", ",'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("io", 'i');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("S", "org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils");
      assertNull(stringArray1);
      
      String string0 = StringUtils.stripStart("2yg=g^H/de[%o2yg=g^H/de[%o2yg=g", "2yg=g^H/de[%o2yg=g^H/de[%o2yg=g");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.left("", 2579);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 2579);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("Failed to get parent directory from provider");
      assertNotNull(string0);
      assertEquals("Failed to get parent directory from provider", string0);
      
      String string1 = StringUtils.chop("Failed to get parent directory from provider");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provide", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Failed to get parent directory from provide", (CharSequence) "Failed to get parent directory from provide", 1027);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) null, '', 1027, 1121);
      assertNull(string2);
      
      String string3 = StringUtils.center("Failed to get parent directory from provide", 14, 'o');
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Failed to get parent directory from provide", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The type must not be null", (String) null);
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string0 = StringUtils.left("\r", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string2 = StringUtils.left("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SETThe type must not be nully'Ru`U=h", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "hi@`@Ul^ldywm?cWz";
      boolean boolean0 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Yy2fBFXkE", " vs ");
      assertNotNull(string0);
      assertEquals(" vs Yy2fBFXkE vs ", string0);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">PlE", 'q');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String string0 = StringUtils.chop("+[p\"8M2_jWxx1!='");
      assertNotNull(string0);
      assertEquals("+[p\"8M2_jWxx1!=", string0);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", " ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertNotNull(string0);
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("^q@FMnG;", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "org.apache.commons.lang3.StringUtils", 0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^q@FMnG;", string2);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("^q@FMnG;"));
      
      String string3 = StringUtils.replaceIgnoreCase("VSy?oz]tDC~", "^q@FMnG;", "");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("VSy?oz]tDC~", string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("^q@FMnG;");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("a&", "VSy?oz]tDC~", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("VSy?oz]tDC~a&", string5);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("vs ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'P';
      charArray0[3] = 'P';
      String string0 = StringUtils.join(charArray0, 'P');
      assertArrayEquals(new char[] {'P', 'P', 'P', 'P'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("PPPPPPP", string0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("PPPPPPP");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeStart(", ", "$z/-mXB1Z(KzR+ia)");
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(", ", string2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = "*Z%@gQo0nH";
      int int0 = (-1764);
      String string1 = StringUtils.mid("*Z%@gQo0nH", (-1764), (-1764));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = null;
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1764), (-1764));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = "GIfC[K[jJ4CC1XS:_V{OMr";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("DefaultTimeZone", "GIfC[K[jJ4CC1XS:_V{OMr", "GIfC[K[jJ4CC1XS:_V{OMr");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 21
         // GIfC[K[jJ4CC1XS:_V{OMr
         //                      ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      char char0 = 'H';
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = "Failed to get parent directory from provider";
      String string1 = StringUtils.stripAccents("Failed to get parent directory from provider");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provider", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.chop("Failed to get parent directory from provider");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Failed to get parent directory from provide", string2);
      
      String string3 = StringUtils.rightPad("`xg7`4_#<pX", 7, '6');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("`xg7`4_#<pX", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 7);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.leftPad((String) null, (-1), ':');
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.substringBeforeLast("", "");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("\r");
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.join(byteArray0, 'W');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals("", string5);
      
      String string6 = StringUtils.rightPad((String) null, (-299), 'b');
      assertNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "=aTk-g>n.-2:");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String string0 = StringUtils.rightPad(" uzaI^LA[0", (-2234));
      assertNotNull(string0);
      assertEquals(" uzaI^LA[0", string0);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("e^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.reverse("GLO...");
      assertNotNull(string0);
      assertEquals("...OLG", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...OLG", (CharSequence) "...OLG");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "dlyMoRMLi&m", "dlyMoRMLi&m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      String string0 = StringUtils.stripAccents(" vs ");
      assertNotNull(string0);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("=Ue@(c3|l)&2a<>2", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      String string0 = StringUtils.removeAll("\r", "\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      int[] intArray1 = StringUtils.toCodePoints("\r");
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("\r");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("\r"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains("\r"));
      
      Iterator<Object> iterator0 = linkedList1.iterator();
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(iterator0);
      assertFalse(linkedList1.contains("\r"));
      
      String string1 = StringUtils.join(iterator0, '<');
      assertEquals(0, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(linkedList1.contains("\r"));
      
      String string2 = StringUtils.rightPad("S_?g_", (-3405));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("S_?g_", string2);
      
      String string3 = StringUtils.substringBeforeLast("S_?g_", "B(T");
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("S_?g_", string3);
      
      String string4 = StringUtils.join(intArray1, '<');
      assertArrayEquals(new int[] {13}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("13", string4);
      
      String string5 = StringUtils.leftPad("", 0, '%');
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("", string5);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "", "");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      String string6 = StringUtils.repeat('E', (-3405));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("}BB`Bo~@==Lo6BiIndex: ", "}BB`Bo~@==Lo6BiIndex: ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("zPlZmKd&e-/");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "zPlZmKd&e-/", 1182);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = StringUtils.getDigits("s'}mY=vX&.");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("s'}mY=vX&.");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.truncate("Array element ", 2969, 65);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.mid("Aborting to prote", 5473, 65);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = 'o';
      charArray0[2] = '#';
      charArray0[3] = 'n';
      charArray0[4] = '+';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\\', 'o', '#', 'n', '+'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "Locale must not be null", 'R');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Locale must not be null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("Locale must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.replaceChars("T-OI<^,Z_=aCcHwC", 'U', 'c');
      assertNotNull(string0);
      assertEquals("T-OI<^,Z_=aCcHwC", string0);
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      int int2 = 1148;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      // Undeclared exception!
      try { 
        stack0.set(0, locale_Category0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String string0 = StringUtils.repeat('2', 7);
      assertNotNull(string0);
      assertEquals("2222222", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("2222222");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripAccents("Failed to get parent directory from provider");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provider", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("2222222");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.chop("Failed to get parent directory from provider");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Failed to get parent directory from provide", string2);
      
      String string3 = StringUtils.rightPad("Failed to get parent directory from provide", 7, '6');
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Failed to get parent directory from provide", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "U\"(\"LG,FQw\"XD*[5 ");
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("2222222", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Failed to get parent directory from provide", 7);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.reverse(",h8R1RS2v8YoTW<iZ`");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals("`Zi<WToY8v2SR1R8h,", string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("`Zi<WToY8v2SR1R8h,", "U\"(\"LG,FQw\"XD*[5 ");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.replacePattern("org.junitpioneer.jupiter.DefaultTimeZoneExtension", (String) null, "`Zi<WToY8v2SR1R8h,");
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals("org.junitpioneer.jupiter.DefaultTimeZoneExtension", string6);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '2';
      charArray0[2] = '2';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.DefaultTimeZoneExtension", charArray0);
      assertArrayEquals(new char[] {'6', '2', '2'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("Cv3", "", "");
      assertNotNull(string0);
      assertEquals("Cv3", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Cv3";
      stringArray0[2] = "Cv3";
      String string1 = StringUtils.capitalize("x_n21H|NC3g9\t{okiL");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("X_n21H|NC3g9\t{okiL", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("x_n21H|NC3g9\t{okiL");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBeforeLast("Cv3", "Cv3");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = locale0.getDisplayName();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("Chinese (Taiwan)", string3);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      int int0 = StringUtils.getFuzzyDistance("Cv3", "Cv3", locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(7, int0);
      
      String string4 = StringUtils.defaultIfBlank("V+0<uYf({<", "Threshold must not be negative");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals("V+0<uYf({<", string4);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("x_n21H|NC3g9\t{okiL", stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.stripEnd("1v", "f&u");
      assertNotNull(string0);
      assertEquals("1v", string0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative", "Locale must not be null", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("maxWith cannot be negative", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("^q@FMnG;"));
      
      boolean boolean0 = priorityQueue0.addAll(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(priorityQueue0.contains("^q@FMnG;"));
      assertFalse(linkedList0.contains("^q@FMnG;"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.contains("^q@FMnG;"));
      
      String string2 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.chomp(" in an array of ");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(" in an array of ", string4);
      
      String string5 = StringUtils.toRootUpperCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("'AM", "'AM", "'AM");
      assertNotNull(string0);
      assertEquals("'AM", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("'AM", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("'AM", "'AM");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("", "'AM", (-1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int1 = StringUtils.compareIgnoreCase("'AM", "", true);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.upperCase("", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2592.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("NZ(:mYxb");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "NZ(:mYxb");
      assertFalse(boolean0);
      
      String string0 = StringUtils.capitalize("NZ(:mYxb");
      assertNotNull(string0);
      assertEquals("NZ(:mYxb", string0);
      
      boolean boolean1 = StringUtils.isMixedCase("\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringBeforeLast("{_8SQ[", "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("{_8SQ[", string1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", "NZ(:mYxb", locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", 23);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string0);
      
      StringUtils.countMatches((CharSequence) "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", 'l');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "org.apache.commons.lang3.StringUtils";
      stringArray0[4] = "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils";
      stringArray0[5] = "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils";
      stringArray0[6] = "Failed to delete temp directory ";
      StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '5');
      StringUtils.leftPad("Wh", 122, "The Character must not be null");
      StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      StringUtils.stripEnd("org.apache.commons.lang3.CharSequenceUtils", "org.apache.commons.lang3.CharSequenceUtils");
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String string0 = StringUtils.removeEnd("ExceptionWasThrown", "ExceptionWasThrown");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", "ExceptionWasThrown", 0, 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      String string0 = StringUtils.stripStart("sk1~", "Strirgs must not be null");
      assertNotNull(string0);
      assertEquals("k1~", string0);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase(",V!7E");
      assertNotNull(string0);
      assertEquals(",V!7E", string0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("+[p\"8M2_jWxx1!='");
      assertNotNull(string0);
      assertEquals("+[p\"8M2_jWxx1!='", string0);
      
      String string1 = "T [_|giSV}m%F%^)";
      String string2 = StringUtils.rightPad("T [_|giSV}m%F%^)", 31, "+[p\"8M2_jWxx1!='");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("T [_|giSV}m%F%^)+[p\"8M2_jWxx1!=", string2);
      
      String string3 = StringUtils.leftPad(")W`g<R_qNoWeln$P", 31, "vR\"<*WU6t -7#/");
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("vR\"<*WU6t -7#/)W`g<R_qNoWeln$P", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "vR\"<*WU6t -7#/", (CharSequence) "vR\"<*WU6t -7#/)W`g<R_qNoWeln$P");
      assertEquals(14, int0);
      
      String string4 = "rEL*LA!f%jvl";
      String string5 = StringUtils.deleteWhitespace("rEL*LA!f%jvl");
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals("rEL*LA!f%jvl", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "vR\"<*WU6t -7#/";
      charSequenceArray0[1] = (CharSequence) "T [_|giSV}m%F%^)";
      charSequenceArray0[2] = (CharSequence) "+[p\"8M2_jWxx1!='";
      charSequenceArray0[3] = (CharSequence) "rEL*LA!f%jvl";
      charSequenceArray0[4] = (CharSequence) "rEL*LA!f%jvl";
      charSequenceArray0[5] = (CharSequence) "rEL*LA!f%jvl";
      charSequenceArray0[6] = (CharSequence) "+[p\"8M2_jWxx1!='";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "vR\"<*WU6t -7#/)W`g<R_qNoWeln$P", 20, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.center("V", 8, "V");
      assertNotNull(string0);
      assertEquals("VVVVVVVV", string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("s ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("s ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.abbreviate("The Character must not be null", 16, 16);
      assertNotNull(string0);
      assertEquals("...st not be ...", string0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r\re$!7cO*;rd2_o`85", (CharSequence) "\r\re$!7cO*;rd2_o`85");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(15, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Aborting", string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String[] stringArray0 = new String[11];
      stringArray0[0] = "Can only resolve parameter of type ";
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("Can only resolve parameter of type ", "jqSzW @Kfa");
      assertEquals((-39), int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Can only resolve parameter of type ", (String) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(11, stringArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      String string0 = StringUtils.replace("U^", "rv^_6(aM>ByE^", "U^");
      assertNotNull(string0);
      assertEquals("U^", string0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.replace("y2", "y2", "y2");
      assertNotNull(string0);
      assertEquals("y2", string0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.normalizeSpace("\r");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("\r", (-2008), "");
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("\r", string2);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("X'C9X", ";ETwnCTB8h", (String) null);
      assertNotNull(string0);
      assertEquals("X'C9X", string0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("Nlo1%d$?tX[.cDI2*", '$');
      assertNotNull(string0);
      assertEquals("?tX[.cDI2*$Nlo1%d", string0);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string0 = StringUtils.replaceOnce("", "", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("The character ", (String) null);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("The character ", string3);
      
      String string4 = StringUtils.capitalize("&-4.;/u%:-d#WWvti");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("&-4.;/u%:-d#WWvti", string4);
      
      String string5 = StringUtils.substringAfter("[6h}MUX<7 p}+nkH@3ddGIq4q5c=p", "");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[6h}MUX<7 p}+nkH@3ddGIq4q5c=p";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "The character ";
      stringArray0[4] = "";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string0);
      assertEquals("ExceptionWasThrown", string0);
      
      String string1 = StringUtils.truncate("\r\n", 0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.startsWith("", "^q@FMnG;");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("ExceptionWasThrown");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripToNull("Z");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Z", string2);
      
      String string3 = StringUtils.replacePattern("\r\n", "\r\n", (String) null);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("\r\n", string3);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Z", "13>wDH}F^]jlg/b}d");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "ExceptionWasThrown", (CharSequence) "\r\n");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("R?", "R?");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.removeAll("`", "`");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "x97IFr");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '9');
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, 1026, 1026);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("[[t1+uxet", "[[t1+uxet");
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      String string0 = StringUtils.replacePattern(",\"", ",\"", ",\"");
      assertNotNull(string0);
      assertEquals(",\"", string0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String string0 = "org.junitpioneer.vintage.ExpectedExceptionExtension";
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[1]);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[3], charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = null;
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'B');
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Borg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionBB", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-2729));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.join((short[]) null, 'o');
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.normalizeSpace("@DEFAULT");
      assertNotNull(string1);
      assertEquals("@DEFAULT", string1);
      
      charSequenceArray0[1] = (CharSequence) "@DEFAULT";
      String string2 = StringUtils.appendIfMissingIgnoreCase("Failed to create custom temp directory", charSequenceArray0[1], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Failed to create custom temp directory@DEFAULT", string2);
      
      charSequenceArray0[2] = (CharSequence) "Failed to create custom temp directory@DEFAULT";
      String string3 = StringUtils.removeStart("Failed to create custom temp directory", "Minimum abbreviation width with offset is %d");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Failed to create custom temp directory", string3);
      
      charSequenceArray0[3] = (CharSequence) "Failed to create custom temp directory";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Locale must not be nullLocale must not be null", "Minimum abbreviation width is %d");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Locale must not be nullLocale must not be null";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width is %d";
      stringArray0[1] = "{s8IebuR";
      String string0 = StringUtils.replaceEach("Minimum abbreviation width is %d", stringArray0, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "%d|BD{F=se", "{s8IebuR", 7);
      assertNull(string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Minimum abbreviation width is %d"));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Minimum abbreviation width is %d"));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "jkt", "ExceptionWasThrown");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace((String) null, "", "C=~-\n", 769);
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull("Minimum abbreviation width is %d");
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("Minimum abbreviation width is %d", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("ExceptionWasThrown", "Locale must not be nullLocale must not be null", "HpwJf)mnlu#&");
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals("ExceptionWasThrown", string4);
      
      String string5 = StringUtils.trimToNull("Yl");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals("Yl", string5);
      
      String string6 = StringUtils.normalizeSpace(". The following paths could not be deleted (see suppressed exceptions for details): ");
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(". The following paths could not be deleted (see suppressed exceptions for details):", string6);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "Minimum abbreviation width is %d", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("Failed to get parent directory from provider");
      assertNotNull(string0);
      assertEquals("Failed to get parent directory from provider", string0);
      
      String string1 = StringUtils.chop("Failed to get parent directory from provider");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("Failed to get parent directory from provide", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Failed to get parent directory from provide", (CharSequence) "Failed to get parent directory from provide", 1027);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substring(" vs ", (-1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" ", string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "&38&5&127", "WpnX'");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'l');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, 'l');
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 3114);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("s ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(charSequence0);
      assertEquals("s", charSequence0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      String string0 = StringUtils.unwrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.removePattern(" ", " ");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase(" ", "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(" vs "));
      
      String string0 = StringUtils.join((Object[]) stringArray0, " vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
      assertEquals("  vs vs vs  ", string0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      StringUtils.indexOfDifference((CharSequence) "kg}v 2<^S", (CharSequence) "kg}v 2<^S");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "vO\"Zi[ 5R>i Ju";
      stringArray0[2] = "&";
      stringArray0[3] = "kg}v 2<^S";
      stringArray0[4] = "kg}v 2<^S";
      stringArray0[5] = "vO\"Zi[ 5R>i Ju";
      stringArray0[6] = "vO\"Zi[ 5R>i Ju";
      stringArray0[7] = "vO\"Zi[ 5R>i Ju";
      stringArray0[8] = "kg}v 2<^S";
      StringUtils.replaceEach("vO\"Zi[ 5R>i Ju", stringArray0, stringArray0);
      StringUtils.leftPad("vO\"Zi[ 5R>i Ju", (-2188));
      // Undeclared exception!
      StringUtils.center("/", 1114111, (String) null);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      String string0 = StringUtils.join(objectArray0, "a]L=t]jw{Vl2qRH");
      assertEquals("a]L=t]jw{Vl2qRHa]L=t]jw{Vl2qRH", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      StringUtils.remove("", "");
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 16, 16);
      StringUtils.getLevenshteinDistance((CharSequence) "...acriticalM...", (CharSequence) "", 16);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      StringUtils.replaceIgnoreCase("", "4X5T6", "", 16);
      Locale locale0 = Locale.GERMAN;
      StringUtils.getFuzzyDistance("", "p{InCombiningDiacriticalMarks}+", locale0);
      String string1 = "Threshold must not be negative";
      // Undeclared exception!
      StringUtils.rightPad("Threshold must not be negative", 65536);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      String string0 = StringUtils.unwrap("WBbO@z4Ykny~j-$(2w", "N8I+S:+gxy5WUts?/I");
      assertEquals("WBbO@z4Ykny~j-$(2w", string0);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      String string0 = StringUtils.join(shortArray0, 'q', 56, 0);
      assertNotNull(string0);
      
      StringUtils.unwrap("", "TgyB%<dQZ8'lT");
      int int0 = StringUtils.compareIgnoreCase("", "org.junitpioneer.vintage.TimeoutExtension", true);
      assertEquals((-41), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("org.junitpioneer.vintage.TimeoutExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[2] = "org.junitpioneer.vintage.TimeoutExtension";
      stringArray0[3] = "";
      stringArray0[4] = "TgyB%<dQZ8'lT";
      stringArray0[5] = "";
      String string1 = StringUtils.join(stringArray0);
      assertEquals("org.junitpioneer.vintage.TimeoutExtensionorg.junitpioneer.vintage.TimeoutExtensionTgyB%<dQZ8'lT", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "\r";
      String string0 = StringUtils.join(objectArray0, "\r");
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.junitpioneer.vintage.ExpectedExceptionExtension", 2048, "org.junitpioneer.vintage.ExpectedExceptionExtension");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, "D4\"g<)h");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      StringUtils.abbreviate("z4fb", "z4fb", 25);
      StringUtils.isNumericSpace("z4fb");
      StringUtils.containsWhitespace("z4fb");
      StringUtils.capitalize("\r ");
      StringUtils.isAllLowerCase("z4fb");
      StringUtils.isAsciiPrintable("\r ");
      StringUtils.containsNone((CharSequence) "\r ", (char[]) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)30;
      shortArray0[1] = (short) (-528);
      shortArray0[2] = (short)256;
      shortArray0[3] = (short) (-428);
      shortArray0[4] = (short)1646;
      shortArray0[5] = (short)38;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '6', (int) (short)30, (int) (short)256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("v");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      String string0 = StringUtils.rightPad("$DKvVb=+.I", 1269, "$DKvVb=+.I");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      String string0 = StringUtils.repeat("N", 9);
      assertEquals("NNNNNNNNN", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.leftPad("", (-299));
      String string2 = StringUtils.trimToNull("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match:", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.center("C!kjQv", 5, "");
      assertEquals("C!kjQv", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("", "");
      assertTrue(string4.equals((Object)string1));
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.join(byteArray0, 'W');
      assertTrue(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      String string0 = StringUtils.leftPad("<(o[.tp9U(7!VH*Ap", 15, "<(o[.tp9U(7!VH*Ap");
      assertEquals("<(o[.tp9U(7!VH*Ap", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String string0 = StringUtils.LF;
      String string1 = StringUtils.unwrap("\n", "\n");
      assertEquals("\n", string1);
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 33, "");
      assertEquals("                                 ", string0);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("[1VCm", (String) null);
      assertEquals("[1VCm", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("}=G", "Locale must not be null");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      String string0 = StringUtils.leftPad("bKLWNL,LI#(Zk\"Q", 5042);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("bKLWNL,LI#(Zk\"Q");
      assertFalse(string1.equals((Object)string0));
      assertEquals("bKLWNL,LI#(Zk\"Q", string1);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String string0 = StringUtils.swapCase("c{hDh");
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "C{HdH";
      charSequenceArray0[1] = (CharSequence) "C{HdH";
      charSequenceArray0[2] = (CharSequence) "C{HdH";
      charSequenceArray0[3] = (CharSequence) "c{hDh";
      int int0 = StringUtils.lastIndexOfAny("C{HdH", charSequenceArray0);
      assertEquals(0, int0);
      
      StringUtils.isAsciiPrintable(charSequenceArray0[3]);
      StringUtils.join((Object[]) charSequenceArray0, 'r', 0, (-1462));
      boolean boolean0 = StringUtils.containsWhitespace("");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      String string1 = StringUtils.join(iterator0, '^');
      assertNotNull(string1);
      
      treeSet0.descendingIterator();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "C{HdH";
      stringArray0[1] = "c{hDh";
      stringArray0[2] = "";
      StringUtils.firstNonEmpty(stringArray0);
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "c{hDh");
      assertEquals(0.47, double0, 0.01);
      
      Vector<Object> vector0 = new Vector<Object>();
      treeSet0.retainAll(vector0);
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[0], stringArray0);
      assertFalse(boolean1 == boolean0);
      
      StringUtils.join((short[]) null, 'q');
      StringUtils.isAsciiPrintable((CharSequence) null);
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrapIfMissing("\"", "");
      assertEquals("\"", string3);
      
      String string4 = StringUtils.rotate("C{HdH", (-1462));
      assertEquals("HdHC{", string4);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      String string0 = StringUtils.center("", 2411);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.join((Object[]) stringArray0, "W");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Failed to get parent directory from provider", "Failed to get parent directory from provider");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.center("Test '%s' was supposed to run no longer than %d ms but ran %d ms.", 2048, "Test '%s' was supposed to run no longer than %d ms but ran %d ms.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      StringUtils.chomp("t\n");
      StringUtils.isEmpty("t");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      StringUtils.unwrap("t\n", "t");
      charSequenceArray0[0] = (CharSequence) "t\n";
      charSequenceArray0[1] = (CharSequence) "t\n";
      charSequenceArray0[2] = (CharSequence) "t\n";
      charSequenceArray0[3] = (CharSequence) "t\n";
      charSequenceArray0[4] = (CharSequence) "t\n";
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = StringUtils.replaceOnce("", "", (String) null);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      String string2 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd("org.junitpioneer.vintage.ExpectedExceptionExtension", "p{InCombiningDiacriticalMarks}+");
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtension", string3);
      
      String[] stringArray0 = StringUtils.split("org.junitpioneer.vintage.ExpectedExceptionExtension", (String) null);
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissing("\n", "", charSequenceArray0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String string0 = StringUtils.capitalize("p");
      assertEquals("P", string0);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String string0 = StringUtils.CR;
      String string1 = StringUtils.defaultIfBlank((String) null, "\r");
      assertEquals("\r", string1);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.containsIgnoreCase(", '", ", '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String string0 = StringUtils.trimToNull("|");
      assertEquals("|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      String string0 = StringUtils.CR;
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.prependIfMissing("\r", "\r", stringArray0);
      assertEquals("\r", string1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String string0 = "-Tisy1";
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'y', (-2318), 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2318
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      StringUtils.trimToNull("");
      StringUtils.contains((CharSequence) null, (-2707));
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      StringUtils.mid("", (-2707), (-2707));
      int[] intArray0 = new int[1];
      intArray0[0] = 99;
      String string0 = StringUtils.join(intArray0, 'Q', 2483, 987);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("`&z33HF`u]~`<e", "`&z33HF`u]~`<e");
      assertEquals("", string1);
      
      String string2 = StringUtils.truncate("4VCo^t}-", 987);
      assertEquals("4VCo^t}-", string2);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      int[] intArray0 = new int[2];
      String string0 = StringUtils.join(intArray0, 'V');
      assertEquals("0V0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String string0 = StringUtils.chomp("`-5jy", "`-5jy");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'i');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      StringUtils.removeStart("u#&", "HpwJf)mnl");
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 99;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2506;
      intArray0[6] = 0;
      intArray0[7] = 4;
      intArray0[8] = 322;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'F', 4, 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      String string0 = StringUtils.swapCase("offset cannot be negative");
      assertEquals("OFFSET CANNOT BE NEGATIVE", string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'f');
      assertNotNull(string1);
      assertEquals(" fvsf ", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "offset cannot be negative", (CharSequence) "OFFSET CANNOT BE NEGATIVE");
      assertEquals(0, int0);
      
      String string2 = StringUtils.truncate("offset cannot be negative", 0, 0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.truncate("bZK_7y:P", 99);
      assertEquals("bZK_7y:P", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("bZK_7y:P", "bZK_7y:P");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "bZK_7y:P", "bZK_7y:P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String string0 = StringUtils.removeStart("0", "=Ue@(c3|l)&2a<>2");
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String string0 = StringUtils.unwrap("+[p\"8M|_jiWxx1!='", "Strings must not be null");
      assertEquals("+[p\"8M|_jiWxx1!='", string0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      boolean boolean0 = StringUtils.containsAny((CharSequence) "-5jy", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("ExceptionWasThrown", " ", false);
      assertEquals(69, int0);
      
      Locale locale0 = Locale.ENGLISH;
      locale0.toLanguageTag();
      locale0.getScript();
      locale0.hasExtensions();
      StringUtils.upperCase((String) null, locale0);
      StringUtils.join((Object[]) null, (String) null);
      String string0 = StringUtils.unwrap("ExceptionWasThrown", " is not in the range '0' - '9'");
      assertEquals("ExceptionWasThrown", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", (CharSequence) "ExceptionWasThrown");
      boolean boolean1 = StringUtils.isNumericSpace("ExceptionWasThrown");
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("ExpectedExcepionAborting to protect against StackOverflowError - output of one loop is the input of another", 'T');
      assertEquals("TExpectedExcepionAborting to protect against StackOverflowError - output of one loop is the input of anotherT", string1);
      
      boolean boolean2 = StringUtils.startsWithAny("TExpectedExcepionAborting to protect against StackOverflowError - output of one loop is the input of anotherT", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String[] stringArray0 = new String[12];
      boolean boolean0 = StringUtils.startsWithAny("Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertNotNull(string0);
      assertEquals("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string0);
      
      float[] floatArray0 = new float[0];
      StringUtils.join(floatArray0, 'j');
      String string1 = StringUtils.abbreviate((String) null, 0, 16);
      assertNull(string1);
      
      StringUtils.truncate("Snsk:0:?", 56, 3);
      boolean boolean0 = StringUtils.isNumericSpace("5IYCu'`eE!;#?*9");
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf("Snsk:0:?", "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String string0 = StringUtils.truncate("Can only resolve parameter of type ", 1498, 1498);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("'AM", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("or");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-3659));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      String string0 = StringUtils.CR;
      Locale locale0 = new Locale("\r");
      String string1 = StringUtils.upperCase("\r", locale0);
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.unwrap(" 7s ", " 7s ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertEquals("", string0);
      
      StringUtils.endsWith("", "");
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      locale1.stripExtensions();
      locale1.getDisplayLanguage(locale0);
      String string2 = StringUtils.upperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale1);
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "ExpectedException");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("ExpectedException");
      String[] stringArray0 = new String[0];
      StringUtils.firstNonBlank(stringArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "fran\u00E7ais";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean2 = StringUtils.startsWithAny("ExpectedException", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = StringUtils.CR;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r");
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence[]) stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      String string0 = "'c\\OO ";
      StringUtils.wrap("'cOO ", "'cOO ");
      int int0 = 8192;
      CharBuffer charBuffer0 = CharBuffer.allocate(8192);
      // Undeclared exception!
      try { 
        charBuffer0.put((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.wrap("\n", "\n");
      assertEquals("\n\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("u#&", "HpwJf)mnl");
      assertEquals("u#&", string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 99;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 2506;
      intArray0[6] = 0;
      intArray0[7] = 4;
      intArray0[8] = 322;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "u#&");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      String string0 = StringUtils.rightPad("X65]@)6bG(", 1, "X65]@)6bG(");
      assertEquals("X65]@)6bG(", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "X65]@)6bG(", (CharSequence) "X65]@)6bG(");
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "X65]@)6bG(";
      charSequenceArray0[1] = (CharSequence) "X65]@)6bG(";
      charSequenceArray0[2] = (CharSequence) "X65]@)6bG(";
      String string1 = StringUtils.replaceIgnoreCase("X65]@)6bG(", "X65]@)6bG(", "X4_s(l\"'C");
      assertEquals("X4_s(l\"'C", string1);
      
      charSequenceArray0[3] = (CharSequence) "X4_s(l\"'C";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("The character ", "The character ", "The character ");
      assertEquals("The character ", string0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      String string1 = StringUtils.replace("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9", "#O'");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.isNotEmpty("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      boolean boolean0 = StringUtils.equalsIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "5IYCu'`eE!;#?*9");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate((String) null, "#O'", 0);
      String string3 = StringUtils.removeStart("The type must not be null", "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertEquals("The type must not be null", string3);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = "@DefaultLocale can only be used with language tag if language, country, and variant are not set";
      stringArray0[2] = "The type must not be null";
      stringArray0[3] = "|(GbA4";
      stringArray0[4] = "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET";
      stringArray0[5] = "5IYCu'`eE!;#?*9";
      stringArray0[6] = "#O'";
      stringArray0[7] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string4);
      
      StringUtils.isNoneEmpty(stringArray0);
      int int0 = StringUtils.compareIgnoreCase("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", "s'/n0D,;'2*M");
      assertEquals((-51), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "5IYCu'`eE!;#?*9", (CharSequence) "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      assertEquals(0, int1);
      
      String string5 = StringUtils.leftPad("@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", 896, string2);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 @DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET", string5);
      
      StringUtils.replace("NiR_\"x5nJzW", "The type must not be null", string2, (-51));
      StringUtils.isNumericSpace("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      String string6 = StringUtils.strip("-vH{)]O/RY=;O^R", "s'/n0D,;'2*M");
      assertEquals("-vH{)]O/RY=;O^R", string6);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      StringUtils.removeAll("\r", "\r");
      StringUtils.toCodePoints("");
      int[] intArray0 = StringUtils.toCodePoints("\r");
      StringUtils.isNumeric("\r");
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      boolean boolean1 = StringUtils.isNumeric("\r");
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Iterator<Object> iterator0 = linkedList1.iterator();
      StringUtils.join(iterator0, '<');
      String string0 = StringUtils.rightPad("S_?g_", (-3405));
      assertEquals("S_?g_", string0);
      
      StringUtils.substringBeforeLast("S_?g_", "B(T");
      String string1 = StringUtils.join(intArray0, '<');
      assertEquals("13", string1);
      
      StringUtils.leftPad("", 0, '%');
      String string2 = StringUtils.truncate("\"UFp~7che2%", 0, 0);
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "S_?g_", (CharSequence) "S_?g_", (-1217));
      String string3 = StringUtils.wrap("LD(&[3Ki", '%');
      assertEquals("%LD(&[3Ki%", string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "%LD(&[3Ki%", (CharSequence) "");
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compare("0~#K4T#/,e", "");
      assertEquals(10, int2);
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      String string0 = StringUtils.LF;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "\n");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\r", " ", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String string0 = "jQ'BOe3=:4QmzgG";
      int int0 = (-1121);
      StringUtils.replace("jQ'BOe3=:4QmzgG", "jQ'BOe3=:4QmzgG", "jQ'BOe3=:4QmzgG", (-1121));
      StringUtils.indexOfIgnoreCase((CharSequence) "jQ'BOe3=:4QmzgG", (CharSequence) "jQ'BOe3=:4QmzgG", 0);
      StringUtils.splitByWholeSeparator((String) null, (String) null, (-1121));
      // Undeclared exception!
      try { 
        Charset.forName("f_w205S+u[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // f_w205S+u[
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(" vs ");
      String string0 = StringUtils.appendIfMissingIgnoreCase(" vs ", "", stringArray0);
      assertEquals(" vs ", string0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      String string0 = StringUtils.removeFirst("t\n", "t\n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      String string0 = StringUtils.wrap("", "\r");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String string0 = StringUtils.appendIfMissingIgnoreCase("Nlo1%d$?tX[.cDI2*", "Nlo1%d$?tX[.cDI2*", (CharSequence[]) null);
      assertEquals("Nlo1%d$?tX[.cDI2*", string0);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      StringUtils.wrap("", "");
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("", "", "ysDgR}G8Ke!$vU!Pxb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ", ";
      charSequenceArray0[1] = (CharSequence) ", ";
      StringUtils.prependIfMissing(", ", "dlyMoRMLi&m", charSequenceArray0);
      StringUtils.trimToNull(", ");
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      charArray0[1] = 'y';
      charArray0[2] = '%';
      charArray0[3] = ',';
      StringUtils.indexOfAnyBut((CharSequence) ", ", charArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '%';
      intArray0[1] = (int) 'y';
      intArray0[2] = 246;
      intArray0[3] = (int) ',';
      intArray0[4] = (int) '*';
      intArray0[5] = (int) '%';
      intArray0[6] = (int) ',';
      intArray0[7] = (int) '*';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ',', 42, 246);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String string0 = StringUtils.capitalize("uv ");
      assertEquals("Uv ", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Uv ", "uv ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = StringUtils.join(byteArray0, '%');
      assertNotNull(string0);
      assertEquals("0%0%0", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      StringUtils.isEmpty((CharSequence) null);
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      String string0 = StringUtils.LF;
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.compareIgnoreCase(" ", "", true);
      Locale locale0 = Locale.ENGLISH;
      locale0.getScript();
      locale0.hasExtensions();
      Locale locale1 = Locale.ITALIAN;
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      String string0 = StringUtils.substring("Locale must not be null", 2);
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "cale must not be null", "cale must not be null");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replace("cale must not be null", "M8rqW.", "cale must not be null");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.isNumericSpace("cale must not be null");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = 'x';
      charArray0[2] = 'u';
      charArray0[3] = '\'';
      charArray0[4] = 'u';
      int int0 = StringUtils.indexOfAny((CharSequence) "cale must not be null", charArray0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("/k2iAE~TiGdW;V>D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '\u0018');
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      assertEquals("^q@FMnG;", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      String[] stringArray0 = new String[0];
      StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      String string1 = StringUtils.leftPad("^q@FMnG;", (-26));
      assertNotNull(string1);
      
      StringUtils.join((float[]) null, '');
      String string2 = StringUtils.replaceEach("^q@FMnG;", stringArray0, stringArray0);
      assertTrue(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "^q@FMnG;", (CharSequence) "c");
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.deleteWhitespace((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, "eM{[:0,}AZP[eTNkdjh", 439);
      assertNull(string4);
      
      String string5 = StringUtils.normalizeSpace("ArYgru}^5dSv]");
      assertEquals("ArYgru}^5dSv]", string5);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      String string1 = StringUtils.replaceOnce("", "", ", Length: 0");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull(", Length: 0");
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(", Length: 0", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissing(", Length: 0", (CharSequence) null, charSequenceArray0);
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultIfBlank("", "");
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)52;
      Locale locale0 = Locale.FRANCE;
      locale0.stripExtensions();
      Locale locale1 = Locale.PRC;
      locale1.stripExtensions();
      locale0.getDisplayLanguage(locale1);
      String string0 = StringUtils.upperCase("\u6CD5\u6587", locale0);
      assertEquals("\u6CD5\u6587", string0);
      assertNotNull(string0);
      
      StringUtils.defaultIfEmpty((CharSequence) "\u6CD5\u6587", (CharSequence) "\u6CD5\u6587");
      boolean boolean0 = StringUtils.contains((CharSequence) "\u6CD5\u6587", (CharSequence) "\u6CD5\u6587");
      String string1 = StringUtils.removeStartIgnoreCase("PX", "PX");
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "mUN";
      locale0.getDisplayName();
      stringArray0[1] = "mUN";
      stringArray0[2] = "\u6CD5\u6587";
      stringArray0[3] = "mUN";
      stringArray0[4] = "\u6CD5\u6587";
      stringArray0[5] = "?gaXeJ[/q~h";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("mUN", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWithAny("Jv^#", stringArray0);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace("mUN");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("y'Ru`U=h", "y'Ru`U=h", false);
      String string0 = StringUtils.unwrap("y'Ru`U=h", 'Z');
      assertEquals("y'Ru`U=h", string0);
      
      String string1 = StringUtils.toRootLowerCase("y'Ru`U=h");
      assertEquals("y'ru`u=h", string1);
      
      StringUtils.remove("y'Ru`U=h", 'Z');
      boolean boolean0 = StringUtils.isAlphaSpace("y'Ru`U=h");
      String string2 = StringUtils.rightPad("Comparator should not be null.", 0, ')');
      assertEquals("Comparator should not be null.", string2);
      
      StringUtils.splitByCharacterType("\r");
      String[] stringArray0 = StringUtils.split("y'Ru`U=h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "y'Ru`U=h", (CharSequence) "Comparator should not be null.");
      assertFalse(boolean1 == boolean0);
      
      StringUtils.capitalize("");
      boolean boolean2 = StringUtils.isMixedCase("Comparator should not be null.");
      assertTrue(boolean2);
      
      String string3 = StringUtils.substringBeforeLast("", "y'Ru`U=h");
      assertEquals("", string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      int int1 = StringUtils.getFuzzyDistance("Comparator should not be null.", "y'Ru`U=h", locale0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("org.junitpioneer.vintage.ExpectedExceptionExtension", "");
      assertEquals(51, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.vintage.ExpectedExceptionExtension";
      charSequenceArray0[5] = (CharSequence) "";
      StringUtils.isAnyBlank(charSequenceArray0);
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[4], (CharSequence) "");
      assertEquals(0, int1);
      
      StringUtils.startsWith(charSequenceArray0[1], charSequenceArray0[3]);
      StringUtils.isAlphanumeric("");
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, 'B');
      assertEquals("org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB", string1);
      
      String string2 = StringUtils.truncate("org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB", 0);
      String string3 = StringUtils.replacePattern("", "org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB", "org.junitpioneer.vintage.ExpectedExceptionExtensionBBBorg.junitpioneer.vintage.ExpectedExceptionExtensionBorg.junitpioneer.vintage.ExpectedExceptionExtensionB");
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceOnce("", " ", "");
      String string5 = StringUtils.removeEndIgnoreCase("", "");
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.capitalize("");
      assertTrue(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("t\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      String string0 = StringUtils.removeStart("u#&", "HpwJf)mnl");
      assertEquals("u#&", string0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      String string1 = StringUtils.removeStartIgnoreCase((String) null, "N?oWjIfX\"Osn !HA5/(");
      assertNull(string1);
      
      StringUtils.join((byte[]) null, '$');
      String string2 = StringUtils.left("YO+b", 97);
      assertEquals("YO+b", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.endsWithAny("u#&", charSequenceArray0);
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBefore("...", "c[|LZbYgKT!sLZ");
      assertEquals("...", string3);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      String string0 = StringUtils.center("^q@FMnG;", 0, '=');
      StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEach("ExceptionWasThrown", stringArray0, stringArray0);
      assertEquals("ExceptionWasThrown", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("^q@FMnG;", "jkt", "%d|BD{F=se", 0);
      assertTrue(string2.equals((Object)string0));
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      priorityQueue0.add("^q@FMnG;");
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>(priorityQueue0);
      priorityQueue1.add("ExceptionWasThrown");
      String string3 = StringUtils.join((Iterable<?>) priorityQueue1, "P");
      assertEquals("ExceptionWasThrownP^q@FMnG;", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceIgnoreCase("p{InCombiningDiacriticalMarks}+", "jkt", "", (-1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      StringUtils.valueOf(charArray0);
      boolean boolean0 = StringUtils.isAlpha("P");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='");
      assertEquals("+[p\"8M2_jWxx1!='+[p\"8M2_jWxx1!='", string0);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      int int0 = StringUtils.getFuzzyDistance("1v", "1v", locale0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      StringUtils.swapCase("-");
      StringUtils.join((Object[]) null, ' ');
      // Undeclared exception!
      try { 
        StringUtils.joinWith("@DefaultLocale can only be used with language tag if language, country, and variant are not set", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("a`)LCidIi3N`@X", "A#fob");
      assertEquals("a`)LCidIi3N`@X", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "a`)LCidIi3N`@X", (CharSequence) "a`)LCidIi3N`@X");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("A#fob", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("A#fob", string1);
      
      StringUtils.join((List<?>) null, "a`)LCidIi3N`@X", (-480), (-3060));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a`)LCidIi3N`@X";
      stringArray0[1] = "a`)LCidIi3N`@X";
      stringArray0[2] = " vs ";
      StringUtils.replaceEach(" vs ", stringArray0, stringArray0);
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "a`)LCidIi3N`@X", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.deleteWhitespace("Comparator should not be null.");
      assertEquals("Comparatorshouldnotbenull.", string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, " vs ", (-3060));
      assertNull(string3);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      StringUtils.toRootUpperCase("NHu ");
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'L');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      StringUtils.contains((CharSequence) null, (-2707));
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      StringUtils.indexOf((CharSequence) null, 2, 0);
      StringUtils.isAlphaSpace((CharSequence) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = 'T';
      charArray0[2] = 'e';
      charArray0[3] = '';
      StringUtils.valueOf(charArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.indexOfAny(charSequenceArray0[1], (CharSequence[]) stringArray0);
      StringUtils.removeEndIgnoreCase((String) null, "[6=V+]9cNPWT@tg");
      StringUtils.isNoneBlank(stringArray0);
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) "[6=V+]9cNPWT@tg");
      StringUtils.isAnyEmpty(stringArray0);
      StringUtils.leftPad(" in an array of ", (-2707), "HL3~_K,MT90>Efv");
      StringUtils.swapCase(" in an array of ");
      String string1 = StringUtils.unwrap((String) null, '^');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      StringUtils.isAlpha((CharSequence) null);
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      String string0 = StringUtils.LF;
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      int int0 = StringUtils.compareIgnoreCase(" ", "", false);
      assertEquals(1, int0);
      
      Locale locale0 = Locale.ENGLISH;
      locale0.getScript();
      locale0.hasExtensions();
      String string1 = StringUtils.upperCase("\n", locale0);
      assertEquals("\n", string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "(");
      assertEquals("((\n((((", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " ", (CharSequence) "((\n((((");
      assertFalse(boolean1);
      
      StringUtils.isNumericSpace("");
      boolean boolean2 = StringUtils.startsWithAny(charSequenceArray0[0], (CharSequence[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0s66", "0s66");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("or");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "+7H_Kp+M7H_Kp", (CharSequence) "+7H_Kp+M7H_Kp");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "+7H_Kp+M7H_Kp", (-1), (-1));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      StringUtils.stripAccents("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.leftPad("", (-299));
      assertEquals("", string0);
      
      StringUtils.uncapitalize("");
      String string1 = StringUtils.center("C!kjQv", 5, "");
      assertEquals("C!kjQv", string1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2302);
      shortArray0[1] = (short)2980;
      shortArray0[2] = (short)23;
      shortArray0[3] = (short)23;
      shortArray0[4] = (short)76;
      shortArray0[5] = (short)2980;
      shortArray0[6] = (short)76;
      String string2 = StringUtils.join(shortArray0, 'a');
      assertNotNull(string2);
      assertEquals("-2302a2980a23a23a76a2980a76", string2);
      
      String[] stringArray1 = StringUtils.split((String) null, "", (-299));
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0#(", (String) null);
      assertFalse(boolean0);
      
      StringUtils.equalsAnyIgnoreCase("C!kjQv", (CharSequence[]) null);
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(" in an array of ");
      assertEquals(6, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      StringUtils.join(byteArray0, 'X');
      String string0 = StringUtils.defaultIfBlank("org.apache.commons.lang3.ArrayUtils", "0X0X90");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      String string1 = StringUtils.join(byteArray0, 'X');
      assertEquals("0X0X90", string1);
      
      Locale locale0 = Locale.FRENCH;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      locale0.getExtensionKeys();
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      priorityQueue0.toArray(locale_CategoryArray0);
      priorityQueue0.add(locale0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) priorityQueue0);
      locale0.getExtension('X');
      arrayList0.trimToSize();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      int int0 = StringUtils.getFuzzyDistance("0X0X90", "0X0X90", locale0);
      assertEquals(16, int0);
      
      boolean boolean0 = StringUtils.isAlpha("0X0X90");
      StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", 0, (int) (byte)0);
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.ArrayUtils", "L ");
      assertTrue(boolean1 == boolean0);
      
      StringUtils.join((Object[]) null, 'X');
      StringUtils.defaultIfEmpty("", "");
      String string2 = StringUtils.deleteWhitespace("org.apache.commons.lang3.CharUtils");
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.removeStart("%fNMa", "%fNMa");
      assertEquals("", string0);
      
      String string1 = StringUtils.replace("%fNMa", "", "%fNMa");
      assertEquals("%fNMa", string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String string0 = StringUtils.stripStart("v ", "v ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.LF;
      String string1 = StringUtils.remove("\n", "\n");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      String string0 = StringUtils.CR;
      String string1 = StringUtils.stripToEmpty("\r");
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("v2)x}", "v2)x}", "v2)x}");
      assertEquals("v2)x}", string0);
      
      boolean boolean0 = StringUtils.isNumeric("v2)x}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      String string0 = StringUtils.CR;
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", (-1368));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 65);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "v ", (CharSequence) "v ", 65);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      String string0 = StringUtils.replaceChars("`\"AC:+/W?0t]*^[y[1", '(', '(');
      assertNotNull(string0);
      assertEquals("`\"AC:+/W?0t]*^[y[1", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("`\"AC:+/W?0t]*^[y[1", "`\"AC:+/W?0t]*^[y[1");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = StringUtils.split("`\"AC:+/W?0t]*^[y[1", '5');
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.defaultString("Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "`\"AC:+/W?0t]*^[y[1", (CharSequence) "Arguments cannot both be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Arguments cannot both be null", (CharSequence) "`\"AC:+/W?0t]*^[y[1", 100);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 256, 256);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      String string0 = StringUtils.rightPad("Ie!j='?To", 18, 'w');
      assertNotNull(string0);
      assertEquals("Ie!j='?Towwwwwwww", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ie!j='?To", (CharSequence) "Ie!j='?Towwwwwwww");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("s'}mY=vX&.");
      assertEquals("", string1);
      
      StringUtils.split("", 'Q');
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      StringUtils.valueOf(charArray0);
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Ie!j='?Towwwwwwww", (CharSequence) "Ie!j='?Towwwwwwww", 16);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceAll("Ie!j='?To", "", "ns-e");
      assertEquals("ns-eIns-ens-eens-e!ns-ejns-e=ns-e'ns-e?ns-eTns-eons-e", string2);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      String string0 = StringUtils.abbreviate("DefaultTimeZone", 65);
      assertEquals("DefaultTimeZone", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "DefaultTimeZone", (CharSequence) "DefaultTimeZone");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Locale must not be null", (CharSequence) "Locale must not be null", (-1531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      String string0 = StringUtils.defaultString("e,\"");
      assertEquals("e,\"", string0);
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      StringUtils.defaultString("");
      int int0 = 0;
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      String string0 = "hi@`@Ul^ldyw\\m?cWz";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("hi@`@Ul^ldywm?cWz", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      String string0 = StringUtils.CR;
      String[] stringArray0 = StringUtils.splitByCharacterType(" vs ");
      long[] longArray0 = new long[3];
      longArray0[0] = (-601L);
      longArray0[1] = (-1204L);
      longArray0[2] = 0L;
      String string1 = StringUtils.join(longArray0, 'V');
      assertEquals("-601V-1204V0", string1);
      assertNotNull(string1);
      
      StringUtils.length("DefaultTimeZone");
      String string2 = StringUtils.wrapIfMissing("cL)[=", (String) null);
      assertEquals("cL)[=", string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(3, stringArray1.length);
      
      String string3 = StringUtils.removeStartIgnoreCase("\r", "bqdaD");
      assertEquals("\r", string3);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      String string0 = StringUtils.CR;
      String string1 = StringUtils.replaceIgnoreCase("', is neither of type Map.Entry nor an Array", "Failed to get parent directory from provider", "\r", 16);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      StringUtils.join((Iterable<?>) priorityQueue1, " %BV:Z,jMl:");
      String string2 = StringUtils.stripToNull("\r");
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd("\n", (String) null);
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Failed to get parent directory from provider");
      assertTrue(boolean0);
      
      String string4 = StringUtils.uncapitalize("4UbU-`!%p]Mch");
      assertEquals("4UbU-`!%p]Mch", string4);
      
      Stack<Object> stack0 = new Stack<Object>();
      Iterator<Object> iterator0 = stack0.iterator();
      String string5 = StringUtils.join(iterator0, "");
      assertTrue(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      String string0 = "x";
      StringUtils.splitPreserveAllTokens("x", "5qoIy.", 5);
      StringUtils.compare("x", (String) null, false);
      StringUtils.indexOf((CharSequence) null, 123, (-9));
      StringUtils.isAlphaSpace("x");
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      String string1 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      StringUtils.stripStart((String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StringUtils.stripToNull(",");
      String string2 = "U3*ZHNZMC=|";
      StringUtils.replaceIgnoreCase("U3*ZHNZMC=|", (String) null, (String) null);
      StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      try { 
        StringUtils.getBytes("Aborting to protect against StackOverflowError - output of one loop is the input of another", ",");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      String string0 = StringUtils.repeat("^q@FMnG;", "^q@FMnG;", (int) '=');
      StringUtils.indexOfDifference((CharSequence) "^q@FMnG;", (CharSequence) "^q@FMnG;");
      StringUtils.countMatches((CharSequence) "ExceptionWasThrown", 'C');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Failed to delete temp directory ";
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      StringUtils.stripAll(stringArray0, "IMEXWo");
      StringUtils.unwrap(">V6Uhind1Y2", '=');
      StringUtils.leftPad("Locae mus: nt be null", 0, "");
      StringUtils.getJaroWinklerDistance("", "Wh");
      StringUtils.stripEnd((String) null, "@DEFAULTLOCALE CAN ONLY BE USED WITH LANGUAGE TAG IF LANGUAGE, COUNTRY, AND VARIANT ARE NOT SET");
      String string1 = StringUtils.removePattern((String) null, "=p Bcdi]@knh7Ny~");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      StringUtils.wrapIfMissing("Locale must not be null", "Locale must not be null");
      StringUtils.containsOnly((CharSequence) "Locale must not be null", "Locale must not be null");
      StringUtils.replace("Locale must not be null", "M8rqW.", "Locale must not be null");
      StringUtils.isNumericSpace("Locale must not be null");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'x';
      int int0 = StringUtils.indexOfAny((CharSequence) "Locale must not be null", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      StringUtils.substringBetween("\r", "\r");
      StringUtils.wrapIfMissing("\r", (String) null);
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      StringUtils.contains((CharSequence) null, (-2707));
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      long[] longArray0 = new long[2];
      longArray0[0] = (-1204L);
      longArray0[1] = 0L;
      String string1 = StringUtils.join(longArray0, 'V');
      assertEquals("-1204V0", string1);
      
      StringUtils.length((CharSequence) null);
      String string2 = StringUtils.wrapIfMissing((String) null, "@5Nb");
      assertNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@5Nb";
      stringArray0[1] = "@5Nb";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.removeStartIgnoreCase("cL)[=", " be null");
      assertEquals("cL)[=", string3);
      
      Locale locale0 = Locale.GERMAN;
      String string4 = StringUtils.upperCase("L>! 73\"^OC", locale0);
      assertNotNull(string4);
      assertEquals("L>! 73\"^OC", string4);
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      long[] longArray0 = new long[31];
      String string0 = StringUtils.join(longArray0, 'L');
      assertNotNull(string0);
      assertEquals("0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0L0", string0);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "G'VOAA;<<V@L=2OD");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      String string0 = StringUtils.truncate("kg}v 2<^S", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ExpectedException");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      StringUtils.join((long[]) null, 'V');
      int int0 = StringUtils.length("ExpectedException");
      assertEquals(17, int0);
      
      String string2 = StringUtils.wrapIfMissing("jJ4CC1XS:_V{OMr", "GIfC[K[");
      assertEquals("GIfC[K[jJ4CC1XS:_V{OMrGIfC[K[", string2);
      
      String[] stringArray0 = new String[0];
      StringUtils.stripAll(stringArray0);
      String string3 = StringUtils.removeStartIgnoreCase("GIfC[K[", "kg}v 2<^S");
      assertEquals("GIfC[K[", string3);
      
      Locale locale0 = Locale.GERMAN;
      String string4 = StringUtils.upperCase("GIfC[K[", locale0);
      assertEquals("GIFC[K[", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("C!kjQv", 'H');
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("NHu ", "C!kjQv");
      assertEquals("C!kjQvNHu C!kjQv", string0);
      
      int int0 = StringUtils.compareIgnoreCase("_*9v6+=TX^<:", "_*9v6+=TX^<:");
      String string1 = StringUtils.left("", 1027);
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "NHu ", (CharSequence) "NHu ", 0);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.center("NHu ", 1027, ';');
      assertNotNull(string2);
      
      StringUtils.removeStart("", "('?s)");
      StringUtils.join((int[]) null, 'k', 0, (-112));
      boolean boolean1 = StringUtils.isBlank("_*9v6+=TX^<:");
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("dlyMoRMLi&m", '}');
      assertNotNull(string0);
      assertEquals("dlyMoRMLi&m", string0);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", "[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("[[t1+uxet#Q>g#dorg.junitpioneer.jupiter.DefaultLocaleExtension", string0);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      int int0 = StringUtils.length("t\n");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      StringUtils.swapCase("K v ");
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "m/k#y[");
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Cannot store ");
      assertEquals("Cannot store", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      String string0 = StringUtils.removeStart("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'z');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      longArray0[5] = (-601L);
      longArray0[6] = 1548L;
      longArray0[7] = (-1204L);
      String string0 = StringUtils.join(longArray0, '@');
      assertNotNull(string0);
      
      StringUtils.length("-1@0@0@1@0@-601@1548@-1204");
      String string1 = StringUtils.wrapIfMissing("-1@0@0@1@0@-601@1548@-1204", "");
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-1@0@0@1@0@-601@1548@-1204";
      stringArray0[3] = "-1@0@0@1@0@-601@1548@-1204";
      StringUtils.stripAll(stringArray0);
      String string2 = StringUtils.removeStartIgnoreCase("", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string2);
  }
}
