/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 09:23:01 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
import java.util.Locale;
import java.util.Map;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.apache.commons.lang3.ArrayUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class ArrayUtils_ESTest extends ArrayUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'E';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, ':');
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'Z', 'E'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)59;
      byte byte0 = (byte)65;
      byteArray0[2] = (byte)65;
      byte byte1 = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)68;
      BitSet bitSet1 = ArrayUtils.indexesOf(byteArray0, (byte)106);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new byte[] {(byte) (-69), (byte)59, (byte)65, (byte)6, (byte)68}, byteArray0);
      assertNotNull(bitSet1);
      assertEquals(5, byteArray0.length);
      
      Byte[] byteArray1 = new Byte[6];
      byteArray1[0] = (Byte) (byte)6;
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray1[1] = byte2;
      byteArray1[2] = (Byte) (byte)65;
      byteArray1[3] = (Byte) (byte) (-69);
      byteArray1[4] = (Byte) (byte)6;
      byteArray1[5] = (Byte) (byte)6;
      Byte byte3 = ArrayUtils.get(byteArray1, (-2114));
      assertNull(byte3);
      assertEquals(6, byteArray1.length);
      
      String string0 = ArrayUtils.toString((Object) null, (String) null);
      assertNull(string0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 2);
      Byte byte4 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) byte1, byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte1 == byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) byte0, (Byte) byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(byte1 == byte0);
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(3, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      byte byte0 = (byte) (-115);
      Byte byte1 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) null, (Object) byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(5, intArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (byte)0, 1681.3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byte byte5 = (byte)85;
      Byte byte6 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte5);
      assertEquals((byte)85, (byte)byte7);
      assertFalse(byte5 == byte0);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte8);
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte9);
      assertFalse(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte0));
      assertFalse(byte0 == byte5);
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte byte10 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte10);
      assertFalse(byte0 == byte5);
      assertTrue(byte10.equals((Object)byte0));
      assertTrue(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte9));
      assertFalse(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte7));
      assertTrue(byte10.equals((Object)byte2));
      assertTrue(byte10.equals((Object)byte3));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte8));
      assertTrue(byte10.equals((Object)byte4));
      assertNotNull(byte10);
      
      byteArray0[8] = byte10;
      Byte[] byteArray1 = ArrayUtils.insert(9, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(18, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[12];
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray1 = new boolean[5];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      boolean[] booleanArray2 = ArrayUtils.insert(12, booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(12, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      assertEquals(17, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-5));
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.add((Byte[]) null, byte0);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.insert((int) 0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Random.setNextRandom(81);
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      ArrayUtils.swap(charArray0, 1, (-944), 12);
      assertArrayEquals(new char[] {'q'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 1, 1, (-17348));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) (byte)105;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(15, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      String string0 = ArrayUtils.toString((Object) null, "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)105;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 46.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {105.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {105.0, 46.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      short[] shortArray0 = new short[11];
      ArrayUtils.shift(shortArray0, (-141));
      assertEquals(11, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray0, 10);
      assertNull(byte0);
      assertEquals(0, byteArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[2] = (Object) null;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[2]);
      assertNull(object0);
      assertEquals(7, objectArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-141);
      doubleArray0[1] = (double) 440;
      doubleArray0[2] = (double) (-141);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-141.0), 98, (double) 10);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-141.0), 440.0, (-141.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      Object object2 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-141.0), 440.0, (-141.0)}, doubleArray0, 0.01);
      assertNull(object2);
      assertEquals(3, doubleArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 10);
      assertEquals(6, int0);
      assertEquals(7, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 98;
      longArray0[1] = (long) '0';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (long) 440);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {440L, 98L, 48L}, longArray1);
      assertArrayEquals(new long[] {98L, 48L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-4));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-4), (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      ArrayUtils.shift(byteArray1, 7);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-4)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Byte[] byteArray2 = new Byte[0];
      int[] intArray0 = new int[0];
      Byte[] byteArray3 = ArrayUtils.removeAll(byteArray2, intArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray3.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-3731));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte[] byteArray1 = new Byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte1;
      byteArray1[1] = byte0;
      byteArray1[2] = byte0;
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      byte byte0 = (byte) (-9);
      Byte[] byteArray0 = new Byte[4];
      Byte byte1 = new Byte((byte) (-9));
      assertEquals((byte) (-9), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-9), (byte)byte4);
      assertFalse(byte0 == byte2);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte2 == byte0);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-83));
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte) (-9), (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-9);
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, (int) byte2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(byte2 == byte0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-9.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 1320);
      assertArrayEquals(new int[] {1320}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Short[] shortArray0 = new Short[1];
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)2;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {2L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, intArray0.length);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'X', 1);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'8'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(3922.8);
      assertEquals(3922.8, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-4752.8));
      assertEquals((-4752.8), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-431.836314872));
      assertEquals((-431.836314872), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1690.0803000514));
      assertEquals((-1690.0803000514), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      assertEquals((-1690.0803000514), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-1690.0803000514));
      assertEquals((-1690.0803000514), (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotNull(double6);
      
      doubleArray0[6] = double6;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1813.2373319084622);
      assertArrayEquals(new double[] {3922.8, (-1.0), (-4752.8), (-431.836314872), (-1690.0803000514), (-1690.0803000514), (-1690.0803000514)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)4471);
      assertEquals((short)4471, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)88);
      assertEquals((short)88, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short)4471);
      assertEquals((short)4471, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertFalse(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      Short short3 = new Short((short) shortArray0[0]);
      assertEquals((short)4471, (short)short3);
      assertTrue(short3.equals((Object)short2));
      assertTrue(short3.equals((Object)short0));
      assertFalse(short3.equals((Object)short1));
      assertNotNull(short3);
      assertEquals(6, shortArray0.length);
      
      shortArray0[3] = short3;
      Short short4 = new Short((short)4471);
      assertEquals((short)4471, (short)short4);
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short2));
      assertFalse(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[4] = short4;
      Short short5 = new Short((short)1274);
      assertEquals((short)1274, (short)short5);
      assertFalse(short5.equals((Object)short0));
      assertFalse(short5.equals((Object)short4));
      assertFalse(short5.equals((Object)short2));
      assertFalse(short5.equals((Object)short3));
      assertFalse(short5.equals((Object)short1));
      assertNotNull(short5);
      
      shortArray0[5] = short5;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)52);
      assertSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      Character[] characterArray0 = new Character[2];
      Character character0 = Character.valueOf('3');
      assertEquals('3', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('y');
      assertEquals('y', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'3', 'y'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'y', '3'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-572);
      shortArray0[1] = (short)1110;
      shortArray0[2] = (short) (-2552);
      shortArray0[3] = (short)4308;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-1526);
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)134;
      shortArray0[8] = (short)43;
      short[] shortArray1 = ArrayUtils.insert(0, shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-572), (short)1110, (short) (-2552), (short)4308, (short)4, (short) (-1526), (short)1, (short)134, (short)43}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, (boolean[]) null);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
      assertNull(integerArray0);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      byte byte0 = (byte) (-94);
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      BitSet bitSet0 = null;
      try {
        bitSet0 = new BitSet((-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -6
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      ArrayUtils.swap(longArray0, 1, 1, 1);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Byte byte0 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.shift(booleanArray0, (int) (byte)44, (-2228), (int) (byte)44);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '(';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) '|';
      intArray0[1] = (int) '(';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2995.0);
      doubleArray0[1] = 491.9517334673;
      doubleArray0[2] = (-3776.67315747);
      doubleArray0[3] = (-2496.614353345495);
      doubleArray0[4] = 100.0;
      doubleArray0[5] = (-1571.04183109);
      doubleArray0[6] = (-2850.922415969);
      doubleArray0[7] = 463.4077157401;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-2850.922415969));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-2995.0), 491.9517334673, (-3776.67315747), (-2496.614353345495), 100.0, (-1571.04183109), (-2850.922415969), 463.4077157401}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'y';
      char[] charArray1 = ArrayUtils.insert(2, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\"', 'y'}, charArray0);
      assertArrayEquals(new char[] {'\"', 'y', '\"', 'y'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      short[] shortArray0 = new short[2];
      float[] floatArray0 = new float[4];
      shortArray0[1] = (short)0;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)0, (int) (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Byte";
      stringArray0[1] = ">Xu0[yr/";
      stringArray0[2] = "Array and element cannot both be null";
      stringArray0[3] = "&BEV[JH|{1N@8X'";
      stringArray0[4] = "Comparator should not be null.";
      stringArray0[5] = "N/FjX7WDM]&m:}";
      stringArray0[6] = "f9GRzLge6ElL";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[3] = (long) (-12);
      longArray0[6] = (long) (-12);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)5;
      ArrayUtils.shift(byteArray0, 1, 0, (int) (byte)5);
      assertArrayEquals(new byte[] {(byte) (-82), (byte)5, (byte)0, (byte)3, (byte) (-66), (byte)1, (byte)5}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte)1, (double) (-12));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((double[]) null, 13, 14, 2146586995);
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte) (-110);
      floatArray0[1] = 62.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1170.8F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-110.0F), 62.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {(-110.0F), 62.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {62.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-110);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte) (-110);
      ArrayUtils.shift(byteArray0, (-1449), (int) (byte)110, (int) (byte) (-110));
      assertArrayEquals(new byte[] {(byte)110, (byte) (-1), (byte) (-110), (byte) (-110), (byte) (-110), (byte) (-110), (byte) (-110), (byte) (-110), (byte) (-110)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-3635);
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte) (-110));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3635)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3635), (short) (-110)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-2044));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-474.207F);
      floatArray0[2] = (-1027.0F);
      floatArray0[3] = (-1400.1399F);
      floatArray0[4] = (-3417.3357F);
      float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-474.207F), (-1027.0F), (-1400.1399F), (-3417.3357F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-474.207F), (-1027.0F), (-1400.1399F), (-3417.3357F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1682));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      ArrayUtils.swap(byteArray0, (-367), 0, (-1372));
      assertArrayEquals(new byte[] {(byte)2, (byte)4, (byte)4, (byte)4, (byte)4, (byte)4}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      byte byte0 = (byte)27;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)27;
      doubleArray0[1] = (double) (byte)27;
      doubleArray0[2] = (double) (byte)27;
      doubleArray0[3] = (double) (byte)27;
      doubleArray0[4] = (double) (byte)27;
      doubleArray0[5] = (double) (byte)27;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 27.0, 27.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) (byte)27, (byte)27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 27, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) (-32.6489F);
      doubleArray1[2] = (double) (-32.6489F);
      doubleArray1[3] = (double) (-32.6489F);
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 1;
      double[] doubleArray2 = ArrayUtils.insert(1, doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-32.64889907836914), (-32.64889907836914), (-32.64889907836914), 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-32.64889907836914), (-32.64889907836914), (-32.64889907836914), 1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (long) 1);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'D');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'D', 'D', 'D', 'D'}, charArray0);
      assertEquals(7, charArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)45;
      byte[] byteArray1 = ArrayUtils.remove(byteArray0, (int) (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-28), (byte)45}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)45}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)49;
      Byte byte1 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)49, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)49, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 1);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "+>^{`");
      assertNotNull(stringArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, stringArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-2896);
      shortArray0[1] = (short) (-3662);
      shortArray0[2] = (short) (-621);
      shortArray0[3] = (short) (-613);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1052);
      shortArray0[6] = (short)678;
      ArrayUtils.shift(shortArray0, (int) (short) (-621), 2, 91);
      assertArrayEquals(new short[] {(short) (-3662), (short) (-2896), (short) (-621), (short) (-613), (short) (-1), (short) (-1052), (short)678}, shortArray0);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, 0);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)45;
      byteArray0[7] = (byte)24;
      ArrayUtils.shift(byteArray0, (int) (byte)74, (int) (byte)65, 593);
      assertArrayEquals(new byte[] {(byte) (-88), (byte) (-84), (byte) (-118), (byte)3, (byte)65, (byte)74, (byte)45, (byte)24}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-374.7749325047397);
      doubleArray0[1] = (double) 3L;
      doubleArray0[2] = (double) 3L;
      ArrayUtils.shift(doubleArray0, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertArrayEquals(new double[] {3.0, (-374.7749325047397), 3.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 3881, (long) Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3881, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '_';
      charArray0[1] = 'C';
      charArray0[2] = 'u';
      charArray0[3] = 'H';
      charArray0[4] = 'f';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '~');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {'_', 'C', 'u', 'H', 'f'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)14;
      ArrayUtils.swap(byteArray0, (int) (byte)1, (-626), (-612));
      assertArrayEquals(new byte[] {(byte) (-31), (byte)104, (byte)126, (byte)1, (byte)14}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.insert((-1827), doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (-1827);
      longArray0[2] = (long) (-1827);
      longArray0[3] = (long) (-1827);
      longArray0[4] = (long) (-1827);
      longArray0[5] = (long) (-1827);
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1827L));
      assertEquals(5, int0);
      assertArrayEquals(new long[] {0L, (-1827L), (-1827L), (-1827L), (-1827L), (-1827L)}, longArray0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[15];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'D';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'D');
      assertTrue(boolean0);
      assertEquals(15, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long(472L);
      assertEquals(472L, (long)long0);
      assertNotNull(long0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)75;
      ArrayUtils.shift(byteArray0, (-1693), (int) (byte)75, 504);
      assertArrayEquals(new byte[] {(byte)75, (byte)75, (byte)75, (byte)75}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)75;
      shortArray0[1] = (short) (byte)75;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)75, (short)75}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)75;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {75L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5035.9);
      doubleArray0[1] = (-566.4);
      doubleArray0[2] = (-2518.01741);
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-5035.9), (-566.4), (-2518.01741)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-5035.9), (-566.4), (-2518.01741)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-566.4), (-2518.01741)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      long[] longArray1 = ArrayUtils.add(longArray0, 1680L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1680L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (-566.4), 0);
      assertEquals(0, int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-5035.9), (-566.4), (-2518.01741)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-566.4), (-2518.01741)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-5035.9), (-566.4), (-2518.01741)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-566.4), (-2518.01741)}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray0, 0L);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray2.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)26);
      assertEquals((byte)26, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte)26, object0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, object0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      long[] longArray0 = new long[4];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, 2, 2, (-1225));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-142);
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = 5317L;
      longArray0[2] = 4679L;
      longArray0[3] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(0, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 5317L, 4679L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 5317L, 4679L, 0L, 0L, 5317L, 4679L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short) (-142);
      doubleArray0[1] = (double) 4679L;
      doubleArray0[2] = (double) 4679L;
      doubleArray0[3] = 2197.35;
      doubleArray0[4] = (double) 5317L;
      doubleArray0[5] = 0.1;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 4167.001194837155, (int) (short) (-142));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-142.0), 4679.0, 4679.0, 2197.35, 5317.0, 0.1}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      short[] shortArray0 = new short[4];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'R';
      int int0 = ArrayUtils.indexOf(shortArray0, (short)83);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(2875L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints();
      assertNotNull(intStream0);
      
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((float[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)64;
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)1, (byte)8);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)1, (byte) (-60), (byte)94, (byte)8, (byte)1, (byte)64}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)8, (byte) (-60), (byte)94, (byte)8, (byte)1, (byte)64}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 6);
      Byte byte0 = new Byte((byte)64);
      assertEquals((byte)64, (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) (byte)8, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      Byte byte1 = new Byte((byte) (-104));
      assertEquals((byte) (-104), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) (byte)1, byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) (byte)64, (Byte) (byte)1);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Byte byte2 = new Byte((byte)62);
      assertEquals((byte)62, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, (Byte) (byte)94);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      Byte byte3 = new Byte((byte)94);
      assertEquals((byte)94, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte0, byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.add(abstractMap_SimpleImmutableEntryArray0, (int) 1, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry0, abstractMap_SimpleImmutableEntry4);
      assertFalse(byte0.equals((Object)byte3));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(6, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(7, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)7;
      shortArray0[2] = (short) (-368);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)7, (short) (-368)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.removeElement(shortArray0, (short) (-368));
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1), (short)7, (short) (-368)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1), (short)7}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray2.length);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte4);
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = Byte.valueOf(byte0);
      assertEquals((byte)1, (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte7);
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte8);
      assertTrue(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte0));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) byte0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)1;
      ArrayUtils.shift(byteArray0, (-1), (int) (byte)75, (int) (byte)75);
      assertArrayEquals(new byte[] {(byte)75, (byte)1, (byte)0, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)50;
      doubleArray0[1] = 1.5;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 50.0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {50.0, 1.5}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-61));
      assertEquals((byte) (-61), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) (byte) (-61);
      doubleArray0[2] = (double) (byte) (-61);
      doubleArray0[3] = (double) (byte) (-61);
      doubleArray0[4] = (double) (byte) (-61);
      doubleArray0[5] = 0.7;
      doubleArray0[6] = 786.452139;
      doubleArray0[7] = (double) (byte) (-61);
      doubleArray0[8] = (double) (byte) (-61);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-61.0), (-61.0), (-61.0), (-61.0), 0.7, 786.452139, (-61.0), (-61.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1.0);
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-61), object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) (-61.0);
      objectArray0[3] = (Object) (-61.0);
      objectArray0[4] = (Object) (-61.0);
      objectArray0[5] = (Object) 786.452139;
      objectArray0[6] = (Object) 786.452139;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, (int) (byte) (-61));
      assertEquals((-1), int0);
      assertEquals(7, objectArray0.length);
      
      double[] doubleArray2 = ArrayUtils.clone(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-61.0), (-61.0), (-61.0), (-61.0), 0.7, 786.452139, (-61.0), (-61.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)21;
      Byte byte1 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)7;
      Byte byte3 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.contains(doubleArray0, (double) (byte)21);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte2;
      floatArray0[1] = (float) (byte)21;
      floatArray0[2] = (float) byte2;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) byte2;
      floatArray0[5] = (float) byte0;
      floatArray0[6] = (float) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1149.43F, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {7.0F, 21.0F, 7.0F, 21.0F, 7.0F, 21.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte)0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)0;
      ArrayUtils.swap(doubleArray0, (int) (byte)0, 0, 872);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.remove(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-100);
      Byte byte1 = Byte.valueOf((byte) (-100));
      assertEquals((byte) (-100), (byte)byte1);
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (Byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.subarray((Byte[]) null, (int) byte0, 8);
      assertNull(byteArray2);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2674;
      doubleArray0[1] = (double) (byte) (-100);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 5223;
      doubleArray0[4] = (double) 5223;
      doubleArray0[5] = (double) (short)49;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2674.0, (-100.0), (-2.0), 5223.0, 5223.0, 49.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Byte byte2 = new Byte((byte) (-100));
      assertEquals((byte) (-100), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) byte0;
      intArray0[1] = 2674;
      intArray0[2] = 8;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = 8;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (-975.0496F);
      floatArray0[3] = (float) 6;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 670.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {6.0F, 6.0F, (-975.0496F), 6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F, 6.0F, (-975.0496F), 6.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      longArray0[6] = (long) 6;
      longArray0[7] = (long) 6;
      boolean boolean0 = ArrayUtils.contains(longArray0, 6L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L, 6L, 6L}, longArray0);
      assertEquals(8, longArray0.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte) (-108);
      Byte byte1 = new Byte((byte) (-108));
      assertEquals((byte) (-108), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-108), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)100);
      assertEquals((byte)100, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-108), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = new Byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte2;
      Byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      byte byte0 = (byte)53;
      Byte byte1 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)53, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[5] = byte2;
      byteArray0[6] = byte1;
      Byte byte3 = new Byte((byte) (-106));
      assertEquals((byte) (-106), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[7] = byte3;
      byteArray0[8] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, (Byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 62.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 62.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {62.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new float[] {62.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)4;
      ArrayUtils.swap(byteArray0, (int) (byte) (-116), (-1), (-1));
      assertArrayEquals(new byte[] {(byte)89, (byte) (-116), (byte)48, (byte)48, (byte) (-116), (byte)4}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byteArray0[3] = (byte)89;
      Byte byte0 = new Byte((byte) (-116));
      assertEquals((byte) (-116), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)48;
      doubleArray0[1] = (double) (byte) (-116);
      doubleArray0[2] = (double) (byte)4;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = (double) (byte)48;
      doubleArray0[6] = (double) (byte) (-116);
      doubleArray0[7] = (double) (byte)48;
      doubleArray0[8] = (-116.0);
      ArrayUtils.shift(doubleArray0, 3, (int) (byte)89, (-1621));
      assertArrayEquals(new double[] {48.0, (-116.0), 4.0, 4.0, 48.0, (-116.0), 48.0, (-116.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.insert(0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      longArray0[1] = (-3541L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, (-3541L), 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 498;
      int int0 = ArrayUtils.indexOf(intArray0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 498}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-3052), (int) (byte) (-116), (int) (byte)89);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-116));
      assertEquals((byte) (-116), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-116);
      shortArray0[1] = (short) (byte)89;
      shortArray0[2] = (short)11;
      shortArray0[3] = (short) (byte) (-116);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-116), (short)89, (short)11, (short) (-116)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)11;
      longArray0[1] = (long) (-3052);
      longArray0[2] = (long) (short) (-116);
      longArray0[3] = (long) (byte) (-116);
      longArray0[4] = (-1415L);
      longArray0[5] = (long) (short)11;
      longArray0[6] = (long) (byte)89;
      longArray0[7] = (long) (short)11;
      longArray0[8] = (long) (short)11;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new long[] {(-3052L), (-116L), (-116L), (-1415L), 11L, 89L, 11L, 11L}, longArray1);
      assertArrayEquals(new long[] {11L, (-3052L), (-116L), (-116L), (-1415L), 11L, 89L, 11L, 11L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, intArray0.length);
      assertEquals(8, longArray1.length);
      assertEquals(9, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)11;
      doubleArray0[1] = (double) (-3052);
      doubleArray0[2] = (double) (short)11;
      doubleArray0[3] = (double) (short) (-116);
      doubleArray0[4] = (double) (short) (-116);
      doubleArray0[5] = (double) (-3052);
      doubleArray0[6] = 1512.57680807759;
      ArrayUtils.swap(doubleArray0, 692, 95, (int) (short)11);
      assertArrayEquals(new double[] {11.0, (-3052.0), 11.0, (-116.0), (-116.0), (-3052.0), 1512.57680807759}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      int[] intArray0 = new int[16];
      Float[] floatArray0 = new Float[11];
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray2);
      assertEquals(16, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(16, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      ArrayUtils.swap(objectArray0, (int) (byte)0, (int) (byte)0, (int) (byte)0);
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
      assertTrue(boolean0);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-638);
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-638), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-638), (short)0, (short) (-638), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray1, (-1678));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, (Object) byte0, 0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '1';
      charArray0[2] = '*';
      charArray0[3] = '&';
      ArrayUtils.shift(charArray0, (-1678), 11, (int) (byte)0);
      assertArrayEquals(new char[] {'G', '1', '*', '&'}, charArray0);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4234;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)4234);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)4234, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2449;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 2449);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new int[] {2449}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)4234;
      longArray0[1] = (long) (short)4234;
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) (short)4234);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {4234L, 4234L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-1012L);
      longArray0[1] = 112L;
      longArray0[2] = 1414L;
      longArray0[3] = 3146L;
      longArray0[4] = 1345L;
      longArray0[5] = (-1177L);
      longArray0[6] = 112L;
      long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1012L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1012L), 112L, 1414L, 3146L, 1345L, (-1177L), 112L}, longArray0);
      assertArrayEquals(new long[] {(-1012L), (-1012L), 112L, 1414L, 3146L, 1345L, (-1177L), 112L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)2088;
      shortArray0[3] = (short) (byte)0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2088, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)96);
      assertEquals((byte)96, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)92, (-1533));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2088, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2088, (short)0}, shortArray0);
      assertNull(object0);
      assertEquals(4, shortArray0.length);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) null, (int) (short)2088);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)2088, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(17L);
      assertEquals(17L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((-2406L));
      assertEquals((-2406L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3111);
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-3111));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3111), (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3111), (short) (-3111), (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (int) (short)2, (int) (short)2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-3111), (short)2}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray2.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1840.9;
      doubleArray0[1] = (double) (short) (-3111);
      doubleArray0[2] = (double) (short)2;
      doubleArray0[3] = (double) (-2406L);
      doubleArray0[4] = (double) (long)longArray0[1];
      doubleArray0[5] = (double) (short) (-3111);
      doubleArray0[6] = (double) (short) (-3111);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-69.0), (-1650.185));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1840.9, (-3111.0), 2.0, (-2406.0), (-2406.0), (-3111.0), (-3111.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '17', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      byte byte0 = (byte)76;
      Byte byte1 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = new Byte[1];
      byteArray1[0] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)76}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      Byte byte2 = ArrayUtils.get(byteArray1, (-2147015684));
      assertNull(byte2);
      assertEquals(1, byteArray1.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)76, object0);
      assertTrue(object0.equals((Object)byte1));
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray1, object0, 389);
      assertEquals(0, int0);
      assertTrue(object0.equals((Object)byte1));
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1581.0);
      doubleArray0[1] = 4509.468849701529;
      doubleArray0[2] = 1081.4695861;
      doubleArray0[3] = (-2132.0664476679);
      ArrayUtils.shift(doubleArray0, (-1508), 4575, 4575);
      assertArrayEquals(new double[] {4509.468849701529, 1081.4695861, (-2132.0664476679), (-1581.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '!';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'@', '!'}, charArray0);
      assertArrayEquals(new char[] {'@', '!'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-2746L);
      longArray0[1] = (long) '!';
      longArray0[2] = (long) '@';
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2746L), 33L, 64L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)114, (byte)114}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Byte byte3 = ArrayUtils.get(byteArray0, 389);
      assertNull(byte3);
      assertEquals(3, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) null, (int) (byte)114);
      assertEquals((-1), int0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (byte)0, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(12, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      int[] intArray0 = new int[5];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1853);
      shortArray0[1] = (short) (-1965);
      shortArray0[2] = (short)613;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1853), (short) (-1965), (short)613}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1853);
      doubleArray0[1] = (double) (short)613;
      Long[] longArray0 = new Long[4];
      Long long0 = new Long(1643L);
      assertEquals(1643L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short)613);
      assertEquals(613L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long((short) (-1965));
      assertEquals((-1965L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long((short) (-1853));
      assertEquals((-1853L), (long)long3);
      assertFalse(long3.equals((Object)long1));
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3566L);
      assertArrayEquals(new long[] {1643L, 613L, (-1965L), (-1853L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short) (-1965);
      floatArray0[1] = 32.0F;
      floatArray0[2] = (float) (long)longArray0[1];
      floatArray0[3] = (float) 1643L;
      floatArray0[4] = 2308.92F;
      floatArray0[5] = (float) (short) (-1965);
      floatArray0[6] = (float) (long)longArray0[0];
      int int0 = ArrayUtils.indexOf(floatArray0, 2308.92F);
      assertEquals(4, int0);
      assertArrayEquals(new float[] {(-1965.0F), 32.0F, 613.0F, 1643.0F, 2308.92F, (-1965.0F), 1643.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1035L);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 2;
      long[] longArray1 = ArrayUtils.insert(2, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1035L), 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(18, longArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte0 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-56));
      assertEquals((byte) (-56), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray0, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
      assertEquals(5, byteArray0.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      Class<Byte> class1 = Byte.class;
      classArray0[0] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[1] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[2] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[3] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[4] = class5;
      Class<Byte> class6 = Byte.class;
      classArray0[5] = class6;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      Long long0 = new Long(507L);
      assertEquals(507L, (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.shift(doubleArray0, 0, 1982292598, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[1] = (int) (byte) (-110);
      int[] intArray1 = ArrayUtils.subarray((int[]) null, 9, 0);
      assertNull(intArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Byte byte0 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 9, byte0);
      assertEquals((byte) (-12), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-1.0F));
      assertNull(floatArray0);
      
      int[] intArray3 = ArrayUtils.toPrimitive(integerArray0, 512);
      assertSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertFalse(intArray3.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray3);
      assertNotNull(intArray3);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray3.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte) (-12);
      doubleArray0[1] = 2114.2777;
      doubleArray0[2] = (double) 65536;
      doubleArray0[3] = (double) 512;
      doubleArray0[4] = (double) (byte) (-12);
      doubleArray0[5] = (double) (byte) (-110);
      doubleArray0[7] = 850.070129672216;
      ArrayUtils.swap(doubleArray0, 512, 65536, 0);
      assertArrayEquals(new double[] {(-12.0), 2114.2777, 65536.0, 512.0, (-12.0), (-110.0), 0.0, 850.070129672216}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 9;
      longArray0[1] = 5007L;
      longArray0[2] = (long) (-110);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {9L, 5007L, (-110L)}, longArray0);
      assertArrayEquals(new long[] {9L, 5007L, (-110L), 9L, 5007L, (-110L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, 2, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-42);
      byteArray0[7] = (byte)16;
      ArrayUtils.swap(byteArray0, 79, (-6));
      assertArrayEquals(new byte[] {(byte)92, (byte)17, (byte)35, (byte) (-11), (byte)77, (byte)0, (byte) (-42), (byte)16}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-11), 1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)35);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)35, (byte)92, (byte)17, (byte)35, (byte) (-11), (byte)77, (byte)0, (byte) (-42), (byte)16}, byteArray1);
      assertArrayEquals(new byte[] {(byte)92, (byte)17, (byte)35, (byte) (-11), (byte)77, (byte)0, (byte) (-42), (byte)16}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(objectArray0, (int) ';');
      assertEquals(6, objectArray0.length);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      Boolean boolean3 = Boolean.TRUE;
      assertTrue(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[1] = boolean3;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = ';';
      charArray0[2] = '<';
      charArray0[3] = ';';
      charArray0[4] = ';';
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      charArray1[1] = '<';
      charArray1[2] = '<';
      charArray1[3] = '<';
      charArray1[4] = '<';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<'}, charArray1);
      assertArrayEquals(new char[] {';', ';', ';', ';'}, charArray2);
      assertArrayEquals(new char[] {';', ';', '<', ';', ';'}, charArray0);
      assertNotNull(charArray2);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray2.length);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[2] = '2';
      charArray0[3] = 'Y';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'W';
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'9', '\u0000', '2', 'Y'}, charArray0);
      assertArrayEquals(new char[] {'W'}, charArray1);
      assertArrayEquals(new char[] {'9', '\u0000', '2', 'Y'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(1, charArray1.length);
      assertEquals(4, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 267;
      floatArray0[1] = (float) 267;
      floatArray0[2] = (float) 267;
      floatArray0[3] = (float) 267;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-250.92F);
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {267.0F, 267.0F, 267.0F, 267.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-250.92F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {267.0F, 267.0F, 267.0F, 267.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(4, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertEquals(4, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      short[] shortArray0 = new short[11];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (int) (short)2);
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      ArrayUtils.shift(booleanArray0, (-4542), 161, 305);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 305;
      floatArray0[1] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, (int) (short)2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      int[] intArray1 = ArrayUtils.insert(1, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 1, 1, 1, 1, 1}, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(12, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1841;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1841;
      intArray0[5] = 2;
      intArray0[6] = 1841;
      intArray0[7] = 1841;
      intArray0[8] = 1841;
      int[] intArray1 = ArrayUtils.insert(2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 1841, 2, 2, 1841, 2, 1841, 1841, 1841}, intArray0);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(18, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray0, (-555));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {2, 1841, 2, 2, 1841, 2, 1841, 1841, 1841}, intArray0);
      assertArrayEquals(new int[] {2, 1841, 2, 2, 1841, 2, 1841, 1841, 1841}, intArray2);
      assertNotNull(intArray2);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray2.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1841;
      doubleArray0[1] = (double) 1841;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1841;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, (-21.1902758));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1841.0, 1841.0, 2.0, 1841.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1841.0, 1841.0, 2.0, 1841.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) 1841, 0.1);
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1841.0, 1841.0, 2.0, 1841.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1841.0, 1841.0, 2.0, 1841.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.clone((float[]) null);
      assertNull(floatArray0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(5, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<v_2;'6(+]";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      byte byte0 = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-86));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) (-2361);
      shortArray0[5] = (short)4585;
      shortArray0[6] = (short) byte0;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)139);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short) (-2361), (short)4585, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray2 = ArrayUtils.remove(byteArray1, (int) byte0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray2.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (long) 1841, 1841);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray0 = ArrayUtils.clone((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1841;
      floatArray0[1] = (float) 1841;
      floatArray0[2] = (float) 1841;
      floatArray0[3] = (float) 1841;
      floatArray0[4] = (float) 1841;
      floatArray0[5] = (float) 1841;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1841.0F, 1841.0F, 1841.0F, 1841.0F, 1841.0F, 1841.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)2);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte)2, (byte)2, (byte)2, (byte)2}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-685));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-685), (short)2, (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-112);
      ArrayUtils.shift(longArray0, (-112));
      assertArrayEquals(new long[] {(-112L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (-112);
      int int0 = ArrayUtils.indexOf(doubleArray0, 2.0, (-1255), 1.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {2.0, (-112.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1640L);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {(-112L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte) (-123);
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte) (-87);
      byteArray1[5] = (byte) (-123);
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)7, (byte) (-24), (byte) (-87), (byte)74, (byte) (-123)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)7, (byte)74, (byte)7, (byte)7, (byte) (-87), (byte) (-123)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-24)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)7, (byte)74, (byte)7, (byte)7, (byte) (-87), (byte) (-123)}, byteArray1);
      assertEquals(6, byteArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-123);
      longArray0[1] = (long) (byte) (-87);
      longArray0[2] = (long) (byte)74;
      longArray0[3] = (long) (byte) (-87);
      longArray0[4] = 0L;
      longArray0[5] = (long) (byte) (-87);
      longArray0[6] = (long) (byte)74;
      longArray0[7] = (long) (byte)7;
      longArray0[8] = (long) (byte) (-24);
      ArrayUtils.shift(longArray0, 199, (int) (byte) (-87), (-1385));
      assertArrayEquals(new long[] {(-123L), (-87L), 74L, (-87L), 0L, (-87L), 74L, 7L, (-24L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      Byte[] byteArray3 = new Byte[5];
      byteArray3[0] = (Byte) (byte) (-123);
      Byte byte0 = new Byte((byte) (-24));
      assertEquals((byte) (-24), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray3[1] = byte0;
      byteArray3[2] = (Byte) (byte)7;
      byteArray3[3] = (Byte) (byte) (-24);
      byteArray3[4] = (Byte) (byte) (-123);
      Byte[] byteArray4 = ArrayUtils.subarray(byteArray3, 783, (int) 74);
      assertNotSame(byteArray4, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertEquals(0, byteArray4.length);
      assertEquals(5, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      ArrayUtils.shift(byteArray1, (int) (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-116));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      Byte byte0 = new Byte((byte)74);
      assertEquals((byte)74, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.get(objectArray0, 4, (Object) byte0);
      assertEquals((byte)74, object1);
      assertNotNull(object1);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = object1;
      ArrayUtils.shift(objectArray0, (-2440));
      assertEquals(1, objectArray0.length);
      
      Byte byte1 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte1);
      assertFalse(byte1.equals((Object)object1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object2, (int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '\'';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '4';
      charArray0[8] = '4';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)0, 4);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4', '\'', '4', '4', '4', '4', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '\'', '4', '4'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(4, charArray1.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (int) '4');
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      char[] charArray2 = ArrayUtils.removeAll(charArray1, intArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'4', '\'', '4', '4', '4', '4', '4', '4', '4'}, charArray0);
      assertArrayEquals(new char[] {'4', '\'', '4', '4'}, charArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new char[] {'\'', '4', '4'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(9, charArray0.length);
      assertEquals(4, charArray1.length);
      assertEquals(1, intArray0.length);
      assertEquals(3, charArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      byte byte0 = (byte) (-48);
      Byte byte1 = new Byte((byte) (-48));
      assertEquals((byte) (-48), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[9];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      byteArray0[8] = byte1;
      Character character0 = Character.valueOf('9');
      assertEquals('9', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[6];
      characterArray0[1] = character0;
      characterArray0[2] = character0;
      characterArray0[3] = character0;
      characterArray0[4] = character0;
      characterArray0[5] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '*');
      assertArrayEquals(new char[] {'*', '9', '9', '9', '9', '9'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      
      Byte[] byteArray1 = new Byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = byte1;
      byteArray1[1] = byte1;
      byteArray1[2] = byte1;
      byteArray1[3] = byte1;
      byteArray1[4] = byte1;
      byteArray1[5] = byte1;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-48), (byte) (-48), (byte) (-48), (byte) (-48), (byte) (-48), (byte) (-48)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2403.640094;
      doubleArray0[1] = (double) (byte) (-48);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (-896.634293);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1723), (int) byte0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2403.640094, (-48.0), 0.7, (-896.634293)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) characterArray0);
      assertSame(characterArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(6, objectArray0.length);
      assertEquals(6, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)80;
      Byte byte1 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = (byte)118;
      byteArray1[3] = byte0;
      byteArray1[4] = (byte)80;
      byteArray1[5] = (byte)80;
      byteArray1[6] = (byte)80;
      byteArray1[7] = (byte)45;
      byteArray1[8] = byte0;
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)45);
      assertEquals(7, int0);
      assertArrayEquals(new byte[] {(byte)80, (byte)80, (byte)118, (byte)80, (byte)80, (byte)80, (byte)80, (byte)45, (byte)80}, byteArray1);
      assertEquals(9, byteArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)80;
      intArray0[1] = (int) (byte)80;
      intArray0[2] = (int) (byte)80;
      intArray0[3] = (int) (byte)45;
      intArray0[4] = (int) (byte)80;
      intArray0[5] = (int) (byte)80;
      intArray0[6] = (int) byte0;
      intArray0[7] = (int) (byte)80;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {80, 80, 80, 45, 80, 80, 80, 80}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      
      Byte byte2 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte2, 45);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(integerArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '80', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      ArrayUtils.reverse((long[]) null);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-93), 2109135725, (-158));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.shift(floatArray0, 3003);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = '?';
      Character character0 = Character.valueOf('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(floatArray0, 0, (int) char0, 0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      String string0 = ArrayUtils.toString((Object) byte0);
      assertEquals("42", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1596;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)1;
      byteArray0[1] = (byte)50;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte) (-7), (int) (byte)1, (int) (byte) (-82));
      assertArrayEquals(new byte[] {(byte)0, (byte)50, (byte)0, (byte) (-7), (byte)75, (byte) (-82), (byte)2, (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)2);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift(longArray0, 1596);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.clone((boolean[]) null);
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      Integer integer0 = new Integer((short) (-3155));
      assertEquals((-3155), (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2854.2974F;
      doubleArray0[1] = (double) (-1L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1L));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {2854.29736328125, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.swap((byte[]) null, 233, (int) (byte) (-49));
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'a';
      char[] charArray1 = ArrayUtils.insert(0, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'a'}, charArray0);
      assertArrayEquals(new char[] {'I', 'I', 'I', 'I', 'a', 'I', 'I', 'I', 'I', 'a'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(10, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 6;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 6;
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 6;
      longArray0[5] = (long) 6;
      long[] longArray1 = ArrayUtils.insert(6, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {6L, 6L, 6L, 6L, 6L, 6L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(12, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 8;
      longArray0[3] = (long) 8;
      longArray0[4] = (long) 8;
      longArray0[5] = (long) 8;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      long[] longArray1 = ArrayUtils.insert(8, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 8L, 8L, 8L, 8L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      
      ArrayUtils.reverse(longArray1, 49, (-803));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 8L, 8L, 8L, 8L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, (-3096), (-803));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 8L, 8L, 8L, 8L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(8, longArray0.length);
      assertEquals(16, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)77);
      assertEquals((byte)77, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)46);
      assertEquals((byte)46, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      long[] longArray1 = new long[9];
      longArray1[0] = (long) (byte) (-70);
      longArray1[1] = (long) (byte)77;
      longArray1[2] = (long) (byte)46;
      longArray1[3] = 33L;
      longArray1[4] = (long) (byte)46;
      longArray1[5] = 2098677201L;
      longArray1[6] = (long) (byte) (-70);
      longArray1[7] = (long) (byte) (-49);
      longArray1[8] = (long) (byte) (-70);
      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, longArray1);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-70L), 77L, 46L, 33L, 46L, 2098677201L, (-70L), (-49L), (-70L)}, longArray1);
      assertEquals(9, longArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, 187, (-1389), (int) (byte) (-49));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-70);
      intArray0[1] = (int) (byte) (-70);
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {(-70), (-70)}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, 2143948672);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2143948672, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)8;
      Byte byte2 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte1);
      assertEquals((byte)8, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = ArrayUtils.get(byteArray0, (int) 8, byte3);
      assertEquals((byte)8, (byte)byte4);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      assertEquals(2, byteArray0.length);
      
      Byte byte5 = Byte.valueOf(byte1);
      assertEquals((byte)8, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte6, 2);
      assertEquals(1, int0);
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertEquals(2, byteArray0.length);
      
      Short[] shortArray0 = new Short[3];
      Short short0 = new Short((byte)122);
      assertEquals((short)122, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((byte) (-96));
      assertEquals((short) (-96), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      Short short2 = new Short((short) (-1237));
      assertEquals((short) (-1237), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      shortArray0[2] = short2;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-4499));
      assertArrayEquals(new short[] {(short)122, (short) (-96), (short) (-1237)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 0);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.length());
      assertArrayEquals(new long[] {0L, 0L, (-1L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(3, longArray0.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'K';
      charArray0[1] = 'O';
      charArray0[2] = '<';
      charArray0[3] = 'p';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-1), 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'K', 'O', '<', 'p'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-119));
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-119);
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte) (-119);
      byteArray1[5] = (byte) (-119);
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byte[] byteArray3 = ArrayUtils.removeElements(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119), (byte) (-119)}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(6, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(6, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-3779L);
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {(-3779L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-3779L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2428), 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short) (byte)52;
      shortArray0[3] = (short) (byte) (-60);
      shortArray0[4] = (short) (byte)52;
      shortArray0[5] = (short) (byte)52;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)52, (short) (-60), (short)52, (short)52}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)52, (short) (-60), (short)52, (short)52}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2428), 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short) (byte)52;
      shortArray0[3] = (short) (byte) (-60);
      shortArray0[4] = (short) (byte) (-60);
      shortArray0[5] = (short) (byte)52;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)52, (short) (-60), (short) (-60), (short)52}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)52, (short) (-60), (short) (-60), (short)52}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)90;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)90, (byte)41, (byte) (-47)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'O');
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-1535);
      ArrayUtils.shift(floatArray0, (int) (short)0, (int) (short)0, (int) (byte) (-47));
      assertArrayEquals(new float[] {(-1535.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-685));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-685), (short)2, (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-112), (int) (short)2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short) (-685), (short)2, (short)2}, shortArray1);
      assertArrayEquals(new short[] {(short) (-685), (short)2}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(2, shortArray2.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-2353.604F), 2146780928);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)4234;
      intArray0[1] = 0;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 8;
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '*';
      charArray0[4] = '*';
      charArray0[5] = '*';
      boolean boolean1 = ArrayUtils.contains(charArray0, '8');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'*', '*', '*', '*', '*', '*'}, charArray0);
      assertEquals(6, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElements(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)4234;
      intArray0[1] = 0;
      boolean boolean1 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)4234);
      assertNull(shortArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-3627), 1064);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {4234, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean2 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'G';
      charArray0[1] = 'S';
      charArray0[2] = 'G';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'V');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'G', 'S', 'G'}, charArray0);
      assertArrayEquals(new char[] {'V', 'G', 'S', 'G'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(4, charArray1.length);
      
      short[] shortArray1 = ArrayUtils.clone((short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      short[] shortArray0 = new short[5];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, 13, (int) (byte) (-1), (int) (byte) (-57));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.swap(shortArray0, (int) (byte) (-57), 1, 2147483646);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-57);
      doubleArray0[1] = (double) (byte) (-57);
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = 52.0;
      doubleArray0[4] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-57.0), (-57.0), 0.0, 52.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-57.0), (-57.0), 0.0, 52.0, (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1503;
      shortArray0[5] = (short)1356;
      shortArray0[6] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)1751, (short)2, (short)0, (short)1503, (short)1356, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1503;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (int) (short)0);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(43, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 43, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      ArrayUtils.swap((Object[]) integerArray0, 1, (-49), (int) (byte) (-110));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1064);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.insert(122, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-567);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)1;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) false;
      objectArray0[4] = (Object) (short) (-567);
      Byte byte1 = new Byte((byte)48);
      assertEquals((byte)48, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte1, (int) (byte)0);
      assertEquals((-1), int0);
      assertFalse(byte1.equals((Object)byte0));
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)2;
      intArray0[1] = (int) (short) (-3155);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)2);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new int[] {2, (-3155)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-3155);
      floatArray0[1] = 1567.4F;
      floatArray0[2] = (-952.8981F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) (short)2;
      floatArray0[5] = (float) (short)1117;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-1.0F);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, (int) (short)1117);
      assertEquals(6, int0);
      assertArrayEquals(new float[] {(-3155.0F), 1567.4F, (-952.8981F), 1.0F, 2.0F, 1117.0F, 1.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 3220;
      intArray0[1] = 3220;
      intArray0[2] = 3220;
      intArray0[3] = 89;
      intArray0[4] = 3220;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3220);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3220, 3220, 3220, 89, 3220}, intArray0);
      assertArrayEquals(new int[] {3220, 3220, 3220, 3220, 89, 3220}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3220;
      doubleArray0[1] = (double) 3220;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {3220.0, 3220.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3220.0, 3220.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3220.0, 3220.0, 3220.0, 3220.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      Byte byte0 = new Byte((byte)76);
      assertEquals((byte)76, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      short[] shortArray0 = new short[10];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.shift((long[]) null, (int) (short) (-3171));
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (short)0, 39.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {39.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.swap(byteArray0, 1073741824, (-820), 2);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert((-2256), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (-1);
      intArray0[3] = (-1710);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, (-1710), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(111);
      assertEquals(111.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(111.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(4, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(294.8);
      assertEquals(294.8, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      int int0 = ArrayUtils.lastIndexOf(intArray1, 2147087157);
      assertEquals((-1), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, (-1710), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert(2147087157, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-81), (int) (byte) (-53));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(2, byteArray0.length);
      
      Byte[] byteArray2 = new Byte[5];
      byteArray2[0] = (Byte) (byte)0;
      byteArray2[1] = (Byte) (byte)0;
      byteArray2[2] = (Byte) (byte)0;
      byteArray2[3] = (Byte) (byte)0;
      byteArray2[4] = (Byte) (byte)0;
      Byte[] byteArray3 = ArrayUtils.remove(byteArray2, (int) byte0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(5, byteArray2.length);
      assertEquals(4, byteArray3.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)125, 2135350972);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 114, (-4432));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Boolean[] booleanArray2 = new Boolean[0];
      boolean[] booleanArray3 = ArrayUtils.toPrimitive(booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray3.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 114;
      floatArray0[1] = (float) 2135350972;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-4432);
      floatArray0[4] = (float) (-4432);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) 2135350972;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {114.0F, 2.13535091E9F, (-1.0F), (-4432.0F), (-4432.0F), (-1.0F), 2.13535091E9F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      Boolean[] booleanArray4 = ArrayUtils.nullToEmpty(booleanArray2);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray2, booleanArray4);
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertNotNull(booleanArray4);
      assertEquals(0, booleanArray4.length);
      assertEquals(0, booleanArray2.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)125);
      assertEquals((byte)125, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<v_2;'6(+]";
      stringArray0[1] = "<v_2;'6(+]";
      stringArray0[2] = "HashCodeBuilder requires an odd multiplier";
      stringArray0[3] = "<v_2;'6(+]";
      stringArray0[4] = "HashCodeBuilder requires an odd multiplier";
      stringArray0[5] = "HashCodeBuilder requires an odd multiplier";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0, (byte)4}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'T');
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(floatArray0, (-2116360696), 192, (-3155));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 109;
      intArray0[1] = 192;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) 'T';
      intArray0[4] = 192;
      intArray0[5] = (-2116360696);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {109, 192, 0, 84, 192, (-2116360696)}, intArray0);
      assertArrayEquals(new int[] {109, 192, 0, 84, 192, (-2116360696)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("org.apache.commons.lang3.BooleanUtils");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf("Uw$2!9:}SdaU!'|");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean("HashCodeBuilder requires an odd multiplier");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<v_2;'6(+]";
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, Float.NaN, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 1185, 4422.83F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1185, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-10);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-10), (-2118));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {(-10.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte) (-10));
      assertArrayEquals(new short[] {(short) (-10)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)299;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'y', 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 53, 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurences((float[]) null, 0.0F);
      assertNull(floatArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)32;
      ArrayUtils.swap(byteArray0, 2145303970, (int) (byte) (-60), 53);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)1, (byte)63, (byte) (-60), (byte)32}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.insert(2, booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray2);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byteArray0[2] = byteArray0[1];
      ArrayUtils.shift((Object[]) byteArray0, 3, 193, 2106);
      assertEquals(5, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2106;
      intArray0[1] = 2106;
      intArray0[2] = 3;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 746);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {2106, 2106, 3}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
      
      Object object0 = ArrayUtils.removeAll((Object) byteArray0[2], bitSet0);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {2106, 2106, 3}, intArray0);
      assertNull(object0);
      assertEquals(5, byteArray0.length);
      assertEquals(3, intArray0.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, object1, 2);
      assertEquals((-1), int0);
      assertEquals(5, byteArray0.length);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2106, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 6L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {6L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '&';
      charArray1[1] = '&';
      charArray1[2] = '&';
      char[] charArray2 = ArrayUtils.removeElement(charArray1, '&');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'&', '&', '&'}, charArray1);
      assertArrayEquals(new char[] {'&', '&'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(3, charArray1.length);
      assertEquals(2, charArray2.length);
      
      float[] floatArray0 = new float[0];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)32, (int) (byte)32);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      byte byte0 = (byte) (-69);
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<v_2;'6(+]";
      stringArray0[1] = "<v_2;'6(+]";
      stringArray0[2] = "<v_2;'6(+]";
      stringArray0[3] = "<v_2;'6(+]";
      stringArray0[4] = "<v_2;'6(+]";
      stringArray0[5] = "<v_2;'6(+]";
      stringArray0[6] = "<v_2;'6(+]";
      stringArray0[7] = "<v_2;'6(+]";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte)102;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = (byte)99;
      byteArray1[4] = (byte)99;
      byteArray1[5] = (byte)99;
      byteArray1[6] = (byte) (-69);
      byteArray1[7] = (byte) (-69);
      byteArray1[8] = (byte)99;
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {(byte)99, (byte) (-69), (byte) (-69), (byte)99, (byte)99, (byte)99, (byte) (-69), (byte)102, (byte) (-69)}, byteArray1);
      assertEquals(9, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'O');
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'O';
      ArrayUtils.shift(floatArray0, (int) (byte) (-69), Integer.MAX_VALUE, 490);
      assertArrayEquals(new float[] {79.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 78.0F;
      floatArray0[2] = (-298.466F);
      floatArray0[3] = 0.0F;
      ArrayUtils.shift(floatArray0, (-2424), 2, (-791));
      assertArrayEquals(new float[] {78.0F, 1.0F, (-298.466F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      Character[] characterArray0 = new Character[3];
      char char0 = 'j';
      Character character0 = Character.valueOf('j');
      assertEquals('j', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character(char0);
      assertEquals('j', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character1);
      assertEquals('j', (char)character2);
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character2);
      assertTrue(character1.equals((Object)character2));
      assertTrue(character1.equals((Object)character0));
      assertTrue(character1.equals((Object)char0));
      assertTrue(character2.equals((Object)char0));
      assertTrue(character2.equals((Object)character1));
      assertTrue(character2.equals((Object)character0));
      assertArrayEquals(new char[] {'j', 'j', 'j'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(3, characterArray0.length);
      assertEquals(3, charArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, characterArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) char0;
      longArray0[1] = (long) (char)character1;
      longArray0[2] = (long) 'j';
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (-2424);
      longArray0[5] = (long) (char)character1;
      longArray0[6] = (long) (char)character2;
      longArray0[7] = (long) (-791);
      longArray0[8] = 1L;
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, (-791), (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -791, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 1;
      floatArray2[1] = 1695.36F;
      floatArray2[2] = (float) 1;
      floatArray2[3] = (float) 1;
      floatArray2[4] = (float) 1;
      floatArray2[5] = (float) 1;
      ArrayUtils.shift(floatArray2, 0, 1, 0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 1695.36F, 1.0F, 1.0F, 1.0F, 1.0F}, floatArray2, 0.01F);
      assertEquals(6, floatArray2.length);
      
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (double) 1.0F);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (byte)0, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)0, 185);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap((char[]) null, (int) (byte)0, 48, 4);
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int int3 = (-4741);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-4741), 48);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) (byte)0;
      objectArray0[5] = (Object) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 2542.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray1);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) 2542.0F;
      floatArray1[1] = (Float) 2542.0F;
      char[] charArray0 = new char[1];
      charArray0[0] = 't';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '2');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'t'}, charArray0);
      assertArrayEquals(new char[] {'2', 't'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      float[] floatArray2 = ArrayUtils.add(floatArray0, 2, (float) 2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2542.0F, 2542.0F, 2.0F, 27.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {2542.0F, 2542.0F, 27.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray2.length);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (float)floatArray1[1];
      doubleArray0[1] = (double) (float)floatArray1[0];
      doubleArray0[2] = (-1300.2849932);
      doubleArray0[3] = (double) 2542.0F;
      doubleArray0[4] = (double) 2542.0F;
      doubleArray0[5] = (double) 't';
      doubleArray0[6] = (double) (float)floatArray1[1];
      doubleArray0[7] = (double) 't';
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2542.0, 2542.0, (-1300.2849932), 2542.0, 2542.0, 116.0, 2542.0, 116.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 885L;
      int int0 = ArrayUtils.indexOf(longArray0, 0L);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L, 0L, 885L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-63L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 95.3591F;
      doubleArray0[1] = (double) 670.344F;
      doubleArray0[2] = (double) (-63L);
      doubleArray0[3] = (double) 95.3591F;
      ArrayUtils.shift(doubleArray0, 1, 1, 64);
      assertArrayEquals(new double[] {95.35910034179688, 670.343994140625, (-63.0), 95.35910034179688}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)2;
      doubleArray0[1] = (double) (byte)2;
      doubleArray0[2] = (double) (byte)2;
      doubleArray0[4] = (double) (byte)2;
      doubleArray0[5] = (double) (byte)2;
      ArrayUtils.shift(doubleArray0, (int) (byte)2, (int) (byte)2, 1641);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 0.0, 2.0, 2.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-3345);
      shortArray0[1] = (short)9;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-3345), (short)9}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)584);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3345), (short)9}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3345), (short)9}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 512, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      int[] intArray0 = new int[0];
      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray0, intArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(5, booleanArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray2, (-433));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -433, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('!');
      assertEquals('!', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[2];
      Character character2 = new Character('&');
      assertEquals('&', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '&');
      assertArrayEquals(new char[] {'&', '!'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.shift(charArray0, (int) character2, 1838, (-1174));
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertArrayEquals(new char[] {'&', '!'}, charArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      byte byte0 = (byte) (-69);
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, (int) byte0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      
      ArrayUtils.swap((char[]) null, Integer.MAX_VALUE, 53, (int) byte0);
      Byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) byte0);
      assertNull(shortArray0);
      
      char[] charArray0 = ArrayUtils.subarray((char[]) null, (int) (byte) (-69), 1091);
      assertNull(charArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) byte0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1490);
      intArray0[3] = (int) byte0;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 53;
      ArrayUtils.swap(intArray0, (int) byte0, (-2), (-69));
      assertArrayEquals(new int[] {(-69), Integer.MAX_VALUE, (-1490), (-69), Integer.MAX_VALUE, 53}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) 53;
      doubleArray0[2] = 2325.9;
      doubleArray0[3] = (double) byte0;
      doubleArray0[4] = (double) byte0;
      doubleArray0[5] = (double) 53;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-480), (double) (-1490));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3.0, 53.0, 2325.9, (-69.0), (-69.0), 53.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-90);
      Byte byte1 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-1), (int)  (-90));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short)24;
      shortArray0[2] = (short) (byte) (-90);
      shortArray0[1] = (short) (byte) (-90);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-90));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-90), (short) (-90), (short) (-90), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)24;
      doubleArray0[2] = (double) (short)24;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 24.0, 24.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray3 = new byte[5];
      byteArray3[0] = byte0;
      byteArray3[1] = byte0;
      byteArray3[2] = byte0;
      byteArray3[3] = (byte) (-90);
      byteArray3[4] = byte0;
      int int0 = ArrayUtils.indexOf(byteArray3, (byte) (-90), (-2241));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-90), (byte) (-90), (byte) (-90), (byte) (-90)}, byteArray3);
      assertEquals(5, byteArray3.length);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'H');
      assertNull(charArray0);
      
      ArrayUtils.shift((Object[]) byteArray0, (int) (short) (-90), 27, (int) (byte) (-90));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(1, byteArray0.length);
      
      Byte byte2 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray1, (Object) byte2, (-2037));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(bitSet0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, (char[]) null);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
      
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-98));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3003;
      floatArray0[1] = (float) 3003;
      ArrayUtils.shift(floatArray0, 1117);
      assertArrayEquals(new float[] {3003.0F, 3003.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '4';
      charArray0[2] = 'V';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)42, (-589));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'J', '4', 'V'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      
      char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'J', '4', 'V'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'J', '4', 'V'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(3, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray2.length);
      
      Long[] longArray1 = new Long[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-32.6489F);
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, 0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '|';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = '&';
      charArray0[7] = '&';
      charArray0[8] = '&';
      ArrayUtils.swap(charArray0, 0, 0, 2971);
      assertArrayEquals(new char[] {'&', '&', '|', '&', '&', '&', '&', '&', '&'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Byte byte0 = new Byte((byte)36);
      assertEquals((byte)36, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurences((Byte[]) null, byte0);
      assertNull(byteArray0);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)484);
      assertNull(shortArray0);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      Integer integer0 = new Integer((-4));
      assertEquals((-4), (int)integer0);
      assertNotNull(integer0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-2217);
      shortArray0[1] = (short) (-710);
      shortArray0[2] = (short)2976;
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-2217), (short) (-710), (short)2976}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      Short short0 = new Short((short) (-1133));
      assertEquals((short) (-1133), (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)2976);
      assertEquals((short)2976, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[7];
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short) (-2217);
      shortArray1[2] = short1;
      shortArray1[3] = (Short) (short) (-2217);
      shortArray1[4] = (Short) (short) (-2217);
      shortArray1[5] = (Short) (short) (-710);
      shortArray1[6] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1133), (short) (-2217), (short)2976, (short) (-2217), (short) (-2217), (short) (-710), (short) (-1133)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(7, shortArray2.length);
      assertEquals(7, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-176L));
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2325.9);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000', (-665));
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-665), (-665));
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)55;
      shortArray0[3] = (short) (-3354);
      shortArray0[4] = (short) (-157);
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)10, (short)52, (short)55, (short) (-3354), (short) (-157)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'G');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'G', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '=';
      ArrayUtils.shift(charArray0, (int) (byte)0, 46, (int) (byte)0);
      assertArrayEquals(new char[] {'I', '='}, charArray0);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray2 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 46);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.swap(byteArray0, (-691), (-1868), 2116805310);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-116));
      assertEquals((byte) (-116), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)35);
      assertEquals((byte)35, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, (Object) byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      int[] intArray0 = new int[2];
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-3063);
      shortArray0[2] = (short)57;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-3063), (short)57, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-3063), (short)57, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'X');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = null;
      objectArray0[3] = (Object) (short)57;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) (short) (-3063);
      objectArray0[6] = (Object) (short)57;
      objectArray0[7] = null;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-117L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-117L), (-117L), (-117L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-117L), (-117L), 0L, (-117L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -117, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-176L);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) boolean0;
      objectArray0[1] = null;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (-831));
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '&';
      ArrayUtils.shift(doubleArray0, (int) (byte) (-69), 1982292598, 1982292598);
      assertArrayEquals(new double[] {38.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1982292598;
      doubleArray1[2] = (double) '&';
      doubleArray1[3] = (double) '&';
      doubleArray1[4] = (double) (byte) (-69);
      doubleArray1[5] = (double) '&';
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (byte) (-69), (-90), 1.982292598E9);
      assertEquals(1, int0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.982292598E9, 0.0, 38.0, 38.0, (-69.0), 38.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray1.length);
      
      Character character0 = new Character('P');
      assertEquals('P', (char)character0);
      assertNotNull(character0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) (byte)0, (-758));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) 0.0F;
      Byte byte0 = new Byte((byte) (-26));
      assertEquals((byte) (-26), (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, 0);
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (-759.8521082170383));
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[0];
      double[] doubleArray3 = ArrayUtils.removeAll(doubleArray2, intArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = ArrayUtils.toPrimitive(doubleArray1, 875.44292988936);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      ArrayUtils.swap(doubleArray4, (-1), 273, 273);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(14, floatArray1.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      charArray0[3] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', 'N', '(', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (-4591.569371618195);
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (double) '(';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-4591.569371618195), 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(70L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs(2371L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '(';
      int[] intArray1 = ArrayUtils.subarray(intArray0, 40, 1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {40}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, (-4548));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {40}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-4548)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(objectArray0, (int) ';');
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = 115;
      Byte byte0 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2674, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1393;
      longArray0[1] = (long) 3524;
      ArrayUtils.reverse((Object[]) null, (-3728), (-3728));
      char[] charArray0 = new char[2];
      charArray0[0] = 'y';
      charArray0[1] = '\"';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '\"'}, charArray0);
      assertEquals(2, charArray0.length);
      
      ArrayUtils.swap((Object[]) null, (-1394), (-862), (-862));
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 68);
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.insert((-862), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int int1 = ArrayUtils.indexOf((Object[]) null, object0, (-862));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      Byte byte6 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[6] = byte6;
      Byte byte7 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[7] = byte7;
      Byte byte8 = ArrayUtils.get(byteArray0, 369);
      assertNull(byte8);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-69));
      assertEquals((-69), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (byte) (-69));
      Long long0 = new Long(2462L);
      assertEquals(2462L, (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-644);
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1612L);
      assertEquals((-1), int0);
      
      Character character0 = new Character('V');
      assertEquals('V', (char)character0);
      assertNotNull(character0);
      
      Character character1 = Character.valueOf('V');
      assertEquals('V', (char)character1);
      assertTrue(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('z');
      assertEquals('z', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'V');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.shift(charArray0, (-1), 1838, 1838);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertFalse(bitSet0.isEmpty());
      assertEquals(8, bitSet0.length());
      assertEquals(7, bitSet0.cardinality());
      assertEquals("{1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ArrayUtils.shift(byteArray0, (int) (byte)0, 4, 36);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1596;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte) (-7);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      ArrayUtils.shift(byteArray0, (int) (byte) (-7), (int) (byte)1, (int) (byte) (-82));
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)50, (byte) (-7), (byte)75, (byte) (-82), (byte)2, (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)2);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-7);
      ArrayUtils.swap(intArray0, (int) (byte)75, (int) (byte)50, (int) (byte)2);
      assertArrayEquals(new int[] {(-7)}, intArray0);
      assertEquals(1, intArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1596.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)50, (byte) (-7), (byte)75, (byte) (-82), (byte)2, (byte)2}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)50, (byte) (-7), (byte)75, (byte) (-82), (byte)2, (byte)2}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[2] = (int) (byte) (-110);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-110), (-110));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-110), 0, (-110)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-110);
      doubleArray0[1] = (double) (-110);
      doubleArray0[2] = (-2426.5);
      doubleArray0[3] = (double) (-110);
      doubleArray0[4] = (double) (byte) (-110);
      doubleArray0[5] = (double) (-110);
      ArrayUtils.reverse(doubleArray0, (int) (byte) (-110), (-655));
      assertArrayEquals(new double[] {(-110.0), (-110.0), (-2426.5), (-110.0), (-110.0), (-110.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (-3414), 1, 79);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      ArrayUtils.shift(doubleArray0, 79, 139, 2147133817);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 139;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-3414), 139);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {139.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<v_2;'6(+]";
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      int int1 = ArrayUtils.lastIndexOf(floatArray0, Float.NaN, 3);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[6] = '=';
      ArrayUtils.shift(charArray0, (int) (byte) (-94), (int) '=', (int) (byte) (-94));
      assertEquals(12, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-86);
      Byte byte1 = new Byte((byte) (-86));
      assertEquals((byte) (-86), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-61));
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)4388);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)200, (short)200, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) byte0;
      ArrayUtils.shift(longArray0, 3391, 2451, 59);
      assertArrayEquals(new long[] {(-86L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)200;
      floatArray0[1] = (float) (short)4388;
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (byte) (-61);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {200.0F, 4388.0F, (-86.0F), (-61.0F), 200.0F, 4388.0F, (-86.0F), (-61.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {200.0F, 4388.0F, (-86.0F), (-61.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'k';
      charArray0[2] = '(';
      charArray0[3] = '~';
      charArray0[4] = ',';
      charArray0[5] = 'p';
      charArray0[6] = 'K';
      charArray0[7] = 'f';
      charArray0[8] = '>';
      ArrayUtils.shift(charArray0, (int) byte0, (int) (short)200, (-1547));
      assertArrayEquals(new char[] {'>', ':', 'k', '(', '~', ',', 'p', 'K', 'f'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils.reverse((char[]) null);
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)84);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)54}, byteArray0);
      assertArrayEquals(new byte[] {(byte)54}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)54;
      longArray0[1] = (long) (byte)54;
      longArray0[2] = (long) (byte)84;
      longArray0[3] = 556L;
      longArray0[4] = (long) (byte)84;
      longArray0[5] = (long) (byte)84;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 3956L, (-235));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {54L, 54L, 84L, 556L, 84L, 84L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {54L, 54L, 84L, 556L, 84L, 84L}, longArray0);
      assertArrayEquals(new long[] {54L, 54L, 84L, 556L, 84L, 84L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 54L;
      objectArray0[1] = null;
      objectArray0[2] = (Object) 54L;
      objectArray0[3] = (Object) 54L;
      BitSet bitSet1 = ArrayUtils.indexesOf(objectArray0, (Object) null, (-1885));
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{1}", bitSet1.toString());
      assertEquals(2, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      assertEquals(4, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1013, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1013, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      byte[] byteArray0 = new byte[2];
      floatArray0[3] = (float) (byte)0;
      byteArray0[1] = (byte)0;
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, ":4#Iv|>g7tm`Q3p`lT;");
      assertNotNull(stringArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 'J';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 74.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 4136.88612619;
      doubleArray0[2] = 3524.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-2608.0);
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, 3524.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.0, 4136.88612619, 3524.0, (-1.0), (-2608.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, 4136.88612619, 3524.0, 3524.0, (-1.0), (-2608.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(18, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(18, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      Byte[] byteArray3 = new Byte[1];
      Byte[] byteArray4 = ArrayUtils.insert((int) 0, byteArray3, byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertNotNull(byteArray4);
      assertEquals(1, byteArray3.length);
      assertEquals(2, byteArray4.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.insert(2471, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      Integer integer0 = new Integer((byte)83);
      assertEquals(83, (int)integer0);
      assertNotNull(integer0);
      
      Byte byte0 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = null;
      Byte[] byteArray2 = ArrayUtils.insert(Integer.MIN_VALUE, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray2);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray1);
      
      try { 
        Byte.decode("Td\"Sj^(Vq'(i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Td\"Sj^(Vq'(i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)61, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, (-3882), objectArray0[2]);
      assertEquals((byte)61, object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)61);
      assertNull(longArray1);
      
      byte byte1 = (byte)20;
      Byte byte2 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)object0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte3);
      assertFalse(byte3.equals((Object)object0));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[17];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byteArray0[2] = byte3;
      byteArray0[3] = byte3;
      byteArray0[4] = byte2;
      byteArray0[5] = byte2;
      byteArray0[6] = byte0;
      Byte byte4 = new Byte(byte1);
      assertEquals((byte)20, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)object0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = ArrayUtils.get(byteArray0, (int) byte1, byte4);
      assertEquals((byte)20, (byte)byte5);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)object0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)object0));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      assertEquals(17, byteArray0.length);
      
      Byte byte6 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)object0));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte6, (int) (byte)32);
      assertEquals((-1), int0);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)object0));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertEquals(17, byteArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) byte1);
      assertNull(floatArray0);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) byte1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = 'Y';
      charArray0[2] = '7';
      charArray0[3] = '?';
      charArray0[4] = 'd';
      charArray0[5] = '#';
      charArray0[6] = 'h';
      charArray0[7] = 'U';
      charArray0[8] = '%';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'h', (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'M', 'Y', '7', '?', 'd', '#', 'h', 'U', '%'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (int) (byte)46);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', 2);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      long[] longArray0 = new long[20];
      longArray0[2] = (long) (byte)0;
      Byte[] byteArray1 = new Byte[11];
      byteArray1[0] = (Byte) (byte)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 49, 20);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(20, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) '7';
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (-176L);
      floatArray0[6] = (float) 'R';
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 55.0F;
      doubleArray0[1] = (double) 82.0F;
      ArrayUtils.shift(doubleArray0, 2, 2, 2);
      assertArrayEquals(new double[] {55.0, 82.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-591);
      intArray0[1] = 2;
      intArray0[2] = (int) 'R';
      intArray0[3] = 2;
      intArray0[4] = (int) '7';
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-591), 2, 82, 2, 55}, intArray0);
      assertEquals(5, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2, (double) (-591));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {55.0, 82.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 1.0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 215L;
      longArray0[1] = (-1237L);
      longArray0[2] = 83L;
      longArray0[3] = (-1310L);
      longArray0[4] = 3231L;
      boolean boolean1 = ArrayUtils.contains(longArray0, 83L);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {215L, (-1237L), 83L, (-1310L), 3231L}, longArray0);
      assertEquals(5, longArray0.length);
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)7, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (short)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      boolean boolean1 = ArrayUtils.isArrayIndexValid(byteArray0, 1167);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = '|';
      charArray0[4] = 'v';
      charArray0[5] = '|';
      charArray0[6] = 'v';
      charArray0[7] = 'v';
      charArray0[8] = 'v';
      ArrayUtils.swap(charArray0, (int) (byte) (-69), 1167, 110);
      assertArrayEquals(new char[] {'v', '|', '|', '|', 'v', '|', 'v', 'v', 'v'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 1560.6409564, 1560.6409564);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1182.49F;
      floatArray0[1] = 1646.3F;
      floatArray0[2] = (-3001.4F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 587.0F;
      floatArray0[5] = 3256.113F;
      ArrayUtils.shift(floatArray0, (-1261), 45, 45);
      assertArrayEquals(new float[] {0.0F, 587.0F, 3256.113F, 1182.49F, 1646.3F, (-3001.4F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)61, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Byte byte1 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      ArrayUtils.shift((char[]) null, 2147483631, (-1767), 1);
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      char[] charArray1 = new char[7];
      charArray1[0] = 'U';
      charArray1[1] = 'h';
      charArray1[2] = '2';
      charArray1[3] = 'a';
      charArray1[4] = '?';
      charArray1[5] = 'i';
      charArray1[6] = 'c';
      char[] charArray2 = ArrayUtils.addAll(charArray1, (char[]) null);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray1, charArray2);
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'U', 'h', '2', 'a', '?', 'i', 'c'}, charArray2);
      assertArrayEquals(new char[] {'U', 'h', '2', 'a', '?', 'i', 'c'}, charArray1);
      assertNotNull(charArray2);
      assertEquals(7, charArray2.length);
      assertEquals(7, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("java.lang.Object");
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      boolean boolean3 = false;
      Boolean boolean4 = Boolean.valueOf(false);
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[2] = boolean4;
      Boolean boolean5 = new Boolean(boolean3);
      assertFalse(boolean5);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean0));
      assertNotNull(boolean5);
      
      booleanArray0[3] = boolean5;
      Boolean boolean6 = Boolean.TRUE;
      assertTrue(boolean6);
      assertFalse(boolean6.equals((Object)boolean2));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean0));
      assertFalse(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean3));
      assertNotNull(boolean6);
      
      booleanArray0[4] = boolean6;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      int int0 = 1;
      int int1 = 1056;
      ArrayUtils.reverse((byte[]) null, 1, 1056);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1056;
      doubleArray0[2] = (double) 1056;
      doubleArray0[3] = (double) 1056;
      int int2 = 3;
      ArrayUtils.shift(doubleArray0, 1056, 3, (-1774));
      assertArrayEquals(new double[] {1.0, 1056.0, 1056.0, 1056.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)34;
      Byte byte1 = new Byte((byte)34);
      assertEquals((byte)34, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte2 == byte0);
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      try { 
        Byte.valueOf("org.junitpioneer.jupiter.params.LongRange");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.junitpioneer.jupiter.params.LongRange\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      ArrayUtils.reverse((long[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)293;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)293);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)293}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      ArrayUtils.swap(shortArray0, (int) (short) (-573), (int) (short) (-1575), (int) (short)293);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)293}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1042.759088397);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1534.22638590974);
      doubleArray0[5] = 584.02;
      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {100.0, (-1.0), (-1042.759088397), (-1.0), (-1534.22638590974), 584.02}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-1042.759088397), (-1.0), (-1534.22638590974), 584.02}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = Character.toChars((int) '4');
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 91, 91);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 91;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 91;
      floatArray0[5] = (float) 0L;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 307, (-4));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 91.0F, 0.0F, 0.0F, 91.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)120;
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)70);
      assertEquals(3, int0);
      assertArrayEquals(new byte[] {(byte)38, (byte)32, (byte) (-24), (byte)70, (byte)120}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[2] = (int) (byte) (-110);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-110), (-110));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-110), 0, (-110)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-110);
      ArrayUtils.shift(byteArray0, 7);
      assertArrayEquals(new byte[] {(byte) (-110), (byte) (-110), (byte) (-110), (byte) (-110)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray1, "java.util.AbstractMap$SimpleImmutableEntry");
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(stringArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      assertEquals(3, stringArray0.length);
      
      int[] intArray2 = ArrayUtils.removeAllOccurrences(intArray1, 7);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-110), 0, (-110)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 118);
      assertNull(intArray0);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 64);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0, (short)0, (short) (-249), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte) (-69);
      longArray0[1] = (long) (short) (-249);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short)0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-69L), (-249L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(2, longArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean1));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = new Boolean(false);
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean3));
      assertTrue(boolean4.equals((Object)boolean1));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = new Boolean("org");
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean3));
      assertTrue(boolean5.equals((Object)boolean0));
      assertTrue(boolean5.equals((Object)boolean1));
      assertTrue(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = Boolean.valueOf(false);
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean5));
      assertFalse(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean4));
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F, (-32.6489F), 38.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer0 = new Integer((-932));
      assertEquals((-932), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte) (-11));
      assertEquals((-11), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (-2177), (int) (byte)11, 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (int)integer0;
      doubleArray0[1] = (double) (-2177);
      doubleArray0[2] = (double) (byte)113;
      doubleArray0[3] = (double) (int)integer0;
      doubleArray0[4] = (double) (int)integer0;
      doubleArray0[5] = (double) (byte)113;
      doubleArray0[6] = (double) (int)integer0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-932.0));
      assertEquals(6, int0);
      assertArrayEquals(new double[] {(-932.0), (-2177.0), 113.0, (-932.0), (-932.0), 113.0, (-932.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-2266L);
      longArray0[1] = (long) (-932);
      longArray0[2] = (long) (-2177);
      longArray0[3] = (long) (-2177);
      longArray0[4] = (long) 2;
      longArray0[5] = (long) (-2177);
      longArray0[6] = (long) 2;
      long[] longArray1 = ArrayUtils.remove(longArray0, 6);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2266L), (-932L), (-2177L), (-2177L), 2L, (-2177L), 2L}, longArray0);
      assertArrayEquals(new long[] {(-2266L), (-932L), (-2177L), (-2177L), 2L, (-2177L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = Character.toChars((int) '4');
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 91, 91);
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.shift((Object[]) longArray1, (-4), (-4741), (-4741));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.shuffle((Object[]) longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1L;
      floatArray0[2] = (float) 91;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-4);
      floatArray0[5] = (float) 1L;
      floatArray0[6] = (float) (-4741);
      floatArray0[7] = (float) '4';
      floatArray0[8] = (float) 91;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 91.0F, 0.0F, (-4.0F), 1.0F, (-4741.0F), 52.0F, 91.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 91.0F, 0.0F, (-4.0F), 1.0F, (-4741.0F), 52.0F, 91.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(9, floatArray2.length);
      assertEquals(9, floatArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)61;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)14298;
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-567), (-1665));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)61, (short)0, (short)14298, (short) (-1), (short) (-1)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) 0;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (byte)0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1633.0F;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (byte)0;
      floatArray1[1] = 1633.0F;
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray1, floatArray2);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1633.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1633.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(7, floatArray2.length);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, 111L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      short[] shortArray0 = new short[9];
      int[] intArray0 = new int[4];
      intArray0[0] = 111;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 111;
      objectArray0[1] = (Object) 111;
      ArrayUtils.swap(objectArray0, 111, (-1), 1845);
      assertEquals(2, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, 111, 11);
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)79);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)79, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray0.length);
      assertEquals(10, shortArray1.length);
      
      ArrayUtils.swap((float[]) null, 2068, (int) (short)79, 795);
      short[] shortArray2 = ArrayUtils.subarray(shortArray0, (-1), (-2013265919));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray2.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)123;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-76), 1732);
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-12), (byte)59, (byte)123}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(4, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray2, shortArray0);
      assertFalse(boolean0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray2);
      assertEquals(9, shortArray0.length);
      assertEquals(0, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.insert(1418, (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0, "java.lang.Object");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "java.lang.Object";
      stringArray2[1] = "java.lang.Object";
      stringArray2[2] = "HashCodeBuilder requires an odd multiplier";
      stringArray2[4] = "java.lang.Object";
      stringArray2[5] = "java.lang.Object";
      stringArray2[6] = "java.lang.Object";
      stringArray2[7] = "java.lang.Object";
      stringArray2[8] = "<v_2;'6(+]";
      String[] stringArray3 = ArrayUtils.nullToEmpty(stringArray2);
      assertSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      assertEquals(9, stringArray3.length);
      assertEquals(9, stringArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '/');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(floatArray1, (-3155), 1845, (-1535));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-32.6489F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.insert((-3155), (boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'y', (int) (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-1548));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'y', (int) (short) (-1));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 'y';
      doubleArray0[1] = (double) 'y';
      doubleArray0[2] = (double) 'y';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (short) (-1);
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = (double) (short) (-1);
      doubleArray0[7] = (double) 'y';
      int int1 = ArrayUtils.indexOf(doubleArray0, 121.0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {121.0, 121.0, 121.0, (-1.0), (-1.0), (-1.0), (-1.0), 121.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {121.0, 121.0, 121.0, (-1.0), (-1.0), (-1.0), (-1.0), 121.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-245);
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shift(shortArray0, (int) (short)0, 346, (-584));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-245)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (-584);
      longArray0[2] = (long) (-584);
      longArray0[3] = (long) 346;
      longArray0[4] = (long) (short)0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      long long0 = mockRandom0.nextLong();
      assertEquals(0L, long0);
      
      LongStream longStream0 = mockRandom0.longs((long) 346, 2842L);
      assertNotNull(longStream0);
      
      ArrayUtils.shuffle(longArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new long[] {0L, (-584L), 346L, 0L, (-584L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (int) (short) (-245));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      float[] floatArray1 = ArrayUtils.addFirst((float[]) null, 38.0F);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {38.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray1, (float[]) null);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {38.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)61, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      Object object0 = ArrayUtils.get(objectArray0, (-3882), objectArray0[2]);
      assertEquals((byte)61, object0);
      assertNotNull(object0);
      assertEquals(7, objectArray0.length);
      
      objectArray0[4] = object0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = (Object) byte0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)61);
      assertNull(longArray1);
      
      byte byte1 = (byte)20;
      Byte byte2 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)object0));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)object0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte3;
      byteArray0[1] = byte2;
      byteArray0[2] = byte3;
      byteArray0[3] = byte3;
      byteArray0[4] = byte2;
      byteArray0[5] = byte2;
      byteArray0[6] = byte0;
      Byte byte4 = new Byte(byte1);
      assertEquals((byte)20, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)object0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = ArrayUtils.get(byteArray0, (int) byte1, byte4);
      assertEquals((byte)20, (byte)byte5);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)object0));
      assertTrue(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertFalse(byte5.equals((Object)object0));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals(7, byteArray0.length);
      
      Byte byte6 = Byte.valueOf((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertFalse(byte6.equals((Object)object0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte6, (int) (byte)32);
      assertEquals((-1), int0);
      assertFalse(byte6.equals((Object)object0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertEquals(7, byteArray0.length);
      
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-72));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-1953.4437F);
      floatArray0[2] = 2971.6F;
      floatArray0[3] = 941.3579F;
      floatArray0[4] = 392.41605F;
      ArrayUtils.shift(floatArray0, (-1138), 2145897618, (-1138));
      assertArrayEquals(new float[] {941.3579F, 392.41605F, Float.NaN, (-1953.4437F), 2971.6F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short)1073;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)16, (short)1073, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-249);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short) (-249);
      intArray0[3] = 979;
      intArray0[4] = (int) (short)200;
      intArray0[5] = 70;
      intArray0[6] = 500;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-249), 0, (-249), 979, 200, 70, 500}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(7, intArray0.length);
      
      boolean boolean0 = ArrayUtils.isEquals((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = Character.toChars((int) '4');
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 91, 91);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1964;
      shortArray0[1] = (short)1964;
      shortArray0[2] = (short)1964;
      shortArray0[3] = (short)1964;
      shortArray0[4] = (short) (-715);
      shortArray0[5] = (short)1964;
      shortArray0[6] = (short)1964;
      boolean boolean2 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new short[] {(short)1964, (short)1964, (short)1964, (short)1964, (short) (-715), (short)1964, (short)1964}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'4'}, charArray1);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      
      Short[] shortArray1 = new Short[1];
      shortArray1[0] = (Short) (short)1964;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)1964);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1964}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals(8, int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false, false, true, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Byte byte0 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte0);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry4);
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry5);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry1, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(1, abstractMap_SimpleImmutableEntryArray1.length);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1937.1F);
      floatArray0[1] = (-2820.7642F);
      floatArray0[2] = 24.0F;
      ArrayUtils.shift(floatArray0, 2, 846, 846);
      assertArrayEquals(new float[] {(-1937.1F), (-2820.7642F), 24.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Object object0 = null;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet0.set(846, 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex: 846 > toIndex: 2
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, (-1961), 2, (-2146701606));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, (-1092), 307);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 307;
      doubleArray0[1] = (double) (-1961);
      doubleArray0[2] = (-2275.6831764);
      doubleArray0[3] = (double) 307;
      doubleArray0[4] = (double) 307;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {307.0, (-1961.0), (-2275.6831764), 307.0, 307.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[3] = (long) (-12);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, 1, 1, 121);
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1204.3F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.shift(floatArray0, (-44), (-44), (-44));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      Long long0 = new Long(472L);
      assertEquals(472L, (long)long0);
      assertNotNull(long0);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-1), (-592.5643));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((int[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double double0 = new Double(80.0);
      assertEquals(80.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-1));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double[] doubleArray1 = new Double[6];
      Double double2 = new Double((-4411.20616941));
      assertEquals((-4411.20616941), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) (-1.0);
      doubleArray1[3] = double0;
      doubleArray1[4] = double0;
      doubleArray1[5] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) doubleArray1[5]);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4411.20616941), 80.0, (-1.0), 80.0, 80.0, (-1.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray3 = ArrayUtils.removeAll(doubleArray2, intArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-4411.20616941), 80.0, (-1.0), 80.0, 80.0, (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-4411.20616941), 80.0, (-1.0), 80.0, 80.0, (-1.0)}, doubleArray3, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(0, intArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray4 = ArrayUtils.toPrimitive(doubleArray1, (double) doubleArray1[5]);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-4411.20616941), 80.0, (-1.0), 80.0, 80.0, (-1.0)}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte byte0 = new Byte((byte)61);
      assertEquals((byte)61, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)61, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) byte0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) byte0;
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      Byte byte1 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      
      long[] longArray2 = ArrayUtils.addFirst((long[]) null, (-127L));
      assertArrayEquals(new long[] {(-127L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray2.length);
      
      char[] charArray2 = ArrayUtils.addFirst(charArray1, 'U');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'U'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, charArray1.length);
      assertEquals(1, charArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'U';
      floatArray0[1] = (float) (-127L);
      floatArray0[2] = (float) 'U';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-2349.1377F), (int) (byte)61);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {85.0F, (-127.0F), 85.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)97;
      shortArray0[1] = (short)659;
      shortArray0[2] = (short) (byte)61;
      shortArray0[3] = (short) (byte)61;
      shortArray0[4] = (short) (byte)97;
      shortArray0[5] = (short) (byte)61;
      shortArray0[6] = (short) (byte)61;
      shortArray0[7] = (short) (byte)61;
      BitSet bitSet1 = ArrayUtils.indexesOf(shortArray0, (short)61, 1072);
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new short[] {(short)97, (short)659, (short)61, (short)61, (short)97, (short)61, (short)61, (short)61}, shortArray0);
      assertNotNull(bitSet1);
      assertEquals(8, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-581), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -581, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)82;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(14, booleanArray1.length);
      
      Character[] characterArray0 = new Character[3];
      char char0 = 'r';
      Character character0 = Character.valueOf('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('r', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf(char0);
      assertEquals('r', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray1, characterArray0);
      assertSame(characterArray0, characterArray1);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray1.length);
      assertEquals(3, characterArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2975;
      shortArray0[1] = (short) (byte)82;
      shortArray0[2] = (short) (-339);
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2975, (short)82, (short) (-339)}, shortArray0);
      assertArrayEquals(new short[] {(short)2975, (short)82, (short) (-339)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) char0;
      doubleArray0[1] = (double) (byte)78;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (short) (-339);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-1));
      assertEquals(3, int0);
      assertArrayEquals(new double[] {114.0, 78.0, 0.0, (-1.0), (-339.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[1] = (int) (byte) (-110);
      intArray0[2] = (int) (byte) (-110);
      int[] intArray1 = ArrayUtils.subarray((int[]) null, 9, (-110));
      assertNull(intArray1);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Byte[] byteArray0 = new Byte[8];
      Byte byte0 = Byte.valueOf((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte)7;
      Byte byte2 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte1);
      assertEquals((byte)7, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte6);
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      byte byte7 = (byte) (-54);
      Byte byte8 = new Byte((byte) (-54));
      assertEquals((byte) (-54), (byte)byte8);
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte2));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte7);
      assertEquals((byte) (-54), (byte)byte9);
      assertFalse(byte7 == byte1);
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte byte10 = ArrayUtils.get(byteArray0, (int)  (-110));
      assertNull(byte10);
      assertEquals(8, byteArray0.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-73));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-73)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-110), (-110));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-110), 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      int[] intArray2 = ArrayUtils.addFirst(intArray1, 0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-110), 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (int)integerArray0[1];
      longArray0[1] = (long) (int)integerArray0[0];
      longArray0[2] = 220L;
      longArray0[3] = (long) (-110);
      longArray0[4] = (long) (int)integerArray0[1];
      longArray0[5] = (long) (byte) (-110);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 68, (-344L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 68, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '=', (-665));
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new char[] {'='}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      ArrayUtils.shift(byteArray0, (-2735), (-2721), (-2735));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-665);
      doubleArray0[1] = (double) (-665);
      doubleArray0[2] = (double) '=';
      doubleArray0[3] = (double) (-2735);
      doubleArray0[4] = (double) (-665);
      doubleArray0[5] = (double) '=';
      doubleArray0[6] = (double) '=';
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-2721));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-665.0), (-665.0), 61.0, (-2735.0), (-665.0), 61.0, 61.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2721.0), (-665.0), (-665.0), 61.0, (-2735.0), (-665.0), 61.0, 61.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'='}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)65;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-57), (byte)78, (byte)0, (byte) (-1), (byte)82, (byte)65}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)0;
      objectArray0[1] = (Object) (byte)82;
      objectArray0[2] = (Object) (byte)82;
      objectArray0[3] = (Object) (byte)78;
      objectArray0[4] = (Object) (byte) (-1);
      objectArray0[5] = (Object) (byte) (-1);
      ArrayUtils.shift(objectArray0, 1064, (int) (byte) (-57), 2);
      assertEquals(6, objectArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) (byte)82;
      shortArray0[2] = (short) (byte) (-57);
      shortArray0[3] = (short) (byte) (-57);
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (byte)78;
      ArrayUtils.swap(shortArray0, 1, (int) (short)2, (int) (byte) (-1));
      assertArrayEquals(new short[] {(short) (-1), (short)82, (short) (-57), (short) (-57), (short)2, (short)78}, shortArray0);
      assertEquals(6, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 11.6701F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) shortArray1, (Object) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[1] = (-2347);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)34;
      shortArray0[1] = (short) (byte) (-110);
      shortArray0[2] = (short)1315;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)34, (short) (-110), (short)1315}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray1, (Object) null);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)34, (short) (-110), (short)1315}, shortArray0);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)34, (short) (-110), (short)1315}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<v_2;'6(+]";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'I';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'v', 'I', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'v', 'v', 'I', '\u0000', 'I', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0, "java.lang.Object");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "java.lang.Object";
      stringArray2[1] = "java.lang.Object";
      stringArray2[2] = "HashCodeBuilder requires an odd multiplier";
      stringArray2[3] = "java.lang.Object";
      stringArray2[4] = "java.lang.Object";
      stringArray2[5] = "java.lang.Object";
      stringArray2[6] = "java.lang.Object";
      stringArray2[7] = "java.lang.Object";
      stringArray2[8] = "<v_2;'6(+]";
      String[] stringArray3 = ArrayUtils.nullToEmpty(stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertEquals(9, stringArray3.length);
      assertEquals(9, stringArray2.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'i';
      charArray0[2] = 'a';
      charArray0[3] = 'Y';
      charArray0[4] = 'v';
      charArray0[5] = '2';
      charArray0[6] = '?';
      charArray0[7] = ',';
      char[] charArray1 = ArrayUtils.insert(1, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Y', 'i', 'a', 'Y', 'v', '2', '?', ','}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(16, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      char[] charArray0 = new char[11];
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      shortArray0[1] = (short)720;
      shortArray0[2] = (short)1433;
      shortArray0[3] = (short) (-3074);
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-3074);
      longArray0[1] = (long) (short)720;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) (-3074), 2);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {(-3074L), 720L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 0}, intArray0);
      assertArrayEquals(new int[] {2, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[1] = (int) (byte) (-110);
      intArray0[2] = (int) (byte) (-110);
      ArrayUtils.shift(intArray0, 1, 1658, (-1737));
      assertArrayEquals(new int[] {(-110), (-110), (-110)}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-1737), (-110));
      assertArrayEquals(new int[] {(-110), (-110), (-110)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Float float0 = new Float((double) (byte) (-110));
      assertEquals((-110.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 24.0F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte byte0 = (byte) (-33);
      Byte byte1 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte2;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)98;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) (-1), (-1904));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte)73, (byte)109, (byte) (-1), (byte)8, (byte)25, (byte)98}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (int) (byte) (-84), 488, (int) (byte)98);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray0, 6, (byte)109);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-84), (byte)73, (byte)109, (byte) (-1), (byte)8, (byte)25, (byte)98}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte)73, (byte)109, (byte) (-1), (byte)8, (byte)25, (byte)109, (byte)98}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray2.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte) (-1);
      longArray0[1] = (long) (byte)25;
      longArray0[2] = (long) (byte)73;
      longArray0[3] = (long) (-1904);
      longArray0[4] = (long) (byte)25;
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 25L, 73L, (-1904L), 25L}, longArray1);
      assertArrayEquals(new long[] {(-1L), 25L, 73L, (-1904L), 25L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(5, longArray0.length);
      
      char[] charArray0 = new char[0];
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-84);
      intArray0[1] = (int) (byte) (-84);
      intArray0[2] = (int) (byte) (-84);
      intArray0[3] = (int) (byte) (-1);
      intArray0[4] = (int) (byte)25;
      intArray0[5] = (int) (byte)109;
      intArray0[6] = (-500);
      intArray0[7] = (int) (byte)73;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 109, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short) (-2976));
      assertNull(shortArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 53;
      intArray0[2] = 580;
      intArray0[3] = (int) (short)4234;
      intArray0[4] = 580;
      intArray0[5] = 115;
      intArray0[6] = 53;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (int) (short)4234);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {53, 0, 580, 4234, 580, 115, 53}, intArray0);
      assertArrayEquals(new int[] {4234, 53, 0, 580, 4234, 580, 115, 53}, intArray1);
      assertNotNull(intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (-875.52381));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-875.52381);
      doubleArray2[1] = (-875.52381);
      doubleArray2[2] = (-875.52381);
      doubleArray2[3] = (-875.52381);
      doubleArray2[4] = (-875.52381);
      doubleArray2[5] = (-875.52381);
      doubleArray2[6] = (-875.52381);
      doubleArray2[7] = (-875.52381);
      double[] doubleArray3 = ArrayUtils.removeElements(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381), (-875.52381)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1575));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 4);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.insert((int) (short) (-1575), (short[]) null, shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNull(shortArray1);
      assertEquals(0, shortArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.reverse(objectArray0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertTrue(boolean0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, 1393, 3524, 3524);
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2674, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1393;
      longArray0[1] = (long) 3524;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, 3524, 2451, 3524);
      assertArrayEquals(new long[] {0L, 3524L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap(floatArray2);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '&';
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE, (int) (byte)2, (int) (byte) (-69));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 918.0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {38.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)2;
      intArray0[1] = (int) (byte)2;
      intArray0[2] = (int) '&';
      ArrayUtils.swap(intArray0, (-4625), (int) (byte)2, 2145146886);
      assertArrayEquals(new int[] {38, 2, 2}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      Byte byte0 = ArrayUtils.get((Byte[]) null, 3951);
      assertNull(byte0);
      
      int int0 = ArrayUtils.getLength((Object) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      shortArray0[2] = (short)200;
      shortArray0[3] = (short) (-573);
      shortArray0[4] = (short)130;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-643));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)200, (short)200, (short) (-573), (short)130}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shuffle(intArray0, (java.util.Random) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short) (-573);
      doubleArray0[1] = (double) (short) (-643);
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray0, 2143828486, 286.2815498);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2143828486, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      Character character0 = new Character('~');
      assertEquals('~', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) character0);
      assertArrayEquals(new char[] {'~'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'U');
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '\u001A');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1396.4706F;
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (byte)52);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Cannot store ";
      objectArray0[2] = (Object) byte1;
      objectArray0[6] = (Object) byte2;
      objectArray0[7] = (Object) byte2;
      Character[] characterArray0 = new Character[4];
      Character character0 = new Character('`');
      assertEquals('`', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf('\'');
      assertEquals('\'', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = new Character((char) character0);
      assertEquals('`', (char)character2);
      assertTrue(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertFalse(character0.equals((Object)character1));
      assertNotNull(character2);
      
      characterArray0[2] = character0;
      Character character3 = Character.valueOf('\'');
      assertEquals('\'', (char)character3);
      assertFalse(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, 'u');
      assertArrayEquals(new char[] {'`', '\'', '`', '\''}, charArray0);
      assertNotNull(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, characterArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte0;
      byteArray0[1] = byte2;
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[5] = byte2;
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Integer integer0 = new Integer((-932));
      assertEquals((-932), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((byte) (-11));
      assertEquals((-11), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      int int0 = ArrayUtils.indexOf((byte[]) null, (byte)11, (int) (byte) (-11));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, 37);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) '>';
      objectArray0[1] = (Object) '>';
      objectArray0[2] = (Object) 'I';
      objectArray0[3] = (Object) '>';
      ArrayUtils.swap(objectArray0, 9, 9, 1455);
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, 3755, 3755);
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)121);
      assertArrayEquals(new short[] {(short)121}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      ArrayUtils.swap((float[]) null, 2472, (int) (short)1117, 2);
      short[] shortArray1 = ArrayUtils.subarray((short[]) null, (int) (short)1117, 1342);
      assertNull(shortArray1);
      
      Double[] doubleArray0 = new Double[5];
      Double double0 = new Double(1455);
      assertEquals(1455.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(1455);
      assertEquals(1455.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-1834.877836));
      assertEquals((-1834.877836), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-422.722640111));
      assertEquals((-422.722640111), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-1291.7303749563));
      assertEquals((-1291.7303749563), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {1455.0, 1455.0, (-1834.877836), (-422.722640111), (-1291.7303749563)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      shortArray0[1] = (short)720;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3074);
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1635);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-157);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 896, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-157)}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = '}';
      charArray0[2] = 'u';
      charArray0[3] = '}';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'u');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'u', 'u', '}', 'u', '}'}, charArray1);
      assertArrayEquals(new char[] {'u', '}', 'u', '}'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      
      ArrayUtils.swap((long[]) null, 857, 2);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = ArrayUtils.removeAllOccurences((long[]) null, (long) 0);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, 1.0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 72;
      ArrayUtils.swap(intArray0, 120, 32);
      assertArrayEquals(new int[] {32, 72}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)100;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-11), (byte) (-11), (byte) (-11), (byte)100}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-11.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(intArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 72;
      ArrayUtils.swap(intArray0, 120, 32);
      assertArrayEquals(new int[] {32, 72}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)100;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-11), (byte)0, (byte) (-11), (byte) (-11), (byte) (-11), (byte)100}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-11.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(intArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      shortArray0[2] = (short)0;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)2;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byte byte4 = (byte)95;
      Byte byte5 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte6);
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte6;
      byteArray0[2] = byte5;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 120);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)200, (short)200, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)200, (short)200, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) byte1;
      intArray0[2] = (int) (short)200;
      intArray0[3] = 120;
      intArray0[4] = (int) byte4;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 120;
      ArrayUtils.reverse(intArray0, 200, 78);
      assertArrayEquals(new int[] {(-1), 2, 200, 120, 95, 0, 120}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) byte1, 2081);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(byte1 == byte4);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)293;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)293);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)293}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte) (-115));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short) (-1575), 3);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'G'}, charArray1);
      assertArrayEquals(new char[] {'G'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 104.0F;
      doubleArray0[1] = (double) (short) (-1575);
      doubleArray0[2] = (double) (short) (-1575);
      doubleArray0[3] = (double) 104.0F;
      doubleArray0[4] = (-3165.462);
      doubleArray0[5] = (double) (short) (-573);
      doubleArray0[6] = (double) 104.0F;
      doubleArray0[7] = (double) (short)293;
      ArrayUtils.swap(doubleArray0, (int) (byte) (-115), (int) (short) (-1575), (-15));
      assertArrayEquals(new double[] {104.0, (-1575.0), (-1575.0), 104.0, (-3165.462), (-573.0), 104.0, 293.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)32, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)32);
      assertNull(longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)32, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byteArray0[4] = byte1;
      Byte byte5 = ArrayUtils.get(byteArray0, (int) byte0, byte1);
      assertEquals((byte)32, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte0 == byte3);
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte4));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte3));
      assertNotNull(byte5);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) byte5, (int) byte0);
      assertEquals((-1), int0);
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte0 == byte3);
      assertTrue(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte4));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte3));
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(5, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 111, (int) byte3, (-1));
      assertFalse(byte3 == byte0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((int)byte0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertFalse(boolean0);
      assertFalse(byte0 == byte3);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ArrayUtils.shift(doubleArray0, (-697), 2, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      ArrayUtils.shift(shortArray0, (int) (short)1117);
      assertEquals(11, shortArray0.length);
      
      Byte byte0 = new Byte((byte)66);
      assertEquals((byte)66, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)66;
      longArray0[1] = (long) (byte)66;
      longArray0[2] = (long) (byte)66;
      longArray0[3] = (long) (byte)6;
      longArray0[0] = (long) (byte)66;
      longArray0[5] = (long) (short)24;
      longArray0[6] = (long) (byte)66;
      longArray0[7] = (long) 49;
      ArrayUtils.reverse(longArray0, (-1229), (int) (short)24);
      assertArrayEquals(new long[] {49L, 66L, 24L, 0L, 6L, 66L, 66L, 66L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-55);
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)79, (byte) (-1), (byte)102, (byte)79, (byte) (-1), (byte) (-55)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (byte)79;
      doubleArray0[2] = (double) (byte) (-1);
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (double) (byte) (-1);
      doubleArray0[5] = (double) (byte) (-1);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, (int) (byte)102);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 79.0, (-1.0), 3.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 79.0, (-1.0), 3.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)integerArray0[0];
      Byte byte0 = new Byte((byte) (-40));
      assertEquals((byte) (-40), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)1, (int) (short)1);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(0, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'E', 73);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(floatArray0, (float) 0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf((byte[]) null, (byte)114, 46);
      assertEquals(0, bitSet1.length());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      int[] intArray0 = new int[2];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-52);
      Byte byte2 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-49);
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte5;
      Byte byte8 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte8);
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertNotNull(byte8);
      
      byteArray0[2] = byte5;
      byteArray0[3] = byte2;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-52), (int) byte1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte1 == byte3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)120;
      longArray0[1] = (long) byte3;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertFalse(boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short)1117;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      ArrayUtils.swap((char[]) null, (-1), (-1), 1453);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1117;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)1117;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short)2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1117}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray3.length);
      
      short[] shortArray4 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray4);
      assertNotSame(shortArray4, shortArray3);
      assertNotSame(shortArray4, shortArray1);
      assertSame(shortArray4, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertNotNull(shortArray4);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray4.length);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertTrue(boolean1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      ArrayUtils.swap((char[]) null, (-1), (-1), 1453);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short)1117;
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      Short[] shortArray2 = new Short[1];
      shortArray2[0] = (Short) (short)1117;
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray2, (short)2);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1117}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(1, shortArray2.length);
      assertEquals(1, shortArray3.length);
      
      short[] shortArray4 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray4);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray4, shortArray1);
      assertSame(shortArray4, shortArray0);
      assertNotSame(shortArray4, shortArray3);
      assertFalse(shortArray0.equals((Object)shortArray3));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertNotNull(shortArray4);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray4.length);
      
      boolean[] booleanArray1 = new boolean[6];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = true;
      booleanArray1[5] = false;
      boolean boolean1 = ArrayUtils.isNotEmpty(booleanArray1);
      assertTrue(boolean1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, true, false}, booleanArray1));
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)585;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)55;
      shortArray0[4] = (short)2147;
      shortArray0[5] = (short) (-15);
      shortArray0[6] = (short)2643;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)585, (short) (-1), (short)1, (short)55, (short)2147, (short) (-15), (short)2643}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)1);
      assertNull(shortArray1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[6];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean2;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean2;
      booleanArray0[4] = boolean2;
      booleanArray0[5] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)24283, (int) (short)24283);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)59);
      assertEquals((byte)59, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean3 = ArrayUtils.contains((Object[]) booleanArray0, (Object) byte0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(6, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty((boolean[]) null);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1575));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
      
      short[] shortArray1 = new short[8];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1952);
      shortArray1[1] = (short) (-1575);
      shortArray1[2] = (short) (-1575);
      shortArray1[3] = (short) (-1575);
      shortArray1[4] = (short) (-1575);
      shortArray1[5] = (short) (-1575);
      shortArray1[6] = (short) (-1575);
      shortArray1[7] = (short)307;
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 3841, 1845);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1952), (short) (-1575), (short) (-1575), (short) (-1575), (short) (-1575), (short) (-1575), (short) (-1575), (short)307}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      ArrayUtils.reverse((int[]) null, (-923), 120);
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-923), 2550);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 118);
      assertNull(intArray0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = false;
      Boolean boolean2 = Boolean.valueOf(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[5];
      booleanArray0[0] = boolean2;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean2;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean1);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray1.length);
      assertEquals(5, booleanArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (-1194));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      ArrayUtils.reverse((int[]) null, (-2134546998), (int) (short) (-249));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (byte) (-1);
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (-1194);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) (short)0, (int) (short) (-249));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-1L), 0L, (-1194L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      int[] intArray0 = new int[0];
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) floatArray0[1];
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
      assertEquals(1, int0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (-950.0);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {102.0, (-950.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {102.0, (-950.0), 102.0, (-950.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)31;
      shortArray0[1] = (short) (byte) (-73);
      shortArray0[2] = (short)1315;
      shortArray0[3] = (short) (byte)5;
      shortArray0[4] = (short) (byte) (-73);
      shortArray0[5] = (short) (byte)31;
      shortArray0[6] = (short) (byte)31;
      shortArray0[7] = (short) (byte)5;
      shortArray0[8] = (short) (byte)5;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)31, (short) (-73), (short)1315, (short)5, (short) (-73), (short)31, (short)31, (short)5, (short)5}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray1, (Object) null);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)31, (short) (-73), (short)1315, (short)5, (short) (-73), (short)31, (short)31, (short)5, (short)5}, shortArray0);
      assertEquals(9, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-1517.25021034403);
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1517.25021034403));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1517.25021034403), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.removeElements((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((byte)5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (short)1117);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      Byte byte1 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) (short)1117;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 1.5);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {1.5, 1117.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4234;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2352.8021032157394;
      doubleArray0[1] = (double) (short)4234;
      doubleArray0[2] = (double) (short)4234;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (short)4234;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 2352.8021032157394;
      objectArray0[1] = (Object) 4234.0;
      objectArray0[2] = (Object) 4234.0;
      objectArray0[3] = (Object) (short)4234;
      objectArray0[4] = (Object) 4234.0;
      objectArray0[5] = (Object) 4234.0;
      objectArray0[6] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[3], 1);
      assertEquals(3, int0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.5;
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 1L);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (-2272L));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      
      Character character0 = new Character('g');
      assertEquals('g', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('x');
      assertEquals('x', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[5];
      characterArray0[0] = character1;
      characterArray0[1] = character1;
      characterArray0[2] = character0;
      characterArray0[3] = character1;
      characterArray0[4] = character1;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'x', 'x', 'g', 'x', 'x'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      long[] longArray2 = ArrayUtils.subarray(longArray1, 62, 942);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {1L, 1L, 1L}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      ArrayUtils.shift(longArray0, (int) (byte)69);
      assertArrayEquals(new long[] {(-117L), (-117L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)312;
      shortArray0[1] = (short)312;
      shortArray0[2] = (short) (byte) (-117);
      shortArray0[3] = (short)280;
      shortArray0[4] = (short) (byte)69;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short) (byte)69;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)312, (short)312, (short) (-117), (short)280, (short)69, (short) (-117), (short)69}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      Byte byte3 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-92));
      assertEquals((byte) (-92), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) byte3, (int) (byte) (-117));
      assertEquals((-1), int0);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte4));
      assertFalse(byte3.equals((Object)byte0));
      assertArrayEquals(new short[] {(short)312, (short)312, (short) (-117), (short)280, (short)69, (short) (-117), (short)69}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.shift((Object[]) shortArray1, (int) (short)69, 299, 85);
      assertArrayEquals(new short[] {(short)312, (short)312, (short) (-117), (short)280, (short)69, (short) (-117), (short)69}, shortArray0);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray0.length);
      
      ArrayUtils.reverse((float[]) null, 4895, (int) (byte) (-92));
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      ArrayUtils.hashCode((Object) null);
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-413), 1240, (-413));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      shortArray0[2] = (short)0;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)2;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byte byte4 = (byte)95;
      Byte byte5 = new Byte((byte)95);
      assertEquals((byte)95, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte7);
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte6;
      byteArray0[2] = byte5;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, 120);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)200, (short)200, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)200, (short)200, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) byte1;
      intArray0[2] = (int) (short)200;
      intArray0[3] = 120;
      intArray0[4] = (int) byte4;
      intArray0[5] = (int) (short)0;
      intArray0[6] = 120;
      ArrayUtils.reverse(intArray0, 200, 78);
      assertArrayEquals(new int[] {(-1), 2, 200, 120, 95, 0, 120}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (int) byte1, 2081);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(byte1 == byte4);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (short) (-249));
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-345.8178456);
      doubleArray0[1] = (double) (short) (-249);
      doubleArray0[2] = (-345.8178456);
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)1064;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 1, (int) (short)0, (double) (short)1064);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-345.8178456), (-249.0), (-345.8178456), 0.0, 0.0, 0.0, 1064.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, 13, 1342, (-693));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1503, 13);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1117);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1117}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1503, (-693), (-693));
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 3348, 3348);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1117}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      ArrayUtils.swap(shortArray1, 1, 121, 2);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1117}, shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-127);
      ArrayUtils.shift(byteArray0, 111, 13, 1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-127)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.reverse(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      Byte[] byteArray1 = new Byte[0];
      int int0 = 4077;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray1, 4077);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4077, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      charArray0[4] = 'B';
      charArray0[7] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {')', ']', 'J', '@', 'B', '\u0000', '\u0000', 'f'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ']';
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)65;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-2874);
      shortArray0[3] = (short) (-2534);
      shortArray0[4] = (short)2705;
      ArrayUtils.shift(shortArray0, (-2146117006), (-955), 2292);
      assertArrayEquals(new short[] {(short)65, (short) (-1), (short) (-2874), (short) (-2534), (short)2705}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte)0, (byte)0, (byte)0, (byte)41, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((short[]) null, (short) (-2947));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte1 = new Byte((byte)41);
      assertEquals((byte)41, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)41;
      byteArray2[1] = (Byte) (byte)41;
      byteArray2[2] = (Byte) (byte)0;
      Byte[] byteArray3 = ArrayUtils.subarray(byteArray2, (int) byte0, 0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(3, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2146951301), (int) (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[0];
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-2475));
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 1982292592);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (byte) (-117);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-117L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-117L), (-117L), (-117L), (-117L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {(-117L), (-117L), (-117L), (-117L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      ArrayUtils.shift(intArray0, (int) (byte) (-117), 70, 469);
      assertArrayEquals(new int[] {(-117), (-117), (-117)}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-117), (-2872));
      assertArrayEquals(new int[] {(-117), (-117), (-117)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Float float0 = new Float((double) (-117L));
      assertEquals((-117.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 1723.0F);
      assertNull(floatArray0);
      
      Byte byte3 = new Byte((byte)24);
      assertEquals((byte)24, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      ArrayUtils.shift(charArray0, (-445), (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'J';
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) '(';
      floatArray0[3] = (float) '(';
      floatArray0[4] = (float) (-53);
      floatArray0[5] = (float) 'J';
      floatArray0[6] = (float) 'J';
      floatArray0[7] = (float) (-445);
      floatArray0[8] = (float) 'J';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {74.0F, 0.0F, 40.0F, 40.0F, (-53.0F), 74.0F, 74.0F, (-445.0F), 74.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(18, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {74.0F, 0.0F, 40.0F, 40.0F, (-53.0F), 74.0F, 74.0F, (-445.0F), 74.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      ArrayUtils.shift((byte[]) null, (-53), (-53), (-75));
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.add(floatArray0, (int) (short)0, 51.573467F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {51.573467F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      Float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
      
      ArrayUtils.shift((byte[]) null, 2135486532, 2135486532, 2135486532);
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "c,`lwc7cO";
      stringArray0[1] = "MUjo9_l>5";
      stringArray0[2] = "'";
      stringArray0[3] = "MUjo9_l>5";
      stringArray0[4] = "";
      stringArray0[6] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[7] = "false";
      Byte byte0 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) stringArray0, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)12;
      longArray0[1] = (long) (byte)12;
      longArray0[2] = (long) (byte)12;
      longArray0[3] = (long) (byte)12;
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {12L, 12L, 12L, 12L}, longArray0);
      assertEquals(4, longArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)12;
      intArray0[1] = (int) (byte)12;
      intArray0[2] = (int) (byte)12;
      intArray0[3] = (int) (byte)12;
      intArray0[4] = (int) (byte)12;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte)12, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      int[] intArray0 = new int[2];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-52);
      Byte byte2 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-49);
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte5;
      Byte byte8 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte8);
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[2] = byte5;
      byteArray0[3] = byte2;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-52), (int) byte1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte1 == byte3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[2];
      byteArray0[4] = (Byte) (byte)120;
      longArray0[1] = (long) byte3;
      ArrayUtils.reverse(longArray0, 20, (int) byte3);
      assertFalse(byte3 == byte1);
      assertArrayEquals(new long[] {0L, (-49L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      ArrayUtils.shift(longArray0, 1114111, (int) (byte) (-49), (int) byte3);
      assertFalse(byte3 == byte1);
      assertArrayEquals(new long[] {0L, (-49L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) byte3;
      floatArray0[1] = (float) 1114111;
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(byte1 == byte3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new float[] {(-49.0F), 1114111.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-49.0F), 1114111.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      ArrayUtils.reverse(byteArray0);
      assertEquals(21, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      int[] intArray0 = new int[9];
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)0;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (-305);
      shortArray0[2] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-305), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-305), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(9, intArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, '1');
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[4];
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.get(objectArray0, 4460, (Object) byte1);
      assertEquals((byte)0, object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertNotNull(object0);
      assertEquals(4, objectArray0.length);
      
      objectArray0[0] = object0;
      objectArray0[1] = null;
      objectArray0[2] = (Object) (short)0;
      objectArray0[3] = (Object) (short) (-305);
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(4, objectArray0.length);
      
      char[] charArray1 = new char[1];
      charArray1[0] = 'a';
      char[] charArray2 = ArrayUtils.removeElements((char[]) null, charArray1);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertNull(charArray2);
      assertEquals(1, charArray1.length);
      
      char[] charArray3 = ArrayUtils.add((char[]) null, 'a');
      assertNotSame(charArray3, charArray1);
      assertFalse(charArray3.equals((Object)charArray1));
      assertArrayEquals(new char[] {'a'}, charArray3);
      assertNotNull(charArray3);
      assertEquals(1, charArray3.length);
      
      boolean boolean3 = ArrayUtils.contains(shortArray1, (short) (-305));
      assertTrue(boolean3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-305), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-305), (short)0}, shortArray1);
      assertEquals(9, intArray0.length);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      shortArray0[2] = (short)0;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)84);
      assertEquals((byte)84, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)68);
      assertEquals((byte)68, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      Byte byte6 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertTrue(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[2] = byte6;
      byteArray0[3] = byte1;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)40, (byte) (-1), (byte)84}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte6, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType(byte0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[10];
      longArray0[1] = 0L;
      Integer integer0 = new Integer((-4));
      assertEquals((-4), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, 1);
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray1, (Object) null);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)293;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)293);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)293}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift(byteArray0, (-2147333266));
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte)50);
      assertNull(byteArray0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)50;
      longArray0[1] = (long) (byte)50;
      longArray0[2] = (long) (byte)50;
      longArray0[3] = (long) (byte)50;
      longArray0[4] = (long) (byte)50;
      longArray0[5] = (long) (byte)50;
      longArray0[6] = (long) (byte)50;
      longArray0[7] = (long) (byte)50;
      longArray0[8] = (long) (byte)50;
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {50L, 50L, 50L, 50L, 50L, 50L, 50L, 50L, 50L}, longArray0);
      assertArrayEquals(new long[] {50L, 50L, 50L, 50L, 50L, 50L, 50L, 50L, 50L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(10, longArray1.length);
      
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(10, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      ArrayUtils.swap((float[]) null, 1304, (-1380));
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(10, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurrences(booleanArray1, false);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray3);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray3.length);
      assertEquals(10, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1304;
      doubleArray0[1] = (double) 1304;
      doubleArray0[2] = (double) (-1380);
      doubleArray0[3] = (double) 1304;
      doubleArray0[4] = (double) 1304;
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-227), 1304);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1304.0, 1304.0, (-1380.0), 1304.0, 1304.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1304.0, 1304.0, (-1380.0), 1304.0, 1304.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean[] booleanArray4 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray4);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray4, booleanArray2);
      assertNotSame(booleanArray4, booleanArray3);
      assertNotSame(booleanArray4, booleanArray1);
      assertNotSame(booleanArray4, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray3));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray2));
      assertFalse(booleanArray4.equals((Object)booleanArray3));
      assertFalse(booleanArray4.equals((Object)booleanArray1));
      assertFalse(booleanArray4.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray4);
      assertEquals(10, booleanArray0.length);
      assertEquals(11, booleanArray4.length);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, false);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      ArrayUtils.shift((float[]) null, 808, (-827), (-827));
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, (int) (byte) (-110), (int) (byte) (-110), (int) (byte) (-110));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap(intArray0, (int) (byte) (-110), 2479);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Float float0 = new Float((double) (byte) (-110));
      assertEquals((-110.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) 38.0F;
      floatArray1[1] = (Float) (-32.6489F);
      floatArray1[2] = (Float) (-32.6489F);
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, 2479, byte0);
      assertEquals((byte) (-1), (byte)byte1);
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) floatArray1, (Object) byte2, 2002);
      assertEquals((-1), int0);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertEquals(4, floatArray1.length);
      
      ArrayUtils.shift(floatArray0, 1906, (-387), 290);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = ArrayUtils.isSorted((Byte[]) null, comparator0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 290;
      longArray0[1] = (long) 2479;
      longArray0[2] = (long) 2002;
      longArray0[3] = (long) (-387);
      ArrayUtils.swap(longArray0, 5, (-1082));
      assertArrayEquals(new long[] {290L, 2479L, 2002L, (-387L)}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 111;
      intArray0[1] = (-1);
      intArray0[2] = 2147087157;
      intArray0[3] = (-1710);
      char[] charArray0 = ArrayUtils.clone((char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, 1495.0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1495.0;
      doubleArray1[1] = 1495.0;
      doubleArray1[2] = 21.05384914113625;
      doubleArray1[3] = (double) (short)4234;
      boolean boolean1 = ArrayUtils.contains(doubleArray1, 1797.407333111, (-5.0));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1495.0, 1495.0, 21.05384914113625, 4234.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray1.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '^');
      assertNull(charArray0);
      
      Byte[] byteArray1 = new Byte[3];
      Byte byte0 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte)54);
      assertEquals((byte)54, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[1] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray1[2] = byte2;
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)54, (byte)54, (byte)1}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray2.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1575));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 4);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      int int2 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, charArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf(charArray0, '<');
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, 13, 1342, (-693));
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      ArrayUtils.swap(booleanArray0, 2, (-693), 13);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1342;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 13, 2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1342.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 59;
      intArray0[2] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1255));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {77, 59, 77}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-115);
      shortArray0[1] = (short) (byte) (-115);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-115), (short) (-115)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-115));
      assertTrue(Arrays.equals(new boolean[] {true, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 3132);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {77, 59, 77}, intArray0);
      assertEquals(3, intArray0.length);
      
      ArrayUtils.shift(floatArray0, 3, 282, (-1));
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 59;
      doubleArray0[1] = (double) (byte) (-115);
      doubleArray0[2] = (double) (byte) (-115);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      int int0 = ArrayUtils.indexOf(longArray0, 1951L, (-528));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(9, longArray0.length);
      
      Byte byte0 = new Byte((byte)47);
      assertEquals((byte)47, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-573);
      shortArray0[1] = (short) (-244);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)130;
      shortArray0[4] = (short) (-1575);
      shortArray0[5] = (short) (-1575);
      shortArray0[6] = (short) (-1575);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1575));
      assertEquals(4, int0);
      assertArrayEquals(new short[] {(short) (-573), (short) (-244), (short) (-573), (short)130, (short) (-1575), (short) (-1575), (short) (-1575)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)200;
      shortArray1[1] = (short) (-573);
      shortArray1[2] = (short)0;
      short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-573), (short) (-244), (short) (-573), (short)130, (short) (-1575), (short) (-1575), (short) (-1575)}, shortArray0);
      assertArrayEquals(new short[] {(short)200, (short) (-573), (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-244), (short) (-573), (short)130, (short) (-1575), (short) (-1575), (short) (-1575)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(7, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(6, shortArray2.length);
      
      short[] shortArray3 = new short[4];
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      shortArray3[0] = (short)0;
      shortArray3[1] = (short) (-1575);
      shortArray3[2] = (short) (-244);
      shortArray3[3] = (short)130;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray3, (-776));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -776, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)16;
      shortArray0[1] = (short) (byte)16;
      shortArray0[0] = (short) (byte)16;
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      short[] shortArray2 = ArrayUtils.removeElements(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)16, (short)16, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(2, shortArray2.length);
      
      short[] shortArray3 = ArrayUtils.add(shortArray2, (short)16);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray3);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray3);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray3);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray1);
      assertNotSame(shortArray3, shortArray2);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray2));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)16, (short)16, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)16}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      assertEquals(2, shortArray2.length);
      assertEquals(3, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0, 61);
      assertEquals(0, int0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 61;
      intArray0[1] = (-2708);
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {61, (-2708), 0, 0}, intArray0);
      assertArrayEquals(new int[] {61, (-2708), 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2001.6596747957112;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-2708);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 2001.6596747957112, 1394.087447786);
      assertEquals(1, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {2001.6596747957112, (-1.0), 1.5, 0.0, 0.0, (-2708.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (-2), (byte) (-98));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[0] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1644);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, (-1644), 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 765, (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 765, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-521.9F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1077.5872F;
      floatArray0[4] = (-2730.2F);
      floatArray0[5] = 741.5375F;
      char[] charArray0 = new char[4];
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      ArrayUtils.shift(charArray0, 1, 4, (-2221));
      assertArrayEquals(new char[] {'\u0000', '<', '<', '<'}, charArray0);
      assertEquals(4, charArray0.length);
      
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) 0.0F;
      ArrayUtils.swap(objectArray0, (-1394), (int) (byte)0, (int) (byte)0);
      assertEquals(4, objectArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-439);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[1]);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(4, objectArray0.length);
      
      ArrayUtils.shift(floatArray0, (int) (byte)0, (-439), 2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)112);
      assertEquals((byte)112, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte)93;
      Byte byte2 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      byteArray0[2] = byte3;
      byteArray0[3] = byte2;
      byteArray0[4] = byte0;
      byteArray0[5] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0, (Comparator<Byte>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Comparator should not be null.
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)32, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)32);
      assertNull(longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)32, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byteArray0[4] = byte1;
      Byte byte5 = ArrayUtils.get(byteArray0, (int) byte0, byte1);
      assertEquals((byte)32, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte0 == byte3);
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte5);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) byte5, (int) byte0);
      assertEquals((-1), int0);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte0 == byte3);
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte2));
      assertTrue(byte1.equals((Object)byte0));
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(5, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shift(floatArray0, 111, (int) byte3, (-1));
      assertFalse(byte3 == byte0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Comparator<Byte> comparator0 = (Comparator<Byte>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(comparator0).compare(any(java.lang.Byte.class) , any(java.lang.Byte.class));
      boolean boolean0 = ArrayUtils.isSorted(byteArray0, comparator0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      float[] floatArray0 = new float[1];
      ArrayUtils.shift(floatArray0, 94);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      int int0 = 282;
      ArrayUtils.shift((float[]) null, 2146604465, (-227), 2);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-69);
      doubleArray0[1] = (double) 2146604465;
      doubleArray0[2] = (double) 282;
      doubleArray0[3] = (double) (byte) (-69);
      doubleArray0[4] = (double) 2132;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-227), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -227, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-4));
      assertEquals((-1), int0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(longArray0, (-1), 5541, (-470));
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, (-4));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-4)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)504;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-1), (short)1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1100.243;
      doubleArray0[1] = (-757.6511558);
      doubleArray0[2] = 829.3;
      doubleArray0[3] = 2424.72613261;
      doubleArray0[4] = 2.5;
      double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-757.6511558));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1100.243, (-757.6511558), 829.3, 2424.72613261, 2.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1100.243, (-757.6511558), 829.3, 2424.72613261, 2.5, (-757.6511558)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1L);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new long[] {1L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2320;
      intArray0[1] = 2320;
      intArray0[2] = 2320;
      intArray0[3] = 2320;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 2320;
      intArray0[6] = 2320;
      intArray0[7] = 2320;
      intArray0[8] = 2320;
      ArrayUtils.swap(intArray0, 0, 2320, 2320);
      assertArrayEquals(new int[] {2320, 2320, 2320, 2320, Integer.MAX_VALUE, 2320, 2320, 2320, 2320}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-157), (-4432));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-157), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'c', 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4061, (int) (short) (-157));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-157);
      intArray0[1] = 0;
      intArray0[2] = (-944);
      intArray0[3] = (int) 'c';
      intArray0[4] = 0;
      intArray0[5] = 4061;
      intArray0[6] = 2;
      int int2 = ArrayUtils.indexOf(intArray0, 99);
      assertEquals(3, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {(-157), 0, (-944), 99, 0, 4061, 2}, intArray0);
      assertEquals(7, intArray0.length);
      
      Byte byte0 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte0);
      assertNotNull(byte0);
      
      int int3 = ArrayUtils.hashCode((Object) byte0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.hashCode((Object) byte0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = 'f';
      charArray0[2] = 'd';
      charArray0[3] = '+';
      charArray0[4] = ',';
      int int0 = ArrayUtils.indexOf(charArray0, 'f');
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'M', 'f', 'd', '+', ','}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)4234;
      intArray0[1] = 0;
      intArray0[2] = (-1658);
      boolean boolean1 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {4234, 0, (-1658)}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)70);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)70}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.subarray(byteArray0, 0, 4234);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 95.3591F;
      doubleArray0[1] = (double) 95.3591F;
      doubleArray0[2] = (double) 670.344F;
      doubleArray0[3] = (double) 95.3591F;
      doubleArray0[4] = (double) 670.344F;
      doubleArray0[5] = (double) 670.344F;
      ArrayUtils.shift(doubleArray0, (-1784), (-1784), (-1784));
      assertArrayEquals(new double[] {95.35910034179688, 95.35910034179688, 670.343994140625, 95.35910034179688, 670.343994140625, 670.343994140625}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1784);
      intArray0[1] = (-1784);
      intArray0[2] = (-1784);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-1784), (-1784), (-1784)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2352.8021032157394;
      doubleArray0[3] = 1.0;
      doubleArray0[6] = (double) (short)4234;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1.5);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {2352.8021032157394, 0.0, 0.0, 1.0, 0.0, 0.0, 4234.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 5;
      floatArray0[1] = (float) (short)4234;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (short)4234);
      assertEquals("{1}", bitSet0.toString());
      assertEquals(2, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new float[] {5.0F, 4234.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)4234;
      intArray0[1] = 5;
      intArray0[2] = 5;
      intArray0[3] = 5;
      intArray0[4] = 5;
      intArray0[5] = (-1740);
      intArray0[6] = (int) (short)4234;
      intArray0[7] = (int) (short)4234;
      intArray0[8] = 5;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4234, 5, 5, 5, 5, (-1740), 4234, 4234, 5}, intArray0);
      assertNotNull(intArray1);
      assertEquals(18, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-1), 7);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, 1393, 3524, 3524);
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2674, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[10];
      longArray0[1] = (long) 1393;
      longArray0[1] = (long) 3524;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = '[';
      charArray0[2] = '\\';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'|', '[', '\\'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(3, charArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((boolean[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Float[] floatArray4 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotSame(floatArray4, floatArray2);
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertNotNull(floatArray4);
      assertEquals(0, floatArray4.length);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      shortArray0[1] = (short)720;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3074);
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1635);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-157);
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)24283, (int) (short) (-3074));
      assertEquals((-1), int0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = ArrayUtils.contains((Object[]) booleanArray0, object0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray1);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray1, booleanArray2);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short) (byte)0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 118);
      assertNull(intArray0);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-78);
      Byte byte2 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 64);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 118;
      floatArray0[1] = (float) (short) (-249);
      floatArray0[2] = (float) byte1;
      floatArray0[3] = (float) byte1;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {118.0F, (-249.0F), (-78.0F), (-78.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {118.0F, (-249.0F), (-78.0F), (-78.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAllOccurences((int[]) null, (-52));
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class2;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[0] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      char[] charArray0 = new char[7];
      charArray0[0] = 'v';
      charArray0[1] = '|';
      charArray0[2] = 'v';
      charArray0[3] = '|';
      charArray0[4] = 'v';
      charArray0[5] = '|';
      charArray0[6] = 'v';
      ArrayUtils.swap(charArray0, 972, 2145262878, (-1474));
      assertArrayEquals(new char[] {'v', '|', 'v', '|', 'v', '|', 'v'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.indexOf(booleanArray0, false);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) 'R';
      ArrayUtils.shift(doubleArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertArrayEquals(new double[] {82.0, 82.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-591);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)100;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)100, (byte)47, (byte)100, (byte)100, (byte)100, (byte)100}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      charArray0[3] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', 'N', '(', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (-4592.071400729201);
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (double) '(';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-4592.071400729201), 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (Double) (-4592.071400729201);
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-2272L));
      assertNull(longArray0);
      
      int int0 = ArrayUtils.lastIndexOf((long[]) null, 1696L);
      assertEquals((-1), int0);
      
      Character character0 = new Character('(');
      assertEquals('(', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('x');
      assertEquals('x', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[0];
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray1 = ArrayUtils.subarray((long[]) null, (-421), (-1));
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte) (-49);
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(6, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-49), (byte)0, (byte) (-49), (byte)0, (byte) (-49), (byte)0, (byte) (-49), (byte) (-49)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte)0, (int) (byte) (-49));
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-49), (byte)0, (byte) (-49), (byte)0, (byte) (-49), (byte)0, (byte) (-49), (byte) (-49)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1567, (-3155));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray1 = new byte[8];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-49);
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte) (-49);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)76;
      byteArray1[6] = (byte) (-49);
      byteArray1[7] = (byte)0;
      byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, (byte) (-49));
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte) (-49), (byte)2, (byte) (-49), (byte)0, (byte)0, (byte)76, (byte) (-49), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-49), (byte) (-49), (byte)2, (byte) (-49), (byte)0, (byte)0, (byte)76, (byte) (-49), (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(8, byteArray1.length);
      assertEquals(9, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-18.549591F);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-18.549591F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte) (-1), (byte)byte4);
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)43);
      assertEquals((byte)43, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1575));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 4);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (short) (-1575);
      longArray0[2] = (long) (short) (-1575);
      longArray0[3] = (long) (short) (-1575);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 4;
      longArray0[6] = (long) 4;
      longArray0[7] = (-1154L);
      longArray0[8] = (long) (short) (-1575);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-1L), (-1575L), (-1575L), (-1575L), (-1L), 4L, 4L, (-1154L), (-1575L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertArrayEquals(new char[] {'<'}, charArray1);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray0.length);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)1;
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)1, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)117;
      Byte byte4 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte5);
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-62));
      assertEquals((byte) (-62), (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte7);
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte3);
      assertEquals((byte)117, (byte)byte8);
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte3 == byte0);
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray1, booleanArray0);
      assertFalse(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.swap(shortArray0, 0, 0, 604);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte3 = ArrayUtils.get(byteArray0, 0, byte0);
      assertEquals((byte) (-1), (byte)byte3);
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals(0, byteArray0.length);
      
      Byte byte4 = new Byte((byte) (-5));
      assertEquals((byte) (-5), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)127);
      assertEquals((byte)127, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = new boolean[9];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = false;
      booleanArray1[7] = true;
      booleanArray1[8] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
      assertFalse(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false, false, true, false}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 623L;
      longArray0[1] = 6L;
      longArray0[2] = (-1L);
      longArray0[0] = 0L;
      longArray0[4] = (-367L);
      longArray0[5] = 1849L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 6L, (-1L), 0L, (-367L), 1849L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 623L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 6L, (-1L), 0L, (-367L), 1849L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {623L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'e');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (double) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Byte[] byteArray2 = new Byte[0];
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class0);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (byte)0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, (-1), (-1), (-2113));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = '!';
      charArray0[2] = 'L';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'L', '!', '*'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Byte byte0 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 31, 84);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte byte2 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte2);
      assertEquals((byte) (-96), object0);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte1));
      assertNotNull(object0);
      
      Byte byte3 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)object0));
      assertNotNull(byte3);
      
      Byte byte4 = ArrayUtils.get(byteArray0, (int) 31);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNull(byte4);
      assertEquals(0, byteArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object1);
      
      Byte byte5 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)object0));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)object0));
      assertNotNull(byte6);
      
      Byte[] byteArray2 = ArrayUtils.removeElement(byteArray1, (Object) byte0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byte0.equals((Object)object0));
      assertTrue(byte0.equals((Object)byte6));
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte5));
      assertTrue(byte0.equals((Object)byte3));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 'L';
      longArray0[1] = (long) '!';
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 76L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {76L, 33L}, longArray0);
      assertArrayEquals(new long[] {76L, 76L, 33L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(3, longArray1.length);
      
      byte[] byteArray3 = new byte[0];
      byte[] byteArray4 = ArrayUtils.clone(byteArray3);
      assertNotSame(byteArray3, byteArray4);
      assertNotSame(byteArray4, byteArray3);
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertArrayEquals(new byte[] {}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray4.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'L';
      Character[] characterArray0 = ArrayUtils.toObject(charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'L'}, charArray1);
      assertNotNull(characterArray0);
      assertEquals(1, charArray1.length);
      assertEquals(1, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1136;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-1), 2224);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 2224, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 2);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{3}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.subarray(charArray0, 70, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)158;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)158;
      shortArray0[3] = (short)0;
      shortArray0[3] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)993, (-4432));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)158, (short)0, (short)158, (short)1064, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2001.6596747957112);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)993, (int) (short)0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1175);
      intArray0[1] = (-1175);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1175);
      floatArray0[2] = (float) (-1175);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1175.0F), (-1175.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (-1175), 657, 54);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)177);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) '\u0000';
      doubleArray0[2] = (double) 0.0F;
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean1;
      booleanArray0[1] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      
      int int0 = ArrayUtils.indexOf(floatArray0, (-1175.0F), 2679);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, (-1175.0F), (-1175.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short)946);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = (long) (byte)0;
      int int2 = ArrayUtils.indexOf(longArray0, 0L, (int) (byte)0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert((int) (byte)0, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int int3 = ArrayUtils.lastIndexOf(longArray0, (-2370L));
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (-2708), (double) 104.0F);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray2, 104);
      assertFalse(boolean0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)100;
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-84), (byte)31, (byte)0, (byte)100}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted((char[]) null);
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)0;
      objectArray0[3] = (Object) 0.0F;
      ArrayUtils.swap(objectArray0, (-1394), (-1), (-1));
      assertEquals(4, objectArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-439);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-1), 0, (-439), 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert((int) (byte)0, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)12;
      Byte byte1 = new Byte((byte)12);
      assertEquals((byte)12, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)12, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-74));
      assertEquals((byte) (-74), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)12, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      // Undeclared exception!
      ArrayUtils.subarray(byteArray0, 299, Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      byte byte0 = (byte) (-96);
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-96), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[4] = byte3;
      byteArray0[5] = byte2;
      byteArray0[6] = byte2;
      byteArray0[7] = byte2;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) byte0, 946);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray1.length);
      assertEquals(8, byteArray0.length);
      
      byte byte4 = (byte) (-103);
      Byte byte5 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte5);
      assertTrue(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte2);
      assertEquals((byte)2, object0);
      assertFalse(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte5));
      assertFalse(object0.equals((Object)byte4));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte5));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(object0);
      
      Byte byte6 = ArrayUtils.get(byteArray0, (int)  (-96));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNull(byte6);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte2, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.765F;
      char[] charArray0 = new char[3];
      charArray0[1] = 'o';
      charArray0[2] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.shift(charArray0, (-53), (int) (byte)0, (-1315));
      assertArrayEquals(new char[] {'\u0000', 'o', 'M'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1396.765F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', 'o', 'M'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', 'o', 'M', '\u0000', 'o', 'M'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1396.765F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      Byte byte0 = new Byte((byte) (-78));
      assertEquals((byte) (-78), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short)8192;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-5599), (int) (byte)0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)0, (short)0, (short)8192, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 13;
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {13L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {13L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)1064);
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      int int2 = ArrayUtils.indexOf((char[]) null, '<');
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ArrayUtils.swap((char[]) null, (int) (short)0, 9, (int) (short)0);
      ArrayUtils.shift(booleanArray0, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte)115;
      Byte byte1 = new Byte((byte)115);
      assertEquals((byte)115, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)115, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)115, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)115, (byte)115}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-1);
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-1L), 0L, (-1L)}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (short) (-157);
      floatArray0[1] = (float) (short) (-157);
      floatArray0[2] = (float) (short) (-157);
      floatArray0[3] = (float) (short) (-157);
      floatArray0[4] = (float) (short) (-157);
      floatArray0[3] = (float) (short) (-157);
      floatArray0[6] = (float) (short) (-157);
      floatArray0[7] = (float) (short) (-157);
      floatArray0[4] = (float) (short) (-157);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-157.0F), (-157.0F), (-157.0F), (-157.0F), (-157.0F), 0.0F, (-157.0F), (-157.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2952L;
      ArrayUtils.swap(longArray0, (-594), Integer.MAX_VALUE);
      assertArrayEquals(new long[] {2952L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F, (-32.6489F), 38.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte) (-110);
      longArray0[1] = (long) 2;
      longArray0[2] = (long) '&';
      longArray0[3] = (long) (byte) (-110);
      longArray0[4] = (long) '&';
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (byte) (-110);
      longArray0[7] = (long) '&';
      longArray0[8] = (long) (byte) (-110);
      ArrayUtils.swap(longArray0, (int) (byte) (-110), (-594));
      assertArrayEquals(new long[] {(-110L), 2L, 38L, (-110L), 38L, 2L, (-110L), 38L, (-110L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((byte[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)127;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1064;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2483);
      shortArray0[8] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1266));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)127, (short)0, (short)0, (short)1064, (short)0, (short)0, (short)0, (short) (-2483), (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int2 = ArrayUtils.indexOf((char[]) null, '<');
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      ArrayUtils.swap((char[]) null, 1117, (-963), (int) (short)0);
      ArrayUtils.shift(booleanArray0, 34);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int3 = ArrayUtils.indexOf((char[]) null, 'f', 904);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-2483);
      doubleArray0[1] = (double) (short) (-2483);
      doubleArray0[2] = (double) (short)127;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)127;
      doubleArray0[5] = 1630.213419791683;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) 904;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-2483.0), (-2483.0), 127.0, 0.0, 127.0, 1630.213419791683, 0.0, 904.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 34);
      assertEquals(9, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      int int2 = ArrayUtils.indexOf((char[]) null, '<');
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ArrayUtils.swap((char[]) null, (int) (short)0, 9, (int) (short)0);
      ArrayUtils.shift(booleanArray0, (int) (short)0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf((byte[]) null, (byte)84, (-2095));
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2095);
      doubleArray0[1] = (double) (short)1064;
      doubleArray0[2] = 2398.8;
      doubleArray0[3] = (double) (-1);
      ArrayUtils.shift(doubleArray0, Integer.MAX_VALUE, (-1400), (int) (short)0);
      assertArrayEquals(new double[] {(-2095.0), 1064.0, 2398.8, (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 10, (-953));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shuffle(objectArray0);
      assertEquals(0, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)99;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 102, (-953));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)79, (byte)10, (byte) (-88), (byte)44, (byte) (-61), (byte) (-16), (byte)99}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = 512;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 9);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {9, 512}, intArray0);
      assertArrayEquals(new int[] {9, 9, 512}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {9, 512}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = 'E';
      charArray0[4] = 'E';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'E');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'E', '-', '-', 'E', '\u0000', 'E', 'E', 'E'}, charArray1);
      assertArrayEquals(new char[] {'-', '-', 'E', '\u0000', 'E', 'E', 'E'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(8, charArray1.length);
      assertEquals(7, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-18.1861F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)151, 512);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      int int0 = ArrayUtils.indexOf(charArray0, 'Z', (int) (short)534);
      assertEquals((-1), int0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'-', '-', 'E', '\u0000', 'E', 'E', 'E'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      charArray0[3] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', 'N', '(', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (-4591.569371618195);
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (double) '(';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-4591.569371618195), 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (Double) (-4591.569371618195);
      doubleArray2[1] = (Double) 40.0;
      MockRandom mockRandom0 = new MockRandom(70L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs(2371L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)116);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 670.344F;
      floatArray0[1] = 95.3591F;
      int[] intArray0 = new int[6];
      intArray0[0] = 2648;
      intArray0[1] = 2648;
      intArray0[2] = 2648;
      intArray0[3] = 2648;
      intArray0[4] = 72;
      intArray0[5] = 2648;
      ArrayUtils.shift(intArray0, (-1475), 2648, (-319));
      assertArrayEquals(new int[] {2648, 2648, 2648, 72, 2648, 2648}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.swap(intArray0, 2648, 2648);
      assertArrayEquals(new int[] {2648, 2648, 2648, 72, 2648, 2648}, intArray0);
      assertEquals(6, intArray0.length);
      
      Float float0 = new Float((-1918.2360537490704));
      assertEquals((-1918.2361F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray1 = new Float[0];
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (float) 2648);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
      
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (Byte) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) 95.3591F;
      doubleArray0[2] = (double) byte0;
      doubleArray0[3] = (-1918.2360537490704);
      doubleArray0[4] = (double) 670.344F;
      doubleArray0[5] = (double) 2648;
      doubleArray0[6] = (double) 2648;
      doubleArray0[7] = (double) 670.344F;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1108.952));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new double[] {0.0, 95.35910034179688, 0.0, (-1918.2360537490704), 670.343994140625, 2648.0, 2648.0, 670.343994140625}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, (-229), 1, (-229));
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-229);
      intArray0[2] = 1;
      intArray0[3] = (-229);
      intArray0[4] = (int) 'o';
      intArray0[5] = 1;
      intArray0[6] = (-229);
      intArray0[7] = 59;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-229));
      assertEquals(6, int0);
      assertArrayEquals(new int[] {1, (-229), 1, (-229), 111, 1, (-229), 59}, intArray0);
      assertEquals(8, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2334;
      shortArray0[1] = (short) (-441);
      shortArray0[2] = (short) (-441);
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, (short[]) null);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2334, (short) (-441), (short) (-441)}, shortArray1);
      assertArrayEquals(new short[] {(short)2334, (short) (-441), (short) (-441)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (-2356));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2356.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(doubleArray1, (-2356), (double) (-2356));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2356, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)158;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)158;
      shortArray0[3] = (short)0;
      shortArray0[3] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)158, (short)0, (short)158, (short)1064, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.swap((short[]) null, 36, (int) (short)1064);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (short)158);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {158.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)2;
      boolean boolean2 = ArrayUtils.contains(byteArray0, (byte) (-82));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte) (-11), (byte)2}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-52);
      longArray0[1] = (long) (byte) (-49);
      longArray0[2] = (long) (byte) (-49);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-52L), (-49L), (-49L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 1, 3180, (int) (byte) (-70));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-49);
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[2] = (short) (byte)120;
      shortArray0[3] = (short) (byte) (-49);
      shortArray0[4] = (short) (byte)120;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 10, 7);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-49), (short) (-70), (short)120, (short) (-49), (short)120}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 3016.677F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      short[] shortArray0 = new short[6];
      ArrayUtils.swap(shortArray0, 0, 0, 604);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[0];
      Byte byte3 = ArrayUtils.get(byteArray0, 0, byte0);
      assertEquals((byte) (-1), (byte)byte3);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      assertEquals(0, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 608;
      intArray0[1] = 2379;
      intArray0[2] = (-671);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {608, 2379, (-671)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-671);
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-671.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-671.0F), (-671.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse((Object[]) byteArray0, 2379, 2485);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 321, 2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 80;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1), 3586);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1575);
      shortArray0[1] = (short) (-1337);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)457;
      shortArray0[4] = (short) (-3966);
      shortArray0[5] = (short) (-126);
      shortArray0[6] = (short)52;
      shortArray0[7] = (short)2253;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-1575));
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-1575), (short) (-1337), (short) (-1), (short)457, (short) (-3966), (short) (-126), (short)52, (short)2253}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = 'e';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '/', (-966));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'Z', 'e'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(2, charArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)27;
      byte[] byteArray1 = ArrayUtils.clone(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)10, (byte)27}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)27}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)27;
      floatArray0[1] = (float) (-966);
      floatArray0[2] = (float) (byte)27;
      floatArray0[3] = (float) 'Z';
      boolean boolean0 = ArrayUtils.contains(floatArray0, 90.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {27.0F, (-966.0F), 27.0F, 90.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)10;
      shortArray0[1] = (short) (byte)10;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (byte)10;
      shortArray0[4] = (short) (byte)10;
      shortArray0[5] = (short)2906;
      shortArray0[6] = (short) (byte)10;
      shortArray0[7] = (short) (byte)27;
      shortArray0[8] = (short) (byte)27;
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short)522);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)10, (short)10, (short)1, (short)10, (short)10, (short)2906, (short)10, (short)27, (short)27}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shift(byteArray0, (-1535), (-1535), (-1535));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      char[] charArray0 = new char[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1596;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1596.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1596.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)2;
      ArrayUtils.shift(byteArray0, (-2146825313), (int) (byte) (-1), (int) (byte) (-82));
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-1), (byte)50, (byte) (-5), (byte)75, (byte) (-82), (byte)2, (byte)2}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)2);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-5);
      ArrayUtils.swap(intArray0, (int) (byte)75, (int) (byte)50, (int) (byte)2);
      assertArrayEquals(new int[] {(-5)}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'f');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.insert((int) (byte)11, longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      
      ArrayUtils.reverse(longArray2, 2146754414, (int) (byte)11);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {0L}, longArray2);
      assertEquals(1, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      
      long[] longArray3 = ArrayUtils.subarray(longArray0, 0, 1224);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray2));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray3);
      assertNotNull(longArray3);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray3.length);
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-52);
      longArray0[1] = (long) (byte) (-49);
      longArray0[2] = (long) (byte) (-49);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-52L), (-49L), (-49L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 1, 3180, (int) (byte) (-70));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-49);
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[2] = (short) (byte)120;
      shortArray0[3] = (short) (byte) (-49);
      shortArray0[4] = (short) (byte)120;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1194), 778);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-52L), (-49L), (-49L)}, longArray1);
      assertArrayEquals(new long[] {(-52L), (-49L), (-49L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)120;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (int) (byte)120, 120);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {120}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      Float float0 = new Float((float) (short)1117);
      assertEquals(1117.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1;
      longArray0[1] = 336L;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 5541;
      longArray0[4] = (long) (short)1117;
      longArray0[5] = (long) 1702;
      ArrayUtils.shift(longArray0, 1, (int) (short)1117, (int) (short)1117);
      assertArrayEquals(new long[] {1L, 1117L, 1702L, 336L, 1L, 5541L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.5;
      doubleArray0[1] = (double) (short)1117;
      doubleArray0[2] = 36.0;
      doubleArray0[3] = (double) 1702;
      ArrayUtils.swap(doubleArray0, 1, (int) (short)1117);
      assertArrayEquals(new double[] {2.5, 1117.0, 36.0, 1702.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5541;
      intArray0[1] = 1702;
      intArray0[2] = 1;
      intArray0[3] = (int) (short)1117;
      intArray0[4] = 1702;
      intArray0[5] = (int) (short)1117;
      intArray0[6] = (int) (short)1117;
      intArray0[7] = 1;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {5541, 1702, 1, 1117, 1702, 1117, 1117, 1}, intArray0);
      assertArrayEquals(new int[] {5541, 1702, 1, 1117, 1702, 1117, 1117, 1}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      Short[] shortArray1 = new Short[8];
      shortArray1[0] = (Short) (short)1117;
      shortArray1[1] = (Short) (short)1117;
      shortArray1[2] = (Short) (short)1117;
      Short short0 = new Short((short)1117);
      assertEquals((short)1117, (short)short0);
      assertNotNull(short0);
      
      shortArray1[3] = short0;
      shortArray1[4] = (Short) (short)1117;
      Short short1 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray1[5] = short1;
      shortArray1[6] = (Short) (short)1117;
      shortArray1[7] = (Short) (short)1117;
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertSame(shortArray2, shortArray1);
      assertSame(shortArray1, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(8, shortArray2.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3161L);
      assertEquals(3161L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3161L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-100), (byte)0, (byte)0, (byte)93, (byte)93, (byte)0, (byte) (-125), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) (byte)93, (-1762));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)637;
      shortArray0[4] = (short) (byte) (-117);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)2, (short) (-1), (short)2, (short)637, (short) (-117)}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'y';
      charArray0[4] = 'H';
      charArray0[5] = 'y';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'd', (int) (short)637);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'y', 'H', 'y'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short)637, 1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((-366));
      assertEquals((-366), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (short)1117);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      Byte byte1 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)31);
      assertEquals((byte)31, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) null, (-908));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2428), 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short) (byte)52;
      Byte[] byteArray3 = ArrayUtils.toObject(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertSame(byteArray1, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray3.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)16, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0, (int) (short)200);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short) (-249);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)200;
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-249), 0, 200}, intArray0);
      assertArrayEquals(new int[] {(-249), 0, 200}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.1, (double) (short)0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, (-489));
      assertFalse(boolean0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-249), 0, 200}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)16, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Double[] doubleArray1 = new Double[0];
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, (double) (short)1064);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-720), (-2521));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)120;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte) (-52);
      shortArray0[3] = (short) (byte) (-52);
      shortArray0[4] = (short) (byte) (-49);
      shortArray0[5] = (short) (byte) (-70);
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte) (-52);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)12);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)120, (short)0, (short) (-52), (short) (-52), (short) (-49), (short) (-70), (short)0, (short) (-52)}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) (short)120;
      int int1 = ArrayUtils.indexOf(longArray0, 120L, (int) (byte) (-49));
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {3L, 120L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)12;
      doubleArray0[1] = (double) (byte) (-70);
      double[] doubleArray1 = ArrayUtils.insert((-1417), doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {12.0, (-70.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {12.0, (-70.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int int2 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new long[] {3L, 120L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.insert(26, doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = (float) (short) (-1575);
      floatArray1[2] = (float) 104;
      floatArray1[3] = (float) (short) (-573);
      Float[] floatArray2 = ArrayUtils.toObject(floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1575.0F), 104.0F, (-573.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1575.0F), 104.0F, (-573.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      
      Long[] longArray0 = new Long[6];
      Long long0 = new Long(1563L);
      assertEquals(1563L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((short) (-1575));
      assertEquals((-1575L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray0[1] = long1;
      Long long2 = new Long(547L);
      assertEquals(547L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      Long long3 = new Long(3728L);
      assertEquals(3728L, (long)long3);
      assertFalse(long3.equals((Object)long0));
      assertFalse(long3.equals((Object)long2));
      assertFalse(long3.equals((Object)long1));
      assertNotNull(long3);
      
      longArray0[3] = long3;
      Long long4 = new Long(38L);
      assertEquals(38L, (long)long4);
      assertFalse(long4.equals((Object)long3));
      assertFalse(long4.equals((Object)long1));
      assertFalse(long4.equals((Object)long0));
      assertFalse(long4.equals((Object)long2));
      assertNotNull(long4);
      
      longArray0[4] = long4;
      Long long5 = new Long(3728L);
      assertEquals(3728L, (long)long5);
      assertFalse(long5.equals((Object)long0));
      assertFalse(long5.equals((Object)long1));
      assertTrue(long5.equals((Object)long3));
      assertFalse(long5.equals((Object)long2));
      assertFalse(long5.equals((Object)long4));
      assertNotNull(long5);
      
      longArray0[5] = long5;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (short) (-573));
      assertArrayEquals(new long[] {1563L, (-1575L), 547L, 3728L, 38L, 3728L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray1.length);
      assertEquals(6, longArray0.length);
      
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
      
      int[] intArray3 = new int[3];
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      
      intArray3[0] = 104;
      intArray3[1] = (int) (short) (-573);
      intArray3[2] = (int) (short) (-1575);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((short[]) null, intArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 104, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)23);
      assertEquals((byte)23, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)23;
      longArray0[1] = (long) (byte) (-49);
      longArray0[2] = (long) (byte) (-49);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {23L, (-49L), (-49L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 1, 3180, (int) (byte) (-70));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-49);
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[2] = (short) (byte)120;
      shortArray0[3] = (short) (byte) (-49);
      shortArray0[4] = (short) (byte)120;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 10, 7);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-49), (short) (-70), (short)120, (short) (-49), (short)120}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)120;
      doubleArray0[1] = (double) 23L;
      ArrayUtils.swap(doubleArray0, 2, 7, 2360);
      assertArrayEquals(new double[] {120.0, 23.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      ArrayUtils.swap((Object[]) null, 11, 11, 70);
      int int0 = ArrayUtils.lastIndexOf(intArray1, 0);
      assertEquals(7, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      short[] shortArray0 = ArrayUtils.insert(11, (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.reverse((Object[]) null);
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte) (-126);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      ArrayUtils.reverse((Object[]) byteArray0, (int) (byte) (-126), (int) (byte)121);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 59, 1, 1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-2337));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = ArrayUtils.insert((int) (short) (-441), (short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.reverse((Object[]) integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      long[] longArray0 = new long[5];
      longArray0[0] = (long) ')';
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {41L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 'B';
      floatArray0[1] = (float) 'B';
      floatArray0[2] = (float) '@';
      ArrayUtils.swap(floatArray0, (-2409), 1, 2241);
      assertArrayEquals(new float[] {66.0F, 64.0F, 66.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)636;
      shortArray0[1] = (short) (-477);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-477), 3180);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)636, (short) (-477)}, shortArray1);
      assertArrayEquals(new short[] {(short)636, (short) (-477)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 66.0F;
      objectArray0[1] = (Object) 'J';
      objectArray0[2] = (Object) ')';
      objectArray0[3] = (Object) (short) (-477);
      objectArray0[4] = (Object) 41L;
      objectArray0[5] = (Object) ')';
      objectArray0[6] = (Object) 64.0F;
      ArrayUtils.reverse(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 105);
      Byte byte0 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-105));
      assertEquals((byte) (-105), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.insert((int)  (-105), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short) (-1);
      short[] shortArray2 = ArrayUtils.addAll((short[]) null, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-1)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      short[] shortArray0 = new short[6];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short)3562);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)467;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)467, 1736);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)467}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, '7', 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-2146773735), 2096);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = (Short) (short)467;
      shortArray1[1] = (Short) (short)467;
      shortArray1[2] = (Short) (short)467;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) (-112));
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)467, (short)467, (short)467}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray1.length);
      assertEquals(3, shortArray2.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, (-1818));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1818)}, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)307);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short)307);
      assertArrayEquals(new short[] {(short)307}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1207));
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      long[] longArray0 = null;
      ArrayUtils.shift((long[]) null, (-1207), 46, 34);
      short[] shortArray0 = null;
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)1190);
      assertNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences((double[]) null, (double) (short)1187);
      assertNull(doubleArray1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 46;
      floatArray0[1] = (float) 34;
      floatArray0[2] = (float) 46;
      floatArray0[3] = (float) (-1207);
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class2;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[0] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      ArrayUtils.swap(floatArray0, (-573), (int) (byte)0, 0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, integerArray0.length);
      
      Character[] characterArray0 = new Character[6];
      char char0 = 'q';
      Character character0 = Character.valueOf('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = Character.valueOf(char0);
      assertEquals('q', (char)character1);
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      Character character2 = Character.valueOf('q');
      assertEquals('q', (char)character2);
      assertNotNull(character2);
      
      characterArray0[2] = character2;
      Character character3 = new Character(char0);
      assertEquals('q', (char)character3);
      assertTrue(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character1));
      assertTrue(character3.equals((Object)character2));
      assertTrue(character3.equals((Object)char0));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      Character character4 = Character.valueOf('+');
      assertEquals('+', (char)character4);
      assertFalse(character4.equals((Object)char0));
      assertFalse(character4.equals((Object)character3));
      assertFalse(character4.equals((Object)character0));
      assertFalse(character4.equals((Object)character2));
      assertFalse(character4.equals((Object)character1));
      assertNotNull(character4);
      
      characterArray0[4] = character4;
      Character character5 = new Character('+');
      assertEquals('+', (char)character5);
      assertFalse(character5.equals((Object)character2));
      assertTrue(character5.equals((Object)character4));
      assertFalse(character5.equals((Object)character1));
      assertFalse(character5.equals((Object)character0));
      assertFalse(character5.equals((Object)char0));
      assertFalse(character5.equals((Object)character3));
      assertNotNull(character5);
      
      characterArray0[5] = character5;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(6, characterArray0.length);
      assertEquals(6, characterArray1.length);
      
      ArrayUtils.swap(intArray0, (int) char0, (-456), 2303);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-249);
      objectArray0[1] = (Object) (short) (-249);
      ArrayUtils.shift(objectArray0, (int) (short)0, 717, (-3118));
      assertEquals(2, objectArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)115;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-1);
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)115;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)115}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-40), (byte)0, (byte)56, (byte)115, (byte)0, (byte) (-35), (byte) (-1)}, byteArray0);
      assertEquals(2, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.shift(shortArray0, (int) (short)0, (int) (byte) (-40), (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3465.708883527795;
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3465.708883527795, 41.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-21));
      assertEquals((byte) (-21), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = ArrayUtils.get(byteArray0, (int) 124, byte2);
      assertEquals((byte) (-21), (byte)byte3);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      assertEquals(1, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) (byte) (-1);
      intArray0[3] = (-245);
      intArray0[4] = (int) (short)124;
      intArray0[5] = (int) (short)124;
      intArray0[6] = (int) (byte) (-21);
      intArray0[7] = (int) byte0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {41, 41, (-1), (-245), 124, 124, (-21), (-1)}, intArray0);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      ArrayUtils.reverse((Object[]) byteArray1, 8, (-455));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-142);
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-142);
      floatArray0[1] = (float) (short) (-142);
      float[] floatArray1 = ArrayUtils.addAll((float[]) null, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-142.0F), (-142.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-142.0F), (-142.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      Boolean[] booleanArray2 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      
      Byte byte0 = new Byte((byte)33);
      assertEquals((byte)33, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      ArrayUtils.swap((char[]) null, 2435, 2435, 2435);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-436);
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (long) (-436);
      longArray0[3] = (long) 0;
      ArrayUtils.swap(longArray0, (int) (byte)0, (-436), 2);
      assertArrayEquals(new long[] {(-436L), 0L, (-436L), 0L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)66);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte)66}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      charArray0[3] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', 'N', '(', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (-4591.569371618195);
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (double) '(';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-4591.569371618195), 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (Double) (-4591.569371618195);
      doubleArray2[1] = (Double) 40.0;
      MockRandom mockRandom0 = new MockRandom(70L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs(2371L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-70));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-15));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-15), (int) (byte) (-15));
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 983.2302116640191);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-49));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1), (-80));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 2146806641);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (-1.0F);
      objectArray0[1] = (Object) 0.0F;
      Byte byte0 = new Byte((byte) (-92));
      assertEquals((byte) (-92), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-92), object0);
      assertNotNull(object0);
      
      int int3 = ArrayUtils.lastIndexOf(objectArray0, object0, (int) (byte) (-92));
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(2, objectArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte) (-92), 0, (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = 'l';
      charArray0[2] = 'm';
      charArray0[3] = '~';
      charArray0[4] = 'L';
      charArray0[5] = '-';
      charArray0[6] = 'J';
      charArray0[7] = 'j';
      ArrayUtils.swap(charArray0, (-1), 3335, (-1450));
      assertArrayEquals(new char[] {'.', 'l', 'm', '~', 'L', '-', 'J', 'j'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      Byte byte0 = new Byte((byte)103);
      assertEquals((byte)103, (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSorted((Byte[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)103;
      intArray0[1] = (int) (byte)103;
      intArray0[2] = (int) (byte)103;
      intArray0[3] = (int) (byte)103;
      intArray0[4] = (int) (byte)103;
      intArray0[5] = (int) (byte)103;
      intArray0[6] = (int) (byte)103;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {103, 103, 103, 103, 103, 103, 103}, intArray0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)103;
      shortArray0[1] = (short) (byte)103;
      shortArray0[2] = (short) (byte)103;
      shortArray0[3] = (short) (byte)103;
      shortArray0[4] = (short) (byte)103;
      shortArray0[5] = (short) (byte)103;
      shortArray0[6] = (short) (byte)103;
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, (-2), (short)568);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3161L);
      assertEquals(3161L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3161L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-100), (byte)0, (byte)0, (byte)93, (byte)93, (byte)0, (byte) (-125), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray2);
      
      int int0 = ArrayUtils.lastIndexOf(longArray1, (long) (byte) (-100));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {3161L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('\"');
      assertEquals('\"', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) '~';
      doubleArray0[2] = (double) '~';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (double) '~';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 126.0, 126.0, (-1.0), 0.1, 126.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 126.0, 126.0, (-1.0), 0.1, 126.0}, doubleArray0, 0.01);
      assertNotNull(stringArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, stringArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)105, (int) (byte)105);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)105, (byte)0, (byte)105, (byte)105, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)105, (byte)0, (byte)105, (byte)105, (byte)0}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      ArrayUtils.swap((Object[]) null, (-1), 1596, 0);
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3161L);
      assertEquals(3161L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)0;
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, longArray0.length);
      
      long[] longArray1 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray1);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character character0 = new Character('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('\"');
      assertEquals('\"', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'o';
      charArray1[1] = 'r';
      charArray1[2] = 'o';
      charArray1[3] = '\"';
      charArray1[4] = 'o';
      ArrayUtils.reverse(charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'o', '\"', 'o', 'r', 'o'}, charArray1);
      assertEquals(5, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      Integer integer0 = new Integer((-366));
      assertEquals((-366), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, 2962);
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short)312;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-117), (short) (-117), (short)312, (short) (-117), (short) (-117)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
      
      Byte byte3 = new Byte(byte0);
      assertEquals((byte) (-117), (byte)byte3);
      assertTrue(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      int int0 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) byte4, (-3274));
      assertEquals((-1), int0);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertArrayEquals(new short[] {(short) (-117), (short) (-117), (short)312, (short) (-117), (short) (-117)}, shortArray0);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((double[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)1;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (short)1;
      ArrayUtils.swap(intArray0, 1, (-1125), (-326));
      assertArrayEquals(new int[] {1, 1, 1}, intArray0);
      assertEquals(3, intArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)63, (byte)48, (byte)2, (byte) (-128), (byte)48, (byte)48, (byte)48}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      shortArray0[2] = (short)1751;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1503;
      shortArray0[5] = (short)1356;
      shortArray0[6] = (short)0;
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray0);
      assertArrayEquals(new char[] {'f'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2325.9);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      Long long0 = new Long(499L);
      assertEquals(499L, (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 499L;
      doubleArray1[1] = (double) 499L;
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {499.0, 499.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(10, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      short[] shortArray0 = new short[0];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-3074));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1635;
      intArray0[2] = (int) (short)0;
      intArray0[3] = 896;
      intArray0[4] = (int) (short)1635;
      intArray0[5] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 0, (-2305));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 1635, 0, 896, 1635, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      short[] shortArray2 = new short[2];
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      
      shortArray2[0] = (short)1635;
      shortArray2[1] = (short)0;
      boolean boolean1 = ArrayUtils.isEmpty(shortArray2);
      assertFalse(boolean1);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1635, (short)0}, shortArray2);
      assertEquals(2, shortArray2.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'F';
      charArray0[1] = '}';
      charArray0[2] = '}';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '}');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'}', 'F', '}', '}'}, charArray1);
      assertArrayEquals(new char[] {'F', '}', '}'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '';
      charArray0[2] = '`';
      charArray0[3] = '9';
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.insert((-2146937629), charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\'', '', '`', '9'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {'\'', '', '`', '9'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(4, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(4, charArray2.length);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)124;
      shortArray0[1] = (short)661;
      shortArray0[2] = (short)1964;
      shortArray0[3] = (short)124;
      shortArray0[4] = (short)1964;
      shortArray0[5] = (short)1964;
      shortArray0[6] = (short)124;
      shortArray0[7] = (short)1964;
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)124, (short)661, (short)1964, (short)124, (short)1964, (short)1964, (short)124, (short)1964}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)2;
      floatArray0[1] = (float) (byte)2;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (float) (byte)2;
      floatArray0[5] = (float) (short) (-157);
      floatArray0[6] = (float) (byte)2;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, (-1.0F), 2.0F, (-157.0F), 2.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 0.0F, (-1.0F), 2.0F, (-157.0F), 2.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Long[] longArray0 = new Long[3];
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      Long long1 = new Long((long) longArray0[0]);
      assertEquals(0L, (long)long1);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(3, longArray0.length);
      
      longArray0[1] = long1;
      Long long2 = new Long(3429L);
      assertEquals(3429L, (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray0[2] = long2;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-4818L));
      assertArrayEquals(new long[] {0L, 0L, 3429L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)2;
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertArrayEquals(new int[] {0, 2, 0, 2}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, (int) (byte)2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-7);
      Byte byte0 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)89);
      assertEquals((byte)89, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (int) (byte)93;
      intArray0[2] = (int) (byte)93;
      intArray0[3] = (int) (byte)10;
      intArray0[4] = (-497);
      intArray0[5] = (int) (byte) (-1);
      intArray0[6] = 1117;
      intArray0[7] = (-2940);
      intArray0[8] = (int) (byte) (-7);
      ArrayUtils.reverse(intArray0, (int) (byte) (-17), 1803);
      assertArrayEquals(new int[] {(-7), (-2940), 1117, (-1), (-497), 10, 93, 93, 10}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-521.9F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1077.5872F;
      floatArray0[4] = (-2730.2F);
      floatArray0[5] = 741.5375F;
      char[] charArray0 = new char[4];
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      ArrayUtils.shift(charArray0, 1, (-1), 652);
      assertArrayEquals(new char[] {'\u0000', '<', '<', '<'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.getLength(byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) '&';
      Character character0 = Character.valueOf('&');
      assertEquals('&', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('!');
      assertEquals('!', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byte[] byteArray2 = ArrayUtils.removeElements(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)61}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)61}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(1, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(byteArray1);
      assertTrue(boolean0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)61;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (int) (short)2, (short)61);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)61, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)61, (short)2, (short)61}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (int) (short)2, (int) (byte)61);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)61, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)61, (short)2, (short)61}, shortArray1);
      assertArrayEquals(new short[] {(short)61}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
      assertEquals(1, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '4';
      charArray0[2] = 'M';
      ArrayUtils.shift(charArray0, (-1), 303, 8);
      assertArrayEquals(new char[] {'4', 'M', '>'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.swap((byte[]) null, 19, 19, 19);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) '>';
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);
      assertSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 'M';
      floatArray0[2] = (float) 19;
      floatArray0[3] = (float) 'M';
      floatArray0[4] = 5120.0522F;
      floatArray0[5] = (float) 303;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 19.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {19.0F, (-1.0F), 77.0F, 19.0F, 77.0F, 5120.0522F, 303.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 77.0F, 19.0F, 77.0F, 5120.0522F, 303.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 19;
      intArray0[1] = (int) '4';
      intArray0[2] = (int) '>';
      intArray0[3] = (int) 'M';
      intArray0[4] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, 8);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {19, 52, 62, 77, 77}, intArray0);
      assertEquals(5, intArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.insert((-11), booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
      assertEquals((-1), int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1308));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int1 = ArrayUtils.hashCode((Object) null);
      assertFalse(int1 == int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)3260;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-168);
      shortArray0[4] = (short)352;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-2535));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3260, (short)1, (short)1, (short) (-168), (short)352}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2535), (short)3260, (short)1, (short)1, (short) (-168), (short)352}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      Short[] shortArray2 = ArrayUtils.toObject(shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3260, (short)1, (short)1, (short) (-168), (short)352}, shortArray0);
      assertArrayEquals(new short[] {(short) (-2535), (short)3260, (short)1, (short)1, (short) (-168), (short)352}, shortArray1);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      
      Byte[] byteArray0 = new Byte[4];
      byte byte0 = (byte)8;
      Byte byte1 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)8, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(byteArray1);
      assertEquals(0, intArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.insert((-2084), booleanArray1, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 118);
      assertNull(intArray0);
      
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      boolean boolean0 = ArrayUtils.isArrayIndexValid(byteArray0, 64);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'v';
      ArrayUtils.swap(charArray0, (int) (short) (-249), (int) (byte) (-1), (-1474));
      assertArrayEquals(new char[] {'|', 'v'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)16;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)16, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)1064);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      int int2 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<'}, charArray0);
      assertEquals(5, charArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (short)1064;
      intArray0[3] = 1;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 0;
      intArray0[6] = (int) '<';
      int int3 = ArrayUtils.indexOf(intArray0, (int) (short)200);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertArrayEquals(new int[] {(-1), 0, 1064, 1, 0, 0, 60}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(30L);
      assertEquals(30L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 110;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)1;
      floatArray0[1] = (-3464.7F);
      floatArray0[2] = (float) 110L;
      floatArray0[3] = (float) 110;
      floatArray0[4] = (-2268.4282F);
      floatArray0[5] = (float) 110L;
      floatArray0[6] = (float) 110L;
      floatArray0[7] = (float) 110L;
      floatArray0[8] = (float) (byte)1;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte)1);
      assertEquals(8, int0);
      assertArrayEquals(new float[] {1.0F, (-3464.7F), 110.0F, 110.0F, (-2268.4282F), 110.0F, 110.0F, 110.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-53);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-81), 1);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-53), (byte)71, (byte)71, (byte) (-53)}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(64);
      assertEquals(64, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((byte) (-81));
      assertEquals((-81), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-1459));
      assertArrayEquals(new int[] {64, (-81)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, integerArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)4);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)4, (byte) (-7), (byte) (-7), (byte) (-53), (byte)71, (byte)71, (byte) (-53)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-7), (byte) (-7), (byte) (-53), (byte)71, (byte)71, (byte) (-53)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '@');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)69;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1495.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-117), 21.05384914113625);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {69.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'G');
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-176L);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      ArrayUtils.swap((char[]) null, 85, 85, 85);
      char[] charArray0 = ArrayUtils.subarray((char[]) null, 435, 4548);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 133;
      doubleArray0[0] = 0.7;
      doubleArray0[3] = (-3785.936);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int int0 = 88;
      int int1 = 1279;
      ArrayUtils.swap(booleanArray0, (-510), 88, 1279);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(booleanArray0, false, 133);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int int3 = Integer.MAX_VALUE;
      char[] charArray0 = ArrayUtils.subarray((char[]) null, Integer.MAX_VALUE, 1279);
      assertNull(charArray0);
      
      int int4 = ArrayUtils.indexOf(booleanArray0, true, 512);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 1279;
      intArray0[2] = 1279;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[1] = (double) '7';
      doubleArray0[4] = (double) '7';
      doubleArray0[5] = (double) (-14);
      doubleArray0[6] = (double) (-14);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 0.0, 55.0, (-14.0), (-14.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 55.0, (-14.0), (-14.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 777.0, 21.05384914113625);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 0.0, 55.0, (-14.0), (-14.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 55.0, (-14.0), (-14.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '7');
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'7', '7', '7'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-253);
      shortArray0[2] = (short)0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)95;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)77);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-40), (byte) (-1), (byte) (-1), (byte)95}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift(byteArray0, (int) (byte)77);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)95, (byte) (-1), (byte) (-40), (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)77;
      floatArray0[1] = (float) (short) (-253);
      floatArray0[2] = (float) (byte) (-40);
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short) (-253);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (long) (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '&';
      charArray1[1] = '&';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {'&', '&'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      Character character0 = new Character('q');
      assertEquals('q', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('');
      assertEquals('', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character[] characterArray0 = new Character[5];
      Character character2 = new Character('&');
      assertEquals('&', (char)character2);
      assertFalse(character2.equals((Object)character1));
      assertFalse(character2.equals((Object)character0));
      assertNotNull(character2);
      
      characterArray0[0] = character2;
      characterArray0[1] = (Character) '&';
      characterArray0[2] = (Character) '&';
      Character character3 = Character.valueOf('&');
      assertEquals('&', (char)character3);
      assertFalse(character3.equals((Object)character0));
      assertTrue(character3.equals((Object)character2));
      assertFalse(character3.equals((Object)character1));
      assertNotNull(character3);
      
      characterArray0[3] = character3;
      characterArray0[4] = (Character) '&';
      char[] charArray2 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'&', '&', '&', '&', '&'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray2.length);
      
      int int2 = ArrayUtils.indexOf(charArray2, (char) characterArray0[1], (int) characterArray0[4]);
      assertEquals((-1), int2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'&', '&', '&', '&', '&'}, charArray2);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray2.length);
      
      int[] intArray0 = ArrayUtils.clone((int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.shift(intArray0, 203);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-83);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)117, (byte)0, (byte) (-80), (byte) (-83)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-83);
      shortArray0[1] = (short) (byte) (-80);
      shortArray0[2] = (short) (byte) (-80);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (byte) (-83);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (byte)117;
      ArrayUtils.shift(shortArray0, (-584), (-2115431652), (-3313));
      assertArrayEquals(new short[] {(short) (-83), (short) (-80), (short) (-80), (short)0, (short) (-83), (short)0, (short)117}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      short[] shortArray1 = new short[2];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short)0;
      shortArray1[1] = (short) (byte) (-80);
      ArrayUtils.reverse(shortArray1, (-1), Integer.MAX_VALUE);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-80), (short)0}, shortArray1);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      ArrayUtils.shift(booleanArray0, (-98), (-98), (int) integerArray0[0]);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)66);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (-5.0));
      assertEquals((-1), int0);
      
      ArrayUtils.reverse((short[]) null, (int) integerArray0[0], (int) (byte)66);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-3155);
      floatArray0[1] = (float) (short) (-3155);
      ArrayUtils.swap(floatArray0, 2, 0);
      assertArrayEquals(new float[] {(-3155.0F), (-3155.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1117;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3155.0F);
      doubleArray0[3] = (double) (-3155.0F);
      doubleArray0[4] = (double) (-1);
      floatArray0[0] = (-3155.0F);
      doubleArray0[6] = 1764.15194769803;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1764.15194769803, (-593), (double) (short)1117);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1117.0, 0.0, (-3155.0), (-3155.0), (-1.0), 0.0, 1764.15194769803}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-3155.0F), (-3155.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3155.0F), (-3155.0F), (-3155.0F), (-3155.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      ArrayUtils.shift(intArray0, (-1194));
      assertArrayEquals(new int[] {0, (-1194), (-1194)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-1194);
      floatArray0[2] = (float) (-1194);
      floatArray0[3] = 2854.2974F;
      floatArray0[4] = (float) (-1194);
      long[] longArray1 = new long[9];
      longArray1[0] = (long) (-1194);
      longArray1[1] = (long) (-1194);
      longArray1[2] = (long) 1702;
      longArray1[3] = (long) 1702;
      longArray1[4] = (-1826L);
      longArray1[5] = (long) (-2758);
      longArray1[6] = (long) (-1194);
      longArray1[7] = (long) (-1194);
      longArray1[8] = (long) (-1194);
      ArrayUtils.shift(longArray1, (-1194), (-4711), (-2758));
      assertArrayEquals(new long[] {(-1194L), (-1194L), 1702L, 1702L, (-1826L), (-2758L), (-1194L), (-1194L), (-1194L)}, longArray1);
      assertEquals(9, longArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (-656);
      doubleArray0[2] = (double) (-1194);
      ArrayUtils.swap(doubleArray0, (-2758), (-656));
      assertArrayEquals(new double[] {Double.NaN, (-656.0), (-1194.0), 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null, "Q&S^r");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-710.268841099);
      doubleArray0[4] = 3465.708883527795;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {1.5, 1.5, (-1.0), (-710.268841099), 3465.708883527795, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.EMPTY_STRING_ARRAY;
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 44.0F;
      floatArray0[1] = 44.0F;
      floatArray0[2] = 44.0F;
      floatArray0[2] = 44.0F;
      floatArray0[4] = 44.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 44.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {44.0F, 44.0F, 44.0F, 0.0F, 44.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) null, "\n");
      assertNull(stringArray1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = '@';
      charArray0[2] = 'v';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      charArray0[5] = 'e';
      ArrayUtils.shift(charArray0, 82, (-3431), 82);
      assertArrayEquals(new char[] {'K', '@', 'v', '9', 'R', 'e'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 230;
      intArray0[2] = (-2343);
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {(-2343), 230, 1}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte[] byteArray0 = new Byte[6];
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-124);
      Byte byte2 = new Byte((byte) (-124));
      assertEquals((byte) (-124), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte)67;
      Byte byte4 = new Byte((byte)67);
      assertEquals((byte)67, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte)67, (byte)byte5);
      assertFalse(byte3 == byte1);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      byte byte7 = (byte)52;
      Byte byte8 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertNotNull(byte8);
      
      byteArray0[5] = byte8;
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(12, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2343), 230, 1}, intArray0);
      assertArrayEquals(new int[] {(-2343), 230, 1}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) byte1;
      longArray0[1] = (long) byte7;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) 1;
      longArray0[4] = (long) (byte)86;
      longArray0[5] = (long) 1;
      longArray0[6] = (long) 1;
      longArray0[7] = (long) byte3;
      longArray0[8] = (long) (-2343);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (long) 1);
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(7, bitSet0.length());
      assertEquals("{2, 3, 5, 6}", bitSet0.toString());
      assertArrayEquals(new long[] {(-124L), 52L, 1L, 1L, 86L, 1L, 1L, 67L, (-2343L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-5);
      intArray0[2] = (-5);
      intArray0[3] = 0;
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (-593), 0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 805.67108938;
      doubleArray0[4] = (double) (-5);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-5);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2323, 1.5);
      assertEquals(6, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 805.67108938, 0.0, (-5.0), 0.0, 0.0, (-5.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) floatArray0);
      assertNotNull(stringArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-253);
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-120);
      Byte byte3 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
      
      ArrayUtils.hashCode((Object) byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte4));
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte) (-120);
      intArray0[1] = (int) (byte)114;
      intArray0[2] = (int) (short) (-253);
      intArray0[4] = (int) (byte) (-120);
      intArray0[5] = (int) byte2;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)0);
      assertEquals("{3, 6}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(7, bitSet0.length());
      assertArrayEquals(new int[] {(-120), 114, (-253), 0, (-120), (-120), 0}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(7, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short) (-253), (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) '7';
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (-176L);
      floatArray0[6] = (float) 'R';
      floatArray0[7] = (float) 2;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) (-1601);
      doubleArray0[2] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 27.0, 2, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-1601.0), 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-249), 13, (-2146164829));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-1642L));
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[1];
      double double0 = mockRandom0.nextDouble();
      assertEquals(0.0, double0, 0.01);
      
      byteArray0[0] = (byte) (-48);
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte) (-48)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (byte) (-48), 755, 755);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 3210);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2001.6596747957112);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)14;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-57));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)113, (byte)14}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-10), 3210);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)113, (byte)14}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 3210, (int) (byte) (-10));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (int) (byte)113;
      intArray0[2] = (-2146105589);
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte) (-10);
      intArray0[5] = (int) (byte)113;
      intArray0[6] = 3210;
      intArray0[7] = (-1);
      int int3 = ArrayUtils.lastIndexOf(intArray0, (int) (byte) (-10), 3210);
      assertEquals(4, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertArrayEquals(new int[] {(-1), 113, (-2146105589), (-1), (-10), 113, 3210, (-1)}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte) (-49);
      doubleArray0[1] = (double) (byte)120;
      doubleArray0[2] = (double) (byte) (-70);
      doubleArray0[3] = (double) (byte) (-52);
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte) (-52);
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) (byte)120;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-49.0), 120.0, (-70.0), (-52.0), 0.0, (-52.0), 0.0, 120.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-49);
      intArray0[1] = (int) (byte)120;
      intArray0[2] = (int) (byte) (-52);
      intArray0[3] = (int) (byte) (-49);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-49), 120, (-52), (-49)}, intArray1);
      assertArrayEquals(new int[] {(-49), 120, (-52), (-49)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-52.0), (-1609.33946229769));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {(-49.0), 120.0, (-70.0), (-52.0), 0.0, (-52.0), 0.0, 120.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(intArray0, 395);
      assertFalse(boolean0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-49), 120, (-52), (-49)}, intArray0);
      assertEquals(4, intArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) (-70.0);
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-70.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      boolean boolean2 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean2);
      assertSame(intArray0, intArray1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-49), 120, (-52), (-49)}, intArray0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray3 = ArrayUtils.clone(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-70.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-70.0)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-176L);
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);
      assertEquals(5, int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'W', 8);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-13444);
      shortArray0[2] = (short)15952;
      shortArray0[3] = (short) (-3646);
      shortArray0[4] = (short)1;
      shortArray0[5] = (short) (-236);
      shortArray0[6] = (short)57;
      shortArray0[7] = (short) (-1);
      shortArray0[8] = (short)2410;
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short) (-13444), (short)15952, (short) (-3646), (short)1, (short) (-236), (short)57, (short) (-1), (short)2410}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(18, shortArray1.length);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)32, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)32);
      assertNull(longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)32, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-1);
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      byteArray0[4] = byte2;
      Byte byte5 = ArrayUtils.get(byteArray0, (int) byte0, byte1);
      assertEquals((byte)32, (byte)byte5);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte0 == byte3);
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertNotNull(byte5);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) byte5, (int) byte0);
      assertEquals((-1), int0);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte0 == byte3);
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(5, byteArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3742.1F);
      floatArray0[2] = (float) (byte)32;
      floatArray0[3] = (float) byte0;
      floatArray0[4] = (float) byte3;
      int int1 = ArrayUtils.indexOf(floatArray0, (-1.0F), (int) byte3);
      assertEquals(4, int1);
      assertFalse(byte3 == byte0);
      assertFalse(int1 == int0);
      assertArrayEquals(new float[] {0.0F, (-3742.1F), 32.0F, 32.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      ArrayUtils.reverse(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-3155);
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, (-3155), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)1117;
      floatArray0[1] = (float) (short) (-3155);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) (short)0;
      floatArray1[3] = (float) 3292;
      float[] floatArray2 = ArrayUtils.insert(0, floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {2.0F, 0.0F, 0.0F, 3292.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {2.0F, 0.0F, 0.0F, 3292.0F, 1117.0F, (-3155.0F)}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {1117.0F, (-3155.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(4, floatArray1.length);
      assertEquals(6, floatArray2.length);
      assertEquals(2, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((int) (short)0, intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-3155), 0, 0, (-3155), 0}, intArray1);
      assertArrayEquals(new int[] {0, (-3155), 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray1.length);
      assertEquals(3, intArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray1, (short) (-3155), 1230);
      assertEquals(9, int0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, (int) (short) (-1));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      long[] longArray0 = new long[8];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[0];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(22, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'N', '(', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (-4591.569371618195);
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (double) '(';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-4591.569371618195), 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (Double) (-4591.569371618195);
      doubleArray2[1] = (Double) 40.0;
      doubleArray2[2] = (Double) 40.0;
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (-3090), (-838));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-3090));
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean boolean1 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = (-1);
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'G');
      assertNull(charArray0);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[2];
      longArray0[0] = long0;
      longArray0[1] = long0;
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Byte[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-32));
      assertEquals((byte) (-32), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1, "fW-kv+&V*c-][=N$T");
      assertEquals("-32", string0);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (byte) (-110);
      longArray0[2] = (long) (byte) (-32);
      longArray0[3] = (long) (byte) (-32);
      longArray0[4] = (long) (-436);
      longArray0[5] = (long) 0;
      ArrayUtils.swap(longArray0, 14, 428, (int) (byte) (-110));
      assertArrayEquals(new long[] {0L, (-110L), (-32L), (-32L), (-436L), 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3307);
      intArray0[1] = (int) '&';
      intArray0[2] = 0;
      intArray0[3] = (int) (byte) (-32);
      intArray0[4] = (-436);
      intArray0[5] = (-239);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 38, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-1L));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = '=';
      ArrayUtils.shift(charArray0, (int) (short)1, (int) '>', (-1));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '=';
      floatArray0[1] = (float) '>';
      floatArray0[2] = (float) '>';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {61.0F, 62.0F, 62.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      assertArrayEquals(new char[] {'>', '=', 'I', '>', '=', 'I'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {61.0F, 62.0F, 62.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = (int) '=';
      floatArray0[0] = (float) '=';
      intArray0[3] = (int) '=';
      intArray0[4] = (int) '=';
      int int0 = ArrayUtils.indexOf(intArray0, 61, 0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {48, 61, 0, 61, 61}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
      
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (long) 48);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.shift((byte[]) null, 1);
      char[] charArray0 = new char[8];
      charArray0[0] = 'A';
      charArray0[2] = '9';
      charArray0[3] = 'e';
      charArray0[4] = 'J';
      charArray0[5] = 'i';
      charArray0[6] = '.';
      charArray0[7] = 'D';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'A', '\u0000', '9', 'e', 'J', 'i', '.', 'D'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-108);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, (short[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-108)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short)4234);
      assertEquals((short)4234, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray1 = new Short[4];
      shortArray1[0] = short0;
      shortArray1[1] = (Short) (short) (-108);
      shortArray1[2] = short0;
      shortArray1[3] = short0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short) (-108), (short)2, (short)2}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray2.length);
      
      short[] shortArray3 = ArrayUtils.toPrimitive(shortArray1, (short)902);
      assertNotSame(shortArray3, shortArray0);
      assertNotSame(shortArray3, shortArray2);
      assertFalse(shortArray3.equals((Object)shortArray0));
      assertFalse(shortArray3.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)2, (short) (-108), (short)2, (short)2}, shortArray3);
      assertNotNull(shortArray3);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      int[] intArray0 = new int[2];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2385;
      doubleArray0[1] = (double) 2385;
      doubleArray0[2] = (double) 2385;
      doubleArray0[3] = (double) 2385;
      doubleArray0[4] = (double) 2385;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2385.0, 2385.0, 2385.0, 2385.0, 2385.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2385.0, 2385.0, 2385.0, 2385.0, 2385.0, 2385.0, 2385.0, 2385.0, 2385.0, 2385.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)17;
      shortArray0[1] = (short) (-1976);
      shortArray0[2] = (short)3;
      shortArray0[3] = (short) (-66);
      shortArray0[4] = (short)512;
      shortArray0[5] = (short)11;
      shortArray0[6] = (short) (-1246);
      shortArray0[7] = (short) (-510);
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-510);
      shortArray1[1] = (short)1018;
      shortArray1[2] = (short) (-1246);
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short) (-510), (short)1018, (short) (-1246)}, shortArray1);
      assertArrayEquals(new short[] {(short)17, (short) (-1976), (short)3, (short) (-66), (short)512, (short)11, (short) (-1246), (short) (-510)}, shortArray0);
      assertEquals(3, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      ArrayUtils.shift((double[]) null, (int) (byte) (-52), (int) (byte) (-49), 9);
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-49);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-49)}, intArray0);
      assertArrayEquals(new int[] {(-49)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int int0 = ArrayUtils.indexOf((double[]) null, 983.2302116640191, 1, 1775.5712);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) (byte) (-52);
      longArray0[2] = (-1236L);
      longArray0[3] = (long) 9;
      longArray0[4] = (long) (-49);
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, Integer.MAX_VALUE, (-1469L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      ArrayUtils.shift((double[]) null, (-1), (-1), 1993);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'y', 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      ArrayUtils.swap(charArray0, 191, (int) (short) (-3155), (-253));
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shift(booleanArray0, 2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) (short)1117;
      Object object0 = ArrayUtils.toPrimitive(objectArray0[0]);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) 'H';
      objectArray0[4] = (Object) false;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[3]);
      assertEquals('H', object1);
      assertNotNull(object1);
      assertEquals(5, objectArray0.length);
      
      int int2 = ArrayUtils.lastIndexOf(objectArray0, object1, 912);
      assertEquals(3, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, objectArray0.length);
      
      int int3 = ArrayUtils.lastIndexOf(shortArray0, (short)2, (int) (short)1117);
      assertEquals(2, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(11, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0, (-1413));
      assertEquals((-1), int0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-1), 2224);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 2224, 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-3155);
      intArray0[1] = (-4432);
      intArray0[2] = (int) (short)1117;
      intArray0[3] = 1495;
      intArray0[4] = 0;
      intArray0[5] = 2454;
      intArray0[6] = 520;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4432), 2454);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3155), (-4432), 1117, 1495, 0, 2454, 520}, intArray1);
      assertArrayEquals(new int[] {(-3155), (-4432), 1117, 1495, 0, 2454, 520}, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      Integer[] integerArray0 = new Integer[0];
      int[] intArray2 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray2.length);
      
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1495;
      doubleArray0[1] = (double) (short) (-3155);
      doubleArray0[2] = 1.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 1495, 1.0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new double[] {1495.0, (-3155.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      Object object1 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new double[] {1495.0, (-3155.0), 1.0}, doubleArray0, 0.01);
      assertNull(object1);
      assertEquals(3, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) null, (int) (short) (-3155));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Integer integer0 = new Integer((short)1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, 2122);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte byte0 = new Byte((byte)56);
      assertEquals((byte)56, (byte)byte0);
      assertNotNull(byte0);
      
      int int1 = ArrayUtils.indexOf((Object[]) shortArray1, (Object) byte0, 1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)4483);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1017229096, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 'J';
      ArrayUtils.swap(objectArray0, 13, 1342, (-693));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1503, 13);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1117);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1117}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1503, (-693), (-693));
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, 3348, 3348);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1117}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      assertEquals(0, shortArray2.length);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float((double) (-693));
      assertEquals((-693.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-1251.11067596));
      assertEquals((-1251.1107F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((double) (-693));
      assertEquals((-693.0F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((double) (short)1117);
      assertEquals(1117.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      Float float4 = new Float((float) floatArray0[1]);
      assertEquals((-1251.1107F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      assertEquals(6, floatArray0.length);
      
      floatArray0[4] = float4;
      Float float5 = new Float((float) (short)1503);
      assertEquals(1503.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotNull(float5);
      
      floatArray0[5] = float5;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray1.length);
      assertEquals(6, floatArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ZAW?<$M&";
      stringArray0[1] = "java.util.AbstractMap$SimpleImmutableEntry";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "Don't clear/set the same entry more than once.";
      stringArray0[4] = "java.lang.Object";
      stringArray0[5] = "java.util.AbstractMap$SimpleImmutableEntry";
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) '~';
      intArray0[1] = 1;
      intArray0[2] = 12;
      intArray0[3] = (int) '~';
      intArray0[4] = (-1);
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) '~';
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 191);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {126, 1, 12, 126, (-1), 0, 126}, intArray1);
      assertArrayEquals(new int[] {126, 1, 12, 126, (-1), 0, 126}, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      ArrayUtils.swap(doubleArray0, 0, 1, 10);
      assertArrayEquals(new double[] {0.1, 0.0, 0.0, 126.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      Byte byte0 = ArrayUtils.get((Byte[]) null, (-3032));
      assertNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, 'V');
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Object object0 = ArrayUtils.removeAll((Object) null, bitSet0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) null, 1737);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)127);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)127;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 127);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {127}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-96));
      assertArrayEquals(new byte[] {(byte) (-96)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ArrayUtils.swap(charArray0, (-2443), (-2443), (-2443));
      assertArrayEquals(new char[] {'3'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)97;
      intArray0[1] = (-1);
      intArray0[2] = (int) (byte)3;
      intArray0[3] = (-1);
      intArray0[4] = (int) (byte)3;
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte)97;
      intArray0[7] = (int) (byte)3;
      intArray0[8] = (int) (byte)3;
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {97, (-1), 3, (-1), 3, (-1), 97, 3, 3}, intArray0);
      assertArrayEquals(new int[] {97, (-1), (-1), 3, (-1), 97, 3, 3}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isArrayIndexValid((Byte[]) null, (-61));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'W';
      charArray0[1] = '|';
      charArray0[2] = ',';
      charArray0[3] = 'U';
      charArray0[4] = 'v';
      charArray0[5] = 'I';
      charArray0[6] = 'M';
      ArrayUtils.swap(charArray0, (-1474), (-1), 54);
      assertArrayEquals(new char[] {'W', '|', ',', 'U', 'v', 'I', 'M'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = '=';
      ArrayUtils.shift(charArray0, (int) (short)1, (int) '>', (-1));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '=';
      floatArray0[1] = (float) '>';
      floatArray0[2] = (float) '>';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {61.0F, 62.0F, 62.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      assertArrayEquals(new char[] {'>', '=', 'I', '>', '=', 'I'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {61.0F, 62.0F, 62.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = (int) '=';
      floatArray0[0] = (float) '=';
      intArray0[3] = (int) '=';
      intArray0[4] = (int) '=';
      int int0 = ArrayUtils.indexOf(intArray0, 61, 0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {48, 61, 0, 61, 61}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.reverse((double[]) null, 1760, 0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1760;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1760.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1760.0F, 1760.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray0, (-1278), 826, (-1278));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 826;
      longArray0[1] = (long) 826;
      ArrayUtils.swap(longArray0, 1, 826, (-1278));
      assertArrayEquals(new long[] {826L, 826L}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.remove(booleanArray0, 1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf((int[]) null, 43);
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "fW-kv+&V*c-][=N$T");
      assertEquals("-107", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-436);
      longArray0[1] = (long) (-1194);
      longArray0[2] = (long) (byte) (-115);
      longArray0[3] = (long) 'M';
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) (-1194);
      longArray0[6] = (long) (-436);
      longArray0[7] = 2147087157L;
      ArrayUtils.swap(longArray0, (-2034458191), 43, (-1810));
      assertArrayEquals(new long[] {(-436L), (-1194L), (-115L), 77L, (-1L), (-1194L), (-436L), 2147087157L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-7);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-53);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-17), (-2242));
      assertEquals(2, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0, 1}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte) (-17), (byte) (-17), (byte)10, (byte) (-1), (byte) (-7), (byte)71, (byte) (-53)}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[3] = (float) (byte)0;
      byte[] byteArray0 = new byte[18];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(18, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray1, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(18, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      Byte[] byteArray3 = new Byte[1];
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)integerArray0[0];
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.swap(booleanArray0, (int) integerArray0[0], (-233), 2);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false, true, true}, booleanArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 2, 0);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {1841L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)11, (-2946), 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.subarray((float[]) null, 0, (-2142313461));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-1.0), (int) (byte)0, (double) 97);
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Double[] doubleArray2 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 97;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 97;
      floatArray0[7] = (float) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 403);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 403, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 0);
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(0, classArray0.length);
      assertEquals(0, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'M';
      floatArray0[1] = (float) 'M';
      floatArray0[2] = (float) 'M';
      floatArray0[3] = (float) 'M';
      floatArray0[4] = (float) 'M';
      floatArray0[5] = (float) (byte) (-126);
      floatArray0[6] = (float) 'M';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {77.0F, 77.0F, 77.0F, 77.0F, 77.0F, (-126.0F), 77.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = (int) (byte) (-126);
      intArray0[2] = (int) (byte) (-126);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-126));
      assertEquals(2, int0);
      assertArrayEquals(new int[] {77, (-126), (-126)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte)92);
      assertEquals((byte)92, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "fW-kv+&V*c-][=N$T");
      assertEquals("92", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 59;
      longArray0[1] = (long) 77;
      longArray0[2] = (long) 'M';
      longArray0[3] = (long) (byte) (-115);
      longArray0[4] = (long) 0;
      ArrayUtils.swap(longArray0, (-5385), 0, (-1246));
      assertArrayEquals(new long[] {59L, 77L, 77L, (-115L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) ')';
      intArray0[1] = (int) ')';
      intArray0[2] = (int) ')';
      intArray0[3] = (int) ')';
      intArray0[4] = (int) ')';
      intArray0[5] = (int) ')';
      intArray0[6] = 699;
      ArrayUtils.swap(intArray0, 100, 699, 100);
      assertArrayEquals(new int[] {41, 41, 41, 41, 41, 41, 699, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert(954, longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1431);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1431), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1431, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (byte) (-117);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-117L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-117L), (-117L), (-117L), (-117L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte) (-117);
      intArray0[2] = (-1125);
      intArray0[3] = (int) byte0;
      ArrayUtils.swap(intArray0, (int) byte0, (-117), 1117);
      assertArrayEquals(new int[] {(-117), (-117), (-1125), (-117)}, intArray0);
      assertEquals(4, intArray0.length);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte) (-117);
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = byte0;
      byteArray1[4] = (byte)48;
      byteArray1[5] = byte0;
      Byte[] byteArray2 = ArrayUtils.toObject(byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte) (-117), (byte) (-117), (byte) (-117), (byte)48, (byte) (-117)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2128;
      boolean boolean0 = ArrayUtils.contains(intArray0, 2128);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2128, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 10, (-953));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 10;
      integerArray0[1] = (Integer) 10;
      integerArray0[2] = (Integer) 10;
      integerArray0[3] = (Integer) 10;
      integerArray0[4] = (Integer) 10;
      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {10, 10, 10, 10, 10}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, integerArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (double) (-953);
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {10.0, (-953.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) 10, (-2131214832));
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.length());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new double[] {10.0, (-953.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.insert(122, (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, (-100));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '6';
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '6';
      charArray1[1] = '&';
      charArray1[2] = 'I';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'&', '&', '6', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'6', '&', 'I'}, charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(3, charArray1.length);
      
      ArrayUtils.swap((short[]) null, (-1473), 637);
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      int[] intArray0 = new int[2];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-52);
      Byte byte2 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-49);
      byte byte4 = (byte) (-70);
      Byte byte5 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte6);
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte7);
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      Byte byte8 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte8);
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte3));
      assertNotNull(byte8);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte6;
      Byte byte9 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte9);
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte0));
      assertNotNull(byte9);
      
      byteArray0[2] = byte6;
      byteArray0[3] = byte2;
      byteArray0[4] = byte5;
      byteArray0[5] = byte2;
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-52), (int) byte1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte4);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) byte3;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte2, (int) byte1);
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertEquals("{3, 5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte4);
      assertTrue(byte2.equals((Object)byte9));
      assertFalse(byte2.equals((Object)byte6));
      assertFalse(byte2.equals((Object)byte7));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte4));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte8));
      assertFalse(byte2.equals((Object)byte5));
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[3] = true;
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray2, (int) (byte) (-49), 9);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byte1;
      doubleArray0[1] = (double) byte4;
      doubleArray0[2] = (double) byte3;
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (double) 9, 0, (-52.0));
      assertEquals(0, bitSet1.length());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(64, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertTrue(bitSet1.isEmpty());
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {(-52.0), (-70.0), (-49.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = '`';
      charArray0[2] = 'N';
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '!';
      charArray1[1] = '`';
      charArray1[2] = 'X';
      charArray1[3] = '`';
      charArray1[4] = 'X';
      charArray1[5] = 'N';
      boolean boolean1 = ArrayUtils.isSameLength(charArray0, charArray1);
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'X', '`', 'N'}, charArray0);
      assertArrayEquals(new char[] {'!', '`', 'X', '`', 'X', 'N'}, charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((char[]) null, '\\', 1);
      assertEquals((-1), int0);
      
      Random.setNextRandom(267);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)93;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2943), (int) (byte)1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)102, (byte)9, (byte)1, (byte)75, (byte)2, (byte)58, (byte)93}, byteArray0);
      assertArrayEquals(new byte[] {(byte)102}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)102, (byte)9, (byte)1, (byte)75, (byte)2, (byte)58, (byte)93}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(14, byteArray2.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)102;
      longArray0[1] = 1675L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {102L, 1675L}, longArray1);
      assertArrayEquals(new long[] {102L, 1675L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-3478.845F));
      assertArrayEquals(new float[] {(-3478.845F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[3] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      Byte[] byteArray2 = new Byte[0];
      Class<Byte[]> class3 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class3);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)158;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)158;
      shortArray0[3] = (short)0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)0;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement((float[]) null, 1071.857F);
      assertNull(floatArray1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(shortArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1148.10536848946);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-3304.647000447186));
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 983.2302116640191);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-49));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1), (-80));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 2146806641);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int3 = ArrayUtils.indexOf(floatArray0, 20.0F);
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertArrayEquals(new float[] {20.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 110;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int int0 = ArrayUtils.indexOf((double[]) null, (-18.5), 110, 781.9684083988725);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '>';
      charArray0[2] = 'z';
      charArray0[3] = 's';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'a', (-2789));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new char[] {'s', '>', 'z', 's'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(4, charArray0.length);
      
      short[] shortArray0 = new short[0];
      int int1 = ArrayUtils.indexOf(shortArray0, (short) (-125), (int) (short) (-125));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'z';
      intArray0[2] = (int) 'a';
      intArray0[3] = (int) 's';
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1), 122, 97, 115}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1292);
      shortArray0[1] = (short) (-1292);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1292));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1292), (short) (-1292)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1292)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (short)1635, (-364));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0, (-1840), 120);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 120;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) (-1840);
      doubleArray0[3] = (-3785.936);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1840);
      floatArray0[1] = (-2181.026F);
      floatArray0[2] = (float) 120;
      floatArray0[3] = (float) (-1840);
      floatArray0[4] = (float) 120;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (float) 120;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {(-1840.0F), (-2181.026F), 120.0F, (-1840.0F), 120.0F, (-1.0F), 120.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
      assertNull(charArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1840.0F), (-2181.026F), 120.0F, (-1840.0F), 120.0F, (-1.0F), 120.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf((int[]) null, (-1840), (-2380));
      assertEquals((-1), int0);
      
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(3, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray0, (-1), (-1), Integer.MAX_VALUE);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (float) 97;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 97;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 97.0F, 0.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = new float[12];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[2] = 1.0F;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (-2446.4F));
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertNotNull(floatArray2);
      assertEquals(12, floatArray1.length);
      assertEquals(12, floatArray2.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0, (java.util.Random) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)1;
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ',');
      assertArrayEquals(new char[] {','}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)11, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((byte)5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (short)1117);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertNotNull(shortArray2);
      assertEquals(11, shortArray0.length);
      assertEquals(22, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1304);
      intArray0[2] = (-1);
      intArray0[3] = 4039;
      intArray0[4] = 9;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (-3255);
      intArray0[7] = 2;
      intArray0[8] = 2;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 1371);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1304), (-1), 4039, 9, 0, (-3255), 2, 2}, intArray0);
      assertArrayEquals(new int[] {1371, 0, (-1304), (-1), 4039, 9, 0, (-3255), 2, 2}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1304), (-1), 4039, 9, 0, (-3255), 2, 2}, intArray0);
      assertArrayEquals(new int[] {1371, 0, (-1304), (-1), 4039, 9, 0, (-3255), 2, 2}, intArray1);
      assertNotNull(integerArray0);
      assertEquals(9, intArray0.length);
      assertEquals(10, intArray1.length);
      assertEquals(10, integerArray0.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'u');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'u'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (-1304);
      floatArray0[2] = (float) 0;
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '#');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'#'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertArrayEquals(new long[] {0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 2118.3535180751);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.reverse(booleanArray0, (-1840), 0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1840);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 104;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1840.0), 0.0, 104.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1840.0), 0.0, 104.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      ArrayUtils.swap(booleanArray0, 88, (-510), 2911);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-16));
      assertEquals((byte) (-16), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)47);
      assertEquals((byte)47, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)47}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, 13, 1342, (-693));
      assertEquals(1, objectArray0.length);
      
      Byte byte0 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-79));
      assertEquals((byte) (-79), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      Byte byte4 = new Byte((byte)93);
      assertEquals((byte)93, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      boolean boolean0 = ArrayUtils.isSameType(byte4, object0);
      assertFalse(boolean0);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-1371), (long) (-1371));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1371, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.reverse(booleanArray0, (-1840), 120);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 120;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) (-1840);
      doubleArray0[3] = (-3785.936);
      doubleArray0[4] = (double) (-1840);
      doubleArray0[5] = (double) (-1840);
      doubleArray0[6] = (double) (-1840);
      doubleArray0[7] = (double) (-1840);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {120.0, 0.7, (-1840.0), (-3785.936), (-1840.0), (-1840.0), (-1840.0), (-1840.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {120.0, 0.7, (-1840.0), (-3785.936), (-1840.0), (-1840.0), (-1840.0), (-1840.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      ArrayUtils.swap(booleanArray0, (-510), 88, 1279);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      Byte[] byteArray0 = new Byte[7];
      byte byte0 = (byte)25;
      Byte byte1 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)25, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      byte byte3 = (byte) (-1);
      Byte byte4 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte3);
      assertEquals((byte) (-1), (byte)byte5);
      assertFalse(byte3 == byte0);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-75));
      assertEquals((byte) (-75), (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte)25, (byte)byte8);
      assertFalse(byte0 == byte3);
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {(byte)25, (byte)25, (byte) (-1), (byte) (-1), (byte) (-75), (byte)25, (byte)25}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      shortArray0[1] = (short)720;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3074);
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1635);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-157);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 896, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-157)}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '}';
      charArray0[2] = 'g';
      charArray0[3] = '\"';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '~');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '~', '}', 'g', '\"'}, charArray1);
      assertArrayEquals(new char[] {'~', '}', 'g', '\"'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-3074);
      longArray0[2] = (long) (short) (-157);
      longArray0[3] = (long) (short)1635;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-3074L), (-157L), 1635L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int int1 = ArrayUtils.indexOf(charArray0, 'g', 0);
      assertEquals(2, int1);
      assertNotSame(charArray0, charArray1);
      assertFalse(int1 == int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'~', '}', 'g', '\"'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.swap((int[]) null, (-1), (-1), (-1));
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (short) (-249);
      objectArray0[1] = (Object) (short) (-249);
      ArrayUtils.shift(objectArray0, (int) (short)0, 717, (-3118));
      assertEquals(2, objectArray0.length);
      
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Short short1 = new Short((short) (-2599));
      assertEquals((short) (-2599), (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short short2 = new Short((short) (-3663));
      assertEquals((short) (-3663), (short)short2);
      assertFalse(short2.equals((Object)short1));
      assertFalse(short2.equals((Object)short0));
      assertNotNull(short2);
      
      Short short3 = new Short((short) (-1));
      assertEquals((short) (-1), (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertFalse(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      Short[] shortArray1 = new Short[3];
      shortArray1[0] = short2;
      shortArray1[1] = (Short) (short)0;
      shortArray1[2] = (Short) (short)0;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-3663), (short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(3, shortArray2.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.swap((float[]) null, 2490, (int) (short)0, (int) (short) (-1));
      BitSet bitSet0 = ArrayUtils.indexesOf((float[]) null, (-1823.6008F));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      ArrayUtils.swap((int[]) null, (int) (short)0, 631, (int) (short)0);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 110;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.indexOf((Object[]) byteArray0, object0);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      charArray0[3] = '>';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'>', 'N', '(', '('}, charArray0);
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '(';
      doubleArray0[1] = (-4591.569371618195);
      doubleArray0[2] = (double) '(';
      doubleArray0[3] = (double) '(';
      doubleArray0[4] = (double) '(';
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {40.0, (-4591.569371618195), 40.0, 40.0, 40.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (Double) (-4591.569371618195);
      doubleArray2[1] = (Double) 40.0;
      doubleArray2[2] = (Double) 40.0;
      doubleArray2[3] = (Double) 40.0;
      doubleArray2[4] = (Double) 40.0;
      doubleArray2[5] = (Double) 40.0;
      doubleArray2[6] = (Double) (-4591.569371618195);
      double[] doubleArray3 = ArrayUtils.toPrimitive(doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4591.569371618195), 40.0, 40.0, 40.0, 40.0, 40.0, (-4591.569371618195)}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-9), (int) (byte) (-9));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray0.length);
      
      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.shift((int[]) null, 124, 124, 76);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      Integer integer0 = new Integer(1682);
      assertEquals(1682, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (short)0);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1241.7498736338));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.add(doubleArray1, (double) (short)1064);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1064.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, (-124.0));
      assertArrayEquals(new double[] {(-124.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 110;
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Float float0 = new Float((-3975.34F));
      assertEquals((-3975.34F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-357.68253F));
      assertEquals((-357.68253F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(955.08767);
      assertEquals(955.08765F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float((float) (byte)1);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      Float[] floatArray0 = new Float[5];
      floatArray0[0] = float0;
      floatArray0[1] = float3;
      floatArray0[2] = float1;
      floatArray0[3] = float2;
      floatArray0[4] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-3975.34F), 1.0F, (-357.68253F), 955.08765F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, (int) (byte)1, 1, 1);
      assertArrayEquals(new long[] {110L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurences((Byte[]) null, byte0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'R';
      doubleArray0[1] = (double) 'R';
      ArrayUtils.shift(doubleArray0, (int) (short)0, (int) (short)0, (int) (short)0);
      assertArrayEquals(new double[] {82.0, 82.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'R';
      intArray0[1] = (int) (short)0;
      intArray0[2] = (-591);
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)0;
      intArray0[8] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {82, 0, (-591), 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 3524, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1393;
      longArray0[1] = (long) 3524;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertNotSame(floatArray3, floatArray0);
      assertSame(floatArray3, floatArray1);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1393;
      doubleArray0[1] = (double) 3524;
      doubleArray0[2] = (double) 1393;
      doubleArray0[3] = (double) 1393;
      doubleArray0[4] = (double) 3524;
      doubleArray0[5] = 0.1;
      doubleArray0[6] = (double) 3524;
      doubleArray0[7] = (double) 1393;
      doubleArray0[8] = (double) 3524;
      ArrayUtils.shift(doubleArray0, 1393, 3524, 3524);
      assertArrayEquals(new double[] {1393.0, 3524.0, 1393.0, 1393.0, 3524.0, 0.1, 3524.0, 1393.0, 3524.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3524;
      intArray0[1] = (-591);
      intArray0[2] = 1393;
      intArray0[3] = 256;
      intArray0[4] = 1393;
      intArray0[5] = 3524;
      intArray0[6] = 1393;
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {3524, (-591), 1393, 256, 1393, 3524, 1393}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      Long long0 = new Long(472L);
      assertEquals(472L, (long)long0);
      assertNotNull(long0);
      
      ArrayUtils.shift(doubleArray0, 0, 1982292598, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (byte)0;
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = ArrayUtils.get(byteArray0, (int) 0);
      assertNull(byte0);
      assertEquals(0, byteArray0.length);
      
      Byte byte1 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte1);
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) byteArray0, (Object) byte1);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean1 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (-1);
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte)20;
      boolean boolean2 = ArrayUtils.contains(intArray0, (int) (byte)0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, 0, (-1), 0, 0, 20}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      Integer integer0 = new Integer((-4));
      assertEquals((-4), (int)integer0);
      assertNotNull(integer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-80));
      assertEquals((byte) (-80), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-80));
      assertEquals((byte) (-80), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = ArrayUtils.get(byteArray0, 1528);
      assertNull(byte4);
      assertEquals(4, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) doubleArray0, (Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted(longArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = ArrayUtils.insert((-2098), (long[]) null, (long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (short) (-249);
      objectArray0[1] = (Object) (short)0;
      Boolean boolean2 = new Boolean(false);
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      Boolean[] booleanArray1 = new Boolean[1];
      booleanArray1[0] = (Boolean) false;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray1.length);
      assertEquals(1, booleanArray2.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '<';
      charArray0[2] = 'M';
      charArray0[3] = 'v';
      charArray0[4] = 'q';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-176L);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Float float0 = new Float(40.0F);
      assertEquals(40.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1589.8673F);
      assertEquals(1589.8673F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      ArrayUtils.shift(longArray0, 2, 5, (-1));
      assertArrayEquals(new long[] {0L, (-176L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Float float0 = new Float((float) (short) (-249));
      assertEquals((-249.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float[] floatArray0 = new Float[9];
      floatArray0[0] = float0;
      floatArray0[1] = float0;
      floatArray0[2] = float0;
      floatArray0[3] = float0;
      floatArray0[4] = float0;
      floatArray0[5] = float0;
      floatArray0[6] = float0;
      floatArray0[7] = float0;
      floatArray0[8] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-249.0F), (-249.0F), (-249.0F), (-249.0F), (-249.0F), (-249.0F), (-249.0F), (-249.0F), (-249.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short) (-249);
      longArray0[2] = (long) 5541;
      longArray0[3] = (long) 0;
      ArrayUtils.shift(longArray0, (int) (short)0, 1702, 1);
      assertArrayEquals(new long[] {0L, 0L, (-249L), 5541L}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-656), (-2135350971));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[0] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)0;
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (-1644);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      intArray0[6] = (int) (byte)0;
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, (-1644), 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte) (-126);
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)120, (byte)104, (byte)0, (byte)121, (byte) (-126)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)104, (byte)121, (byte) (-126)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray3.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ' ');
      assertArrayEquals(new char[] {' '}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) byte0, (-3697));
      assertEquals((-1), int0);
      
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2058.371F;
      floatArray0[1] = (-32.6489F);
      floatArray0[2] = (-903.0F);
      floatArray0[3] = (float) (byte) (-94);
      floatArray0[4] = (float) (byte) (-94);
      floatArray0[5] = (-521.9F);
      floatArray0[6] = (-32.6489F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2058.371F, (-32.6489F), (-903.0F), (-94.0F), (-94.0F), (-521.9F), (-32.6489F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2058.371F, (-32.6489F), (-903.0F), (-94.0F), (-94.0F), (-521.9F), (-32.6489F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
      
      char[] charArray0 = ArrayUtils.removeAllOccurences((char[]) null, '7');
      assertNull(charArray0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte) (-94);
      shortArray0[1] = (short) (byte) (-94);
      shortArray0[2] = (short) (byte) (-94);
      shortArray0[3] = (short) (byte) (-94);
      shortArray0[4] = (short) (byte) (-94);
      shortArray0[5] = (short) (byte) (-94);
      shortArray0[6] = (short) (byte) (-94);
      shortArray0[7] = (short) (byte) (-94);
      shortArray0[8] = (short) (byte) (-94);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-94), (int) (short) (-94));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-94), (short) (-94), (short) (-94), (short) (-94), (short) (-94), (short) (-94), (short) (-94), (short) (-94), (short) (-94)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = (-176L);
      longArray0[3] = (-633L);
      longArray0[4] = 650L;
      longArray0[5] = (-238L);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (-176L), 2);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-1);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, (-1)}, intArray0);
      assertArrayEquals(new int[] {2, 2, (-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, 1.5, (-818.49));
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.contains(intArray1, (-1));
      assertTrue(boolean0);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, (-1)}, intArray0);
      assertArrayEquals(new int[] {2, 2, (-1)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2);
      assertEquals(2.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(100.0);
      assertEquals(100.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.0);
      assertArrayEquals(new double[] {2.0, 100.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.swap(byteArray0, 64, 64, (-607));
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      int int1 = ArrayUtils.indexOf(doubleArray0, 1486.3578, 239, (double) 64);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 's';
      charArray0[5] = 's';
      charArray0[6] = 's';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's', 64);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'s', 's', 's', 's', 's', 's', 's'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '4';
      charArray0[2] = 'M';
      ArrayUtils.shift(charArray0, (-1), 303, 8);
      assertArrayEquals(new char[] {'4', 'M', '>'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '4';
      doubleArray0[1] = (double) 303;
      doubleArray0[2] = (double) 19;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 'M';
      doubleArray0[5] = (double) 'M';
      doubleArray0[6] = (double) '4';
      doubleArray0[7] = (double) '>';
      doubleArray0[8] = 42.0;
      ArrayUtils.reverse(doubleArray0, (-832), (-832));
      assertArrayEquals(new double[] {52.0, 303.0, 19.0, 8.0, 77.0, 77.0, 52.0, 62.0, 42.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray1, true, 8);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.contains((byte[]) null, (byte) (-106));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-253);
      shortArray0[2] = (short)0;
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shift(shortArray0, (int) (short)0, 346, (-584));
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-253)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)0, (double) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      int int1 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      ArrayUtils.shift(shortArray0, 0, (-1097), 4497);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (-24602);
      shortArray0[2] = (short) (-20);
      ArrayUtils.shift(shortArray0, (-44), (int) (short) (-24602), (int) (short) (-20));
      assertArrayEquals(new short[] {(short)0, (short) (-24602), (short) (-20)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.insert((-894), (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 56);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 56;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {56.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte byte1 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = ArrayUtils.insert(2, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3490);
      intArray0[1] = (int) (byte)60;
      intArray0[2] = (int) (byte) (-70);
      intArray0[3] = (int) (byte) (-70);
      intArray0[4] = (int) (byte) (-70);
      intArray0[5] = (int) (byte) (-70);
      intArray0[6] = (int) (byte) (-70);
      intArray0[7] = (int) (byte)0;
      intArray0[8] = (int) (byte) (-10);
      int[] intArray1 = ArrayUtils.subarray(intArray0, 4965, (-10));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-3490), 60, (-70), (-70), (-70), (-70), (-70), 0, (-10)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
      
      Object[] objectArray0 = new Object[0];
      Byte byte5 = new Byte((byte)110);
      assertEquals((byte)110, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte5, (-2333));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-10), 239);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)293;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)293);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)293}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      ArrayUtils.swap(byteArray1, (int) (short) (-573), (int) (byte) (-115), (-2038));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      short[] shortArray0 = new short[4];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)5;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)3;
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {(byte)5, (byte)3, (byte) (-73), (byte)5, (byte)0, (byte) (-73), (byte) (-73), (byte)5, (byte)3}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[8];
      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, intArray0.length);
      assertEquals(3, shortArray1.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = '!';
      charArray0[2] = 'R';
      charArray0[3] = '!';
      charArray0[4] = '!';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'f');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'R', '!', 'R', '!', '!'}, charArray0);
      assertArrayEquals(new char[] {'R', '!', 'R', '!', '!'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      objectArray0[0] = object1;
      objectArray0[1] = (Object) 82.0;
      objectArray0[2] = (Object) '!';
      objectArray0[3] = (Object) (byte) (-73);
      objectArray0[4] = (Object) 82.0;
      boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      long[] longArray0 = new long[5];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 32, (-1071L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 1393;
      int int1 = 3524;
      ArrayUtils.swap((Object[]) null, 1393, 3524, 3524);
      float[] floatArray0 = new float[1];
      int int2 = 2674;
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1393;
      longArray0[1] = (long) 3524;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1393;
      doubleArray0[1] = (double) 3524L;
      doubleArray0[2] = (double) 2674;
      doubleArray0[3] = (double) 1393;
      doubleArray0[4] = (double) 3524;
      doubleArray0[5] = (double) 2451;
      doubleArray0[6] = (double) 2674;
      doubleArray0[7] = (double) 1393;
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 3524.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3524.0, 1393.0, 3524.0, 2674.0, 1393.0, 3524.0, 2451.0, 2674.0, 1393.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1393.0, 3524.0, 2674.0, 1393.0, 3524.0, 2451.0, 2674.0, 1393.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(longArray0, 1393, (-1575L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1393, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1200L;
      longArray0[1] = (-1927L);
      longArray0[2] = (-2306L);
      longArray0[3] = (-1L);
      longArray0[4] = 526L;
      longArray0[5] = 779L;
      longArray0[6] = (-603L);
      longArray0[7] = 1318L;
      longArray0[8] = 0L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1200L, (-1927L), (-2306L), (-1L), 526L, 779L, (-603L), 1318L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-290);
      intArray0[2] = 0;
      intArray0[3] = 16;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-290), 0, 16}, intArray1);
      assertArrayEquals(new int[] {0, (-290), 0, 16}, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray1.length);
      assertEquals(4, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      long[] longArray2 = ArrayUtils.removeElement(longArray1, 1318L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1200L, (-1927L), (-2306L), (-1L), 526L, 779L, (-603L), 1318L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 1318L);
      assertNull(floatArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1927L);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-1927L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3048.3404264625, 62.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-1927.0), 0.0, 0.0, (-1927.0)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) booleanArray1, (Object[]) booleanArray1);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)123);
      assertEquals((byte)123, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      Byte byte2 = new Byte((byte) (-9));
      assertEquals((byte) (-9), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte2);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      Byte byte3 = new Byte((byte) (-46));
      assertEquals((byte) (-46), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 0);
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(0, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) characterArray0, "");
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(stringArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = 'o';
      char[] charArray1 = ArrayUtils.insert(1, (char[]) null, charArray0);
      assertArrayEquals(new char[] {'&', 'o'}, charArray0);
      assertNull(charArray1);
      assertEquals(2, charArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0, "java.lang.Object");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray0, "+>^{`");
      assertNotNull(stringArray0);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)44;
      Byte byte1 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)44);
      assertEquals((byte)44, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      short[] shortArray0 = new short[18];
      shortArray0[0] = (short) (byte)44;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertEquals(18, shortArray0.length);
      
      ArrayUtils.shift(shortArray0, 89);
      assertEquals(18, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[16];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(16, booleanArray0.length);
      assertEquals(13, booleanArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) byteArray0, "java.lang.Byte");
      assertNotNull(stringArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, stringArray0.length);
      
      ArrayUtils.shift(shortArray0, 89, 350, (int) (short)44);
      assertEquals(18, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)113;
      byteArray0[1] = (byte) (-49);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)55, (byte)113, (byte)0, (byte)55, (byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)55, (byte)113, (byte)0, (byte)55, (byte) (-11)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2244);
      assertEquals(2244, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'D');
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte) (-49));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (byte)27;
      floatArray0[1] = (float) (byte)120;
      floatArray0[2] = (float) (byte)27;
      floatArray0[3] = (float) (byte)113;
      floatArray0[4] = (float) (byte) (-49);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 2224.226F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {27.0F, 120.0F, 27.0F, 113.0F, (-49.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {27.0F, 120.0F, 27.0F, 113.0F, (-49.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray1, "\n");
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(stringArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      ArrayUtils.shift((boolean[]) null, 2, (-251), 2);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte)78;
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, (byte) (-115));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)43, (byte)97, (byte)54, (byte)8, (byte) (-73), (byte) (-101), (byte)78}, byteArray1);
      assertArrayEquals(new byte[] {(byte)43, (byte)97, (byte)54, (byte)8, (byte) (-73), (byte) (-101), (byte) (-115), (byte)78}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      ArrayUtils.shift((boolean[]) null, 2, 2, 2);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      ArrayUtils.swap(booleanArray0, 1, (-1018));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.insert(2, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) byte0;
      objectArray0[5] = (Object) byte0;
      objectArray0[6] = object0;
      objectArray0[7] = (Object) byte0;
      objectArray0[8] = object0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(9, objectArray0.length);
      assertEquals(9, stringArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) (byte)32;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) (byte)32;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) (byte)32;
      longArray0[7] = 0L;
      longArray0[8] = (long) (byte)32;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, 1L);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2L, 32L, 2L, 2L, 32L, 2L, 32L, 0L, 32L}, longArray1);
      assertArrayEquals(new long[] {2L, 32L, 2L, 2L, 32L, 2L, 32L, 0L, 32L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      Byte byte1 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-77));
      assertEquals((byte) (-77), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shift(byteArray0, (-780));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.shift(byteArray0, (int) (short)0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byte byte6 = (byte)0;
      Byte byte7 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      Byte byte8 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte8);
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertNotNull(byte8);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (int) (byte) (-52));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-52);
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (byte) (-70);
      longArray0[3] = (-1704L);
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (short)0;
      longArray0[6] = (long) (short)0;
      longArray0[7] = 2316L;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-852), longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -852, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)158;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)158;
      shortArray0[3] = (short)0;
      shortArray0[3] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.shift((Object[]) null, (int) (short)0, (-1013), (-602));
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray1);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, (-843.76), (int) (short)158, (double) (-1380));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 36, (-1380), 1242.88);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '(';
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1255));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte)19);
      assertEquals((byte)19, (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)19;
      shortArray0[1] = (short) (byte)19;
      shortArray0[2] = (short) (-3111);
      shortArray0[3] = (short) (byte) (-115);
      shortArray0[4] = (short) (byte)19;
      shortArray0[5] = (short) (byte)19;
      shortArray0[6] = (short) (byte)19;
      shortArray0[7] = (short) (byte) (-115);
      shortArray0[8] = (short) (byte)19;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)19, (short)19, (short) (-3111), (short) (-115), (short)19, (short)19, (short)19, (short) (-115), (short)19}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, 2144723386);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (short) (-3111);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, (double) 2144723386, (int) (short) (-115), (-3111.0));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new double[] {1.0, (-3111.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1255));
      assertEquals((-1), int0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[2] = (short)2;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 100.0, 1);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (short) (-3171));
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short) (-1);
      floatArray0[2] = (float) 1985L;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 1985L;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 1985L;
      ArrayUtils.swap(floatArray0, 321, 117, 0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1985.0F, 0.0F, 0.0F, 1985.0F, 0.0F, 1985.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)73;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-1);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (-1);
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1), (int) (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)73, (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short) (-1), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-3));
      assertEquals((byte) (-3), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      Byte byte2 = new Byte((byte)49);
      assertEquals((byte)49, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-101));
      assertEquals((byte) (-101), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte2, byte3);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(abstractMap_SimpleEntry0);
      
      ArrayUtils.reverse(charArray0, (-1642), 1471);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'J'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = 'Y';
      charArray0[2] = 'k';
      ArrayUtils.shift(charArray0, (-783), 1465, (-2053));
      assertArrayEquals(new char[] {'Y', 'k', '}'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'Y', 'k', '}'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'k', '}', 'Y', 'k', '}'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = '=';
      ArrayUtils.shift(charArray0, (int) (short)1, 1301, (-1));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '=';
      floatArray0[1] = (float) '>';
      floatArray0[2] = (float) '>';
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {61.0F, 62.0F, 62.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      assertArrayEquals(new char[] {'>', '=', 'I', '>', '=', 'I'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {61.0F, 62.0F, 62.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 48;
      intArray0[1] = 1301;
      intArray0[2] = (int) '=';
      intArray0[3] = (int) '=';
      intArray0[4] = (int) '=';
      int int0 = ArrayUtils.indexOf(intArray0, 61, 61);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {48, 1301, 61, 61, 61}, intArray0);
      assertEquals(5, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short) (-3171);
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1808));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)2, (short) (-3171), (short)2, (short)2}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)2;
      doubleArray0[1] = (double) (short)2;
      doubleArray0[2] = (double) (-4432);
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = 3.0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)2, (int) (short) (-1808));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {2.0, 2.0, (-4432.0), 2.0, 3.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, 1519);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-99);
      Byte byte3 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte3;
      shortArray0[9] = (short) (byte)byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      Byte byte4 = new Byte(byte2);
      assertEquals((byte) (-99), (byte)byte4);
      assertFalse(byte2 == byte0);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte2 == byte0);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'p';
      charArray0[2] = '=';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', 'p', '='}, charArray1);
      assertArrayEquals(new char[] {'z', 'p', '='}, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      booleanArray0[2] = boolean1;
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      Object object0 = ArrayUtils.get((Object[]) booleanArray0, (-206), (Object) byte4);
      assertEquals((byte) (-99), object0);
      assertFalse(byte2 == byte0);
      assertTrue(object0.equals((Object)byte2));
      assertTrue(object0.equals((Object)byte3));
      assertFalse(object0.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(object0);
      assertEquals(6, booleanArray0.length);
      
      Object object1 = ArrayUtils.get((Object[]) byteArray0, (int) byte0);
      assertEquals((byte) (-99), object1);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte0 == byte2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(object1.equals((Object)byte3));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)byte4));
      assertFalse(object1.equals((Object)byte1));
      assertFalse(object1.equals((Object)byte0));
      assertNotNull(object1);
      assertEquals(6, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) byte3);
      assertEquals((-1), int0);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)object1));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)object0));
      assertTrue(byte3.equals((Object)byte4));
      assertEquals(6, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)1117;
      intArray0[1] = (int) (byte)20;
      intArray0[2] = 321;
      intArray0[3] = (int) 'p';
      intArray0[4] = (-206);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, Integer.MAX_VALUE);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1117, 20, 321, 112, (-206)}, intArray1);
      assertArrayEquals(new int[] {1117, 20, 321, 112, (-206)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class0;
      classArray0[4] = class0;
      classArray0[5] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray0.length);
      assertEquals(6, classArray1.length);
      
      Byte[] byteArray2 = new Byte[0];
      Class<Byte[]> class1 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class1);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray3.length);
      assertEquals(0, byteArray2.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1026);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-4315);
      shortArray0[3] = (short)3020;
      shortArray0[4] = (short)321;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)2829;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short)3020);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1026), (short)2, (short) (-4315), (short)3020, (short)321, (short)1, (short)2829}, shortArray0);
      assertArrayEquals(new short[] {(short) (-1026), (short)2, (short) (-4315), (short)321, (short)1, (short)2829}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 911.722462, (int) (short)321);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray4 = new byte[3];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray0));
      
      byteArray4[0] = (byte) (-20);
      byteArray4[1] = (byte)116;
      byteArray4[2] = (byte)74;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray4, (int) (short) (-4315));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4315, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      int[] intArray0 = new int[2];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-52);
      Byte byte2 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-49);
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte6);
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte5;
      Byte byte8 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte8);
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte3));
      assertNotNull(byte8);
      
      byteArray0[2] = byte5;
      byteArray0[3] = byte2;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-52), (int) byte1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte1 == byte3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) byte3;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte2, (int) byte1);
      assertEquals("{3, 5}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(6, bitSet0.length());
      assertFalse(byte1 == byte3);
      assertTrue(byte2.equals((Object)byte8));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte3));
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte7));
      assertFalse(byte2.equals((Object)byte5));
      assertFalse(byte2.equals((Object)byte6));
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = true;
      booleanArray2[1] = true;
      booleanArray2[2] = true;
      booleanArray2[3] = true;
      boolean[] booleanArray3 = ArrayUtils.subarray(booleanArray2, (int) (byte) (-49), 9);
      assertNotSame(booleanArray2, booleanArray3);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(4, booleanArray2.length);
      assertEquals(4, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) ')';
      ArrayUtils.shift(longArray0, 0, 0, 46);
      assertArrayEquals(new long[] {41L}, longArray0);
      assertEquals(1, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse(shortArray1);
      assertArrayEquals(new short[] {}, shortArray1);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = (double) ']';
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) 'B';
      doubleArray0[5] = (double) '@';
      doubleArray0[6] = (double) ']';
      doubleArray0[7] = (double) 'B';
      doubleArray0[8] = (double) 0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 61.0, 898);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {74.0, 41.0, 93.0, 0.0, 66.0, 64.0, 93.0, 66.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, 13, 1342, (-693));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1503, 13);
      int[] intArray0 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 'J';
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = (double) 'J';
      doubleArray0[3] = (double) (short)1503;
      doubleArray0[4] = (double) (short)1503;
      ArrayUtils.swap(doubleArray0, 1342, 89, 3667);
      assertArrayEquals(new double[] {74.0, 46.0, 74.0, 1503.0, 1503.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[0] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray2);
      assertEquals(7, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 1.0, (int) (short)1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Object[] objectArray0 = new Object[0];
      Object object1 = ArrayUtils.get(objectArray0, (-1622), object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      assertEquals(0, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
      
      int int2 = bitSet0.previousClearBit(120);
      assertEquals(120, int2);
      assertEquals(3, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 3, 4}", bitSet0.toString());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      
      Boolean[] booleanArray1 = new Boolean[8];
      booleanArray1[0] = (Boolean) false;
      Boolean boolean0 = new Boolean("Timeout for vintage @Test must be positive.");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray1[1] = boolean0;
      booleanArray1[2] = (Boolean) true;
      booleanArray1[3] = (Boolean) false;
      booleanArray1[4] = (Boolean) true;
      booleanArray1[5] = (Boolean) false;
      booleanArray1[6] = (Boolean) false;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray1[7] = boolean1;
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, true, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      boolean boolean0 = ArrayUtils.isEquals(objectArray0[0], objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)11);
      assertNull(byteArray0);
      
      Integer integer0 = new Integer((-932));
      assertEquals((-932), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((byte) (-11));
      assertEquals((-11), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      integerArray0[8] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(9, integerArray0.length);
      assertEquals(9, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      ArrayUtils.shift(booleanArray0, (-2177), (int) (byte)11, 2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAllOccurrences((byte[]) null, (byte)113);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (int)integerArray0[8];
      doubleArray0[1] = (double) (-2177);
      doubleArray0[2] = (double) (byte)113;
      doubleArray0[3] = (double) (int)integerArray0[4];
      doubleArray0[4] = (double) (int)integerArray0[6];
      doubleArray0[5] = (double) (byte)113;
      doubleArray0[6] = (double) (int)integerArray0[6];
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-932.0));
      assertEquals(6, int0);
      assertArrayEquals(new double[] {(-932.0), (-2177.0), 113.0, (-932.0), (-932.0), 113.0, (-932.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, (-699), 0, (int) (byte)1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'j';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'<', 'j'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, (-1682), 7, 899);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1682);
      ArrayUtils.shift(intArray0, 899, 1495, 57);
      assertArrayEquals(new int[] {(-1682)}, intArray0);
      assertEquals(1, intArray0.length);
      
      MockRandom mockRandom0 = new MockRandom((-707L));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((short[]) null, (java.util.Random) mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 1L;
      longArray0[2] = (-176L);
      longArray0[3] = (-633L);
      longArray0[4] = 650L;
      longArray0[5] = (-238L);
      longArray0[6] = 0L;
      longArray0[7] = (-742L);
      longArray0[8] = 6265L;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.addAll(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 1L, (-176L), (-633L), 650L, (-238L), 0L, (-742L), 6265L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-1L), 1L, (-176L), (-633L), 650L, (-238L), 0L, (-742L), 6265L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray2.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-19);
      ArrayUtils.swap(byteArray0, (int) (byte)127, (-667), 11);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)97, (byte)34, (byte)127, (byte)13, (byte) (-19)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ArrayUtils.reverse(byteArray0, (-1), 56);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)13, (byte)127, (byte)34, (byte)97, (byte) (-107)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 623L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-367L);
      longArray0[5] = 1849L;
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {623L, (-1L), (-1L), 0L, (-367L), 1849L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.insert((int) (byte)32, (char[]) null, (char[]) null);
      assertNull(charArray0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) 623L;
      objectArray0[2] = (Object) 1849L;
      objectArray0[3] = (Object) 1849L;
      objectArray0[4] = (Object) 623L;
      objectArray0[5] = (Object) (-1L);
      objectArray0[6] = (Object) (-1L);
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 623L);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {623L, (-1L), (-1L), 0L, (-367L), 1849L}, longArray0);
      assertArrayEquals(new long[] {623L}, longArray2);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray2);
      assertEquals(6, longArray0.length);
      assertEquals(1, longArray2.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (byte)32);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(objectArray0[0], objectArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 76;
      intArray0[2] = (-431);
      intArray0[3] = (-11);
      intArray0[4] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (-1961));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1, 76, (-431), (-11), 0}, intArray0);
      assertArrayEquals(new int[] {1, 76, (-431), (-11), 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-749));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-573);
      longArray0[1] = (long) 76;
      int int1 = ArrayUtils.indexOf(longArray0, (long) (short) (-573), (-1113));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-573L), 76L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-573L);
      doubleArray0[1] = (double) (-431);
      doubleArray0[2] = (double) (-1L);
      doubleArray0[3] = 1.0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(262, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 262, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, 3, 200, 2132);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (-596), (int) (byte)0);
      assertArrayEquals(new float[] {20.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, 13, 1342, (-693));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1503, 13);
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1117);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1117}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      ArrayUtils.swap((float[]) null, 3348, 2836, (-693));
      int int0 = ArrayUtils.indexOf((double[]) null, (double) 3348);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 5);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
      
      Byte[] byteArray1 = new Byte[3];
      Byte byte0 = new Byte((byte) (-123));
      assertEquals((byte) (-123), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte) (-123));
      assertEquals((byte) (-123), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[1] = byte1;
      Byte byte2 = new Byte((byte) (-123));
      assertEquals((byte) (-123), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray1[2] = byte2;
      Class<Byte[]> class5 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class5);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(3, byteArray1.length);
      assertEquals(3, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-1), (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = (int) (short)0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1), 0}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)1;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) (short)1;
      ArrayUtils.swap(doubleArray0, 2047, (-1073741823), (-497));
      assertArrayEquals(new double[] {1.0, (-1.0), (-1.0), (-1.0), (-1.0), 0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)1);
      assertEquals(4, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0, 3}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-1), (short)1}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      ArrayUtils.shift((Object[]) byteArray0, 3, 193, 2106);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeAllOccurrences((float[]) null, (float) 6);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.swap((long[]) null, 2135350972, (int) (short)2, 2135350972);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 1.0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)3573;
      shortArray0[3] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)3573, (short)2}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-12));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.addFirst((Byte[]) null, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 1866);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      ArrayUtils.shift((short[]) null, (-25));
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-25), (-25));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      char[] charArray0 = new char[3];
      charArray0[1] = 'o';
      charArray0[2] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertFalse(boolean1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      intArray0[0] = (int) (byte) (-38);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)57;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (-2599));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)64, (byte)0, (byte) (-92), (byte)57}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)64, (byte)0, (byte) (-92), (byte)57}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)64, (byte)0, (byte) (-92), (byte)57}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, 1393, 3524, 3524);
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2676, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      char[] charArray0 = ArrayUtils.EMPTY_CHAR_ARRAY;
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2676;
      intArray0[1] = 1393;
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (-1322), 2676);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {2676, 1393}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[0];
      boolean boolean0 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 'a');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {'a'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(1, charArray1.length);
      
      ArrayUtils.shift((Object[]) null, 50, 1650, 1393);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)117);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-30), (byte)96, (byte)104, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)117, (byte)96, (byte)104, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = '=';
      ArrayUtils.shift(charArray0, (int) (short)1, 1301, (-1));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      assertEquals(3, charArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '=';
      ArrayUtils.swap((boolean[]) null, 755, (-1001));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.reverse(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      ArrayUtils.shift(intArray0, (-1194));
      assertArrayEquals(new int[] {0, (-1194), (-1194)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-1194);
      floatArray0[2] = (float) (-1194);
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((double[]) null, 448);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) Float.NaN;
      objectArray0[1] = (Object) (-1194.0F);
      Object object1 = ArrayUtils.get(objectArray0, (-1998));
      assertNull(object1);
      assertEquals(5, objectArray0.length);
      
      objectArray0[2] = null;
      objectArray0[3] = (Object) (-1194.0F);
      objectArray0[4] = (Object) Float.NaN;
      ArrayUtils.shift(objectArray0, (-3316));
      assertEquals(5, objectArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NaN, (-1194.0F), (-1194.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-1951));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1194), (-1194)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[4]);
      assertEquals(4, int0);
      assertEquals(5, objectArray0.length);
      
      double[] doubleArray0 = ArrayUtils.insert(76, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      ArrayUtils.swap(byteArray0, (int) (byte) (-14), (int) (byte) (-14), 513);
      assertArrayEquals(new byte[] {(byte) (-14)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.186100006103516;
      doubleArray0[1] = (-10.04102053194541);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-931.538000178454);
      doubleArray0[4] = 200.0;
      doubleArray0[5] = 1187.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 777.0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {8.186100006103516, (-10.04102053194541), 0.0, (-931.538000178454), 200.0, 1187.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      BitSet bitSet1 = ArrayUtils.indexesOf(intArray0, 0, 0);
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertEquals(64, bitSet1.size());
      assertFalse(bitSet1.isEmpty());
      assertEquals(1, bitSet1.cardinality());
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(bitSet1);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {8.186100006103516, (-10.04102053194541), 0.0, (-931.538000178454), 200.0, 1187.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.186100006103516, (-10.04102053194541), 0.0, (-931.538000178454), 200.0, 1187.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, (-699), 0, (int) (byte)1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = '(';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'<', '('}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)118;
      byteArray0[1] = (byte) (-49);
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)118, (byte)118, (byte)0, (byte)118, (byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)118, (byte)118, (byte)0, (byte)118, (byte) (-11)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2244);
      assertEquals(2244, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-49);
      intArray0[1] = 442;
      ArrayUtils.shift(intArray0, (-823), 2379, 1);
      assertArrayEquals(new int[] {442, (-49)}, intArray0);
      assertEquals(2, intArray0.length);
      
      ArrayUtils.swap(intArray0, (int) (byte) (-49), (int) (byte) (-49));
      assertArrayEquals(new int[] {442, (-49)}, intArray0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray2 = ArrayUtils.add(byteArray1, (byte)118);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)118, (byte)118, (byte)0, (byte)118, (byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)118, (byte)118, (byte)0, (byte)118, (byte) (-11), (byte)118}, byteArray2);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)118, (byte)118, (byte)0, (byte)118, (byte) (-11)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray2.length);
      assertEquals(7, byteArray1.length);
      
      Byte byte0 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-12), object0);
      assertNotNull(object0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-12);
      BitSet bitSet0 = BitSet.valueOf(longArray0);
      assertEquals(64, bitSet0.size());
      assertEquals(61, bitSet0.cardinality());
      assertEquals("{2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63}", bitSet0.toString());
      assertEquals(64, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new long[] {(-12L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, (int) (byte) (-14));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte) (-14);
      doubleArray0[1] = (double) (byte) (-14);
      doubleArray0[2] = (double) (byte) (-14);
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-14.0), (-14.0), (-14.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-14.0), (-14.0), (-14.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-317.601383874864), (-1), (-14.0));
      assertTrue(bitSet1.isEmpty());
      assertEquals("{}", bitSet1.toString());
      assertEquals(64, bitSet1.size());
      assertEquals(0, bitSet1.cardinality());
      assertEquals(0, bitSet1.length());
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(bitSet1, bitSet0);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {(-14.0), (-14.0), (-14.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-70);
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertNotNull(byte7);
      
      Byte byte8 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte8);
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertNotNull(byte8);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte8;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, (-1380), (int) (byte) (-12), (int) (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte3;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (int) (byte) (-42), (double) (byte) (-42));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 2963.3582896137, (int) byte0, 61.0);
      assertEquals((-1), int1);
      assertFalse(byte0 == byte3);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, 1393, 3524, 3524);
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2674, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1393;
      longArray0[1] = (long) 3524;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true, 3524);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'w', 2563);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {1393L, 3524L}, longArray0);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray2.length);
      
      float[] floatArray2 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '4';
      charArray0[2] = 'M';
      ArrayUtils.shift(charArray0, (-1), 303, 8);
      assertArrayEquals(new char[] {'4', 'M', '>'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.swap((byte[]) null, 19, 19, 19);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) '>';
      doubleArray0[2] = (double) '4';
      doubleArray0[3] = (double) 303;
      doubleArray0[4] = (double) '4';
      doubleArray0[5] = (double) '4';
      doubleArray0[6] = (double) 8;
      int int0 = ArrayUtils.indexOf(doubleArray0, 62.0, 757, 781.9684083988725);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {62.0, 62.0, 52.0, 303.0, 52.0, 52.0, 8.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 's', (-2789));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'4', 'M', '>'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Byte[] byteArray2 = new Byte[0];
      ArrayUtils.shift((Object[]) byteArray2, (int) (byte)0, 116, (-1437));
      assertEquals(0, byteArray2.length);
      
      ArrayUtils.shuffle((Object[]) byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      char[] charArray0 = Character.toChars((int) '4');
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.shift((Object[]) longArray1, (-4), (-4741), (-4741));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.shuffle((Object[]) longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte)0, (-1626));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)12393;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)12393, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)12393, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      booleanArray0[6] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) true;
      objectArray0[1] = (Object) false;
      objectArray0[2] = (Object) true;
      objectArray0[3] = (Object) true;
      objectArray0[4] = (Object) true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      MockRandom mockRandom0 = new MockRandom((byte)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(6, objectArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 4524L;
      longArray0[1] = 877L;
      longArray0[2] = (long) (byte)0;
      longArray0[3] = (long) (byte)0;
      longArray0[4] = (long) (short)12393;
      longArray0[5] = (long) 4;
      longArray0[6] = (long) (-1626);
      long[] longArray1 = ArrayUtils.add(longArray0, (-1L));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {4524L, 877L, 0L, 0L, 12393L, 4L, (-1626L), (-1L)}, longArray1);
      assertArrayEquals(new long[] {4524L, 877L, 0L, 0L, 12393L, 4L, (-1626L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(8, longArray1.length);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 56;
      intArray0[1] = (-806);
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {56, (-806)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)158;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)158;
      shortArray0[3] = (short)0;
      shortArray0[3] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)158, (short)0, (short)158, (short)1064, (short)0, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (short)1064;
      objectArray0[1] = (Object) (short)158;
      objectArray0[2] = (Object) 105L;
      objectArray0[3] = (Object) (short)1064;
      objectArray0[4] = (Object) (short)0;
      objectArray0[5] = (Object) 't';
      objectArray0[6] = (Object) 105L;
      objectArray0[7] = (Object) 105L;
      boolean boolean1 = ArrayUtils.contains(objectArray0, objectArray0[5]);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, objectArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 158;
      intArray0[1] = (int) (short)0;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {0, 158}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((int) (short)0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 158}, intArray0);
      assertArrayEquals(new int[] {0, 158, 0, 158}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray1);
      assertFalse(boolean2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 158}, intArray0);
      assertArrayEquals(new int[] {0, 158, 0, 158}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false, false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      int[] intArray0 = new int[11];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertEquals(11, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4234;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2352.8021032157394;
      doubleArray0[1] = (double) (short)4234;
      doubleArray0[2] = (double) (short)4234;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (short)4234;
      doubleArray0[5] = (double) (short)4234;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1.5);
      assertEquals(6, int0);
      assertArrayEquals(new double[] {2352.8021032157394, 4234.0, 4234.0, 1.0, 4234.0, 4234.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)113;
      byteArray0[1] = (byte) (-49);
      byteArray0[5] = (byte)55;
      long[] longArray0 = new long[3];
      longArray0[0] = (-504L);
      longArray0[1] = (long) (byte)113;
      longArray0[2] = (long) (byte)55;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-504L), 113L, 55L}, longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)27;
      floatArray0[1] = (float) 55L;
      floatArray0[2] = (float) (byte)27;
      ArrayUtils.swap(floatArray0, 1849, (int) (byte)113, 34);
      assertArrayEquals(new float[] {27.0F, 55.0F, 27.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)55;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-922), (int) (byte)27);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)55}, shortArray0);
      assertArrayEquals(new short[] {(short)55}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'X');
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(4536);
      assertEquals(4536, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(52);
      assertEquals(52, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-872));
      assertEquals((-872), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((byte)113);
      assertEquals(113, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-446));
      assertEquals((-446), (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-872));
      assertEquals((-872), (int)integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(2);
      assertEquals(2, (int)integer6);
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-2145957361));
      assertEquals((-2145957361), (int)integer7);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer1));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.valueOf((-2145957361));
      assertEquals((-2145957361), (int)integer8);
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-872));
      assertArrayEquals(new int[] {4536, 52, (-872), 113, (-446), (-872), 2, (-2145957361), (-2145957361)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (Byte) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-126));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte byte2 = ArrayUtils.get(byteArray0, 688);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNull(byte2);
      assertEquals(5, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-2215);
      intArray0[2] = (-1);
      intArray0[3] = 85;
      intArray0[4] = 85;
      intArray0[5] = (-1);
      intArray0[6] = 688;
      intArray0[7] = 110;
      ArrayUtils.shift(intArray0, (-129), 1, (-1898));
      assertArrayEquals(new int[] {(-1), (-2215), (-1), 85, 85, (-1), 688, 110}, intArray0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2281);
      doubleArray0[1] = (double) (-2281);
      doubleArray0[2] = (double) 110;
      doubleArray0[3] = (double) 110;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2281), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2281, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short short0 = (short)110;
      Short short1 = new Short((short)110);
      assertEquals((short)110, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = new Short[5];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[1] = short1;
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, short0);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)110, (short)110, (short)110, (short)110, (short)110}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(5, shortArray1.length);
      assertEquals(5, shortArray2.length);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray1, object0);
      assertFalse(boolean0);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'x'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-2438));
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2722);
      intArray0[1] = (-1);
      intArray0[2] = (-1304);
      intArray0[3] = 111;
      intArray0[4] = 2;
      intArray0[5] = 9;
      intArray0[6] = (-3255);
      intArray0[7] = 512;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2722), (-1), (-1304), 111, 2, 9, (-3255), 512}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2722), (-1), (-1304), 111, 2, 9, (-3255), 512}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2722), (-1), (-1304), 111, 2, 9, (-3255), 512}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, integerArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '-');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'E'}, charArray0);
      assertArrayEquals(new char[] {'-', 'E'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 512;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 512;
      floatArray0[4] = (float) 512;
      floatArray0[5] = (float) (-1304);
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 512.0F, 2.0F, 512.0F, 512.0F, (-1304.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)0);
      assertNull(shortArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)534, (-2145957361));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      char[] charArray2 = new char[2];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      charArray2[0] = 'E';
      charArray2[1] = '-';
      int int0 = ArrayUtils.indexOf(charArray2, 'v', (-3255));
      assertEquals((-1), int0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'E', '-'}, charArray2);
      assertEquals(2, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 893.0F;
      floatArray0[1] = 2858.8196F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1440.114F;
      floatArray0[5] = 2337.229F;
      floatArray0[6] = (-10.0F);
      float[] floatArray1 = ArrayUtils.add(floatArray0, Float.NaN);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {893.0F, 2858.8196F, 0.0F, 0.0F, 1440.114F, 2337.229F, (-10.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {893.0F, 2858.8196F, 0.0F, 0.0F, 1440.114F, 2337.229F, (-10.0F), Float.NaN}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte) (-18);
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)19, (byte)1, (byte)27, (byte) (-35), (byte)101, (byte)14, (byte) (-29), (byte) (-109), (byte) (-18)}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1876L;
      longArray0[1] = 112L;
      longArray0[2] = (-1134L);
      longArray0[3] = (-603L);
      longArray0[4] = 55L;
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (-1134L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1876L, 112L, (-1134L), (-603L), 55L}, longArray0);
      assertArrayEquals(new long[] {1876L, 112L, (-603L), 55L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(4, longArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, 470L);
      assertEquals((-1), int0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1876L, 112L, (-1134L), (-603L), 55L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2860.5659409306;
      doubleArray0[1] = (double) 55L;
      doubleArray0[2] = (double) (-603L);
      doubleArray0[3] = (double) 1876L;
      doubleArray0[4] = (double) (-1134L);
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2860.5659409306, 55.0, (-603.0), 1876.0, (-1134.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2860.5659409306, 55.0, (-603.0), 1876.0, (-1134.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((Byte[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte)0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertArrayEquals(new int[] {(-1)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-81);
      Byte byte1 = new Byte((byte) (-81));
      assertEquals((byte) (-81), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-81), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte) (-68);
      Byte byte1 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-73));
      assertEquals((byte) (-73), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte5);
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte) (-68), (byte)byte7);
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte) (-68), (byte)byte8);
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte0));
      assertTrue(byte8.equals((Object)byte1));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      short[] shortArray0 = new short[6];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray2.length);
      
      Short[] shortArray3 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotSame(shortArray0, shortArray2);
      assertSame(shortArray1, shortArray3);
      assertSame(shortArray3, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray2));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray3);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
      assertEquals(6, shortArray3.length);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-757.6511558);
      doubleArray0[2] = 829.3;
      doubleArray0[3] = (-757.6511558);
      doubleArray0[4] = (-757.6511558);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = 115L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(2, int0);
      assertArrayEquals(new long[] {0L, 0L, (-1L), 115L}, longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      Short[] shortArray0 = new Short[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      Short[] shortArray0 = new Short[0];
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      short short0 = (short)2;
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.swap((long[]) null, 2135350972, (int) (short)2, (-436));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) 1.0;
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) 1.0;
      objectArray0[6] = (Object) 1.0;
      ArrayUtils.shift(objectArray0, (-3264), 2019, (-1796));
      assertEquals(7, objectArray0.length);
      
      Short[] shortArray0 = new Short[4];
      Short short1 = new Short((short)2);
      assertEquals((short)2, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short((short)2);
      assertEquals((short)2, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short short3 = new Short(short0);
      assertEquals((short)2, (short)short3);
      assertTrue(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short0));
      assertTrue(short3.equals((Object)short2));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)2);
      assertEquals((short)2, (short)short4);
      assertTrue(short4.equals((Object)short2));
      assertTrue(short4.equals((Object)short0));
      assertTrue(short4.equals((Object)short3));
      assertTrue(short4.equals((Object)short1));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2, (short)2, (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) short0;
      floatArray0[1] = (float) 2019;
      ArrayUtils.swap(floatArray0, 2135350972, (int) (short)2, 2280);
      assertArrayEquals(new float[] {2.0F, 2019.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (float) (-3264));
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {2.0F, 2019.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (-359), (int) (byte)25, 826);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte0;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) (byte) (-117);
      boolean boolean0 = ArrayUtils.contains(longArray0, (-117L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-117L), (-117L), (-117L), (-117L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) byte0;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-745);
      shortArray0[2] = (short) (byte) (-117);
      boolean boolean1 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-745), (short)0, (short) (-117)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, (byte)2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-117L), (-117L), (-117L), (-117L)}, longArray0);
      assertArrayEquals(new long[] {(-117L), (-117L), (-117L), (-117L), (-117L), (-117L), (-117L), (-117L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(8, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 953, (int) (short)1503);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 128, 326);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.reverse(booleanArray0, (-1501), 326);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.reverse(longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1501);
      doubleArray0[1] = (double) 'J';
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) 128;
      doubleArray0[4] = (double) 326;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1501.0), 74.0, 2.147483647E9, 128.0, 326.0, 2.147483647E9}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(12, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 358;
      longArray0[1] = 0L;
      longArray0[2] = (long) 358;
      longArray0[3] = (long) 358;
      boolean boolean1 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {358L, 0L, 358L, 358L}, longArray0);
      assertEquals(4, longArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 358L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = object0;
      boolean boolean2 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, objectArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) Integer.MAX_VALUE;
      objectArray0[1] = (Object) Integer.MAX_VALUE;
      objectArray0[2] = (Object) Integer.MAX_VALUE;
      Object object0 = ArrayUtils.get(objectArray0, 726, objectArray0[1]);
      assertEquals(Integer.MAX_VALUE, object0);
      assertNotNull(object0);
      assertEquals(5, objectArray0.length);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) Integer.MAX_VALUE;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(objectArray0, (java.util.Random) mockRandom0);
      assertEquals(5, objectArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = 4524L;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1), 0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, Integer.MAX_VALUE, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray1, longArray0);
      assertSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 4524L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 4524L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(9, longArray1.length);
      assertEquals(9, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 13);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)21;
      Byte byte1 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)120;
      Byte byte3 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      byteArray0[3] = byte1;
      Byte byte5 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte(byte2);
      assertEquals((byte)120, (byte)byte6);
      assertFalse(byte2 == byte0);
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte((byte) (-46));
      assertEquals((byte) (-46), (byte)byte8);
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte2;
      intArray0[1] = (int) (byte)120;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) byte0, (int) (byte)120);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte0 == byte2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {120, 120}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray1 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-46);
      byteArray2[1] = (byte)21;
      byteArray2[2] = (byte)120;
      byteArray2[3] = byte2;
      byteArray2[4] = (byte)120;
      byteArray2[5] = byte0;
      byteArray2[6] = byte0;
      ArrayUtils.swap(byteArray2, 681, (-741), (int) (byte)21);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)21, (byte)120, (byte)120, (byte)120, (byte)21, (byte)21}, byteArray2);
      assertEquals(7, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0, 0.0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte)10;
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-80), (byte)10, (byte)10}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 104;
      longArray0[1] = (-2692L);
      longArray0[2] = (long) (byte) (-80);
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {104L, (-2692L), (-80L)}, longArray0);
      assertArrayEquals(new long[] {104L, (-2692L), (-80L), 104L, (-2692L), (-80L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(6, longArray1.length);
      
      Integer integer0 = new Integer(948);
      assertEquals(948, (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift(intArray1, (int) (byte) (-80), (int) (byte)10, 442);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.swap(intArray0, (int) (byte)10, (int) (byte)10);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray1);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-80));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)10, (byte) (-80), (byte)10, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte) (-80), (byte)10, (byte)10, (byte) (-80)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 11.6701F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-176L);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean1);
      
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
      
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (-1179L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-176L), 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, (-176L), 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(6, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer((byte)0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-744));
      assertEquals((-744), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((byte)0);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer1;
      integerArray0[1] = integer2;
      int int0 = (-1);
      Integer integer3 = new Integer((-1));
      assertEquals((-1), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertNotNull(integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer(2098677201);
      assertEquals(2098677201, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertNotNull(integer4);
      
      integerArray0[3] = integer4;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer1;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray1, integerArray0);
      assertSame(integerArray0, integerArray1);
      assertNotNull(integerArray1);
      assertEquals(8, integerArray1.length);
      assertEquals(8, integerArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) int0;
      longArray0[1] = (long) (int)integerArray0[5];
      longArray0[2] = (long) (int)integerArray0[4];
      longArray0[3] = (long) (int)integerArray0[0];
      longArray0[4] = (long) (byte)0;
      longArray0[5] = (long) (int)integerArray0[3];
      longArray0[6] = (long) (-744);
      longArray0[7] = (long) (-744);
      long[] longArray1 = ArrayUtils.removeAllOccurences(longArray0, (long) 2098677201);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), (-744L), (-744L), (-744L), 0L, 2098677201L, (-744L), (-744L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), (-744L), (-744L), (-744L), 0L, (-744L), (-744L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(7, longArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-744L);
      floatArray0[1] = (float) 2098677201L;
      int int1 = ArrayUtils.lastIndexOf(floatArray0, 1378.464F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-744.0F), 2.09867725E9F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)0;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 1L, 1L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) (short)1;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (short) (-1);
      floatArray0[5] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (int) (short)1, 0, (int) (short) (-1));
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1.0F, (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (int) (short) (-1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short) (-1)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(4, shortArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((int[]) null, (int) (short)1);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(5, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {82.0, 82.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)5;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)3;
      ArrayUtils.shift(byteArray0, (int) (short)1);
      assertArrayEquals(new byte[] {(byte)3, (byte)5, (byte)3, (byte) (-73), (byte)5, (byte)0, (byte) (-73), (byte) (-73), (byte)5}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)3;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte) (-73));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {3, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      
      ArrayUtils.swap(doubleArray1, (int) (byte)3, (int) (byte)5, 46);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {82.0, 82.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)3);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 10, (-953));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 82);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {82, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 82;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 82;
      longArray0[7] = (long) (-953);
      longArray0[8] = (long) (-953);
      ArrayUtils.reverse(longArray0, 1717986918, 7);
      assertArrayEquals(new long[] {(-1L), 82L, (-1L), 10L, 0L, 82L, 0L, (-953L), (-953L)}, longArray0);
      assertEquals(9, longArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)0;
      ArrayUtils.swap(byteArray0, (int) (byte) (-1), 2796, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-69), (byte) (-65), (byte)49, (byte) (-1), (byte) (-77), (byte) (-115), (byte) (-71), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)2, (int) (short)2);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[1];
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte)20;
      Byte byte3 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte3;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte1;
      Byte byte4 = new Byte(byte2);
      assertEquals((byte)20, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = '_';
      charArray0[2] = '=';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'z', '_', '='}, charArray1);
      assertArrayEquals(new char[] {'z', '_', '='}, charArray0);
      assertNotNull(charArray1);
      assertEquals(3, charArray1.length);
      assertEquals(3, charArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[6];
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[1] = boolean1;
      Boolean boolean2 = new Boolean((boolean) boolean1);
      assertTrue(boolean2);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[2] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertFalse(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[3] = boolean3;
      Boolean boolean4 = Boolean.valueOf("#a1/G");
      assertFalse(boolean4);
      assertFalse(boolean4.equals((Object)boolean1));
      assertTrue(boolean4.equals((Object)boolean0));
      assertFalse(boolean4.equals((Object)boolean2));
      assertNotNull(boolean4);
      
      booleanArray0[4] = boolean4;
      Boolean boolean5 = Boolean.FALSE;
      assertFalse(boolean5);
      assertFalse(boolean5.equals((Object)boolean2));
      assertTrue(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean1));
      assertNotNull(boolean5);
      
      booleanArray0[5] = boolean5;
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray1, booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Byte byte0 = new Byte((byte)87);
      assertEquals((byte)87, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1246);
      intArray0[1] = 1155;
      intArray0[2] = (int) (byte)87;
      intArray0[3] = (int) (byte)87;
      intArray0[4] = 59;
      intArray0[5] = 59;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2134542801);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {(-1246), 1155, 87, 87, 59, 59}, intArray0);
      assertEquals(6, intArray0.length);
      
      Byte byte1 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = ArrayUtils.get((Byte[]) null, 87, byte1);
      assertEquals((byte) (-50), (byte)byte2);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      String string0 = ArrayUtils.toString((Object) byte2, "fW-kv+&V*c-][=N$T");
      assertEquals("-50", string0);
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(string0);
      
      boolean boolean1 = ArrayUtils.isSorted((Byte[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short)5);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (-2059L), (int) (byte)46);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte)46);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(4, shortArray0.length);
      
      Long[] longArray1 = new Long[3];
      Long long0 = new Long((-1582L));
      assertEquals((-1582L), (long)long0);
      assertNotNull(long0);
      
      longArray1[0] = long0;
      Long long1 = Long.valueOf((long) (-1));
      assertEquals((-1L), (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      longArray1[1] = long1;
      Long long2 = new Long((-1));
      assertEquals((-1L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      
      longArray1[2] = long2;
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray1);
      assertSame(longArray1, longArray2);
      assertSame(longArray2, longArray1);
      assertNotNull(longArray2);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray2.length);
      
      Byte[] byteArray1 = new Byte[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1063L));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Long[] longArray2 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (byte)46);
      assertEquals((-1), int0);
      
      int int1 = ArrayUtils.indexOf((long[]) null, (long) (byte)46, (int) (short)5);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (byte)46);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      Long long0 = new Long((-176L));
      assertEquals((-176L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.valueOf(0L);
      assertEquals(0L, (long)long1);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      
      Long long2 = new Long((-1582L));
      assertEquals((-1582L), (long)long2);
      assertFalse(long2.equals((Object)long0));
      assertFalse(long2.equals((Object)long1));
      assertNotNull(long2);
      
      Long[] longArray0 = new Long[0];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      byte[] byteArray1 = ArrayUtils.clone((byte[]) null);
      assertNull(byteArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)46;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (-1);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {46.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeElement((int[]) null, 1568);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      ArrayUtils.shift(intArray0, (-1194));
      assertArrayEquals(new int[] {0, (-1194), (-1194)}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (float) (-1194);
      floatArray0[2] = (float) (-1194);
      floatArray0[3] = 2854.2974F;
      floatArray0[4] = (float) (-1194);
      floatArray0[5] = (float) (-2758);
      ArrayUtils.swap(floatArray0, (-2758), 5, (-644));
      assertArrayEquals(new float[] {Float.NaN, (-1194.0F), (-1194.0F), 2854.2974F, (-1194.0F), (-2758.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-2758.0F), (-1194.0F), 2854.2974F, (-1194.0F), (-1194.0F), Float.NaN}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2758);
      intArray1[1] = (-1194);
      intArray1[2] = (-1194);
      intArray1[3] = 5;
      intArray1[4] = (-1194);
      intArray1[5] = (-2758);
      intArray1[6] = (-644);
      intArray1[7] = 5;
      int int0 = ArrayUtils.indexOf(intArray1, (-2758));
      assertEquals(0, int0);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2758), (-1194), (-1194), 5, (-1194), (-2758), (-644), 5}, intArray1);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      short[] shortArray0 = new short[0];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)85);
      assertEquals((byte)85, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = ArrayUtils.get(byteArray0, (-127));
      assertNull(byte1);
      assertEquals(1, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) shortArray1, (Object) null);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      int[] intArray0 = new int[0];
      ArrayUtils.reverse(intArray0, 953, (int) (short)1503);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) Integer.MAX_VALUE;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertEquals(1, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 128, 326);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2147483647L}, longArray0);
      assertArrayEquals(new long[] {2147483647L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      ArrayUtils.reverse(booleanArray0, (-1501), 326);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 88;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 128;
      ArrayUtils.shift(floatArray0, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {13.0F, 1.0F, 128.0F, 88.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      
      Object[] objectArray1 = new Object[7];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) 1.0F;
      objectArray1[1] = (Object) 'J';
      Byte byte0 = new Byte((byte)53);
      assertEquals((byte)53, (byte)byte0);
      assertNotNull(byte0);
      
      Object object1 = ArrayUtils.get(objectArray0, (-1501), (Object) byte0);
      assertEquals((byte)53, object1);
      assertNotSame(objectArray0, objectArray1);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertNotNull(object1);
      assertEquals(1, objectArray0.length);
      
      objectArray1[2] = object1;
      Object object2 = ArrayUtils.get(objectArray1, (int) 53);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNull(object2);
      assertEquals(7, objectArray1.length);
      
      objectArray1[3] = null;
      objectArray1[4] = (Object) 128.0F;
      objectArray1[5] = object0;
      objectArray1[6] = (Object) 1.0F;
      int int0 = ArrayUtils.lastIndexOf(objectArray1, object0);
      assertEquals(5, int0);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertEquals(7, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
      assertEquals(0, int0);
      assertEquals(1, objectArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1664);
      shortArray0[1] = (short)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2058.371F;
      floatArray0[1] = (-32.6489F);
      floatArray0[2] = (-903.0F);
      floatArray0[3] = (-32.6489F);
      floatArray0[4] = (float) (byte) (-94);
      floatArray0[5] = (-521.9F);
      floatArray0[6] = (-32.6489F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {2058.371F, (-32.6489F), (-903.0F), (-32.6489F), (-94.0F), (-521.9F), (-32.6489F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {2058.371F, (-32.6489F), (-903.0F), (-32.6489F), (-94.0F), (-521.9F), (-32.6489F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(14, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte) (-65);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)1, (int) (byte)97);
      assertEquals(4, int0);
      assertArrayEquals(new byte[] {(byte)39, (byte)89, (byte)74, (byte) (-47), (byte)1, (byte)97, (byte) (-103), (byte) (-65)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-65);
      intArray0[1] = (int) (byte)39;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 39, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = ArrayUtils.nullToEmpty(doubleArray1);
      assertSame(doubleArray1, doubleArray2);
      assertSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 97, 1.0);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      double[] doubleArray2 = ArrayUtils.removeElement(doubleArray1, 32.946150858863746);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      Double[] doubleArray3 = ArrayUtils.toObject(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray3);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 97);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 97, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 59;
      intArray0[2] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1255));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {77, 59, 77}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-115);
      shortArray0[1] = (short) (byte) (-115);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-115), (short) (-115)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.shift(booleanArray0, (int) (short) (-115));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      int int1 = ArrayUtils.lastIndexOf(intArray0, 3132);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {77, 59, 77}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-176L);
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-176L));
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-176L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-176.0F);
      doubleArray0[2] = 1187.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1187.0);
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(3, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {0.0, (-176.0), 1187.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-49L), 0);
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-94);
      floatArray0[1] = (float) (-49L);
      floatArray0[2] = (float) (-49L);
      floatArray0[3] = (float) 17;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-8);
      floatArray0[6] = (float) 0;
      ArrayUtils.swap(floatArray0, 3965, Integer.MAX_VALUE);
      assertArrayEquals(new float[] {(-94.0F), (-49.0F), (-49.0F), 17.0F, 0.0F, (-8.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3965;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-1916.4932178);
      doubleArray0[3] = (double) (-49.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (byte) (-94);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-1166.6), 3216, (double) 0.0F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {3965.0, (-1.0), (-1916.4932178), (-49.0), 0.0, (-94.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3025;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 3025}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 3025, (-2337), (-2337));
      assertArrayEquals(new int[] {0, 0, 0, 3025}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-25));
      assertEquals((byte) (-25), (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte5;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, byte4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte5));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      Integer[] integerArray0 = new Integer[0];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) (byte)13);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, integerArray0.length);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)13;
      ArrayUtils.swap(longArray0, (-2827), (-3039), Integer.MAX_VALUE);
      assertArrayEquals(new long[] {13L}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1;
      ArrayUtils.swap(longArray0, 1, (-1483), 238);
      assertArrayEquals(new long[] {0L, 1L}, longArray0);
      assertEquals(2, longArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 59;
      intArray0[2] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1246));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {77, 59, 77}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "fW-kv+&V*c-][=N$T");
      assertEquals("-115", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-1554L);
      longArray0[1] = (long) 0;
      ArrayUtils.swap(longArray0, (-1), (int) (byte) (-115), (-436));
      assertArrayEquals(new long[] {(-1554L), 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[4] = (short) (-3139);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      int int0 = ArrayUtils.indexOf(charArray0, 'Z', (int) (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, 'U');
      assertNull(charArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'U';
      intArray0[1] = (-2271);
      intArray0[2] = (int) 'U';
      intArray0[3] = (int) 'U';
      intArray0[4] = (int) 'U';
      ArrayUtils.swap(intArray0, (-2271), 85, (-2150));
      assertArrayEquals(new int[] {85, (-2271), 85, 85, 85}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-757.6511558);
      doubleArray0[2] = 829.3;
      doubleArray0[3] = (-757.6511558);
      doubleArray0[4] = (-757.6511558);
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-757.6511558), 829.3, (-757.6511558), (-757.6511558)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-1));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 917;
      ArrayUtils.shift(intArray0, (-1951), 917, (-1376));
      assertArrayEquals(new int[] {917}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-128), 44);
      assertArrayEquals(new int[] {917}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-8);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-92));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-92), (byte) (-8)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-12), (byte) (-92), (byte) (-8), (byte) (-92)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = 9364L;
      longArray0[2] = (-1L);
      long[] longArray1 = ArrayUtils.add(longArray0, 2355L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), 9364L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-1L), 9364L, (-1L), 2355L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(4, longArray1.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (-1L);
      objectArray0[1] = (Object) (-1L);
      objectArray0[2] = (Object) 9364L;
      objectArray0[3] = (Object) 9364L;
      objectArray0[4] = (Object) (-1L);
      ArrayUtils.swap(objectArray0, (-2177), 1);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (-596), (int) (byte)0);
      assertArrayEquals(new float[] {20.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int int1 = new Byte((byte)20);
      assertEquals((byte)20, int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap((Object[]) null, (-2045), (int) (byte)0);
      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
      assertNull(characterArray0);
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(2965.952991);
      assertEquals(2965.952991, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(741.4133847847);
      assertEquals(741.4133847847, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {2965.952991, 741.4133847847}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      ArrayUtils.reverse((int[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = (-2343);
      intArray0[3] = 230;
      intArray0[4] = 1;
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {1, 230, (-2343), 1, 1}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-116));
      assertEquals((byte) (-116), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-41));
      assertEquals((byte) (-41), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)86);
      assertEquals((byte)86, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, 1393, 1393, 1393);
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2674, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1393;
      longArray0[1] = (long) 1393;
      Byte byte0 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = 'p';
      charArray0[2] = 'p';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      charArray0[6] = 'p';
      charArray0[7] = 'p';
      charArray0[8] = 'p';
      boolean boolean0 = ArrayUtils.contains((Object[]) null, (Object) byte0);
      assertFalse(boolean0);
      assertTrue(byte0.equals((Object)byte1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) '{';
      intArray0[1] = (int) '{';
      intArray0[2] = (int) 'p';
      ArrayUtils.reverse(intArray0);
      assertArrayEquals(new int[] {112, 123, 123}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, (int) (short)307, 90, (-592));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.addFirst((Byte[]) null, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, 1218);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2784));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2784);
      doubleArray0[1] = (double) (-2784);
      doubleArray0[2] = (double) (-2784);
      doubleArray0[3] = (double) (-2784);
      doubleArray0[4] = (double) (-2784);
      doubleArray0[5] = (double) (-2784);
      doubleArray0[6] = (-2285.5599);
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<Byte> class5 = Byte.class;
      classArray0[5] = class5;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      Class<Byte[]> class6 = Byte[].class;
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-66);
      Byte byte1 = new Byte((byte) (-66));
      assertEquals((byte) (-66), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class6);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = byte0;
      byteArray2[1] = byte0;
      byteArray2[2] = byte0;
      byteArray2[3] = (byte) (-66);
      boolean boolean0 = ArrayUtils.isSorted(byteArray2);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-66), (byte) (-66), (byte) (-66)}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-2784);
      longArray0[1] = (long) (byte) (-66);
      longArray0[2] = (long) (byte) (-66);
      longArray0[3] = (long) (byte) (-66);
      longArray0[4] = (long) (byte) (-66);
      longArray0[5] = (long) (byte) (-66);
      longArray0[6] = (long) (byte) (-66);
      longArray0[7] = (long) (-2784);
      longArray0[8] = (long) (byte) (-66);
      long[] longArray1 = new long[7];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (-1L);
      longArray1[1] = (long) (byte) (-66);
      longArray1[2] = (long) (byte) (-66);
      longArray1[3] = (long) (byte) (-66);
      longArray1[4] = (long) (byte) (-66);
      longArray1[5] = (long) (byte) (-66);
      longArray1[6] = (long) (byte) (-66);
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2784L), (-66L), (-66L), (-66L), (-66L), (-66L), (-66L), (-2784L), (-66L)}, longArray0);
      assertArrayEquals(new long[] {(-2784L), (-2784L), (-66L)}, longArray2);
      assertArrayEquals(new long[] {(-1L), (-66L), (-66L), (-66L), (-66L), (-66L), (-66L)}, longArray1);
      assertNotNull(longArray2);
      assertEquals(9, longArray0.length);
      assertEquals(3, longArray2.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)32;
      longArray0[1] = (long) (byte)32;
      longArray0[2] = (long) (byte)32;
      longArray0[3] = (long) (byte)32;
      longArray0[4] = (long) (byte)32;
      longArray0[5] = 28L;
      longArray0[6] = (-114L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, (long[]) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {32L, 32L, 32L, 32L, 32L, 28L, (-114L)}, longArray0);
      assertArrayEquals(new long[] {32L, 32L, 32L, 32L, 32L, 28L, (-114L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, 913L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {32L, 32L, 32L, 32L, 32L, 28L, (-114L)}, longArray0);
      assertArrayEquals(new long[] {32L, 32L, 32L, 32L, 32L, 28L, (-114L)}, longArray1);
      assertArrayEquals(new long[] {913L, 32L, 32L, 32L, 32L, 32L, 28L, (-114L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      assertEquals(8, longArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted(longArray1);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray2));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {32L, 32L, 32L, 32L, 32L, 28L, (-114L)}, longArray0);
      assertArrayEquals(new long[] {32L, 32L, 32L, 32L, 32L, 28L, (-114L)}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)32;
      ArrayUtils.shift(byteArray0, 108, 128, (int) (byte)115);
      assertArrayEquals(new byte[] {(byte)115, (byte)62, (byte)32}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 28L;
      objectArray0[1] = (Object) byte0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = (Object) (byte)115;
      objectArray0[4] = (Object) 32L;
      objectArray0[5] = (Object) 32L;
      objectArray0[6] = (Object) 32L;
      objectArray0[7] = (Object) (byte)115;
      objectArray0[8] = (Object) 32L;
      boolean boolean1 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 2107L;
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = ArrayUtils.removeElements(longArray0, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, 2107L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray1);
      assertArrayEquals(new long[] {2107L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      assertEquals(1, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      ArrayUtils.swap((byte[]) null, 446, 446, 446);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      charArray0[4] = 'f';
      charArray0[5] = 'Q';
      charArray0[6] = '7';
      charArray0[7] = '@';
      charArray0[8] = '<';
      ArrayUtils.shift(charArray0, 1, 1, 657);
      assertArrayEquals(new char[] {'J', '(', 'R', '9', 'f', 'Q', '7', '@', '<'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) 1);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((double) floatArray0[0]);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4, floatArray0.length);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-2118.5F));
      assertEquals((-2118.5F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float(1117.0);
      assertEquals(1117.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, (-2118.5F), 1117.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)46, (-3628));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)46, (byte)57, (byte) (-11), (byte) (-86), (byte) (-88), (byte)55, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 59, 1, 1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-2337);
      floatArray0[2] = 1.0F;
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.shift(intArray0, 3340, 113, 252);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap(intArray0, 1825, (-744));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-44)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-44), (byte) (-1)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)20;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (byte)0;
      ArrayUtils.swap(floatArray0, (-593), (int) (byte)0);
      assertArrayEquals(new float[] {20.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0.0F, (int) (byte)0, (double) 0.0F);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      byte byte0 = (byte)45;
      Byte byte1 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte)0;
      Byte byte3 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte4;
      byteArray0[1] = byte5;
      byteArray0[2] = byte3;
      byteArray0[3] = byte4;
      byteArray0[4] = byte3;
      Byte byte6 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte6);
      assertTrue(byte6.equals((Object)byte1));
      assertTrue(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) null);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (-2129437566));
      assertEquals(8, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(8, booleanArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) byte0;
      doubleArray0[1] = (double) byte0;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (double) byte2;
      doubleArray0[4] = (double) (-176L);
      doubleArray0[5] = 2809.1;
      doubleArray0[6] = (double) (-176L);
      boolean boolean1 = ArrayUtils.isNotEmpty(doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {45.0, 45.0, 3.0, 0.0, (-176.0), 2809.1, (-176.0)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 0;
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 1, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '}');
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (long) 0);
      assertNull(longArray1);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-1L));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)10;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3210;
      doubleArray0[1] = (double) (-4432);
      doubleArray0[2] = (double) (-4432);
      doubleArray0[3] = 46.0;
      doubleArray0[4] = 2001.6596747957112;
      doubleArray0[5] = (double) (short) (-3155);
      doubleArray0[7] = (double) (short) (-3155);
      doubleArray0[8] = (double) (short) (-3155);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 983.2302116640191);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {3210.0, (-4432.0), (-4432.0), 46.0, 2001.6596747957112, (-3155.0), 0.0, (-3155.0), (-3155.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)10, 17);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3210.0, (-4432.0), (-4432.0), 46.0, 2001.6596747957112, (-3155.0), 0.0, (-3155.0), (-3155.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      Byte byte0 = new Byte((byte)109);
      assertEquals((byte)109, (byte)byte0);
      assertNotNull(byte0);
      
      Double[] doubleArray0 = new Double[0];
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte)0, (-1626));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)12393;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (byte)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)12393}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)12393}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(2, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      int int1 = ArrayUtils.indexOf(booleanArray0, true, 0);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true, false, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, (float) (byte)0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short)1;
      ArrayUtils.swap(objectArray0, 16, 13, (int) (short)1503);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2258.5723F);
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) 953;
      floatArray0[3] = (float) 953;
      ArrayUtils.swap(floatArray0, 953, 30);
      assertArrayEquals(new float[] {(-2258.5723F), 1.0F, 953.0F, 953.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1689);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1689, (short)1, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)1);
      assertEquals(2, int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.shift(floatArray0, (-1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)0;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 1L, 1L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = '}';
      charArray0[2] = '?';
      charArray0[3] = 'r';
      Byte byte0 = new Byte((byte) (-39));
      assertEquals((byte) (-39), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = ArrayUtils.isSameType(byte0, object0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (byte) (-73);
      intArray0[3] = (int) 'R';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'R';
      intArray0[0] = (int) (short)1;
      longArray0[2] = (long) (byte) (-73);
      longArray0[3] = (long) 46;
      longArray0[4] = (long) 46;
      longArray0[5] = (long) 82;
      ArrayUtils.shift(longArray0, (-1246), (int) (short)1, (int) (byte) (-73));
      assertArrayEquals(new long[] {82L, 0L, (-73L), 46L, 46L, 82L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray2, shortArray1);
      assertSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray2.length);
      
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 82L, 1);
      assertEquals((-1), int0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-2430), (-557), (int) (short)1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-108), (-2147171937));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-108);
      intArray0[1] = (int) (byte) (-108);
      intArray0[2] = (-1979);
      intArray0[3] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-108), (-108), (-1979), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = ',';
      charArray0[3] = '9';
      charArray0[4] = 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '9');
      assertEquals("{3}", bitSet0.toString());
      assertEquals(4, bitSet0.length());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new char[] {'R', 'R', ',', '9', 'R'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(5, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (-108));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-1);
      floatArray0[1] = (float) ',';
      floatArray0[2] = (float) (-108);
      floatArray0[3] = 82.0F;
      floatArray0[4] = (float) '9';
      floatArray0[5] = (float) 'R';
      floatArray0[6] = (float) 'R';
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (-108.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 44.0F, (-108.0F), 82.0F, 57.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 44.0F, 82.0F, 57.0F, 82.0F, 82.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);
      assertSame(longArray0, longArray1);
      assertSame(longArray1, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      ArrayUtils.shift(intArray0, 2, 2, (-1062));
      assertArrayEquals(new int[] {2}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-8)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = '>';
      ArrayUtils.shift(charArray0, (int) (byte) (-8), (-2710), 303);
      assertArrayEquals(new char[] {'M', '>'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-8);
      intArray0[1] = (int) '>';
      intArray0[2] = (int) '>';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-8), 62, 62}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      long[] longArray0 = new long[0];
      ArrayUtils.swap(longArray0, 1, (int) (byte) (-8), (-2925));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      long[] longArray0 = new long[5];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.swap(longArray0, 76, 0, 76);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3365.4F);
      floatArray0[1] = (-2446.4F);
      floatArray0[2] = (-1741.2F);
      floatArray0[3] = (-2586.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 2413.97F;
      floatArray0[6] = (-546.0F);
      floatArray0[7] = (-2849.539F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-3365.4F), (-2446.4F), (-1741.2F), (-2586.0F), 1.0F, 2413.97F, (-546.0F), (-2849.539F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1246L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = (-864L);
      longArray0[5] = (-1148L);
      longArray0[6] = (-2190L);
      ArrayUtils.swap(longArray0, 2135350972, (-436), 0);
      assertArrayEquals(new long[] {1246L, 0L, 0L, 1L, (-864L), (-1148L), (-2190L)}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'T';
      charArray0[2] = ',';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R');
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new char[] {'_', 'T', ','}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(3, charArray0.length);
      
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '_';
      floatArray0[1] = (float) '_';
      floatArray0[2] = (float) ',';
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) 'R';
      floatArray0[5] = (float) (-1L);
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 'R';
      floatArray0[8] = (-131.71F);
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 82.0F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {95.0F, 95.0F, 44.0F, (-1.0F), (-1.0F), 0.0F, (-131.71F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {95.0F, 95.0F, 44.0F, (-1.0F), 82.0F, (-1.0F), 0.0F, 82.0F, (-131.71F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = (-881);
      int[] intArray1 = ArrayUtils.add(intArray0, 4);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4, (-881)}, intArray0);
      assertArrayEquals(new int[] {4, (-881), 4}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-881);
      longArray0[1] = (long) 4;
      longArray0[2] = 2410L;
      longArray0[3] = (long) 4;
      longArray0[4] = (long) 4;
      longArray0[5] = (long) 4;
      longArray0[6] = (long) 4;
      longArray0[7] = (long) (-881);
      ArrayUtils.shift(longArray0, (-1046), 4, (-2975));
      assertArrayEquals(new long[] {4L, (-881L), 4L, 2410L, 4L, 4L, 4L, (-881L)}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, (-4692), 1961, (-2967));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {82.0, 82.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)5;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (byte) (-73);
      intArray0[3] = (int) 'R';
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'R';
      intArray0[0] = (int) (short)1;
      longArray0[2] = (long) (byte) (-73);
      longArray0[3] = (long) 46;
      longArray0[4] = (long) 46;
      longArray0[5] = (long) 82;
      ArrayUtils.shift(longArray0, (-1246), (int) (short)1, (int) (byte) (-73));
      assertArrayEquals(new long[] {82L, 0L, (-73L), 46L, 46L, 82L}, longArray0);
      assertEquals(6, longArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertSame(shortArray0, shortArray2);
      assertSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray2.length);
      
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 82L, 1);
      assertEquals(1, int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {82.0, 82.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      ArrayUtils.shift(booleanArray0, (-2430), (-557), (int) (short)1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, true, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)0, (-570));
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 't';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i', 'i', 'i', 't'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'t', 'i', 'i', 'i', 't'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, (-2013265919), (float) (-2013265919));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2013265919, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)200;
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      short short1 = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char char0 = 't';
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 105L;
      floatArray0[1] = (float) (short)1064;
      floatArray0[2] = 670.344F;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 36;
      // Undeclared exception!
      try { 
        ArrayUtils.add(floatArray0, 36, 1304.7489F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 36, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSorted((int[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted((long[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-1);
      boolean boolean2 = ArrayUtils.isSameLength(byteArray0, byteArray1);
      assertFalse(boolean2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.shift(shortArray0, 640, 5, 120);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      shortArray0[1] = (short)720;
      shortArray0[2] = (short)1433;
      shortArray0[3] = (short) (-3074);
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)1433, (short) (-3074), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1635);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)1433, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)1433, (short) (-3074), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)1635;
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-3074);
      longArray0[1] = (long) (short) (-3074);
      longArray0[2] = (long) (short)1433;
      longArray0[3] = (long) 1635;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-3074L), (-3074L), 1433L, 1635L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray1.length);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.shift((Object[]) booleanArray0, 1, (int) (short)0, 1073741824);
      assertEquals(0, booleanArray0.length);
      
      ArrayUtils.shuffle((Object[]) booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new int[] {0, 1635}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Long long0 = new Long(472L);
      assertEquals(472L, (long)long0);
      assertNotNull(long0);
      
      Long[] longArray0 = new Long[1];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)8;
      floatArray0[1] = (float) (byte)8;
      floatArray0[2] = (float) 472L;
      floatArray0[3] = (float) 472L;
      floatArray0[4] = (float) 472L;
      floatArray0[5] = (float) (byte)8;
      floatArray0[6] = (float) 472L;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, (float[]) null);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {8.0F, 8.0F, 472.0F, 472.0F, 472.0F, 8.0F, 472.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {8.0F, 8.0F, 472.0F, 472.0F, 472.0F, 8.0F, 472.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (byte)8;
      doubleArray2[1] = (double) 8.0F;
      doubleArray2[2] = (double) 472.0F;
      doubleArray2[3] = (double) 8.0F;
      doubleArray2[4] = (double) 472.0F;
      doubleArray2[5] = (double) 472.0F;
      doubleArray2[6] = (double) 472.0F;
      doubleArray2[7] = (double) 8.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray2, 3873);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3873, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-52);
      ArrayUtils.swap(shortArray0, (int) (short) (-52), 608, 604);
      assertArrayEquals(new short[] {(short) (-52)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      byte byte0 = (byte)60;
      Byte byte1 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte)99;
      Byte byte3 = new Byte((byte)99);
      assertEquals((byte)99, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[7];
      byteArray0[0] = byte1;
      byteArray0[1] = byte3;
      byteArray0[2] = byte3;
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      Byte byte4 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[6] = byte4;
      Byte byte5 = ArrayUtils.get(byteArray0, 1178, (Byte) byte0);
      assertEquals((byte)60, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte0 == byte2);
      assertNotNull(byte5);
      assertEquals(7, byteArray0.length);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte5);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte0 == byte2);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(intArray0);
      assertTrue(boolean0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) byte2;
      floatArray0[1] = (float) byte0;
      floatArray0[2] = 1534.67F;
      floatArray0[3] = (float) (byte)42;
      floatArray0[4] = (float) byte2;
      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {99.0F, 60.0F, 1534.67F, 42.0F, 99.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {99.0F, 60.0F, 1534.67F, 42.0F, 99.0F, 99.0F, 60.0F, 1534.67F, 42.0F, 99.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(10, floatArray1.length);
      
      ArrayUtils.reverse((Object[]) byteArray1, 8, 1178);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byte0 == byte2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(6, byteArray1.length);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)60;
      doubleArray0[1] = 26.0;
      doubleArray0[2] = (double) 1178;
      doubleArray0[3] = (double) 1534.67F;
      doubleArray0[4] = (double) 60.0F;
      doubleArray0[5] = (double) 608;
      doubleArray0[6] = (double) 1534.67F;
      doubleArray0[7] = (double) 42.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, (double) 60.0F);
      assertEquals(7, int0);
      assertArrayEquals(new double[] {60.0, 26.0, 1178.0, 1534.6700439453125, 60.0, 608.0, 1534.6700439453125, 42.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      short[] shortArray1 = new short[1];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1622);
      short[] shortArray2 = ArrayUtils.removeElement(shortArray1, (short) (-3074));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1622)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-1622)}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray2.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3882;
      intArray0[1] = 0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 3882, 896);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3882, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, ';');
      assertArrayEquals(new char[] {';'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short) (-1622);
      objectArray0[1] = (Object) 3882;
      objectArray0[2] = (Object) 0;
      ArrayUtils.shift(objectArray0, (-744), (-744), 0);
      assertEquals(3, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.shift(booleanArray0, 2, 896, 3882);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3882);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3882, 3882, 0}, intArray1);
      assertArrayEquals(new int[] {3882, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-644), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -644, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[3] = 3025;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 3025}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 3025, (-2337), (-2337));
      assertArrayEquals(new int[] {0, 0, 0, 3025}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(0, (int[]) null, (int[]) null);
      assertNull(intArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0, 9, 2);
      assertArrayEquals(new int[] {0, 0, 0, 3025}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      char[] charArray0 = new char[6];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, characterArray0.length);
      
      Short[] shortArray0 = new Short[6];
      Short short0 = new Short((short)99);
      assertEquals((short)99, (short)short0);
      assertNotNull(short0);
      
      shortArray0[0] = short0;
      Short short1 = new Short((short)4891);
      assertEquals((short)4891, (short)short1);
      assertFalse(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[1] = short1;
      short short2 = (short)3291;
      Short short3 = new Short((short)3291);
      assertEquals((short)3291, (short)short3);
      assertFalse(short3.equals((Object)short1));
      assertTrue(short3.equals((Object)short2));
      assertFalse(short3.equals((Object)short0));
      assertNotNull(short3);
      
      shortArray0[2] = short3;
      Short short4 = new Short((short)59);
      assertEquals((short)59, (short)short4);
      assertFalse(short4.equals((Object)short0));
      assertFalse(short4.equals((Object)short1));
      assertFalse(short4.equals((Object)short3));
      assertFalse(short4.equals((Object)short2));
      assertNotNull(short4);
      
      shortArray0[3] = short4;
      try { 
        Short.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      int[] intArray0 = new int[9];
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
      
      int int0 = ArrayUtils.lastIndexOf(intArray0, 5);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "fW-kv+&V*c-][=N$T");
      assertEquals("0", string0);
      assertNotNull(string0);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSorted(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Byte", e);
      }
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 59;
      intArray0[2] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1246));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {77, 59, 77}, intArray0);
      assertEquals(3, intArray0.length);
      
      Byte byte0 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte0);
      assertNotNull(byte0);
      
      String string0 = ArrayUtils.toString((Object) byte0, "fW-kv+&V*c-][=N$T");
      assertEquals("-115", string0);
      assertNotNull(string0);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray2 = new Float[4];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      Float float1 = new Float((float) floatArray2[0]);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(4, floatArray2.length);
      
      floatArray2[1] = float1;
      Float float2 = new Float(1.0);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray2[2] = float2;
      Float float3 = new Float((float) floatArray2[2]);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      assertEquals(4, floatArray2.length);
      
      floatArray2[3] = float3;
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertNotSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 1.0F}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(4, floatArray3.length);
      assertEquals(4, floatArray2.length);
      
      boolean[] booleanArray1 = new boolean[0];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift((long[]) null, (-2136799649), (-2136799649), (-803));
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)9;
      Byte byte3 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)29);
      assertEquals((byte)29, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertEquals((byte)9, (byte)byte5);
      assertFalse(byte2 == byte0);
      assertFalse(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte6);
      assertFalse(byte0 == byte2);
      assertTrue(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte((byte) (-120));
      assertEquals((byte) (-120), (byte)byte7);
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte)9);
      assertEquals((byte)9, (byte)byte8);
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte(byte2);
      assertEquals((byte)9, (byte)byte9);
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte7));
      assertTrue(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte2 == byte0);
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte byte10 = ArrayUtils.get(byteArray0, (-101), byte3);
      assertEquals((byte)9, (byte)byte10);
      assertFalse(byte10.equals((Object)byte4));
      assertFalse(byte10.equals((Object)byte7));
      assertTrue(byte10.equals((Object)byte5));
      assertFalse(byte10.equals((Object)byte6));
      assertFalse(byte10.equals((Object)byte0));
      assertFalse(byte10.equals((Object)byte1));
      assertTrue(byte10.equals((Object)byte2));
      assertTrue(byte10.equals((Object)byte8));
      assertTrue(byte10.equals((Object)byte9));
      assertFalse(byte3.equals((Object)byte7));
      assertFalse(byte3.equals((Object)byte4));
      assertTrue(byte3.equals((Object)byte9));
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte8));
      assertFalse(byte3.equals((Object)byte6));
      assertTrue(byte3.equals((Object)byte5));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte10);
      assertEquals(8, byteArray0.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-120);
      shortArray0[1] = (short) byte2;
      shortArray0[2] = (short) (byte)9;
      shortArray0[3] = (short) byte2;
      shortArray0[4] = (short)7;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)0, (int) (byte) (-120));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short) (-120), (short)9, (short)9, (short)9, (short)7}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(5, shortArray0.length);
      
      // Undeclared exception!
      try { 
        bitSet0.get((-803), (int) (short) (-120));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex < 0: -803
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      int[] intArray0 = new int[2];
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      ArrayUtils.swap(floatArray1, 18688, 120, 2);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, (-744), (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-744), (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)20);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)20}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) 'f';
      doubleArray0[3] = (double) 'f';
      doubleArray0[4] = (double) '7';
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 'f';
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 102.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0, 55.0, 102.0, 102.0, 55.0, 2.0, 2.0, 2.0, 102.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 55.0, 102.0, 55.0, 2.0, 2.0, 2.0, 102.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      Byte byte0 = new Byte((byte)83);
      assertEquals((byte)83, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (int) 83, byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, ' ');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'o', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(2, charArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((Byte[]) null, (-1970), (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-83));
      assertEquals((byte) (-83), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, (int)  (-83), byte0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -83, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte byte6 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      byteArray0[5] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte7);
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      byteArray0[6] = byte7;
      Byte byte8 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte8);
      assertTrue(byte8.equals((Object)byte5));
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte6));
      assertTrue(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte7));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte0));
      assertNotNull(byte8);
      
      byteArray0[7] = byte8;
      Byte byte9 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte9);
      assertTrue(byte9.equals((Object)byte5));
      assertTrue(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte6));
      assertTrue(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte2));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte3));
      assertNotNull(byte9);
      
      byteArray0[8] = byte9;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 2146803418, byte8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146803418, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)32, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)32);
      assertNull(longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)32, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      byteArray0[4] = byte1;
      Byte byte4 = ArrayUtils.get(byteArray0, (int) byte0, byte1);
      assertEquals((byte)32, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertNotNull(byte4);
      assertEquals(5, byteArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) stringArray0, (Object) byte4, (int) byte0);
      assertEquals((-1), int0);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte3));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte1.equals((Object)byte2));
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      Integer integer0 = new Integer((short) (-3155));
      assertEquals((-3155), (int)integer0);
      assertNotNull(integer0);
      
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) (-1L);
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {62.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      LongStream longStream0 = mockRandom0.longs(0L);
      assertNotNull(longStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)0, (byte)1}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) doubleArray1, (Object) byte0, (int) (byte)1);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {62.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) byteArray0, (Object) byte0, (int) (byte)91);
      assertEquals((-1), int0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-2272L);
      longArray0[1] = 22L;
      longArray0[2] = 4234L;
      longArray0[3] = (-891L);
      longArray0[4] = (-2161L);
      ArrayUtils.swap(longArray0, 1506, 1506, 1506);
      assertArrayEquals(new long[] {(-2272L), 22L, 4234L, (-891L), (-2161L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {(-2272L), 22L, 4234L, (-891L), (-2161L)}, longArray0);
      assertEquals(5, longArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-252);
      shortArray0[1] = (short)642;
      shortArray0[2] = (short) (-822);
      boolean boolean1 = ArrayUtils.contains(shortArray0, (short) (-3808));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-252), (short)642, (short) (-822)}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      long[] longArray1 = ArrayUtils.subarray(longArray0, 1529, 2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-2272L), 22L, 4234L, (-891L), (-2161L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-822));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-822), (short) (-252), (short)642, (short) (-822)}, shortArray1);
      assertArrayEquals(new short[] {(short) (-252), (short)642, (short) (-822)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      boolean boolean2 = ArrayUtils.isSorted((double[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray0 = ArrayUtils.addAll((Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, object0, 440);
      assertEquals((-1), int0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = ArrayUtils.removeAll((Object) null, (BitSet) null);
      assertNull(object1);
      
      objectArray0[0] = null;
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 56);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 56;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {56.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      Byte byte1 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte1, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte1, byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte2));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      Byte byte3 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte3, byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      Byte byte4 = new Byte((byte) (-121));
      assertEquals((byte) (-121), (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte2, byte4);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte4));
      assertFalse(byte2.equals((Object)byte3));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[5] = abstractMap_SimpleImmutableEntry5;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry6 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleEntry0);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byte1.equals((Object)byte3));
      assertFalse(byte1.equals((Object)byte4));
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry6.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertNotNull(abstractMap_SimpleImmutableEntry6);
      
      abstractMap_SimpleImmutableEntryArray0[6] = abstractMap_SimpleImmutableEntry6;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry7 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte4, byte0);
      assertFalse(byte0.equals((Object)byte4));
      assertFalse(byte0.equals((Object)byte3));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry6));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry5));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntry7.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry7);
      
      abstractMap_SimpleImmutableEntryArray0[7] = abstractMap_SimpleImmutableEntry7;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.addAll(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(8, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(16, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      long[] longArray0 = new long[5];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, 68);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)110;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(byteArray0, (int) (byte)126);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 126, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray0, (-1278), 835, (-1278));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (byte)20;
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) (byte)0;
      int int1 = ArrayUtils.lastIndexOf(doubleArray1, 983.2302116640191);
      assertEquals((-1), int1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {20.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = ArrayUtils.subarray(doubleArray1, (int) (byte)20, (-121));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {20.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      char[] charArray0 = new char[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '\u0000', (-672));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '9';
      short[] shortArray0 = new short[1];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1072, (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(charArray0, '+', (int) (short)1072);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'+', '9', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-4432), (int) (short)0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 59, 1, 1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-2337);
      floatArray0[2] = 1.0F;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2139440638);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, true}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = '|';
      charArray0[2] = '|';
      charArray0[3] = 'T';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'T');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'T', '|', '|', 'T'}, charArray0);
      assertEquals(4, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'T', '|', '|', 'T'}, charArray0);
      assertArrayEquals(new char[] {'T', '|', '|', 'T', 'T', '|', '|', 'T'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(8, charArray1.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      ArrayUtils.reverse((float[]) null);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(751, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 751, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-69));
      assertEquals((-69), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (byte) (-69));
      Long long0 = new Long(2462L);
      assertEquals(2462L, (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-644);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-644.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.insert((-2146511369), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (long) 0;
      longArray0[2] = 0L;
      longArray0[3] = (long) 0;
      longArray0[4] = 0L;
      longArray0[5] = (long) 0;
      longArray0[6] = 0L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (-3183));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray0, 1577);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 0L;
      objectArray0[1] = (Object) 0L;
      objectArray0[2] = (Object) 0L;
      objectArray0[3] = (Object) 0L;
      objectArray0[4] = (Object) 0L;
      objectArray0[5] = (Object) 0L;
      objectArray0[6] = (Object) 0L;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'J';
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (short)1503;
      longArray0[3] = (long) (short)1503;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1503L, (-120));
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {74L, 0L, 1503L, 1503L}, longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[1];
      ArrayUtils.swap(floatArray0, 17, (-2954));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      ArrayUtils.shift(longArray0, 0, 0, 46);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-176L);
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf(doubleArray0, 90.0, (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-176.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-14));
      assertEquals((byte) (-14), (byte)byte0);
      assertNotNull(byte0);
      
      Object[] objectArray0 = new Object[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0, (int) (byte) (-14));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(0, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-14);
      BitSet bitSet1 = ArrayUtils.indexesOf(doubleArray0, (-14.0), (-3322));
      assertEquals(1, bitSet1.cardinality());
      assertFalse(bitSet1.isEmpty());
      assertEquals(64, bitSet1.size());
      assertEquals("{0}", bitSet1.toString());
      assertEquals(1, bitSet1.length());
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertArrayEquals(new double[] {(-14.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-249);
      shortArray0[4] = (short) (-249);
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0, (short) (-249), (short) (-249), (short)0, (short)0}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short) (-249));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      int int2 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'<', '<', '<'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      charArray0[4] = 'f';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1575);
      shortArray0[1] = (short) (-573);
      shortArray0[2] = (short)293;
      shortArray0[3] = (short) (-1575);
      shortArray0[4] = (short) (-573);
      shortArray0[5] = (short)293;
      shortArray0[6] = (short) (-2620);
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-573));
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short) (-1575), (short) (-573), (short)293, (short) (-1575), (short) (-573), (short)293, (short) (-2620)}, shortArray0);
      assertEquals(7, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (byte) (-115);
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      ArrayUtils.shift((byte[]) null, (int) (byte) (-111));
      byte[] byteArray0 = ArrayUtils.removeElements((byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      char[] charArray0 = new char[3];
      charArray0[0] = 'M';
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 59;
      intArray0[2] = (int) 'M';
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1246));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {77, 59, 77}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (int) 'M';
      intArray1[1] = (int) 'M';
      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray1);
      assertFalse(boolean0);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {77, 77}, intArray1);
      assertEquals(2, intArray1.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean[] booleanArray0 = new Boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElement((char[]) null, 'L');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-90);
      Byte byte1 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-7), (int)  (-90));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short) (-90);
      shortArray0[2] = (short) (byte) (-90);
      shortArray0[3] = (short) byte0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-90));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-90), (short) (-90), (short) (-90), (short) (-90)}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-90);
      doubleArray0[0] = (double) (short)24;
      doubleArray0[2] = (double) (short)24;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {24.0, 0.0, 24.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)24);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (byte) (-90);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (short) (-90);
      floatArray0[4] = (float) (short) (-90);
      floatArray0[5] = (float) (byte) (-90);
      floatArray0[6] = 166.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2612), (int) (short) (-90));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), 166.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Object[] objectArray0 = ArrayUtils.EMPTY_OBJECT_ARRAY;
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      ArrayUtils.reverse((long[]) null, (int) (short) (-90), (int) byte0);
      boolean boolean1 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {24.0, 0.0, 24.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = ';';
      charArray0[2] = '=';
      charArray0[3] = '2';
      charArray0[4] = '{';
      charArray0[5] = '-';
      ArrayUtils.shift(charArray0, (int) (byte) (-110));
      assertArrayEquals(new char[] {'=', '2', '{', '-', '=', ';'}, charArray0);
      assertEquals(6, charArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2612), 3004);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(floatArray1);
      assertTrue(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray0);
      assertSame(byteArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      booleanArray0[0] = boolean0;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, (boolean) boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(7, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      long long0 = 0L;
      longArray0[0] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)21;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)43);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)43, (byte)57, (byte) (-81), (byte)21}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-81), (byte)21}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, long0);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1, true);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      assertEquals(2, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = ':';
      charArray0[3] = 'D';
      charArray0[4] = 'e';
      charArray0[5] = 'T';
      charArray0[6] = 'W';
      charArray0[7] = 'Z';
      charArray0[8] = 'S';
      int int0 = ArrayUtils.indexOf(charArray0, '.', 1680);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'+', '9', ':', 'D', 'e', 'T', 'W', 'Z', 'S'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 28.0;
      doubleArray0[1] = 2244.9524798498;
      doubleArray0[2] = 0.0;
      int int0 = (-243);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(doubleArray0, (-243));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -243, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '2');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, 2173);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2173, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 119, 119);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(charArray0, (-396));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -396, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-90);
      Byte byte1 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-1), (int)  (-90));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short)24;
      shortArray0[2] = (short) (byte) (-90);
      shortArray0[3] = (short) (byte) (-90);
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-90));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-90), (short)24, (short) (-90), (short) (-90)}, shortArray0);
      assertArrayEquals(new short[] {(short)24}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-90);
      doubleArray0[1] = (double) (short)24;
      doubleArray0[2] = (double) (short)24;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-90.0), 24.0, 24.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)24);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (byte) (-90);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (short) (-90);
      floatArray0[4] = (float) (short) (-90);
      floatArray0[5] = (float) (byte) (-90);
      floatArray0[6] = 166.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2612), (int) (short)24);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), 166.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), 166.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-90.0), 24.0, 24.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-90.0), 24.0, 24.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 2316L;
      longArray0[1] = (-344L);
      longArray0[2] = 1985L;
      longArray0[3] = 105L;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1985L, 1150);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {2316L, (-344L), 1985L, 105L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      ArrayUtils.swap(charArray0, (-1), 1150, (-1));
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2316L;
      doubleArray0[1] = (-3516.0675268956843);
      doubleArray0[2] = (double) (-344L);
      doubleArray0[3] = (double) 1150;
      doubleArray0[4] = (double) 2316L;
      doubleArray0[5] = 2226.03407;
      doubleArray0[6] = (double) 105L;
      doubleArray0[7] = (double) 105L;
      doubleArray0[8] = (double) (-1);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2316.0, (-3516.0675268956843), (-344.0), 1150.0, 2316.0, 2226.03407, 105.0, 105.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(18, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte) (-105));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-105)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'n');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'n', 'n'}, charArray1);
      assertArrayEquals(new char[] {'n'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(2, charArray1.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[2] = (short)2;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short)0;
      ArrayUtils.shift((long[]) null, (int) (short) (-3171));
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-345.8178456), (int) (short)2, 100.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.contains((Object[]) shortArray1, (Object) byte0);
      assertFalse(boolean0);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-176L);
      floatArray0[1] = (float) 'f';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) '7';
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (-176L);
      floatArray0[6] = (float) 'R';
      floatArray0[7] = (float) 2;
      ArrayUtils.reverse(floatArray0, (int) (byte)69, (-1601));
      assertArrayEquals(new float[] {(-176.0F), 102.0F, 82.0F, 55.0F, 2.0F, (-176.0F), 82.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[1] = (double) (-1601);
      doubleArray0[2] = 1.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 27.0, 2, (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {69.0, (-1601.0), 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray1 = ArrayUtils.insert((-1), intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Byte[] byteArray0 = new Byte[7];
      Byte byte0 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)114);
      assertEquals((byte)114, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte byte4 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[4] = byte4;
      Byte byte5 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[5] = byte5;
      Byte byte6 = new Byte((byte)69);
      assertEquals((byte)69, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[6] = byte6;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray1.length);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      Character character0 = Character.valueOf('[');
      assertEquals('[', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)69;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (byte) (-117), 21.05384914113625);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {69.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);
      assertNull(charArray0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      Character[] characterArray0 = new Character[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(characterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      Character[] characterArray0 = new Character[0];
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, (-1), 1596, 0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1596;
      Long[] longArray0 = new Long[1];
      Long long0 = new Long(3161L);
      assertEquals(3161L, (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {3161L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte)0;
      boolean boolean1 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-100), (byte) (-100), (byte) (-106), (byte) (-57), (byte)93, (byte)93, (byte)0, (byte) (-125), (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive((Long[]) null);
      assertNull(longArray2);
      
      int int1 = ArrayUtils.lastIndexOf(longArray1, (long) (byte) (-100));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {3161L}, longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
      
      boolean boolean2 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Character[] characterArray0 = new Character[2];
      Character character0 = new Character('r');
      assertEquals('r', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      Character character1 = new Character('\"');
      assertEquals('\"', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      characterArray0[1] = character1;
      char[] charArray1 = ArrayUtils.toPrimitive(characterArray0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'r', '\"'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, characterArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      shortArray0[1] = (short)720;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-3074);
      shortArray0[4] = (short)0;
      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1635);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short) (-157);
      int int0 = ArrayUtils.lastIndexOf(intArray0, 896, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {0, (-157)}, intArray0);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(shortArray1);
      assertFalse(boolean1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-157), (short)720, (short)0, (short) (-3074), (short)0}, shortArray1);
      assertEquals(5, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '}';
      charArray0[2] = '~';
      charArray0[3] = '}';
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '~');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'~', '~', '}', '~', '}'}, charArray1);
      assertArrayEquals(new char[] {'~', '}', '~', '}'}, charArray0);
      assertNotNull(charArray1);
      assertEquals(5, charArray1.length);
      assertEquals(4, charArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) '~';
      ArrayUtils.shift(objectArray0, (-157), (-1262), (-103));
      assertEquals(1, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.shift(booleanArray0, (-103), 0, (int) (short)1635);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)158;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[3] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = new Short((short)0);
      assertEquals((short)0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      longArray0[2] = 105L;
      int[] intArray0 = new int[4];
      intArray0[0] = (-2337);
      intArray0[1] = (-93);
      intArray0[2] = (int) (short)1064;
      intArray0[3] = 2;
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 935);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2337), (-93), 1064, 2}, intArray0);
      assertArrayEquals(new int[] {935, (-2337), (-93), 1064, 2}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray1 = ArrayUtils.clone(shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      ArrayUtils.swap((char[]) null, (-1), (-1), 1453);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      int int2 = ArrayUtils.lastIndexOf(longArray0, (-528L));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, (int) (short) (-3155));
      assertArrayEquals(new int[] {(-3155)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (byte)8);
      assertArrayEquals(new float[] {8.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean1 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean1);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      ArrayUtils.shift((Object[]) null, 2172, 2172, 3);
      ArrayUtils.swap((float[]) null, 14, 1632);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      float[] floatArray1 = ArrayUtils.add(floatArray0, 722.71F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {722.71F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte) (-66);
      byteArray1[5] = (byte) (-112);
      byteArray1[6] = (byte) (-115);
      int int0 = ArrayUtils.indexOf(byteArray1, (byte)26);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)127, (byte)48, (byte) (-2), (byte) (-66), (byte) (-112), (byte) (-115)}, byteArray1);
      assertEquals(7, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      ArrayUtils.swap((float[]) null, (-1682), 7, 899);
      MockRandom mockRandom0 = new MockRandom((-1682));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, (int) (byte) (-10));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (int) (short)0);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)0, (-4));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false, (-4));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[0];
      char[] charArray2 = ArrayUtils.removeAll(charArray1, intArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)8);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)1064);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      int int2 = ArrayUtils.indexOf((char[]) null, '<');
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 102;
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = ArrayUtils.removeAll(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertArrayEquals(new int[] {102}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {102}, intArray3);
      assertNotNull(intArray3);
      assertEquals(1, intArray1.length);
      assertEquals(0, intArray2.length);
      assertEquals(1, intArray3.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[1] = ']';
      charArray0[2] = 'S';
      charArray0[3] = '@';
      charArray0[4] = 'B';
      charArray0[6] = 'Q';
      charArray0[7] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', ']', 'S', '@', 'B', '\u0000', 'Q', 'f'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-955), (-955));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ']';
      Object object0 = ArrayUtils.toPrimitive((Object) 'f');
      assertEquals('f', object0);
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 'B';
      objectArray0[4] = (Object) '\u0000';
      charArray0[5] = 'B';
      ArrayUtils.swap(objectArray0, (-4378), (-2337), (-955));
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'f';
      floatArray0[1] = (float) 'B';
      ArrayUtils.swap(floatArray0, (-2337), 0);
      assertArrayEquals(new float[] {102.0F, 66.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Object object1 = ArrayUtils.toPrimitive(objectArray0[3]);
      assertEquals('B', object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals(6, objectArray0.length);
      
      ArrayUtils.shift(objectArray0, (-1613));
      assertEquals(6, objectArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 66.0F;
      doubleArray0[1] = (-697.0);
      doubleArray0[2] = (double) (-1613);
      doubleArray0[3] = (double) (-955);
      doubleArray0[4] = (double) 'f';
      doubleArray0[5] = (double) (-2337);
      doubleArray0[6] = 277.09923;
      doubleArray0[7] = (double) (-955);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {66.0, (-697.0), (-1613.0), (-955.0), 102.0, (-2337.0), 277.09923, (-955.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-157);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-157);
      doubleArray0[1] = (double) (short)720;
      doubleArray0[2] = (double) (short)720;
      doubleArray0[3] = (double) (short) (-157);
      doubleArray0[4] = (double) (short)720;
      doubleArray0[5] = (double) (short) (-157);
      doubleArray0[6] = 14.0;
      doubleArray0[7] = (double) (short)720;
      doubleArray0[8] = (double) (short) (-157);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 14.0;
      doubleArray1[1] = 14.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) (short) (-157);
      doubleArray1[4] = 14.0;
      doubleArray1[5] = (double) (short) (-157);
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-157.0), 720.0, 720.0, (-157.0), 720.0, (-157.0), 14.0, 720.0, (-157.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {720.0, 720.0, 720.0, (-157.0), 720.0, (-157.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {14.0, 14.0, (-1.0), (-157.0), 14.0, (-157.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short) (-157), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-142);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Boolean[] booleanArray0 = ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short) (-142);
      longArray0[1] = (long) (-2363);
      longArray0[2] = (long) (-2363);
      longArray0[3] = (-84L);
      ArrayUtils.shift(longArray0, (-1345), (-2363), (-2363));
      assertArrayEquals(new long[] {(-142L), (-2363L), (-2363L), (-84L)}, longArray0);
      assertEquals(4, longArray0.length);
      
      Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, 'null', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte3));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte7;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = new byte[24];
      byteArray2[0] = (byte) (-52);
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte) (-52);
      byteArray2[3] = (byte) (-12);
      byteArray2[4] = byte0;
      byteArray2[5] = (byte) (-42);
      int[] intArray0 = new int[0];
      byte[] byteArray3 = ArrayUtils.removeAll(byteArray2, intArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(byteArray3);
      assertEquals(0, intArray0.length);
      assertEquals(24, byteArray3.length);
      assertEquals(24, byteArray2.length);
      
      Byte byte8 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte6));
      assertNotNull(byte8);
      
      Byte byte9 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte9);
      assertFalse(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte4));
      assertNotNull(byte9);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'p');
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) byteArray0, (Object) null);
      assertFalse(boolean1);
      assertSame(byteArray0, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '-42', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Map<Object, Object> map0 = ArrayUtils.toMap(byteArray0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-5L);
      int[] intArray0 = new int[3];
      intArray0[0] = 127;
      intArray0[1] = (-2450);
      intArray0[2] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, Integer.MAX_VALUE);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {127, (-2450), 0}, intArray0);
      assertArrayEquals(new int[] {127, (-2450), 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, (-1), (-2811), (-990));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)78);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)78}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 100.38);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(objectArray0);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte) (-90);
      Byte byte1 = new Byte((byte) (-90));
      assertEquals((byte) (-90), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.subarray(byteArray1, (-7), (int)  (-90));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte) (-90);
      shortArray0[1] = (short)24;
      shortArray0[2] = (short) (byte) (-90);
      shortArray0[3] = (short) byte0;
      short[] shortArray1 = ArrayUtils.removeAllOccurences(shortArray0, (short) (-90));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-90), (short)24, (short) (-90), (short) (-90)}, shortArray0);
      assertArrayEquals(new short[] {(short)24}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-90);
      doubleArray0[1] = (double) (short)24;
      doubleArray0[2] = (double) (short)24;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-90.0), 24.0, 24.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((char[]) null, (int) (short)24);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) byte0;
      floatArray0[1] = (float) (byte) (-90);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (short) (-90);
      floatArray0[4] = (float) (short) (-90);
      floatArray0[5] = (float) (byte) (-90);
      floatArray0[6] = 166.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2612), (int) (short)24);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), 166.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), (-90.0F), 166.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray2));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(objectArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      assertEquals(0, byteArray2.length);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-126));
      assertEquals((byte) (-126), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-126);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)3580;
      shortArray0[1] = (short)20182;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1064, (int) (short)3580);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)3580, (short)20182, (short)0, (short)1, (short)1064, (short)1}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 't';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', 't', 'i', 'i', 'i'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'i', 't', 'i', 'i', 'i'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(5, characterArray0.length);
      assertEquals(5, charArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126), (byte) (-126)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray0, byteArray2);
      assertSame(byteArray2, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 8.186100006103516;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-907.35096471);
      doubleArray0[4] = 200.0;
      doubleArray0[5] = 1187.0;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 777.0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {8.186100006103516, (-1.0), 0.0, (-907.35096471), 200.0, 1187.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int[] intArray0 = new int[4];
      intArray0[0] = (-28);
      intArray0[1] = (int) (byte) (-26);
      intArray0[2] = (-28);
      intArray0[3] = 2146110576;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2146110576, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      long[] longArray0 = new long[8];
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)322;
      shortArray0[1] = (short) (-1389);
      shortArray0[2] = (short) (-52);
      shortArray0[3] = (short)9364;
      shortArray0[4] = (short)4083;
      ArrayUtils.swap(shortArray0, (-115), 2147087157, 1178);
      assertArrayEquals(new short[] {(short)322, (short) (-1389), (short) (-52), (short)9364, (short)4083}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)9364;
      longArray0[1] = (long) (short)9364;
      longArray0[2] = (long) 2147087157;
      longArray0[3] = (long) (short)322;
      longArray0[4] = (long) (short) (-52);
      longArray0[5] = (long) (short)9364;
      longArray0[6] = (long) (short) (-52);
      longArray0[7] = (long) (short)4083;
      longArray0[8] = (long) 1178;
      boolean boolean0 = ArrayUtils.contains(longArray0, 2147087157L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {9364L, 9364L, 2147087157L, 322L, (-52L), 9364L, (-52L), 4083L, 1178L}, longArray0);
      assertEquals(9, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayUtils.shuffle(longArray0);
      assertArrayEquals(new long[] {9364L, 2147087157L, 322L, (-52L), 9364L, (-52L), 4083L, 1178L, 9364L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)4083;
      intArray0[1] = (int) (short)4083;
      intArray0[2] = (int) (short) (-52);
      intArray0[3] = (int) (short)9364;
      intArray0[4] = 2448;
      intArray0[5] = (int) (short)9364;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(shortArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9364, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (-429L);
      longArray0[2] = 4826L;
      longArray0[3] = (-1117L);
      longArray0[4] = (-3153L);
      longArray0[5] = (-1564L);
      longArray0[6] = 1140L;
      longArray0[7] = 103L;
      boolean boolean0 = ArrayUtils.contains(longArray0, (-1564L));
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-1L), (-429L), 4826L, (-1117L), (-3153L), (-1564L), 1140L, 103L}, longArray0);
      assertEquals(8, longArray0.length);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-1), object0);
      assertNotNull(object0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-84);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte) (-11));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-84)}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      boolean boolean0 = ArrayUtils.contains(longArray0, 0L);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(883);
      assertEquals(883, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(1400);
      assertEquals(1400, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(10);
      assertEquals(10, (int)integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(18688);
      assertEquals(18688, (int)integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[5];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      ArrayUtils.shift(charArray0, 18688);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertEquals(1, charArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 166.0F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1400, (-1562));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {166.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(1, floatArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0);
      assertSame(integerArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      ArrayUtils.shift(longArray0, 0, 0, 46);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurences((short[]) null, (short)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-176L);
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf(doubleArray0, 90.0, (int) (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-176.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray0, 56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2577;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)2577, (short)7, (short)0, (short)0, (short)0, (short) (-1), (short)0, (short)0, (short) (-1)}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, (long) (short)0);
      assertNull(longArray0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((double) (short) (-1));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((-5110.5239279));
      assertEquals((-5110.524F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float(1209.2106477698007);
      assertEquals(1209.2107F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 1.0F);
      assertArrayEquals(new float[] {(-1.0F), (-5110.524F), 1209.2107F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(floatArray1, 3881);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3881, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
      assertNull(doubleArray0);
      
      Byte byte0 = new Byte((byte) (-80));
      assertEquals((byte) (-80), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[3];
      byteArray0[0] = byte0;
      byteArray0[1] = byte1;
      byteArray0[2] = byte0;
      Byte byte2 = ArrayUtils.get(byteArray0, (int)  (-3074));
      assertNull(byte2);
      assertEquals(3, byteArray0.length);
      
      String string0 = ArrayUtils.toString((Object) null, "void");
      assertEquals("void", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1575));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      long[] longArray0 = ArrayUtils.subarray((long[]) null, (-911), (-1));
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3171);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals(2, int0);
      assertEquals(11, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short) (-3171);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (int) (short)2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-3171.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4432);
      intArray0[1] = (int) (short) (-3171);
      intArray0[0] = (-4432);
      intArray0[3] = (-4432);
      intArray0[4] = (int) (short)1117;
      intArray0[5] = (int) (short)1117;
      ArrayUtils.shift((long[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      ArrayUtils.shift((long[]) null, 2798);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((long[]) null, 364L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)120;
      Byte byte3 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertEquals((byte)120, (byte)byte5);
      assertFalse(byte2 == byte0);
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte2);
      assertEquals((byte)120, (byte)byte7);
      assertFalse(byte2 == byte0);
      assertFalse(byte7.equals((Object)byte6));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte8);
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte2));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte5));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte) (-46));
      assertEquals((byte) (-46), (byte)byte9);
      assertFalse(byte9.equals((Object)byte8));
      assertFalse(byte9.equals((Object)byte0));
      assertFalse(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte1));
      assertFalse(byte9.equals((Object)byte3));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte4));
      assertFalse(byte9.equals((Object)byte5));
      assertFalse(byte9.equals((Object)byte7));
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte2;
      intArray0[1] = (int) (byte)120;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) byte0, (int) (byte)120);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte0 == byte2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {120, 120}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray1 = ArrayUtils.removeElement((long[]) null, (-333L));
      assertNull(longArray1);
      
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-46);
      byteArray2[1] = (byte)40;
      byteArray2[2] = (byte)120;
      byteArray2[3] = byte2;
      byteArray2[4] = (byte)120;
      byteArray2[5] = byte2;
      byteArray2[6] = byte0;
      ArrayUtils.swap(byteArray2, 681, (-741), (int) (byte)40);
      assertArrayEquals(new byte[] {(byte) (-46), (byte)40, (byte)120, (byte)120, (byte)120, (byte)120, (byte)40}, byteArray2);
      assertEquals(7, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte1;
      byteArray0[1] = byte7;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      byte[] byteArray2 = new byte[24];
      byteArray2[0] = (byte) (-52);
      byteArray2[1] = (byte)2;
      byteArray2[2] = (byte) (-52);
      byteArray2[3] = (byte) (-12);
      byteArray2[4] = byte0;
      byteArray2[5] = (byte) (-42);
      int[] intArray0 = new int[0];
      byte[] byteArray3 = ArrayUtils.removeAll(byteArray2, intArray0);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(byteArray3);
      assertEquals(0, intArray0.length);
      assertEquals(24, byteArray3.length);
      assertEquals(24, byteArray2.length);
      
      Byte byte8 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte8);
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte1));
      assertTrue(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte4));
      assertNotNull(byte8);
      
      int[] intArray1 = ArrayUtils.insert((int) (byte)2, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-59);
      intArray2[1] = (int) (byte) (-12);
      int[] intArray3 = ArrayUtils.clone(intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertArrayEquals(new int[] {(-59), (-12)}, intArray2);
      assertArrayEquals(new int[] {(-59), (-12)}, intArray3);
      assertNotNull(intArray3);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray3.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      charArray0[1] = '\"';
      charArray0[2] = '/';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(charArray0, intArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -12, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-10);
      intArray0[2] = (int) (byte) (-10);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-10);
      doubleArray0[1] = 0.0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte) (-10), 20, (double) (-18.1861F));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-10.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double((-1));
      assertEquals((-1.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[0]);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)integerArray0[0];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = new Byte[3];
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      longArray0[0] = (long) (byte)byte1;
      byteArray0[2] = byte0;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      Short[] shortArray0 = new Short[0];
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1064;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1064);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)1064}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (-110.0), 4);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (short)200, (double) 0);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.contains((int[]) null, 5);
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new short[] {(short)1064}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      double[] doubleArray1 = ArrayUtils.toPrimitive((Double[]) null, 0.1);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 1.5);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 1.5, 1.5}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.swap(doubleArray1, 1812, 1812, 1812);
      assertArrayEquals(new double[] {1.5, 1.5, 1.5, 1.5, 1.5, 1.5}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 0, 3025, 1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-2337);
      floatArray0[3] = (float) 1;
      ArrayUtils.swap(floatArray0, (-1), 9);
      assertArrayEquals(new float[] {0.0F, (-2337.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3025;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2337.0F);
      doubleArray0[4] = (double) (-2337);
      doubleArray0[5] = (-1.0);
      ArrayUtils.swap(floatArray0, (-3155), 3025, 3025);
      assertArrayEquals(new float[] {0.0F, (-2337.0F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray1);
      assertEquals(0, integerArray1.length);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(2525.0);
      assertEquals(2525.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      doubleArray1[2] = (Double) (-1.0);
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[3] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 3025.0);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2525.0, 3025.0, (-1.0), 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      Short[] shortArray0 = new Short[2];
      short short0 = (short)57;
      Short short1 = new Short((short)57);
      assertEquals((short)57, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short)57, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      short[] shortArray0 = new short[20];
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) (short)0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 59, 1, 1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-2337);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 1;
      ArrayUtils.swap(floatArray0, (-1), 9);
      assertArrayEquals(new float[] {0.0F, (-2337.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3025;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) (-2337.0F);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-1.0);
      ArrayUtils.swap(floatArray0, (-3155), 3025, 3025);
      assertArrayEquals(new float[] {0.0F, (-2337.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertSame(integerArray1, integerArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray1.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double0 = new Double(2525.0);
      assertEquals(2525.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) 3025.0;
      doubleArray1[2] = (Double) (-1.0);
      Double double1 = new Double(0.0);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray1[3] = double1;
      double[] doubleArray2 = ArrayUtils.toPrimitive(doubleArray1, 1893.8759);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2525.0, 3025.0, (-1.0), 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      Short[] shortArray0 = new Short[2];
      short short0 = (short)57;
      Short short1 = new Short((short)57);
      assertEquals((short)57, (short)short1);
      assertTrue(short1.equals((Object)short0));
      assertNotNull(short1);
      
      shortArray0[0] = short1;
      Short short2 = new Short(short0);
      assertEquals((short)57, (short)short2);
      assertTrue(short2.equals((Object)short0));
      assertTrue(short2.equals((Object)short1));
      assertNotNull(short2);
      
      shortArray0[1] = short2;
      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray1.length);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((short[]) null, (short)16);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((short[]) null, (int) (short)16, (short) (-4824));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 16, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(shortArray0, 7, (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals(11, shortArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      int int2 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, (int) (short)2);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-4432);
      intArray0[1] = (int) (short) (-3155);
      intArray0[0] = (-4432);
      intArray0[3] = (-4432);
      intArray0[4] = (int) (short)1117;
      intArray0[5] = (int) (short)1117;
      intArray0[6] = (-4432);
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray1, intArray0);
      assertSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-4432), (-3155), 0, (-4432), 1117, 1117, (-4432)}, intArray1);
      assertArrayEquals(new int[] {(-4432), (-3155), 0, (-4432), 1117, 1117, (-4432)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      Byte byte0 = new Byte((byte) (-92));
      assertEquals((byte) (-92), (byte)byte0);
      assertNotNull(byte0);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, byte0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, (Byte) null);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry3);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertFalse(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray1 = ArrayUtils.removeAllOccurences(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntry2);
      assertNotSame(abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray1);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry3);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry4);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry0);
      assertNotSame(abstractMap_SimpleImmutableEntry2, abstractMap_SimpleImmutableEntry1);
      assertNotSame(abstractMap_SimpleImmutableEntryArray1, abstractMap_SimpleImmutableEntryArray0);
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertFalse(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry1));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertFalse(abstractMap_SimpleImmutableEntryArray1.equals((Object)abstractMap_SimpleImmutableEntryArray0));
      assertNotNull(abstractMap_SimpleImmutableEntryArray1);
      assertEquals(5, abstractMap_SimpleImmutableEntryArray0.length);
      assertEquals(2, abstractMap_SimpleImmutableEntryArray1.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.insert((-1), charArray0, charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) null);
      assertNull(stringArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 12;
      longArray0[2] = 1L;
      longArray0[3] = 2222L;
      longArray0[1] = 2222L;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-1123L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 2222L, 1L, 2222L, 0L}, longArray0);
      assertArrayEquals(new long[] {(-1123L), 1L, 2222L, 1L, 2222L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      
      ArrayUtils.reverse(charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      String string0 = ArrayUtils.toString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      String string0 = ArrayUtils.toString((Object) null);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      byte byte0 = (byte)108;
      Byte byte1 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      String string0 = ArrayUtils.toString((Object) byte1);
      assertEquals("108", string0);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(string0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'b';
      charArray0[1] = 'M';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = 'D';
      charArray0[5] = 'X';
      charArray0[6] = '+';
      charArray0[7] = 'u';
      charArray0[8] = 'b';
      int int0 = ArrayUtils.indexOf(charArray0, 'c');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'b', 'M', '9', '9', 'D', 'X', '+', 'u', 'b'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Byte byte2 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte2);
      assertTrue(boolean0);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-94);
      intArray0[1] = (int) 'D';
      intArray0[2] = (int) '+';
      intArray0[3] = 88;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-94), 68, 43, 88}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, intArray0.length);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(10, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((char[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-4));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-4), (-1322));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, false, (-344));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray2 = ArrayUtils.removeAll(charArray1, intArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, intArray0.length);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-10);
      intArray0[2] = (int) (byte) (-10);
      ArrayUtils.swap(floatArray0, (-2758), (-10), (-1682));
      assertArrayEquals(new float[] {(-18.1861F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      boolean boolean1 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      assertEquals(1, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeAllOccurrences(longArray0, (long) (-10));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      char[] charArray0 = new char[0];
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)32, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1.0;
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.removeAllOccurrences((long[]) null, (long) (byte)32);
      assertNull(longArray1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)32, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      ArrayUtils.reverse((long[]) null, (int) byte0, (-183));
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 517.73114F);
      assertArrayEquals(new float[] {517.73114F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      ArrayUtils.swap((Object[]) floatArray0, (int) (byte)0, 16, (int) (byte)0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3048);
      floatArray0[1] = (float) (-3048);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) true;
      ArrayUtils.swap(objectArray0, (-693), 2, 2);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap(floatArray0, 2, (-615));
      assertArrayEquals(new float[] {0.0F, (-3048.0F), (-3048.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short)1117;
      shortArray0[2] = (short)1117;
      shortArray0[3] = (short)1117;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1117);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1117, (short)1117, (short)1117, (short)1117}, shortArray0);
      assertArrayEquals(new short[] {(short)1117, (short)1117, (short)1117, (short)1117, (short)1117}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, true, 3);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int1 = 515;
      // Undeclared exception!
      try { 
        ArrayUtils.add(booleanArray0, (-693), false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -693, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-54), (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (byte) (-54);
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)0;
      doubleArray0[5] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 917;
      intArray0[1] = (int) (byte)46;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)46;
      intArray0[4] = (-744);
      ArrayUtils.shift(intArray0, 0, 1143, (int) (byte)0);
      assertArrayEquals(new int[] {917, 46, 0, 46, (-744)}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-2450), (int) (byte) (-54));
      assertArrayEquals(new int[] {917, 46, 0, 46, (-744)}, intArray0);
      assertEquals(5, intArray0.length);
      
      Float float0 = new Float(200.0);
      assertEquals(200.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 917);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)2;
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, (short[]) null);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray0);
      assertArrayEquals(new short[] {(short)2, (short)2}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(2, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1551);
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, (int) (short) (-1551));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1551, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[11];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)293;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)293);
      assertEquals(3, int0);
      assertEquals(11, shortArray0.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), 3);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      Byte byte0 = new Byte((byte) (-15));
      assertEquals((byte) (-15), (byte)byte0);
      assertNotNull(byte0);
      
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove(shortArray0, 1061);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1061, Length: 11
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      longArray0[2] = 105L;
      longArray0[3] = 2316L;
      ArrayUtils.swap(doubleArray0, 1, 36, 129);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      ArrayUtils.swap((double[]) null, 512, 512, 512);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, (-3595));
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-49));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte) (-1));
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(5, bitSet0.length());
      assertEquals(5, bitSet0.cardinality());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 11;
      intArray0[1] = 434;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 127;
      intArray0[1] = (-2450);
      intArray0[6] = 0;
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-2450), (-1), 0, 127, 0, 0, Integer.MAX_VALUE, 0}, intArray0);
      assertArrayEquals(new int[] {(-2450), (-1), 127, Integer.MAX_VALUE}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 127;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2376.72035;
      ArrayUtils.swap(doubleArray0, 0, 0, 2873);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 127.0, 0.0, 0.0, 2376.72035}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      float[] floatArray0 = new float[3];
      ArrayUtils.shift(floatArray0, 93);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, (-744), (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-744), (int) (byte)0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)20;
      floatArray0[2] = (float) (byte)20;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) (byte)20;
      floatArray0[8] = (float) (byte)0;
      ArrayUtils.shift(floatArray0, (-744));
      assertArrayEquals(new float[] {(-1.0F), 20.0F, 0.0F, 0.0F, 20.0F, 20.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      double[] doubleArray0 = new double[0];
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      String[] stringArray1 = ArrayUtils.toStringArray((Object[]) stringArray0, "java.lang.Object");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(stringArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "java.lang.Object";
      stringArray2[1] = "java.lang.Object";
      stringArray2[2] = "HashCodeBuilder requires an odd multiplier";
      stringArray2[3] = "java.lang.Object";
      stringArray2[4] = "java.lang.Object";
      stringArray2[5] = "java.lang.Object";
      stringArray2[6] = "java.lang.Object";
      stringArray2[7] = "java.lang.Object";
      stringArray2[8] = "<v_2;'6(+]";
      String[] stringArray3 = ArrayUtils.nullToEmpty(stringArray2);
      assertSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertEquals(9, stringArray3.length);
      assertEquals(9, stringArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)99}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((char[]) null, '/');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      ArrayUtils.shift(floatArray1, (-3155), 1845, (-1535));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-32.6489F)}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-176L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      long[] longArray2 = ArrayUtils.addFirst(longArray1, (-176L));
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray0);
      assertNotSame(longArray2, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertArrayEquals(new long[] {0L, (-176L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {(-176L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(1, longArray2.length);
      
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '`');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) (byte)32;
      longArray3[1] = (-176L);
      longArray3[2] = (long) '`';
      longArray3[3] = (-573L);
      longArray3[4] = (long) '`';
      boolean boolean0 = ArrayUtils.isSameLength(longArray3, longArray0);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray3);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertFalse(longArray0.equals((Object)longArray3));
      assertFalse(longArray0.equals((Object)longArray2));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertArrayEquals(new long[] {0L, (-176L)}, longArray0);
      assertArrayEquals(new long[] {32L, (-176L), 96L, (-573L), 96L}, longArray3);
      assertEquals(2, longArray0.length);
      assertEquals(5, longArray3.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      boolean boolean1 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)1;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)0;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (short)0;
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 1L, 1L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(0, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (int) (short) (-3152), (int) (short) (-1));
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(8, booleanArray0.length);
      
      long[] longArray2 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 1L, 1L, 0L, 1L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 1L, 1L, 0L, 1L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray2.length);
      
      ArrayUtils.reverse(booleanArray0, (int) (short) (-3152), (int) (short) (-926));
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      long[] longArray0 = new long[8];
      longArray0[0] = (-436L);
      longArray0[1] = (long) 46;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 46;
      longArray0[4] = (long) 46;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 46;
      longArray0[7] = (long) 46;
      ArrayUtils.shift(longArray0, 215, Integer.MAX_VALUE, (-130));
      assertArrayEquals(new long[] {(-436L), 46L, 0L, 46L, 46L, 0L, 46L, 46L}, longArray0);
      assertEquals(8, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-1602));
      assertNull(shortArray0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 46L;
      doubleArray1[1] = 3422.80414093199;
      doubleArray1[2] = 1.5;
      doubleArray1[3] = (-706.005619);
      doubleArray1[4] = (double) (-436L);
      doubleArray1[5] = (double) (-130);
      doubleArray1[6] = (double) 0L;
      double[] doubleArray2 = ArrayUtils.removeAllOccurrences(doubleArray1, 3422.80414093199);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {46.0, 1.5, (-706.005619), (-436.0), (-130.0), 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {46.0, 3422.80414093199, 1.5, (-706.005619), (-436.0), (-130.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-436L), 46L, 0L, 46L, 46L, 0L, 46L, 46L}, longArray0);
      assertArrayEquals(new long[] {(-436L), 46L, 0L, 46L, 46L, 0L, 46L, 46L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(8, longArray1.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.swap(charArray0, 0, Integer.MAX_VALUE, (-2360));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      ArrayUtils.swap(objectArray0, 0, (-3882), (-1393));
      assertEquals(4, objectArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)1503;
      floatArray0[1] = (float) (short)1503;
      floatArray0[2] = (-2258.5723F);
      floatArray0[3] = (float) (-1393);
      floatArray0[4] = (float) (short)1503;
      floatArray0[5] = 2326.0F;
      ArrayUtils.swap(floatArray0, 1, (-4387), 226);
      assertArrayEquals(new float[] {1503.0F, (-2258.5723F), (-1393.0F), 1503.0F, 2326.0F, 1503.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 4453L);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.shuffle(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new byte[] {(byte)60, (byte)40, (byte)2}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new byte[] {(byte)60, (byte)40, (byte)2}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(3, byteArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      byteArray2[0] = (Byte) (byte)2;
      Byte byte0 = new Byte((byte) (-118));
      assertEquals((byte) (-118), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'p');
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) (short) (-1575);
      boolean boolean1 = ArrayUtils.contains(objectArray0, (Object) byte1);
      assertFalse(boolean1);
      assertFalse(byte1.equals((Object)byte0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-49.57));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-176L);
      floatArray0[1] = (float) 'f';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) '7';
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) (-176L);
      floatArray0[6] = (float) 'R';
      floatArray0[7] = (float) 2;
      ArrayUtils.reverse(floatArray0, (int) (byte)69, (-1601));
      assertArrayEquals(new float[] {(-176.0F), 102.0F, 82.0F, 55.0F, 2.0F, (-176.0F), 82.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[1] = (double) (-1601);
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-2101.0084963));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0, (-1601.0), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {69.0, (-1601.0), 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.reverse((boolean[]) null);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, (-176L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (short)1;
      ArrayUtils.swap(objectArray0, 16, 13, (int) (short)1503);
      assertEquals(2, objectArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2258.5723F);
      floatArray0[1] = (float) (short)1;
      floatArray0[2] = (float) 953;
      floatArray0[3] = (float) 953;
      ArrayUtils.swap(floatArray0, 953, 27);
      assertArrayEquals(new float[] {(-2258.5723F), 1.0F, 953.0F, 953.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1689);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)1689, (short)1, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(5, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)1);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = ':';
      charArray0[2] = 'z';
      charArray0[3] = ';';
      charArray0[4] = 'L';
      charArray0[5] = '2';
      charArray0[6] = 'x';
      charArray0[7] = 'G';
      charArray0[8] = 'k';
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'G', ':', 'z', ';', 'L', '2', 'x', 'G', 'k'}, charArray0);
      assertArrayEquals(new char[] {'G', ':', 'z', ';', 'L', '2', 'x', 'G', 'k'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (-32.6489F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) '&';
      floatArray0[1] = (float) '&';
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {38.0F, 38.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {38.0F, 38.0F, 38.0F, 38.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      ArrayUtils.shift((Object[]) null, (-2322));
      Byte byte0 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-33);
      doubleArray0[1] = (double) (-2322);
      doubleArray0[2] = (double) (byte) (-33);
      doubleArray0[3] = (double) (-2322);
      doubleArray0[4] = (double) (byte) (-33);
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, (int) (byte) (-33));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(2, bitSet0.cardinality());
      assertEquals("{5, 6}", bitSet0.toString());
      assertEquals(7, bitSet0.length());
      assertArrayEquals(new double[] {(-33.0), (-2322.0), (-33.0), (-2322.0), (-33.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean1 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.addFirst((Byte[]) null, (Byte) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 125.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 125.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {125.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {125.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1564L), 283);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 283;
      ArrayUtils.swap(intArray0, 82, 4071, 283);
      assertArrayEquals(new int[] {283}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 82;
      longArray0[1] = (-1564L);
      boolean boolean1 = ArrayUtils.contains(longArray0, (-573L));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {82L, (-1564L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte byte0 = new Byte((byte)116);
      assertEquals((byte)116, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      byte byte0 = (byte) (-126);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      byteArray0[5] = (byte)111;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)111;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)2);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-126), (byte)0, (byte) (-126), (byte)111, (byte) (-126), (byte)111}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte) (-126);
      longArray0[1] = (long) (byte) (-126);
      longArray0[2] = (long) (byte)111;
      longArray0[3] = 269L;
      longArray0[4] = (long) (byte)111;
      longArray0[5] = (long) (short)1;
      longArray0[6] = (long) (byte) (-126);
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-126L), (-126L), 111L, 269L, 111L, 1L, (-126L)}, longArray0);
      assertEquals(7, longArray0.length);
      
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (int) (byte) (-126));
      assertEquals(0, objectArray0.length);
      
      Byte[] byteArray1 = new Byte[9];
      byteArray1[0] = (Byte) (byte) (-126);
      Byte byte1 = new Byte((byte)111);
      assertEquals((byte)111, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[1] = byte1;
      byteArray1[2] = (Byte) (byte) (-126);
      byteArray1[3] = (Byte) (byte) (-126);
      byteArray1[4] = (Byte) (byte) (-126);
      byteArray1[5] = (Byte) (byte)111;
      byteArray1[6] = (Byte) (byte) (-126);
      byteArray1[7] = (Byte) (byte) (-126);
      byteArray1[8] = (Byte) (byte) (-126);
      Byte byte2 = new Byte((byte) (-66));
      assertEquals((byte) (-66), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray2 = ArrayUtils.addFirst(byteArray1, byte2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(10, byteArray2.length);
      assertEquals(9, byteArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-66);
      floatArray0[1] = (float) (-126L);
      floatArray0[2] = (float) byte0;
      floatArray0[3] = (float) (-126L);
      floatArray0[4] = (float) 269L;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) (-126L);
      float[] floatArray1 = ArrayUtils.removeAllOccurences(floatArray0, 867.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-66.0F), (-126.0F), (-126.0F), (-126.0F), 269.0F, 1.0F, (-126.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-66.0F), (-126.0F), (-126.0F), (-126.0F), 269.0F, 1.0F, (-126.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)120;
      Byte byte3 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertTrue(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      assertEquals((byte)120, (byte)byte5);
      assertFalse(byte2 == byte0);
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte2);
      assertEquals((byte)120, (byte)byte7);
      assertFalse(byte2 == byte0);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte byte8 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte8);
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte6));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte0));
      assertNotNull(byte8);
      
      byteArray0[6] = byte8;
      Byte byte9 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte9);
      assertFalse(byte9.equals((Object)byte1));
      assertTrue(byte9.equals((Object)byte3));
      assertTrue(byte9.equals((Object)byte4));
      assertTrue(byte9.equals((Object)byte7));
      assertFalse(byte9.equals((Object)byte6));
      assertFalse(byte9.equals((Object)byte8));
      assertTrue(byte9.equals((Object)byte2));
      assertFalse(byte9.equals((Object)byte0));
      assertTrue(byte9.equals((Object)byte5));
      assertNotNull(byte9);
      
      byteArray0[7] = byte9;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte2;
      intArray0[1] = (int) (byte)120;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) byte0, (int) (byte)120);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte0 == byte2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {120, 120}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)27;
      doubleArray0[1] = (double) (byte)27;
      doubleArray0[2] = (double) (byte)27;
      doubleArray0[3] = (double) (byte)27;
      doubleArray0[4] = (double) (byte)27;
      doubleArray0[5] = 2995.89;
      doubleArray0[6] = (double) (byte)27;
      doubleArray0[7] = (double) (byte)27;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)27, 2995.89);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {27.0, 27.0, 27.0, 27.0, 27.0, 2995.89, 27.0, 27.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 7);
      classArray0[0] = class0;
      classArray0[1] = class0;
      classArray0[2] = class0;
      classArray0[3] = class1;
      classArray0[4] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[5] = class3;
      classArray0[6] = class2;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(7, classArray0.length);
      assertEquals(7, classArray1.length);
      
      Class<Byte[]> class4 = Byte[].class;
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte)27;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class4);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) classArray1, (Object) byte0, 84);
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(7, classArray0.length);
      assertEquals(7, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 110;
      longArray0[1] = (long) 110;
      longArray0[2] = (long) 0;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {110L, 110L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 110;
      intArray0[1] = (-8);
      intArray0[2] = (-8);
      intArray0[3] = (-1);
      intArray0[4] = 3965;
      intArray0[6] = 0;
      intArray0[7] = (-1);
      int int1 = ArrayUtils.lastIndexOf(intArray0, 0);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {110, (-8), (-8), (-1), 3965, 0, 0, (-1)}, intArray0);
      assertEquals(8, intArray0.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 110L;
      objectArray0[1] = (Object) 110;
      objectArray0[2] = (Object) 3965;
      boolean boolean0 = ArrayUtils.isEmpty(objectArray0);
      assertFalse(boolean0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      char[] charArray0 = new char[3];
      Byte byte0 = new Byte((byte)52);
      assertEquals((byte)52, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.shift(charArray0, (int) (byte)0, (-68), (-68));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(6, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1396.4706F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 110;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-742L), 0);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {110L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 3965;
      intArray0[1] = (-1);
      intArray0[2] = (-8);
      intArray0[3] = 110;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 110;
      intArray0[8] = 110;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 110);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {3965, (-1), (-8), 110, (-1), (-1), 0, 110, 110}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray1.length);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      boolean boolean0 = ArrayUtils.contains(charArray0, '|');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertArrayEquals(new char[] {'T', 'T'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(2, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, (int) (byte)0, 2);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)46, 307);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.clone((Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1985L;
      longArray0[1] = 105L;
      longArray0[2] = 1985L;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 59;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-1564L);
      floatArray0[3] = (float) 59;
      floatArray0[4] = (float) 105L;
      floatArray0[5] = (float) 105L;
      floatArray0[6] = (float) (-1564L);
      floatArray0[7] = (float) 1985L;
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)32;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      byte[] byteArray1 = ArrayUtils.insert(0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)32}, byteArray0);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Byte[] byteArray2 = new Byte[7];
      byteArray2[0] = byte0;
      byteArray2[1] = (Byte) (byte)32;
      byteArray2[2] = (Byte) (byte)32;
      byteArray2[3] = (Byte) (byte)32;
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray2[4] = byte1;
      byteArray2[5] = byte0;
      byteArray2[6] = (Byte) (byte)32;
      Byte[] byteArray3 = ArrayUtils.clone(byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertNotNull(byteArray3);
      assertEquals(7, byteArray2.length);
      assertEquals(7, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1951L;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 4);
      assertEquals((-1), int0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      int int1 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'<'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      long[] longArray1 = new long[2];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = (long) '<';
      longArray1[1] = (long) '<';
      long[] longArray2 = ArrayUtils.removeAllOccurences(longArray1, 1951L);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {60L, 60L}, longArray1);
      assertArrayEquals(new long[] {60L, 60L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 4;
      intArray0[2] = (-1);
      intArray0[3] = (-2180);
      intArray0[4] = (int) '<';
      intArray0[5] = 1;
      intArray0[6] = 4;
      int int2 = ArrayUtils.lastIndexOf(intArray0, (-1), (-269));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new int[] {(-1), 4, (-1), (-2180), 60, 1, 4}, intArray0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)111;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 1503);
      assertEquals(1, int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      int int1 = ArrayUtils.indexOf(charArray0, '_');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'<', '<', '<', '<'}, charArray0);
      assertEquals(4, charArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-123);
      shortArray0[1] = (short) (byte) (-123);
      ArrayUtils.shift(shortArray0, 1, 10, 90);
      assertArrayEquals(new short[] {(short) (-123), (short) (-123)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)111;
      intArray0[1] = (int) (byte)111;
      intArray0[2] = (-93);
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = (int) (byte) (-123);
      intArray0[5] = 1503;
      intArray0[6] = (int) (short) (-123);
      intArray0[7] = (-1);
      intArray0[8] = (int) '<';
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {111, 111, (-93), Integer.MAX_VALUE, (-123), 1503, (-123), (-1), 60}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 0);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      ArrayUtils.reverse(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = new Byte[0];
      Byte byte0 = new Byte((byte) (-34));
      assertEquals((byte) (-34), (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-1), 2224);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      ArrayUtils.swap(booleanArray0, 2224, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-3155);
      intArray0[1] = (-4432);
      intArray0[2] = (int) (short)1117;
      intArray0[3] = 1495;
      intArray0[4] = 0;
      intArray0[5] = 2454;
      intArray0[6] = 520;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-4432), 2454);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-3155), (-4432), 1117, 1495, 0, 2454, 520}, intArray1);
      assertArrayEquals(new int[] {(-3155), (-4432), 1117, 1495, 0, 2454, 520}, intArray0);
      assertNotNull(intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(11, shortArray0.length);
      assertEquals(11, shortArray1.length);
      
      short[] shortArray2 = new short[9];
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short) (-1);
      shortArray2[1] = (short)1117;
      shortArray2[2] = (short)1117;
      shortArray2[3] = (short) (-1);
      shortArray2[4] = (short) (-3155);
      shortArray2[5] = (short)1117;
      shortArray2[6] = (short)2;
      shortArray2[7] = (short)1117;
      shortArray2[8] = (short)2;
      ArrayUtils.reverse(shortArray2);
      assertNotSame(shortArray2, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertArrayEquals(new short[] {(short)2, (short)1117, (short)2, (short)1117, (short) (-3155), (short) (-1), (short)1117, (short)1117, (short) (-1)}, shortArray2);
      assertEquals(9, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      Byte byte0 = new Byte((byte) (-110));
      assertEquals((byte) (-110), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-99));
      assertEquals((byte) (-99), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte1.equals((Object)byte2));
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.clone(charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, 526L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray1.length);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      char[] charArray0 = new char[8];
      int int0 = new Short((short)200);
      assertEquals((short)200, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (-2365));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int int2 = ArrayUtils.indexOf(charArray0, 'd');
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      ArrayUtils.swap((char[]) null, 5, 11, (int) (short)200);
      ArrayUtils.shift(booleanArray0, (-1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)113;
      byteArray0[1] = (byte) (-49);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)55, (byte)113, (byte)0, (byte)55, (byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)55, (byte)113, (byte)0, (byte)55, (byte) (-11)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2244);
      assertEquals(2244, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      ArrayUtils.shift(booleanArray0, (int) (byte) (-49), 2, (int) (byte)27);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray0, (byte)27);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte) (-49), (byte)55, (byte)113, (byte)0, (byte)55, (byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-49), (byte)55, (byte)113, (byte)0, (byte)55, (byte) (-11)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(7, byteArray0.length);
      assertEquals(6, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      shortArray0[0] = (short)2;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 3524, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (long) 1393;
      int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1255));
      assertEquals((-1), int0);
      
      Byte byte0 = new Byte((byte) (-115));
      assertEquals((byte) (-115), (byte)byte0);
      assertNotNull(byte0);
      
      boolean boolean0 = ArrayUtils.isSorted((short[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift((boolean[]) null, 540);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-115);
      byteArray0[7] = (byte) (-115);
      byteArray0[8] = (byte) (-115);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115), (byte) (-115)}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(18, byteArray1.length);
      assertEquals(9, byteArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((int[]) null, (int) (byte) (-115));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double((-3595.1));
      assertEquals((-3595.1), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Double double2 = new Double(0.0);
      assertEquals(0.0, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      
      Double double3 = new Double((-3595.1));
      assertEquals((-3595.1), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotNull(double3);
      
      Double[] doubleArray0 = ArrayUtils.nullToEmpty((Double[]) null);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)27;
      shortArray0[1] = (short) (-3216);
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)27, (short) (-3216)}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      ArrayUtils.shift(booleanArray0, (int) (short)27);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.insert(1, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      ArrayUtils.shift(booleanArray0, (-1278), (-1278), (-1278));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)978;
      shortArray0[1] = (short)1117;
      shortArray0[2] = (short) (-132);
      shortArray0[3] = (short)19365;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)978, (short)1117, (short) (-132), (short)19365}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean1 = Boolean.valueOf("]0yR<h2+6hPam.d\"+6");
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = new Boolean("0X");
      assertFalse(boolean2);
      assertTrue(boolean2.equals((Object)boolean0));
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.valueOf((boolean) boolean1);
      assertFalse(boolean3);
      assertTrue(boolean1.equals((Object)boolean2));
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      assertTrue(boolean3.equals((Object)boolean0));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.valueOf("0X");
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      Boolean boolean5 = Boolean.TRUE;
      assertTrue(boolean5);
      assertFalse(boolean5.equals((Object)boolean3));
      assertFalse(boolean5.equals((Object)boolean1));
      assertFalse(boolean5.equals((Object)boolean0));
      assertFalse(boolean5.equals((Object)boolean2));
      assertFalse(boolean5.equals((Object)boolean4));
      assertNotNull(boolean5);
      
      booleanArray0[4] = boolean5;
      Boolean boolean6 = new Boolean("0X");
      assertFalse(boolean6);
      assertTrue(boolean6.equals((Object)boolean0));
      assertTrue(boolean6.equals((Object)boolean4));
      assertFalse(boolean6.equals((Object)boolean5));
      assertTrue(boolean6.equals((Object)boolean2));
      assertTrue(boolean6.equals((Object)boolean3));
      assertTrue(boolean6.equals((Object)boolean1));
      assertNotNull(boolean6);
      
      booleanArray0[5] = boolean6;
      Boolean boolean7 = new Boolean("0X");
      assertFalse(boolean7);
      assertTrue(boolean7.equals((Object)boolean0));
      assertTrue(boolean7.equals((Object)boolean4));
      assertFalse(boolean7.equals((Object)boolean5));
      assertTrue(boolean7.equals((Object)boolean6));
      assertTrue(boolean7.equals((Object)boolean2));
      assertTrue(boolean7.equals((Object)boolean3));
      assertTrue(boolean7.equals((Object)boolean1));
      assertNotNull(boolean7);
      
      booleanArray0[6] = boolean7;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray1.length);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      short[] shortArray0 = new short[1];
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      Double double0 = new Double(2837.4);
      assertEquals(2837.4, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2837.4);
      assertEquals(2837.4, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((-4574.1869583814));
      assertEquals((-4574.1869583814), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[2]);
      assertEquals((-4574.1869583814), (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-4574.1869583814));
      assertEquals((-4574.1869583814), (double)double4, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotNull(double4);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-1.0));
      assertEquals((-1.0), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotNull(double5);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[0]);
      assertEquals(2837.4, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotNull(double6);
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[6] = double6;
      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-573);
      shortArray0[1] = (short) (-3216);
      shortArray0[2] = (short)27;
      boolean boolean0 = ArrayUtils.isSorted(shortArray0);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short) (-573), (short) (-3216), (short)27}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 6);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[4] = 'R';
      charArray0[2] = 'R';
      short short0 = (short)0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      int int0 = (-882);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-816.0);
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) '\u0000';
      doubleArray0[3] = 876.006230598722;
      doubleArray0[4] = (double) 'R';
      doubleArray0[5] = (-1.0);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-882), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -882, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-118);
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-118));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-118)}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      double[] doubleArray0 = new double[18];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-118), doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -118, Length: 18
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'c');
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 120;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(120, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 120, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)293;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)293);
      assertEquals(3, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)293}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), 3);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 104.0F;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3, doubleArray0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      longArray0[2] = 105L;
      longArray0[3] = 2316L;
      Integer integer0 = new Integer(1002);
      assertEquals(1002, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(4234);
      assertEquals(4234, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer1;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {4234}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = ArrayUtils.isEmpty(doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-8);
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-8)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = '>';
      ArrayUtils.shift(charArray0, (int) (byte) (-8), (-2746), 303);
      assertArrayEquals(new char[] {'M', '>'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-521.9F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1077.5872F;
      floatArray0[4] = (-2730.2F);
      floatArray0[5] = 741.5375F;
      byte byte0 = (byte)120;
      Byte byte1 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)120, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte[] byteArray1 = ArrayUtils.removeAllOccurrences(byteArray0, byte2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      ArrayUtils.shift((char[]) null, 4776, 4776, 4776);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'g');
      assertArrayEquals(new char[] {'g'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
      
      ArrayUtils.shift((Object[]) null, 91, 91, 121);
      ArrayUtils.shift((long[]) null, 121, 121, 121);
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[7];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray2[4] = false;
      booleanArray2[5] = false;
      booleanArray2[6] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray2);
      assertTrue(boolean0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray2));
      assertEquals(7, booleanArray2.length);
      
      ArrayUtils.shift((Object[]) null, 127, (-1380), 127);
      ArrayUtils.swap((float[]) null, 1304, 11);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray3 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray3);
      assertEquals(0, booleanArray3.length);
      assertEquals(0, booleanArray0.length);
      
      Long[] longArray0 = ArrayUtils.toObject((long[]) null);
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short) (-1575), (short) (-573), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.shuffle(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)2;
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new byte[] {(byte)60, (byte)40, (byte)2}, byteArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new byte[] {(byte)60, (byte)40, (byte)2}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(3, byteArray0.length);
      
      Byte[] byteArray2 = new Byte[9];
      byteArray2[0] = (Byte) (byte)2;
      byteArray2[1] = (Byte) (byte)40;
      byteArray2[2] = (Byte) (byte)60;
      byteArray2[3] = (Byte) (byte)60;
      byteArray2[4] = (Byte) (byte)60;
      byteArray2[5] = (Byte) (byte)2;
      byteArray2[6] = (Byte) (byte)40;
      byteArray2[7] = (Byte) (byte)2;
      byteArray2[3] = (Byte) (byte)40;
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)5);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)2, (byte)40, (byte)60, (byte)40, (byte)60, (byte)2, (byte)40, (byte)2, (byte)5}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      char[] charArray0 = Character.toChars(2682);
      assertArrayEquals(new char[] {'\u0A7A'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      int[] intArray0 = new int[0];
      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0A7A'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'\u0A7A'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, charArray1.length);
      
      ArrayUtils.reverse(charArray1);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0A7A'}, charArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {'\u0A7A'}, charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(1, charArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0A7A'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      int int0 = ArrayUtils.indexOf((short[]) null, (short) (-269));
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte) (-10);
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), (int) (short) (-269));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {(-10L)}, longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, 1393, 3524, 3524);
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, 2674, 1393);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1393;
      longArray0[1] = (long) 3524;
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray2 = new Float[0];
      float[] floatArray3 = ArrayUtils.toPrimitive(floatArray2);
      assertSame(floatArray3, floatArray1);
      assertNotSame(floatArray3, floatArray0);
      assertFalse(floatArray3.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray3, 0.01F);
      assertNotNull(floatArray3);
      assertEquals(0, floatArray2.length);
      assertEquals(0, floatArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      ArrayUtils.shift(longArray0, 3524, 2451, 3524);
      assertArrayEquals(new long[] {1393L, 3524L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1493));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-2802.699F));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      ArrayUtils.shift(intArray2, (-1880));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray2.length);
      
      float[] floatArray2 = ArrayUtils.insert(2123080424, floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.insert(2, floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Float[] floatArray2 = new Float[9];
      Float float0 = new Float((float) 2);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray2[0] = float0;
      Float float1 = new Float((float) (short)0);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray2[1] = float1;
      Float float2 = new Float((double) floatArray2[0]);
      assertEquals(2.0F, (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(9, floatArray2.length);
      
      floatArray2[2] = float2;
      Float float3 = new Float((-1797.463691520026));
      assertEquals((-1797.4637F), (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray2[3] = float3;
      Float float4 = new Float(90.0);
      assertEquals(90.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotNull(float4);
      
      floatArray2[4] = float4;
      Float float5 = new Float(0.0);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      
      floatArray2[5] = float5;
      Float float6 = new Float(756.0);
      assertEquals(756.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      
      floatArray2[6] = float6;
      Float float7 = new Float(46.0);
      assertEquals(46.0F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotNull(float7);
      
      floatArray2[7] = float7;
      Float float8 = new Float(1457.6439312);
      assertEquals(1457.6439F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotNull(float8);
      
      floatArray2[8] = float8;
      Float[] floatArray3 = ArrayUtils.nullToEmpty(floatArray2);
      assertSame(floatArray3, floatArray2);
      assertSame(floatArray2, floatArray3);
      assertNotNull(floatArray3);
      assertEquals(9, floatArray3.length);
      assertEquals(9, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 434;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 127;
      intArray0[5] = (-2450);
      intArray0[6] = 0;
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 434, (-1), 0, 127, (-2450), 0, Integer.MAX_VALUE, 0}, intArray0);
      assertArrayEquals(new int[] {434, (-1), 127, (-2450), Integer.MAX_VALUE}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 127;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2376.72035;
      ArrayUtils.swap(doubleArray0, (-2450), 0, 2873);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 127.0, 0.0, 0.0, 2376.72035}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, (-1436), true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1436, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-108), (-2147171937));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-108);
      intArray0[1] = (int) (byte) (-108);
      intArray0[2] = (-1979);
      intArray0[3] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-108), (-108), (-1979), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte[] byteArray1 = new Byte[6];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      byte byte1 = (byte)3;
      Byte byte2 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray1[1] = byte2;
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-63));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray2.length);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray1, (byte)3);
      assertNotSame(byteArray3, byteArray2);
      assertNotSame(byteArray3, byteArray0);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)3, (byte)3, (byte)3, (byte)3, (byte)3}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray3.length);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2147171937);
      doubleArray0[2] = (double) (-108);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) byte1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-2.147171937E9), (-108.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0, (-1.0), (-2.147171937E9), (-108.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = ' ';
      int int0 = ArrayUtils.indexOf((double[]) null, (-3206.4749), (-3206.4749));
      assertEquals((-1), int0);
      
      byte byte0 = (byte)60;
      Byte byte1 = new Byte((byte)60);
      assertEquals((byte)60, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-102);
      Byte byte3 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte3);
      assertEquals((byte) (-102), object0);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(object0.equals((Object)byte0));
      assertFalse(object0.equals((Object)byte1));
      assertTrue(object0.equals((Object)byte2));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray1);
      assertSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[2] = (int) (byte) (-110);
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-110), (-110));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-110), 0, (-110)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      ArrayUtils.shift(booleanArray0, (-1278), 2, 100);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.shift(booleanArray0, (int) (byte) (-27));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray1 = ArrayUtils.insert((int) (byte)32, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray1.length);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      ArrayUtils.shift(booleanArray0, 2141685557, 108, (int) (byte)32);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurrences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, false, false, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(8, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
      
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(1787.4178783);
      assertEquals(1787.4178F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-650);
      intArray0[2] = 50;
      intArray0[3] = 952;
      intArray0[4] = 835;
      intArray0[5] = 1;
      intArray0[6] = 58;
      intArray0[7] = (-5057);
      intArray0[8] = 8;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {(-1), (-650), 50, 952, 835, 1, 58, (-5057), 8}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, integerArray0.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[3] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      Byte[] byteArray2 = new Byte[0];
      Class<Byte[]> class3 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class3);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray3, (Object) null, (int) (byte)0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(bitSet0);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-41);
      byteArray0[11] = (byte)1;
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
      assertEquals(19, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (byte)0);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 13.235008F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte byte0 = (byte) (-10);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[9];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      byte[] byteArray2 = ArrayUtils.removeAll(byteArray1, intArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(byteArray2);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      assertEquals(9, intArray0.length);
      
      Byte[] byteArray3 = new Byte[6];
      byteArray3[0] = (Byte) (byte) (-10);
      byteArray3[1] = (Byte) (byte) (-10);
      byteArray3[2] = (Byte) (byte) (-10);
      byteArray3[3] = (Byte) (byte) (-10);
      byteArray3[4] = (Byte) (byte) (-10);
      byteArray3[5] = (Byte) (byte) (-10);
      byte[] byteArray4 = ArrayUtils.toPrimitive(byteArray3, byte0);
      assertNotSame(byteArray4, byteArray1);
      assertNotSame(byteArray4, byteArray2);
      assertNotSame(byteArray4, byteArray0);
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10), (byte) (-10)}, byteArray4);
      assertNotNull(byteArray4);
      assertEquals(6, byteArray3.length);
      assertEquals(6, byteArray4.length);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[3] = '9';
      charArray0[4] = 'f';
      charArray0[5] = 'Q';
      charArray0[6] = '7';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) (byte)69;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)69;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 69.0F);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      charArray0[4] = 'f';
      charArray0[5] = 'Q';
      charArray0[6] = '7';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '(';
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) (byte)69;
      ArrayUtils.reverse(floatArray0, 2, (int) (byte) (-98));
      assertArrayEquals(new float[] {40.0F, 55.0F, 69.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)69;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 69.0F);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      ArrayUtils.reverse((boolean[]) null);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[3] = '@';
      charArray0[4] = 'B';
      charArray0[5] = '_';
      charArray0[7] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {')', ']', '\u0000', '@', 'B', '_', '\u0000', 'f'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-955), (-955));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ']';
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((double[]) null, (int) 'Q');
      ArrayUtils.shift(objectArray0, 1949);
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1949;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1949.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 115, (-1));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse((double[]) null);
      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
      assertNull(booleanArray0);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      ArrayUtils.shift((Object[]) characterArray1, (-1643));
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1985L;
      longArray0[1] = 105L;
      longArray0[2] = 1985L;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 59;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-1564L);
      floatArray0[3] = (float) 59;
      floatArray0[4] = (float) 105L;
      floatArray0[5] = (float) 105L;
      floatArray0[6] = (float) (-1564L);
      floatArray0[7] = (float) 1985L;
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte byte3 = new Byte(byte0);
      assertEquals((byte)32, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[5] = byte3;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte3));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((char[]) null, 'p');
      assertFalse(boolean0);
      
      boolean boolean1 = ArrayUtils.contains((Object[]) byteArray1, (Object) byte0);
      assertTrue(boolean1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte3));
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-94);
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      ArrayUtils.swap((float[]) null, (-2364), 3368, (int) byte0);
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte) (-94), (-191));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-57));
      assertEquals((byte) (-57), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      assertEquals((byte) (-57), object0);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertEquals((byte) (-57), object1);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(object0.equals((Object)byte0));
      assertTrue(object1.equals((Object)byte0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertNotNull(object2);
      
      Object[] objectArray0 = new Object[6];
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      objectArray0[0] = object3;
      objectArray0[1] = object2;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = object2;
      objectArray0[5] = (Object) byte1;
      int int0 = ArrayUtils.indexOf(objectArray0, object2);
      assertEquals(1, int0);
      assertNotSame(object2, object3);
      assertFalse(object2.equals((Object)object3));
      assertEquals(6, objectArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = 'S';
      ArrayUtils.swap(charArray0, 1178, (int) (byte) (-57));
      assertArrayEquals(new char[] {'9', '9', 'S'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = ArrayUtils.subarray((long[]) null, 790, (-2645));
      assertNull(longArray0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 11.6701F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 20;
      longArray0[1] = (long) (-1);
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), 0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {20L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1194);
      intArray0[1] = (-1194);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1194);
      floatArray0[2] = (float) (-1194);
      floatArray0[3] = 0.0F;
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1194.0F), (-1194.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '@';
      ArrayUtils.shift(charArray0, (-1194), 657, 54);
      assertArrayEquals(new char[] {'@', '@'}, charArray0);
      assertEquals(2, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)177);
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) '@';
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {54.0, 64.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1194);
      longArray0[1] = (long) 657;
      longArray0[2] = (long) (short)177;
      longArray0[3] = (long) (short)177;
      longArray0[4] = (long) 657;
      long[] longArray1 = ArrayUtils.subarray(longArray0, (-3018), (-1380));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1194L), 657L, 177L, 177L, 657L}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte[] byteArray0 = new Byte[4];
      Byte byte0 = new Byte((byte) (-102));
      assertEquals((byte) (-102), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte byte1 = Byte.valueOf((byte)29);
      assertEquals((byte)29, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)29);
      assertEquals((byte)29, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[3] = byte3;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 1951L;
      longArray0[1] = (-1L);
      longArray0[2] = (-69L);
      longArray0[3] = (-1L);
      longArray0[4] = (-2849L);
      longArray0[5] = (-150L);
      longArray0[6] = 2664L;
      longArray0[7] = (-2934L);
      longArray0[8] = (-2333L);
      long[] longArray1 = ArrayUtils.subarray(longArray0, 5, (-2198));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {1951L, (-1L), (-69L), (-1L), (-2849L), (-150L), 2664L, (-2934L), (-2333L)}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      long[] longArray0 = new long[20];
      Byte[] byteArray1 = new Byte[11];
      byteArray1[0] = (Byte) (byte)0;
      long[] longArray1 = ArrayUtils.subarray(longArray0, 49, 20);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(20, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = 55.0F;
      floatArray0[2] = 2413.97F;
      floatArray0[3] = 120.0F;
      int[] intArray0 = new int[1];
      intArray0[0] = 2258;
      ArrayUtils.shift(intArray0, 1356);
      assertArrayEquals(new int[] {2258}, intArray0);
      assertEquals(1, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1870;
      shortArray0[1] = (short)128;
      shortArray0[2] = (short) (-2421);
      ArrayUtils.swap(shortArray0, (int) (short) (-2421), 97);
      assertArrayEquals(new short[] {(short)1870, (short)128, (short) (-2421)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      int[] intArray0 = new int[3];
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1246;
      intArray0[1] = 1495;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2039);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1246, 1495}, intArray0);
      assertEquals(2, intArray0.length);
      
      short[] shortArray0 = new short[23];
      shortArray0[0] = (short) (-5198);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-441);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2852);
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotNull(shortArray1);
      assertEquals(23, shortArray0.length);
      assertEquals(46, shortArray1.length);
      
      ArrayUtils arrayUtils0 = new ArrayUtils();
      assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
      assertNotNull(arrayUtils0);
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      charArray0[3] = '>';
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = ArrayUtils.nullToEmpty(intArray0);
      assertSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)65;
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean0);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1514L));
      assertEquals((-1514L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {(-1514L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.class;
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[3] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      Byte[] byteArray2 = new Byte[0];
      Class<Byte[]> class3 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class3);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertTrue(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-4));
      assertEquals((-1), int0);
      
      Long[] longArray1 = ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
      
      Float[] floatArray0 = new Float[4];
      Float float0 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) (-1));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      Float float2 = new Float((-1.0));
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[2] = float2;
      Float float3 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[3] = float3;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayUtils.shift(longArray0, (-1), 5541, (-470));
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray2.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, (-4));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-4)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) (-176L);
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-176L));
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-176L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      
      ArrayUtils.shift(intArray0, (-2215), 85, 85);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2224;
      shortArray0[1] = (short)3767;
      shortArray0[2] = (short)65;
      boolean boolean3 = ArrayUtils.isSameLength(shortArray0, shortArray0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new short[] {(short)2224, (short)3767, (short)65}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-176L);
      doubleArray0[1] = (double) (-2215);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 82.0, (int) (short)3767);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {(-176.0), (-2215.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)3767);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)3767, (short)2224, (short)3767, (short)65}, shortArray1);
      assertArrayEquals(new short[] {(short)2224, (short)3767, (short)65}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray1.length);
      assertEquals(3, shortArray0.length);
      
      Long[] longArray1 = new Long[1];
      longArray1[0] = (Long) (-176L);
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-176L)}, longArray2);
      assertNotNull(longArray2);
      assertEquals(1, longArray1.length);
      assertEquals(1, longArray2.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)93;
      boolean boolean4 = ArrayUtils.isSorted(byteArray0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-106), (byte) (-100), (byte) (-57), (byte)93}, byteArray0);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArrayUtils.isSorted(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)32);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)32}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, (-1278), 1092, (-3559));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 10, (-953));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 82);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {82, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (long) 82;
      longArray0[2] = (-1L);
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 82;
      longArray0[6] = (long) 82;
      longArray0[7] = (long) (-953);
      longArray0[8] = (long) (-953);
      ArrayUtils.reverse(longArray0, 1717986918, 7);
      assertArrayEquals(new long[] {(-1L), 82L, (-1L), 10L, 0L, 82L, 82L, (-953L), (-953L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      short[] shortArray0 = new short[9];
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (-1188));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = 78.0F;
      floatArray1[2] = (float) (short)0;
      floatArray1[3] = (float) (-1188);
      floatArray1[4] = (-1424.467F);
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) (short)0;
      floatArray1[7] = (float) 0;
      floatArray1[8] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 78.0F, 0.0F, (-1188.0F), (-1424.467F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(10, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((float[]) null, floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 'R';
      floatArray0[2] = (float) 'R';
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) 'R';
      floatArray0[5] = (float) (byte)1;
      floatArray0[6] = (float) 'R';
      floatArray0[7] = (float) 'R';
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 1.0F, (int) (short)0);
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertEquals("{5}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new float[] {0.0F, 82.0F, 82.0F, 0.0F, 82.0F, 1.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 82.0F, 82.0F, 0.0F, 82.0F, 1.0F, 82.0F, 82.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)0;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)77);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte)2, (byte) (-28), (byte)2, (byte)5, (byte) (-49), (byte)0}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte) (-49);
      shortArray0[1] = (short) (byte) (-49);
      shortArray0[2] = (short) (byte)77;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short) (byte)77;
      shortArray0[5] = (short) (byte)2;
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short) (-49), (short) (-49), (short)77, (short)0, (short)77, (short)2}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(6, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)3;
      byte[] byteArray1 = ArrayUtils.insert((int) (byte)3, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)3}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)3, (byte)0, (byte)0, (byte)3}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-108), (-2147171937));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-108);
      intArray0[1] = (int) (byte) (-108);
      intArray0[2] = (-1979);
      intArray0[3] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-108), (-108), (-1979), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte[] byteArray1 = new Byte[6];
      byte byte0 = (byte) (-1);
      Byte byte1 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[0] = byte1;
      Byte byte2 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray1[1] = byte2;
      byte byte3 = (byte)14;
      Byte byte4 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray1[2] = byte4;
      Byte byte5 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)55;
      byteArray2[1] = (byte)3;
      byteArray2[2] = byte0;
      byteArray2[3] = (byte)14;
      byteArray2[4] = (byte)3;
      byteArray2[5] = (byte) (-108);
      byteArray2[6] = byte3;
      intArray0[0] = (int) byte0;
      byteArray2[8] = (byte) (-1);
      byte[] byteArray3 = ArrayUtils.insert(7, byteArray2, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)55, (byte)3, (byte) (-1), (byte)14, (byte)3, (byte) (-108), (byte)14, (byte)0, (byte) (-1)}, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray2.length);
      assertEquals(18, byteArray3.length);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (int) (byte) (-23), (int) (byte) (-23), 48);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      Random.setNextRandom((-2771));
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      ArrayUtils.swap(booleanArray0, (-2388), 7, 1188);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) (short)2;
      floatArray0[3] = (float) (short)1751;
      floatArray0[4] = (-1.0F);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2147171937), (int) (short)0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2.0F, 2.0F, 1751.0F, (-1.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      assertEquals(5, floatArray0.length);
      
      int int0 = ArrayUtils.indexOf(booleanArray0, false, (int) (short)1751);
      assertEquals((-1), int0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1412;
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, (int) (short)2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1412}, intArray0);
      assertArrayEquals(new int[] {1412}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = ArrayUtils.add(floatArray0, 1, (-1.0F));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      Float[] floatArray2 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
      assertNotNull(floatArray2);
      assertEquals(0, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.add(byteArray0, 0, (byte) (-84));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-84)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 10, (-953));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      int[] intArray1 = ArrayUtils.add(intArray0, 0, 82);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {10}, intArray0);
      assertArrayEquals(new int[] {82, 10}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-13);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-20), 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short) (-13), (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, characterArray0.length);
      
      ArrayUtils.reverse((boolean[]) null, 182, (int) (short)1064);
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (byte)69;
      doubleArray0[1] = (double) '7';
      doubleArray0[4] = (double) '7';
      doubleArray0[5] = (double) (-14);
      doubleArray0[6] = (double) (-14);
      doubleArray0[7] = (double) (-14);
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 0.0, 55.0, (-14.0), (-14.0), (-14.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 55.0, (-14.0), (-14.0), (-14.0), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 777.0, 21.05384914113625);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 0.0, 55.0, (-14.0), (-14.0), (-14.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {69.0, 55.0, 0.0, 55.0, (-14.0), (-14.0), (-14.0), 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      ArrayUtils.swap(booleanArray0, 2, (int) (byte)0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (byte)0, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int int0 = ArrayUtils.indexOf(floatArray1, (-169.682F));
      assertEquals((-1), int0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-108), (-2147171937));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-108);
      intArray0[1] = (int) (byte) (-108);
      intArray0[2] = (-1979);
      intArray0[2] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-108), (-108), (-1), 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte[] byteArray1 = new Byte[6];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[1] = byte1;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 114, (int) (byte)14, (-1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-108);
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2147064221, (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-108.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      int int1 = ArrayUtils.indexOf(floatArray1, (float) (-1979), 2147228404);
      assertEquals((-1), int1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new float[] {(-108.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      long[] longArray0 = new long[1];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)46;
      doubleArray0[1] = (double) (byte)46;
      doubleArray0[2] = (double) (byte)46;
      doubleArray0[3] = (double) (byte)46;
      doubleArray0[4] = (double) (byte)0;
      int int1 = ArrayUtils.indexOf(doubleArray0, (-316.3777566836044), 1.0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {46.0, 46.0, 46.0, 46.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      ArrayUtils.reverse(doubleArray0, 2, 89);
      assertArrayEquals(new double[] {46.0, 46.0, 0.0, 46.0, 46.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1985L;
      longArray0[1] = 105L;
      longArray0[2] = 1985L;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 59;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-1564L);
      floatArray0[3] = (float) 59;
      floatArray0[4] = (float) 105L;
      floatArray0[5] = (float) 105L;
      floatArray0[6] = (float) (-1564L);
      floatArray0[7] = (float) 1985L;
      Byte byte0 = new Byte((byte)32);
      assertEquals((byte)32, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)32;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {32.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, 6L, (-448));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (-2784));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2784);
      doubleArray0[1] = (double) (-2784);
      doubleArray0[2] = (double) (-2784);
      doubleArray0[3] = (double) (-2784);
      doubleArray0[4] = (double) (-2784);
      doubleArray0[5] = (double) (-2784);
      doubleArray0[6] = (-2285.5599);
      doubleArray0[7] = (double) (-2784);
      ArrayUtils.reverse(doubleArray0, 82, 1760);
      assertArrayEquals(new double[] {(-2784.0), (-2784.0), (-2784.0), (-2784.0), (-2784.0), (-2784.0), (-2285.5599), (-2784.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean0);
      
      Short short0 = new Short((short)1217);
      assertEquals((short)1217, (short)short0);
      assertNotNull(short0);
      
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.EMPTY_LONG_ARRAY;
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElement((double[]) null, (-3306.9610209303287));
      assertNull(doubleArray0);
      
      double[] doubleArray1 = ArrayUtils.insert((-1683), (double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-915.4807716209743), (-915.4807716209743));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-5L);
      longArray0[2] = (-1L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-344L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1L), (-5L), (-1L), 0L, (-1L)}, longArray0);
      assertArrayEquals(new long[] {(-344L), (-1L), (-5L), (-1L), 0L, (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(5, longArray0.length);
      assertEquals(6, longArray1.length);
      
      Byte byte0 = new Byte((byte)36);
      assertEquals((byte)36, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)36, object0);
      assertNotNull(object0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = '(';
      charArray0[2] = 'o';
      charArray0[3] = '8';
      charArray0[4] = 'M';
      charArray0[5] = '#';
      charArray0[6] = '1';
      charArray0[7] = ']';
      ArrayUtils.reverse(charArray0, 115, (int) (byte)36);
      assertArrayEquals(new char[] {'8', '(', 'o', '8', 'M', '#', '1', ']'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 56);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 56;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {56.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 8);
      Byte byte1 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(byte0, byte1);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(byte0.equals((Object)byte1));
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(abstractMap_SimpleImmutableEntry1.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry1;
      AbstractMap.SimpleEntry<Byte, Byte> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Byte, Byte>(byte1, byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(abstractMap_SimpleEntry0);
      
      ArrayUtils.reverse((char[]) null, 46, 56);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-581.9781F);
      floatArray0[1] = 2245.2F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2016.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1.0F;
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, 0.0F, 469);
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new float[] {(-581.9781F), 2245.2F, 0.0F, 2016.0F, (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = 13;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      ArrayUtils.swap(objectArray0, 13, 1342, (-693));
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.swap((float[]) null, (int) (short)1503, 13);
      short[] shortArray0 = new short[0];
      short short0 = (short)1117;
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)1117);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)1117}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int1 = ArrayUtils.indexOf((boolean[]) null, true, 953);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = 515;
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 515, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 515, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)3826);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {(short)3826}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      byte byte0 = (byte) (-69);
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = byte0;
      byteArray1[1] = byte0;
      byteArray1[2] = (byte) (-69);
      byteArray1[3] = byte0;
      byteArray1[4] = byte0;
      ArrayUtils.shift(byteArray1, (int) (byte) (-69));
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-69), (byte) (-69), (byte) (-69), (byte) (-69)}, byteArray1);
      assertEquals(5, byteArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-69);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, (int) (byte) (-69));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-69)}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte) (-69);
      doubleArray0[1] = (double) (byte) (-69);
      ArrayUtils.swap(doubleArray0, 3127, (-69), 645);
      assertArrayEquals(new double[] {(-69.0), (-69.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertArrayEquals(new short[] {(short)1, (short)0, (short) (-1), (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      longArray0[3] = (long) (short)0;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (short) (-1));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {1L, 0L, 0L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArrayUtils.shift(byteArray0, (-1443));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1443), byteArray1, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1443, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {82.0, 82.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)3;
      ArrayUtils.shift(byteArray0, (int) (short)1);
      assertArrayEquals(new byte[] {(byte)3, (byte)5, (byte)3, (byte) (-73), (byte)5, (byte)3, (byte) (-73), (byte) (-73), (byte)5}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)3;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (byte)5;
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) 'R';
      intArray0[5] = (int) (byte) (-73);
      intArray0[6] = (int) (byte)3;
      intArray0[7] = (int) (byte) (-73);
      int[] intArray1 = ArrayUtils.clone(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3, 1, 5, 82, 82, (-73), 3, (-73)}, intArray0);
      assertArrayEquals(new int[] {3, 1, 5, 82, 82, (-73), 3, (-73)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      char[] charArray0 = new char[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, 'R');
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(0, charArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)3;
      longArray0[1] = (long) (byte) (-73);
      longArray0[2] = (long) (byte)5;
      longArray0[3] = (long) (byte)3;
      longArray0[4] = (long) (short)1;
      longArray0[5] = (long) (byte)5;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (long) (byte) (-73));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {3L, 5L, 3L, 1L, 5L}, longArray1);
      assertArrayEquals(new long[] {3L, (-73L), 5L, 3L, 1L, 5L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(5, longArray1.length);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 0.0F);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)27;
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)27, (byte)27, (byte)1, (byte)27, (byte)27}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, 1841, (int) (byte)27);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)27, (byte)27, (byte)1, (byte)27, (byte)27}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (-926), (int) (byte)27);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Long long0 = new Long((byte)0);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 420.046);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.swap((byte[]) null, Integer.MAX_VALUE, 233);
      double[] doubleArray0 = ArrayUtils.subarray((double[]) null, Integer.MAX_VALUE, (-3134));
      assertNull(doubleArray0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) long0;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) long0;
      objectArray0[4] = (Object) long0;
      // Undeclared exception!
      try { 
        ArrayUtils.toMap(objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array element 0, '0', is neither of type Map.Entry nor an Array
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1194);
      ArrayUtils.shift(intArray0, (-1194));
      assertArrayEquals(new int[] {0, (-1194), 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);
      assertSame(booleanArray0, booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(5, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(stringArray0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, stringArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2784);
      intArray0[1] = 1766;
      intArray0[2] = (-2469);
      ArrayUtils.shift(intArray0, (-2784), 298, (-1));
      assertArrayEquals(new int[] {1766, (-2469), (-2784)}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray((Object[]) byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) null, object0, (-149));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-126));
      assertEquals((byte) (-126), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, (-1), byte0);
      assertEquals((byte) (-126), (byte)byte1);
      assertNotNull(byte1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-126);
      intArray0[1] = (int) (byte) (-126);
      intArray0[2] = (int) (byte) (-126);
      intArray0[3] = (int) (byte) (-126);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-126), (-126), (-126), (-126), 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Byte byte2 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)11);
      assertEquals((byte)11, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)90);
      assertEquals((byte)90, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)78);
      assertEquals((byte)78, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte6);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte1));
      assertNotNull(byte7);
      
      Byte byte8 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte8);
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertNotNull(byte8);
      
      Byte[] byteArray0 = ArrayUtils.removeAllOccurrences((Byte[]) null, byte8);
      assertFalse(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte3));
      assertFalse(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte6));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, intArray0.length);
      assertEquals(1, byteArray1.length);
      
      Byte byte0 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      ArrayUtils.reverse(intArray0, (-497), (int) (byte)0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      short[] shortArray0 = new short[10];
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(10, shortArray0.length);
      assertEquals(10, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 59, 1, 1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) (-2337);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 1;
      ArrayUtils.swap(floatArray0, (-1), 9);
      assertArrayEquals(new float[] {0.0F, (-2337.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3025;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) (-2337.0F);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 46.0, (-1), 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3025.0, 1.0, 59.0, (-2337.0), 1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)52;
      shortArray0[1] = (short)7167;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short) (-356);
      shortArray0[4] = (short)1966;
      shortArray0[5] = (short)13;
      shortArray0[6] = (short)2095;
      shortArray0[7] = (short) (-4318);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {(short)52, (short)7167, (short)1, (short) (-356), (short)1966, (short)13, (short)2095, (short) (-4318)}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      short[] shortArray0 = new short[10];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)0;
      long[] longArray0 = new long[2];
      longArray0[0] = 336L;
      longArray0[1] = 2L;
      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {336L, 2L}, longArray0);
      assertArrayEquals(new long[] {336L, 2L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(2, longArray1.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (-1241.8192F));
      assertArrayEquals(new float[] {(-1241.8192F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray2);
      assertFalse(boolean0);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertEquals(3, booleanArray2.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte)10;
      ArrayUtils.shuffle(byteArray2);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      int int0 = new Byte((byte)10);
      assertEquals((byte)10, int0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, true}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray3.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)10;
      longArray0[1] = (long) (byte)10;
      longArray0[2] = (long) (byte)10;
      longArray0[3] = (-2692L);
      longArray0[4] = (long) 'J';
      longArray0[5] = (long) 'R';
      longArray0[6] = (long) '(';
      longArray0[7] = (long) '(';
      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {10L, 10L, 10L, (-2692L), 74L, 82L, 40L, 40L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(16, longArray1.length);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-63L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      long[] longArray2 = ArrayUtils.addAll(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray0, longArray2);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray1, longArray2);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertArrayEquals(new long[] {}, longArray2);
      assertNotNull(longArray2);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      assertEquals(0, longArray2.length);
      
      float[] floatArray0 = ArrayUtils.addFirst((float[]) null, (float) (-63L));
      assertArrayEquals(new float[] {(-63.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2138.336052;
      doubleArray0[2] = (-679.679851);
      doubleArray0[3] = (-751.34);
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 2138.336052, (-679.679851), (-751.34), 1.5, 1.5, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2138.336052, (-679.679851), (-751.34), 1.5, 1.5, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-221));
      assertEquals((-221), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1400);
      assertEquals(1400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2503));
      assertEquals((-2503), (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(10);
      assertEquals(10, (int)integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1479);
      assertEquals(1479, (int)integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1065));
      assertEquals((-1065), (int)integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-221), 1400, (-2503), 10, 1479, (-1065)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
      assertFalse(boolean0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 2138.336052, (-679.679851), (-751.34), 1.5, 1.5, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Byte byte0 = Byte.valueOf((byte) (-126));
      assertEquals((byte) (-126), (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-126);
      intArray0[1] = (int) (byte) (-126);
      intArray0[2] = (int) (byte) (-126);
      intArray0[4] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1617, (-1327));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new int[] {(-126), (-126), (-126), 0, (-1)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[1], intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.toPrimitive(booleanArray1);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      assertEquals(6, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
      assertNull(booleanArray0);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'z');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      boolean boolean3 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean3);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'z';
      intArray0[1] = (int) (byte)120;
      intArray0[2] = (int) 'z';
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 122);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {122, 120, 122}, intArray0);
      assertArrayEquals(new int[] {122, 122, 120, 122}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      charArray0[4] = 'B';
      charArray0[6] = 'Q';
      charArray0[7] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {')', ']', 'J', '@', 'B', '\u0000', 'Q', 'f'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-955), (-955));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ']';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '\u0000';
      objectArray0[3] = (Object) 'B';
      objectArray0[4] = (Object) ')';
      objectArray0[5] = (Object) 'B';
      ArrayUtils.swap(objectArray0, (-4378), (-2337), (-955));
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'f';
      floatArray0[1] = (float) 'B';
      ArrayUtils.swap(floatArray0, (-2337), 0);
      assertArrayEquals(new float[] {102.0F, 66.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      booleanArray0[0] = boolean1;
      Boolean boolean2 = Boolean.TRUE;
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      booleanArray0[1] = boolean2;
      Boolean boolean3 = Boolean.FALSE;
      assertFalse(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertFalse(boolean3.equals((Object)boolean2));
      assertNotNull(boolean3);
      
      booleanArray0[2] = boolean3;
      Boolean boolean4 = Boolean.FALSE;
      assertFalse(boolean4);
      assertTrue(boolean4.equals((Object)boolean1));
      assertFalse(boolean4.equals((Object)boolean2));
      assertTrue(boolean4.equals((Object)boolean0));
      assertNotNull(boolean4);
      
      booleanArray0[3] = boolean4;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray1.length);
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2235);
      intArray1[1] = 6;
      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2235), 6}, intArray1);
      assertArrayEquals(new int[] {(-2235), 6}, intArray2);
      assertNotNull(intArray2);
      assertEquals(6, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) integerArray0[0], 127);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap((boolean[]) null, 127, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) integerArray0[0];
      Byte byte0 = new Byte((byte) (-128));
      assertEquals((byte) (-128), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.get((Object[]) integerArray0, 0, (Object) byte0);
      assertEquals(1841, object0);
      assertTrue(object0.equals((Object)integer0));
      assertNotNull(object0);
      assertEquals(1, integerArray0.length);
      
      BitSet bitSet0 = new BitSet();
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int int0 = bitSet0.previousClearBit((-1));
      assertEquals((-1), int0);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) integerArray0, (Object[]) integerArray0);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[3] = 0;
      int[] intArray2 = ArrayUtils.removeElements(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, (-1), (-1), 0}, intArray1);
      assertArrayEquals(new int[] {1841, 0, 0}, intArray2);
      assertArrayEquals(new int[] {1841, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray2);
      assertEquals(4, intArray1.length);
      assertEquals(3, intArray2.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1892;
      intArray0[1] = 115;
      intArray0[2] = 0;
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {1892, 115, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-110);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(3330, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3330, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 623.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) (byte)0;
      shortArray0[4] = (short)583;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte)0;
      shortArray0[7] = (short) (byte)0;
      MockRandom mockRandom0 = new MockRandom((short)0);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(shortArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)583, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'X');
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0, (int) (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)583, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)583, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(16, shortArray1.length);
      assertEquals(8, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)583;
      intArray0[1] = (int) (short)583;
      intArray0[2] = (int) (short)0;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short)0;
      intArray0[5] = (int) (short)0;
      intArray0[6] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 583, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '5';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, '5');
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(1, charArray2.length);
      
      boolean boolean2 = ArrayUtils.contains(charArray1, '5');
      assertFalse(boolean2);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertEquals(1, charArray1.length);
      
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3206.4749);
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = 808.07760737227;
      doubleArray0[3] = (double) '5';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-344.3777566836044), (double) (byte) (-28));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new double[] {(-3206.4749), 53.0, 808.07760737227, 53.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-28);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte) (-28));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short) (-28)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      Character[] characterArray0 = new Character[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.reverse(intArray0, Integer.MAX_VALUE, 88);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 1;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-926);
      shortArray0[1] = (short) (-3152);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-3711);
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)116);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-926), (short) (-3152), (short) (-1), (short) (-3711)}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      Character character0 = new Character('w');
      assertEquals('w', (char)character0);
      assertNotNull(character0);
      
      Character[] characterArray0 = new Character[3];
      characterArray0[0] = character0;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(3, characterArray0.length);
      assertEquals(3, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[3] = (short)24;
      ArrayUtils.shift(shortArray0, (int) (short)24);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)24}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte byte0 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)1;
      longArray0[1] = (long) (byte) (-58);
      longArray0[2] = (long) (short)24;
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'w');
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1828, (int) (byte) (-58));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)24}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)24}, shortArray0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)0, (short)24, (short)1, (short)1, (short)0, (short)24}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(8, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '*';
      charArray0[2] = 'w';
      charArray0[3] = '|';
      charArray0[4] = '3';
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'd');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'#', '*', 'w', '|', '3'}, charArray0);
      assertArrayEquals(new char[] {'#', '*', 'w', '|', '3'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(5, charArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(charArray0, 'U');
      assertFalse(boolean0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'#', '*', 'w', '|', '3'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Byte byte0 = new Byte((byte)7);
      assertEquals((byte)7, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (double) (byte)7, (-3206.4749));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3670);
      shortArray0[1] = (short) (byte)8;
      shortArray0[2] = (short) (byte)8;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (byte)7);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-3670), (short)8, (short)8}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, true, true, true}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[2] = (float) (-890);
      floatArray0[1] = (float) (-890);
      floatArray0[2] = (float) (-890);
      floatArray0[3] = (float) (-3048);
      floatArray0[4] = (float) (-3048);
      floatArray0[5] = (float) (-3048);
      floatArray0[6] = 55.0F;
      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
      
      Character character0 = Character.valueOf('h');
      assertEquals('h', (char)character0);
      assertNotNull(character0);
      
      Character character1 = new Character('\u0080');
      assertEquals('\u0080', (char)character1);
      assertFalse(character1.equals((Object)character0));
      assertNotNull(character1);
      
      Character character2 = new Character('e');
      assertEquals('e', (char)character2);
      assertFalse(character2.equals((Object)character0));
      assertFalse(character2.equals((Object)character1));
      assertNotNull(character2);
      
      Character[] characterArray0 = new Character[1];
      characterArray0[0] = character2;
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertNotNull(characterArray1);
      assertEquals(1, characterArray0.length);
      assertEquals(1, characterArray1.length);
      
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte)10);
      assertNull(byteArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)10;
      shortArray0[1] = (short) (byte)10;
      shortArray0[2] = (short) (byte)10;
      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)10);
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)10, (short)10, (short)10}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)1751;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)1751;
      ArrayUtils.swap(objectArray0, (int) (short)0, (int) (short)2, 953);
      assertEquals(3, objectArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2258.5723F);
      floatArray0[1] = (float) (-4387);
      floatArray0[2] = (float) 953;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)1751;
      floatArray0[5] = (float) (short)2;
      floatArray0[6] = (float) (short)1503;
      floatArray0[7] = (-2635.185F);
      floatArray0[8] = (float) (short)0;
      ArrayUtils.swap(floatArray0, (-615), (int) (short)1751, (int) (short)2);
      assertArrayEquals(new float[] {(-2258.5723F), (-4387.0F), 953.0F, 0.0F, 1751.0F, 2.0F, 1503.0F, (-2635.185F), 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 't';
      charArray0[2] = 'R';
      charArray0[3] = 't';
      charArray0[4] = 'R';
      charArray0[5] = 't';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'t', 'R', 't', 'R', 't', 'R', 'R', 'R'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 't';
      doubleArray0[1] = (double) (short)200;
      doubleArray0[2] = (double) 't';
      doubleArray0[3] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {116.0, 200.0, 116.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {116.0, 200.0, 116.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)200;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)200}, shortArray0);
      assertArrayEquals(new short[] {(short)200}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)0, (-7004.34855193));
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {116.0, 200.0, 116.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {116.0, 200.0, 116.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)108;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)46, (byte)37, (byte)108}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertNotNull(object1);
      
      int int2 = ArrayUtils.hashCode(object1);
      assertSame(object0, object1);
      assertSame(object1, object0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      MockRandom mockRandom0 = new MockRandom(2115L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(doubleArray1, (java.util.Random) mockRandom0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {116.0, 200.0, 116.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {200.0, 116.0, 116.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'j';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'<', 'j'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shuffle(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short)720;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)720, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1622);
      shortArray0[1] = (short)1025;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-439);
      shortArray0[4] = (short) (-641);
      shortArray0[5] = (short)56;
      shortArray0[6] = (short) (-1026);
      shortArray0[7] = (short)467;
      shortArray0[8] = (short)16;
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short)1025, (short)0, (short) (-439), (short) (-641), (short)56, (short) (-1026), (short)467, (short)16, (short) (-1622)}, shortArray0);
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-108), (-2147171937));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-108);
      intArray0[1] = (int) (byte) (-108);
      intArray0[2] = (-1979);
      intArray0[3] = (-1);
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-108), (-108), (-1979), (-1)}, intArray0);
      assertEquals(4, intArray0.length);
      
      Byte[] byteArray1 = new Byte[6];
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray1[0] = byte0;
      Byte byte1 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray1[1] = byte1;
      Byte byte2 = new Byte((byte)14);
      assertEquals((byte)14, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray1[2] = byte2;
      Byte byte3 = new Byte((byte)55);
      assertEquals((byte)55, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray1[3] = byte3;
      Byte byte4 = new Byte((byte)16);
      assertEquals((byte)16, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray1[4] = byte4;
      Byte byte5 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray1[5] = byte5;
      Byte byte6 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      Byte[] byteArray2 = ArrayUtils.removeAllOccurrences(byteArray1, byte6);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte5));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertNotNull(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      float[] floatArray0 = new float[1];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 0.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-50));
      assertEquals((byte) (-50), (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, 0, byte0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-4455.373805952965));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int0 = 0;
      boolean[] booleanArray0 = ArrayUtils.add((boolean[]) null, 0, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1803;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1803;
      intArray0[4] = 116;
      intArray0[5] = 1803;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(116, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 2316L;
      longArray0[1] = (-344L);
      longArray0[2] = 1985L;
      longArray0[3] = 105L;
      longArray0[4] = 105L;
      longArray0[5] = (-1564L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 1212L, 1150);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {2316L, (-344L), 1985L, 105L, 105L, (-1564L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(6, longArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'R';
      charArray0[2] = '*';
      charArray0[3] = '6';
      charArray0[4] = '&';
      charArray0[5] = 'n';
      charArray0[6] = 'f';
      ArrayUtils.swap(charArray0, 2868, 2868, 2566);
      assertArrayEquals(new char[] {'#', 'R', '*', '6', '&', 'n', 'f'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte) (-52);
      longArray0[1] = (long) (byte) (-49);
      longArray0[2] = (long) (byte) (-49);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-52L), (-49L), (-49L)}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      ArrayUtils.shift(doubleArray0, (-1389), (int) (byte) (-52), (int) (byte)120);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      boolean boolean1 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)121;
      byteArray1[4] = (byte) (-126);
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte)0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)120, (byte)104, (byte)0, (byte)121, (byte) (-126)}, byteArray1);
      assertArrayEquals(new byte[] {(byte)120, (byte)104, (byte)121, (byte) (-126)}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray1.length);
      assertEquals(4, byteArray2.length);
      
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray0, (byte)0);
      assertNotSame(byteArray3, byteArray1);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte) (-126), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray3.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-651L);
      longArray0[1] = (long) (byte) (-126);
      longArray0[2] = (long) (byte)120;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-651L), (-126L), 120L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)99;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)83, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray0 = ArrayUtils.clone((double[]) null);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 't';
      charArray0[4] = 'R';
      charArray0[5] = 't';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'R', 't', 'R', 't', 'R', 'R', 'R'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 't';
      doubleArray0[1] = (double) (short)200;
      doubleArray0[2] = (double) 't';
      doubleArray0[3] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {116.0, 200.0, 116.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {116.0, 200.0, 116.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)200;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray1, shortArray0);
      assertSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)200}, shortArray1);
      assertArrayEquals(new short[] {(short)200}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray1.length);
      assertEquals(1, shortArray0.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)0, (-7004.34855193));
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {116.0, 200.0, 116.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {116.0, 200.0, 116.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)108;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)46, (byte)37, (byte)108}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.swap(floatArray0, (int) (byte)46, 2359);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(10, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      
      ArrayUtils.swap((float[]) null, 1304, (-1380));
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray1, false);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(10, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((long[]) null, (-1380), (long) (-1380));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1380, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (-950.0);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {102.0, (-950.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {102.0, (-950.0), 102.0, (-950.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-73);
      byteArray0[7] = (byte)31;
      ArrayUtils.shift(byteArray0, Integer.MAX_VALUE);
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-73), (byte)31, (byte)31, (byte)5, (byte) (-73), (byte)31, (byte)5}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2352.8021032157394;
      doubleArray0[1] = (double) (short)4234;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '=', (-480));
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(5, bitSet0.cardinality());
      assertEquals(5, bitSet0.length());
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
      assertArrayEquals(new char[] {'=', '=', '=', '=', '='}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.shift(byteArray0, (-17), (int) (short)4234, 64);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-702.6150626);
      doubleArray0[1] = (double) 104.0F;
      doubleArray0[2] = (-950.0);
      doubleArray0[3] = 613.39935576;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 104.0F;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-950.0);
      doubleArray0[3] = (-702.6150626);
      doubleArray1[2] = (double) 104.0F;
      doubleArray1[3] = (-125.5978398703679);
      doubleArray1[4] = (-950.0);
      doubleArray1[5] = (double) 104.0F;
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-702.6150626), 104.0, (-950.0), (-702.6150626), 1.0, 104.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-950.0), 0.0, 104.0, (-125.5978398703679), (-950.0), 104.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(12, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      ArrayUtils.shift((byte[]) null, (-2146402881));
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ArrayUtils.shift(byteArray0, (int) (byte) (-10));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      charArray0[4] = 'f';
      charArray0[5] = 'Q';
      charArray0[6] = '7';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = 843.3204877715891;
      doubleArray0[2] = 843.3204877715891;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 'Q';
      doubleArray1[1] = (double) 'R';
      doubleArray1[2] = (double) 'R';
      doubleArray1[3] = 613.39935576;
      doubleArray1[4] = (double) '9';
      doubleArray1[5] = (-126.0);
      doubleArray1[6] = (-950.0);
      doubleArray1[7] = (double) '(';
      doubleArray1[8] = (double) 'J';
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {55.0, 843.3204877715891, 843.3204877715891}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {81.0, 82.0, 82.0, 613.39935576, 57.0, (-126.0), (-950.0), 40.0, 74.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(12, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)5;
      ArrayUtils.shift(byteArray0, (-2146402881));
      assertArrayEquals(new byte[] {(byte) (-73), (byte)3, (byte)5}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2040.5135632;
      doubleArray0[1] = 125.41;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2040.5135632, 125.41}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short) (-1378), (int) (short) (-1378));
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 55.0F;
      floatArray0[2] = 2413.97F;
      floatArray0[3] = 120.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1941.876F;
      floatArray0[3] = 741.5375F;
      floatArray0[7] = (-2636.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1.0F, 55.0F, 2413.97F, 741.5375F, 0.0F, 1941.876F, 0.0F, (-2636.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2636.0F);
      doubleArray0[1] = (double) 2413.97F;
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '@';
      charArray0[3] = '<';
      charArray0[4] = '@';
      charArray0[5] = '@';
      ArrayUtils.shift(charArray0, 54, (-1313), 657);
      assertArrayEquals(new char[] {'<', '<', '@', '<', '@', '@'}, charArray0);
      assertEquals(6, charArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((short[]) null, (short)177);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2636.0), 2413.969970703125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.swap((float[]) null, 2522, (-1513), 1726);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      floatArray0[1] = (-7.88206F);
      floatArray0[2] = 640.496F;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-1194), charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte) (-124);
      byteArray0[5] = (byte) (-126);
      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)69, (byte)77, (byte)16, (byte)116, (byte) (-124), (byte) (-126)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)116);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)69, (byte)77, (byte)16, (byte)116, (byte) (-124), (byte) (-126)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)69, (byte)77, (byte)16, (byte) (-124), (byte) (-126)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, (int) (byte) (-126));
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short)69;
      shortArray0[5] = (short)1;
      shortArray0[6] = (short)1;
      shortArray0[7] = (short)1;
      shortArray0[8] = (short)1;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1418));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short)1, (short)1, (short)1, (short)69, (short)1, (short)1, (short)1, (short)1}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)1, (int) (short)1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      ArrayUtils.shift((long[]) null, (int) (short) (-1418));
      Short[] shortArray1 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray1);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1985L;
      longArray0[1] = 105L;
      longArray0[2] = 1985L;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 59;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) (-1564L);
      floatArray0[3] = (float) 59;
      floatArray0[4] = (float) 105L;
      floatArray0[5] = (float) 105L;
      floatArray0[6] = (float) (-1564L);
      floatArray0[7] = (float) 1985L;
      ArrayUtils.swap(floatArray0, 2836, 756, 756);
      assertArrayEquals(new float[] {59.0F, 1.0F, (-1564.0F), 59.0F, 105.0F, 105.0F, (-1564.0F), 1985.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 756;
      doubleArray0[1] = (-3155.0);
      doubleArray0[2] = (double) 1985L;
      doubleArray0[3] = (double) 1985L;
      doubleArray0[4] = (double) 1985L;
      doubleArray0[5] = (double) 105.0F;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 756);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {756.0, (-3155.0), 1985.0, 1985.0, 1985.0, 105.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      ArrayUtils.shift(intArray0, (-1194));
      assertArrayEquals(new int[] {0, (-1194), (-1194)}, intArray0);
      assertEquals(3, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, (-1564L), 0);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotNull(bitSet0);
      
      float[] floatArray0 = new float[0];
      ArrayUtils.shuffle(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      double[] doubleArray0 = new double[0];
      int int0 = ArrayUtils.indexOf(doubleArray0, 100.0, (double) (short) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.shift((short[]) null, (int) (short) (-1), 715827883, (int) (short) (-1));
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[2] = (short)0;
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (short)0, (-4));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      int int0 = ArrayUtils.indexOf((boolean[]) null, false, (-4));
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[0];
      char[] charArray2 = ArrayUtils.removeAll(charArray1, intArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, charArray2.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 200, 3, 200);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.removeElement(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray2.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[3] = 'G';
      charArray0[4] = 'G';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      charArray0[7] = 'G';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte) (-1), 2285);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G'}, charArray0);
      assertArrayEquals(new char[] {'G', 'G', 'G', 'G', 'G', 'G', 'G', 'G'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      char[] charArray1 = ArrayUtils.subarray(charArray0, 1, 828);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b', 'b'}, charArray0);
      assertArrayEquals(new char[] {'b', 'b', 'b', 'b'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 1;
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ArrayUtils.shift((short[]) null, 2039, 1, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      int int0 = new Byte((byte)18);
      assertEquals((byte)18, int0);
      
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) 18, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[1];
      Byte[] byteArray1 = ArrayUtils.insert((int) 0, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)88;
      Byte byte1 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)108;
      Byte byte3 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)88, (byte)byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)88, (byte)byte5);
      assertFalse(byte0 == byte2);
      assertTrue(byte5.equals((Object)byte4));
      assertTrue(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte2);
      assertEquals((byte)108, (byte)byte6);
      assertFalse(byte2 == byte0);
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte4));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte)88, (byte)byte7);
      assertFalse(byte0 == byte2);
      assertTrue(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte0));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 88, (int) byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte2 == byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)88;
      byteArray2[1] = (byte)88;
      byteArray2[2] = byte0;
      byteArray2[3] = byte0;
      byteArray2[4] = byte0;
      byteArray2[5] = byte0;
      byteArray2[6] = (byte)88;
      byteArray2[7] = byte2;
      byteArray2[8] = byte0;
      byte[] byteArray3 = ArrayUtils.clone(byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)108, (byte)88}, byteArray2);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)108, (byte)88}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray3.length);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) (byte)88;
      longArray0[2] = (long) (byte)108;
      ArrayUtils.shift(longArray0, 108, 15, 108);
      assertArrayEquals(new long[] {0L, 88L, 108L}, longArray0);
      assertEquals(3, longArray0.length);
      
      int int0 = ArrayUtils.indexOf(longArray0, (long) byte0);
      assertEquals(1, int0);
      assertFalse(byte0 == byte2);
      assertArrayEquals(new long[] {0L, 88L, 108L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      Byte byte0 = new Byte((byte)73);
      assertEquals((byte)73, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)73, object0);
      assertNotNull(object0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)0;
      intArray0[1] = 3650;
      intArray0[2] = (-2146606191);
      intArray0[3] = 2385;
      intArray0[4] = (int) (short)0;
      intArray0[5] = 8;
      intArray0[6] = (int) 'R';
      intArray0[7] = (int) 'J';
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 3650, (-2146606191), 2385, 0, 8, 82, 74}, intArray0);
      assertEquals(8, intArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)73;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 120.0F;
      floatArray0[5] = (float) 2385;
      floatArray0[6] = (float) 3650;
      floatArray0[7] = (float) '(';
      ArrayUtils.swap(floatArray0, 0, 0);
      assertArrayEquals(new float[] {73.0F, 0.0F, 0.0F, 0.0F, 120.0F, 2385.0F, 3650.0F, 40.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true);
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7, 8}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(9, bitSet0.length());
      assertEquals(9, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true, true, true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)4234;
      shortArray0[1] = (short)18688;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)4234);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)4234, (short)18688}, shortArray0);
      assertArrayEquals(new short[] {(short)18688}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(1, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 't';
      charArray0[4] = 'R';
      charArray0[5] = 't';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'R', 'R', 't', 'R', 't', 'R', 'R', 'R'}, charArray0);
      assertEquals(8, charArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 't';
      doubleArray0[1] = (double) (short)200;
      doubleArray0[2] = (double) 't';
      doubleArray0[3] = (double) 'R';
      double[] doubleArray1 = ArrayUtils.removeAllOccurences(doubleArray0, 82.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {116.0, 200.0, 116.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {116.0, 200.0, 116.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)200;
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertSame(shortArray0, shortArray1);
      assertSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)200}, shortArray0);
      assertArrayEquals(new short[] {(short)200}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(1, shortArray0.length);
      assertEquals(1, shortArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray1, (double) (short)0, (-7004.34855193));
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {116.0, 200.0, 116.0, 82.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {116.0, 200.0, 116.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)108;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)51);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-31), (byte)46, (byte)37, (byte)108}, byteArray0);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.5, (double) (short)4234);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      byte byte0 = (byte)111;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-123));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)1, (byte)111, (byte)1, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)111;
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) (byte)111;
      longArray0[3] = (long) 'R';
      longArray0[4] = (long) 'R';
      longArray0[5] = (long) 'R';
      longArray0[6] = (long) 'R';
      longArray0[7] = 269L;
      longArray0[8] = (long) (byte)111;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {111L, 82L, 111L, 82L, 82L, 82L, 82L, 269L, 111L}, longArray0);
      assertEquals(9, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) 'R';
      intArray0[2] = (int) 'R';
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(longArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 82, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((long[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1194);
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      intArray0[3] = (-1194);
      intArray0[4] = (-1194);
      intArray0[5] = (-1194);
      intArray0[6] = (-1194);
      ArrayUtils.shift(intArray0, 2258);
      assertArrayEquals(new int[] {(-1194), (-1194), (-1194), (-1194), (-1194), (-1194), (-1194)}, intArray0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '&';
      doubleArray0[1] = (double) 2258;
      doubleArray0[2] = (double) (-1194);
      doubleArray0[3] = (double) (-1194);
      doubleArray0[4] = 983.2302116640191;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1194));
      assertEquals(3, int0);
      assertArrayEquals(new double[] {38.0, 2258.0, (-1194.0), (-1194.0), 983.2302116640191}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte)27);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)27;
      ArrayUtils.swap(byteArray0, 1437, (-1194));
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)27, (byte)27, (byte)27, (byte)27, (byte)27}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 2, (-1194));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {38.0, 2258.0, (-1194.0), (-1194.0), 983.2302116640191}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      float[] floatArray0 = new float[3];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)2, (int) (short)2);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      Short[] shortArray0 = new Short[25];
      shortArray0[0] = (Short) (short)2;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      ArrayUtils.swap(byteArray0, (int) (short)2, (int) (byte) (-1), 2330);
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      Integer integer0 = new Integer((short) (-3155));
      assertEquals((-3155), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (short) (-3155));
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2854.2974F;
      doubleArray0[1] = (double) (-1L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1L));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {2854.29736328125, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-49));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      ArrayUtils.swap((byte[]) null, 233, (int) (byte) (-49));
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), (-1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2854.29736328125, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-1L);
      boolean boolean1 = ArrayUtils.isNotEmpty((byte[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = ArrayUtils.insert((int) (byte)105, (byte[]) null, (byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((boolean[]) null, (-631));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -631, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      shortArray0[2] = (short)2;
      short short0 = (short) (-1479);
      short short1 = (short)0;
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-1479);
      shortArray1[1] = (short)1751;
      shortArray1[2] = (short)1751;
      shortArray1[3] = (short) (-1);
      ArrayUtils.shift(shortArray1, (int) (short)0);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-1479), (short)1751, (short)1751, (short) (-1)}, shortArray1);
      assertEquals(4, shortArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      // Undeclared exception!
      try { 
        ArrayUtils.remove(booleanArray0, (int) (short) (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 55.0F;
      floatArray0[2] = 2413.97F;
      floatArray0[3] = 120.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1941.876F;
      floatArray0[6] = 55.0F;
      floatArray0[7] = (-2636.0F);
      ArrayUtils.swap(floatArray0, 69, 2800, (-483));
      assertArrayEquals(new float[] {1.0F, 55.0F, 2413.97F, 120.0F, 0.0F, 1941.876F, 55.0F, (-2636.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (-5064.623977172575);
      int int0 = ArrayUtils.indexOf(doubleArray0, (-4454.373805952965), (-1.0));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-5064.623977172575)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isSameType(byte1, byte1);
      assertTrue(boolean0);
      assertFalse(byte1.equals((Object)byte0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte) (-12);
      int[] intArray1 = ArrayUtils.removeAllOccurrences(intArray0, 34);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-12)}, intArray0);
      assertArrayEquals(new int[] {(-12)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(2759.25235323);
      assertEquals(2759.2524F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) floatArray0[0]);
      assertArrayEquals(new float[] {2759.2524F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46, (int) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)0;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      ArrayUtils.shift(intArray0, (-744), 917, (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-744), (int) (byte)0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      Float float0 = new Float(Double.NaN);
      assertEquals(Float.NaN, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) 2648);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-10);
      intArray0[2] = (int) (byte) (-10);
      intArray0[3] = (-11);
      intArray0[4] = (int) (byte) (-10);
      intArray0[5] = 2648;
      intArray0[6] = (int) (byte) (-10);
      intArray0[7] = (int) (byte) (-10);
      intArray0[8] = (int) (byte) (-10);
      ArrayUtils.shift(intArray0, (int) (byte) (-10), (-10), (-10));
      assertArrayEquals(new int[] {(-10), 0, (-10), (-11), (-10), 2648, (-10), (-10), (-10)}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-330), (-10));
      assertArrayEquals(new int[] {(-10), 0, (-10), (-11), (-10), 2648, (-10), (-10), (-10)}, intArray0);
      assertEquals(9, intArray0.length);
      
      Float[] floatArray1 = new Float[2];
      Float float0 = new Float((-126.0));
      assertEquals((-126.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[1] = (Float) (-18.1861F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-4901.4F));
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-4901.4F), (-18.1861F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-1493));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ArrayUtils.swap(intArray0, (-1493), (-1493), (int) (byte) (-1));
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      Float[] floatArray0 = new Float[9];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 13.235008F);
      assertArrayEquals(new float[] {13.235008F, 13.235008F, 13.235008F, 13.235008F, 13.235008F, 13.235008F, 13.235008F, 13.235008F, 13.235008F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, 0, 0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte) (-10);
      intArray0[2] = (int) (byte) (-10);
      intArray0[3] = (-11);
      intArray0[4] = (int) (byte) (-10);
      intArray0[5] = 2648;
      intArray0[6] = (-446);
      intArray0[7] = (int) (byte) (-10);
      intArray0[8] = (int) (byte) (-10);
      ArrayUtils.shift(intArray0, (int) (byte) (-10), (-10), (-10));
      assertArrayEquals(new int[] {(-10), 0, (-10), (-11), (-10), 2648, (-446), (-10), (-10)}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.swap(intArray0, (-330), (-10));
      assertArrayEquals(new int[] {(-10), 0, (-10), (-11), (-10), 2648, (-446), (-10), (-10)}, intArray0);
      assertEquals(9, intArray0.length);
      
      Float[] floatArray1 = new Float[2];
      Float float0 = new Float((-126.0));
      assertEquals((-126.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray1[1] = (Float) (-18.1861F);
      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1, (-4901.4F));
      assertNotSame(floatArray2, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-126.0F), (-18.1861F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-49);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-49));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11), (byte) (-49)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte) (-11)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Integer integer0 = new Integer((-2398));
      assertEquals((-2398), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals((-2398), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-18.1861F);
      doubleArray0[1] = (double) (byte) (-49);
      doubleArray0[2] = (double) (byte)113;
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-11), 2244, (-1790.3317674339396));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-18.186100006103516), (-49.0), 113.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = (-1329L);
      longArray0[1] = 0L;
      longArray0[2] = (-2571L);
      longArray0[3] = (-742L);
      longArray0[4] = 15L;
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-742L), 110);
      assertEquals(3, int0);
      assertArrayEquals(new long[] {(-1329L), 0L, (-2571L), (-742L), 15L}, longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = (-1);
      intArray0[2] = 110;
      intArray0[3] = 3;
      intArray0[4] = 110;
      intArray0[5] = 3;
      intArray0[6] = 110;
      intArray0[7] = 110;
      int int1 = ArrayUtils.lastIndexOf(intArray0, (-112));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {3, (-1), 110, 3, 110, 3, 110, 110}, intArray0);
      assertEquals(8, intArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, true, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(7, booleanArray0.length);
      assertEquals(8, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-420);
      shortArray0[1] = (short) (-2782);
      shortArray0[2] = (short)2879;
      ArrayUtils.shift(shortArray0, (int) (short) (-2782), 924, (int) (short)2879);
      assertArrayEquals(new short[] {(short) (-2782), (short)2879, (short) (-420)}, shortArray0);
      assertEquals(3, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-249);
      shortArray0[2] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short) (-249), (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, Integer.MAX_VALUE);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      int int2 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      short[] shortArray1 = new short[7];
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[0] = (short) (-249);
      shortArray1[1] = (short) (-249);
      shortArray1[2] = (short)0;
      shortArray1[3] = (short) (-249);
      shortArray1[4] = (short) (-249);
      shortArray1[5] = (short)0;
      shortArray1[6] = (short)0;
      ArrayUtils.shift(shortArray1, (-1), 4164, 0);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-249), (short) (-249), (short)0, (short) (-249), (short) (-249), (short)0, (short)0}, shortArray1);
      assertEquals(7, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = '&';
      charArray0[3] = '5';
      charArray0[4] = 'I';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'I', 'x', '&', '5', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.swap((short[]) null, (-1194), (-1194));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-84);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)124, (int) (byte) (-84));
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)124, (byte) (-84)}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1022, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1022, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', (-2190));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean[] booleanArray1 = new boolean[4];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      booleanArray1[0] = true;
      booleanArray1[1] = false;
      booleanArray1[2] = true;
      booleanArray1[3] = false;
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, Integer.MAX_VALUE, 34);
      assertNotSame(booleanArray1, booleanArray2);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(4, booleanArray1.length);
      assertEquals(0, booleanArray2.length);
      
      double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      byte byte0 = (byte) (-117);
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-117);
      intArray0[1] = 397;
      intArray0[2] = (int) byte0;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1301), 397);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-117), 397, (-117)}, intArray0);
      assertArrayEquals(new int[] {(-117), 397, (-117)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int[] intArray2 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray2);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 397, 99);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-117), 397, (-117)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      Integer[] integerArray0 = new Integer[8];
      // Undeclared exception!
      try { 
        ArrayUtils.toPrimitive(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      int[] intArray0 = new int[2];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-52);
      Byte byte2 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte byte3 = (byte) (-49);
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte6);
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte5));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte7);
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte5;
      Byte byte8 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte8);
      assertTrue(byte8.equals((Object)byte1));
      assertFalse(byte8.equals((Object)byte4));
      assertFalse(byte8.equals((Object)byte3));
      assertTrue(byte8.equals((Object)byte2));
      assertFalse(byte8.equals((Object)byte0));
      assertFalse(byte8.equals((Object)byte7));
      assertFalse(byte8.equals((Object)byte5));
      assertFalse(byte8.equals((Object)byte6));
      assertNotNull(byte8);
      
      byteArray0[2] = byte5;
      byteArray0[3] = byte2;
      byteArray0[4] = byte4;
      byteArray0[5] = byte2;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray1, byteArray0);
      assertSame(byteArray0, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-52), (int) byte1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(byte1 == byte3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)120;
      longArray0[1] = (long) byte3;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {(-49L), 120L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1194);
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      ArrayUtils.shift(intArray0, (-1194));
      assertArrayEquals(new int[] {(-1194), (-1194), (-1194)}, intArray0);
      assertEquals(3, intArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '5';
      charArray0[2] = 'I';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'&', '5', 'I'}, charArray0);
      assertEquals(3, charArray0.length);
      
      ArrayUtils.swap((short[]) null, 1792, (-1194));
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'b');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'&', '5', 'I'}, charArray0);
      assertArrayEquals(new char[] {'&', '5', 'I'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(3, charArray0.length);
      assertEquals(3, charArray1.length);
      
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'x';
      charArray2[1] = '5';
      charArray2[2] = 'n';
      charArray2[3] = 'x';
      charArray2[4] = 'x';
      charArray2[5] = 'b';
      charArray2[6] = 'U';
      charArray2[7] = 'I';
      charArray2[8] = 'x';
      boolean boolean1 = ArrayUtils.contains(charArray2, 'D');
      assertFalse(boolean1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'x', '5', 'n', 'x', 'x', 'b', 'U', 'I', 'x'}, charArray2);
      assertEquals(9, charArray2.length);
      
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '5';
      charArray0[6] = '5';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '5';
      boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray2 = ArrayUtils.removeAllOccurences(charArray1, '5');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray2, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertArrayEquals(new char[] {'5'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
      
      boolean boolean2 = ArrayUtils.contains(charArray1, '5');
      assertTrue(boolean2);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'5'}, charArray1);
      assertEquals(1, charArray1.length);
      
      Byte byte0 = new Byte((byte)8);
      assertEquals((byte)8, (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3206.4749);
      doubleArray0[1] = (double) '5';
      doubleArray0[2] = 808.07760737227;
      doubleArray0[3] = (double) '5';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-344.3777566836044), (double) (byte) (-28));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-3206.4749), 53.0, 808.07760737227, 53.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(4, doubleArray0.length);
      
      bitSet0.clear((int) (byte)8);
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-3206.4749), 53.0, 808.07760737227, 53.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      BitSet bitSet1 = new BitSet(3767);
      assertEquals(3776, bitSet1.size());
      assertEquals("{}", bitSet1.toString());
      assertEquals(0, bitSet1.length());
      assertTrue(bitSet1.isEmpty());
      assertEquals(0, bitSet1.cardinality());
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotNull(bitSet1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = '&';
      charArray0[3] = '5';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'I', 'x', '&', '5', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'x');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'I', 'x', '&', '5', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'I', '&', '5', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'M');
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'I', 'x', '&', '5', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) 'x';
      objectArray0[1] = (Object) '5';
      objectArray0[2] = (Object) 'I';
      objectArray0[3] = (Object) 'x';
      objectArray0[4] = (Object) 'x';
      Byte byte0 = new Byte((byte) (-28));
      assertEquals((byte) (-28), (byte)byte0);
      assertNotNull(byte0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3206.4749);
      doubleArray0[1] = (-126.0);
      doubleArray0[2] = (double) 'I';
      doubleArray0[3] = (double) '5';
      doubleArray0[4] = (-221.435136);
      doubleArray0[5] = (double) '5';
      doubleArray0[6] = (double) (byte) (-28);
      doubleArray0[7] = (double) 'I';
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 53.0, 2347.616107419);
      assertEquals(7, bitSet0.cardinality());
      assertEquals(8, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals("{1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertArrayEquals(new double[] {(-3206.4749), (-126.0), 73.0, 53.0, (-221.435136), 53.0, (-28.0), 73.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-344L);
      longArray0[1] = (long) ' ';
      longArray0[2] = 4L;
      longArray0[3] = (long) '6';
      longArray0[4] = (long) '6';
      longArray0[5] = 105L;
      longArray0[6] = (-1564L);
      longArray0[7] = (long) 0;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-742L), (-496));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new long[] {(-344L), 32L, 4L, 54L, 54L, 105L, (-1564L), 0L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) ' ';
      doubleArray0[2] = (double) 105L;
      doubleArray0[3] = (double) 54L;
      doubleArray0[4] = (-2294.616107419);
      doubleArray0[5] = (double) ' ';
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) (-1564L);
      doubleArray0[8] = 539.7926833762;
      ArrayUtils.reverse(doubleArray0);
      assertArrayEquals(new double[] {539.7926833762, (-1564.0), (-1.0), 32.0, (-2294.616107419), 54.0, 105.0, 32.0, 1.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      charArray0[4] = 'B';
      charArray0[5] = '_';
      charArray0[6] = 'Q';
      charArray0[7] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {')', ']', 'J', '@', 'B', '_', 'Q', 'f'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-955), (-955));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ']';
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift((double[]) null, (int) 'f');
      float[] floatArray0 = new float[1];
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[0];
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte4);
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte5);
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, 1136);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (-230);
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte) (-126);
      ArrayUtils.shift((double[]) null, (-1374));
      ArrayUtils.shift((Object[]) characterArray0, (int) byte0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertEquals(0, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1136, (int) (byte)112);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      
      ArrayUtils.reverse((double[]) null);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (short)1751;
      objectArray0[1] = (Object) (short)0;
      objectArray0[2] = (Object) (short)1751;
      ArrayUtils.swap(objectArray0, (int) (short)0, (int) (short)2, 953);
      assertEquals(3, objectArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2258.5723F);
      floatArray0[1] = (float) (-4387);
      floatArray0[2] = (float) 953;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = (float) (short)1751;
      floatArray0[5] = (float) (short)2;
      floatArray0[6] = (float) (short)1503;
      floatArray0[7] = (-2635.185F);
      floatArray0[8] = (float) (short)0;
      ArrayUtils.swap(floatArray0, 1595, 128);
      assertArrayEquals(new float[] {(-2258.5723F), (-4387.0F), 953.0F, 0.0F, 1751.0F, 2.0F, 1503.0F, (-2635.185F), 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      byte byte0 = (byte) (-42);
      Byte byte1 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byte byte3 = (byte)0;
      Byte byte4 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      byte byte6 = (byte) (-12);
      Byte byte7 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte7);
      assertFalse(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte4));
      assertNotNull(byte7);
      
      int int0 = 12;
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '~';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(12, charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
      
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, '2');
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, characterArray0.length);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '2';
      // Undeclared exception!
      try { 
        ArrayUtils.insert(48, charArray1, charArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 48, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      Long long0 = new Long((-1581L));
      assertEquals((-1581L), (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1581L);
      doubleArray0[1] = (double) (-1581L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1581.0));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-1581.0), (-1581.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.swap((byte[]) null, 233, (int) (byte) (-49));
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (byte) (-49), 2619);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1581.0), (-1581.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1581.0), (-1581.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      short[] shortArray0 = new short[11];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      byte[] byteArray0 = new byte[0];
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3210;
      doubleArray0[1] = (double) (-4432);
      doubleArray0[2] = (double) (-4432);
      doubleArray0[3] = 46.0;
      doubleArray0[4] = 2001.6596747957112;
      doubleArray0[5] = (double) (short) (-3155);
      doubleArray0[7] = (double) (short) (-3155);
      doubleArray0[8] = (double) (short) (-3155);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, 983.2302116640191);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {3210.0, (-4432.0), (-4432.0), 46.0, 2001.6596747957112, (-3155.0), 0.0, (-3155.0), (-3155.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      byte[] byteArray0 = new byte[0];
      int int2 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (int) (short)2, 17);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4432.0), 46.0, 2001.6596747957112, (-3155.0), 0.0, (-3155.0), (-3155.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3210.0, (-4432.0), (-4432.0), 46.0, 2001.6596747957112, (-3155.0), 0.0, (-3155.0), (-3155.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)0, (-2797), 4045.0530584706);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new double[] {(-1.0), 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short) (-745);
      shortArray0[1] = (short) (-745);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-745);
      floatArray0[1] = (float) (short)124;
      ArrayUtils.swap(floatArray0, (-491), 9, (int) (short) (-745));
      assertArrayEquals(new float[] {(-745.0F), 124.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'f';
      doubleArray0[1] = (-950.0);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {102.0, (-950.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {102.0, (-950.0), 102.0, (-950.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.5, 1.5);
      assertEquals((-1), int0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {102.0, (-950.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 59, 1, 1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3025;
      floatArray0[1] = (float) (-2337);
      floatArray0[2] = 1.0F;
      floatArray0[3] = (float) 1;
      ArrayUtils.swap(floatArray0, (-1), 9);
      assertArrayEquals(new float[] {3025.0F, (-2337.0F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3025;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 59;
      doubleArray0[3] = (double) (-2337.0F);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-1.0);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 46.0, (-1), 0.0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {3025.0, 1.0, 59.0, (-2337.0), 1.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 679.04, 1, 679.04);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1;
      longArray0[1] = (long) 1;
      longArray0[2] = (long) 1;
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (long) 1;
      longArray0[6] = 644L;
      longArray0[7] = (long) 1;
      long[] longArray1 = ArrayUtils.add(longArray0, 1L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1L, 1L, 1L, (-1L), (-1L), 1L, 644L, 1L}, longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, (-1L), (-1L), 1L, 644L, 1L, 1L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(8, longArray0.length);
      assertEquals(9, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)46;
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {46.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte[] byteArray1 = new Byte[0];
      ArrayUtils.reverse((Object[]) byteArray1, (int) (byte)0, Integer.MAX_VALUE);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-143);
      intArray0[2] = 0;
      intArray0[3] = 3025;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, (-143), 0, 3025}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) integerArray0, 3025, (-2337), (-2337));
      assertArrayEquals(new int[] {0, (-143), 0, 3025}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.insert(0, (int[]) null, (int[]) null);
      assertNull(intArray1);
      
      ArrayUtils.reverse((Object[]) integerArray0, 9, 2);
      assertArrayEquals(new int[] {0, (-143), 0, 3025}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, integerArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = ',';
      charArray0[2] = 'j';
      charArray0[3] = 'n';
      charArray0[4] = 'y';
      charArray0[5] = '^';
      MockRandom mockRandom0 = new MockRandom((-1L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(charArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new char[] {',', 'j', 'n', 'y', '^', '+'}, charArray0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 434;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 127;
      intArray0[5] = (-2450);
      intArray0[6] = 0;
      intArray0[7] = Integer.MAX_VALUE;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 434, (-1), 0, 127, (-2450), 0, Integer.MAX_VALUE, 0}, intArray0);
      assertArrayEquals(new int[] {434, (-1), 127, (-2450), Integer.MAX_VALUE}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 127;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2376.72035;
      ArrayUtils.swap(doubleArray0, (-2450), 0, 2873);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 127.0, 0.0, 0.0, 2376.72035}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray0, 1898.0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 127.0, 0.0, 0.0, 2376.72035}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byteArray0[2] = byteArray0[1];
      ArrayUtils.shift((Object[]) byteArray0, (-1832), 3, 1114111);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[3] = (long) (-12);
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-12L), 0L, 0L, 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
      
      ArrayUtils.shift((Object[]) longArray1, (-12), 91, (-12));
      assertArrayEquals(new long[] {0L, 0L, 0L, (-12L), 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      ArrayUtils.swap((long[]) null, 2135350972, (int) (short)2, (-436));
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 1.0;
      objectArray0[1] = (Object) 1.0;
      objectArray0[2] = (Object) 1.0;
      objectArray0[3] = (Object) 1.0;
      objectArray0[4] = (Object) 1.0;
      objectArray0[5] = (Object) 1.0;
      objectArray0[6] = (Object) 1.0;
      ArrayUtils.shift(objectArray0, (-3264), 2019, (-1796));
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      float[] floatArray0 = new float[5];
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.reverse((long[]) null);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.shift(floatArray0, 3003);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      Byte byte0 = new Byte((byte)42);
      assertEquals((byte)42, (byte)byte0);
      assertNotNull(byte0);
      
      Character[] characterArray0 = new Character[1];
      char char0 = '?';
      Character character0 = Character.valueOf('?');
      assertEquals('?', (char)character0);
      assertNotNull(character0);
      
      characterArray0[0] = character0;
      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'?'}, charArray0);
      assertEquals(1, characterArray0.length);
      assertEquals(1, charArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3003;
      doubleArray0[1] = (double) char0;
      ArrayUtils.swap(doubleArray0, (-148), 5481, 1021);
      assertArrayEquals(new double[] {3003.0, 63.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)4234;
      intArray0[1] = 0;
      long[] longArray0 = new long[3];
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.shift(booleanArray0, (-26), 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      Byte byte0 = new Byte((byte)106);
      assertEquals((byte)106, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.reverse(longArray0, (int) (short) (-1), (-2939));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      int[] intArray0 = new int[1];
      intArray0[0] = (-2441);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2441);
      ArrayUtils.swap(doubleArray0, (-2441), 114, 0);
      assertArrayEquals(new double[] {(-2441.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (-2441);
      objectArray0[1] = (Object) (-2441.0);
      objectArray0[2] = (Object) (-2441.0);
      objectArray0[3] = (Object) (-2441);
      objectArray0[4] = (Object) (-2441);
      objectArray0[5] = (Object) (-2441);
      objectArray0[6] = (Object) (-2441.0);
      objectArray0[7] = (Object) (-2441);
      Byte byte0 = new Byte((byte) (-67));
      assertEquals((byte) (-67), (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte) (-67), object0);
      assertNotNull(object0);
      
      objectArray0[8] = object0;
      ArrayUtils.shift(objectArray0, (int) (byte) (-67));
      assertEquals(9, objectArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 114;
      longArray0[1] = (long) 0;
      ArrayUtils.reverse(longArray0);
      assertArrayEquals(new long[] {0L, 114L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)integerArray0[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1841L}, longArray0);
      assertArrayEquals(new long[] {1841L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-590L), 1841);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1841L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'i';
      charArray0[4] = 'y';
      charArray0[5] = 'X';
      charArray0[6] = ':';
      int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', 320);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'\u0000', 'E', 'E', 'i', 'y', 'X', ':', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 7, (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'J', '(', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      ArrayUtils.swap(shortArray0, 7, (-1));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      assertEquals(3, shortArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'f');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'J', '(', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'J', '(', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      double[] doubleArray0 = new double[0];
      ArrayUtils.swap(doubleArray0, 0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Integer integer0 = new Integer((-2363));
      assertEquals((-2363), (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-2363);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-2363);
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 127;
      floatArray0[5] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-3155), (-1));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2363.0F), 0.0F, (-2363.0F), 0.0F, 127.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap(booleanArray0, 701, 701);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2454;
      intArray0[2] = 701;
      intArray0[3] = 127;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1106, (-3988));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 2454, 701, 127}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(4, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, false, 701);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(0, booleanArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray0, (-2363));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 2454, 701, 127, (-2363)}, intArray2);
      assertArrayEquals(new int[] {0, 2454, 701, 127}, intArray0);
      assertNotNull(intArray2);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 9, 9);
      assertNull(intArray0);
      
      Integer[] integerArray0 = new Integer[0];
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = '&';
      charArray0[3] = '5';
      charArray0[4] = 'I';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '&';
      doubleArray0[1] = (double) '&';
      doubleArray0[2] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, 2331.7598623891786);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {38.0, 38.0, 53.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      ArrayUtils.swap((boolean[]) null, (-1), 188);
      int[] intArray0 = ArrayUtils.subarray((int[]) null, 296, (int) (byte) (-119));
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((boolean[]) null, true, (int) (byte) (-119));
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      
      int[] intArray1 = ArrayUtils.add((int[]) null, 3025);
      assertArrayEquals(new int[] {3025}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, 8, 1301, 1301);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      char[] charArray2 = ArrayUtils.addAll(charArray1, charArray0);
      assertNotSame(charArray0, charArray2);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray2.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      short short0 = (short)0;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4013.41;
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4013.41, 0.0, 82.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4013.41, 0.0, 82.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) 0.0;
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (-4432.0), 4013.41);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'f';
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {102.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {102.0, 0.0, 102.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      short[] shortArray0 = ArrayUtils.removeAllOccurrences((short[]) null, (short)18688);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      float[] floatArray0 = new float[7];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 55.0F;
      floatArray0[2] = 2413.97F;
      floatArray0[3] = 120.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1941.876F;
      floatArray0[6] = 741.5375F;
      floatArray0[7] = (-2636.0F);
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {1.0F, 55.0F, 2413.97F, 120.0F, 0.0F, 1941.876F, 741.5375F, (-2636.0F)}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2636.0F);
      doubleArray0[1] = (double) 2413.97F;
      doubleArray0[2] = (double) 1941.876F;
      doubleArray0[3] = 843.3204877715891;
      doubleArray0[4] = (double) 1941.876F;
      doubleArray0[5] = (double) 741.5375F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 55.0F;
      doubleArray0[8] = (-176.0);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2636.0), 2413.969970703125, 1941.8759765625, 843.3204877715891, 1941.8759765625, 741.5374755859375, 0.0, 55.0, (-176.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(18, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-2146606191), 1515, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)4;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-98), (int) (byte) (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)48, (byte)122, (byte) (-91), (byte) (-1), (byte) (-1), (byte)21, (byte)4}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-98));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-91), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -91, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)30);
      assertEquals((byte)30, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-9));
      assertArrayEquals(new byte[] {(byte)30}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 127;
      intArray0[1] = 0;
      intArray0[2] = (int) (short)0;
      int int1 = ArrayUtils.lastIndexOf(intArray0, 127, (int) (short)0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {127, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (byte) (-9));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(4, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ArrayUtils.swap(booleanArray0, 1465, 1465);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 1465, 520);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-79);
      int int0 = ArrayUtils.indexOf(byteArray0, (byte)40, 1465);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)24, (byte)9, (byte) (-79)}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      ArrayUtils.swap(booleanArray0, (int) (byte)11, (int) (byte)11, (int) (byte)11);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 'c');
      assertArrayEquals(new char[] {'c'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1841;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) integerArray0[0], 127);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1841.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, (int) integerArray0[0], (int) integerArray0[0]);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(1, integerArray0.length);
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = 520;
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = 127;
      intArray0[4] = 2454;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2454, 1841);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1841, 520, 1841, 127, 2454}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((byte[]) null, (byte)17, (int) (byte)17);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      byte[] byteArray0 = ArrayUtils.removeAllOccurences((byte[]) null, (byte) (-111));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)integerArray0[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1841L}, longArray0);
      assertArrayEquals(new long[] {1841L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      ArrayUtils.swap((float[]) null, (-830), (-830), 49);
      Integer[] integerArray1 = ArrayUtils.toObject(intArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      ArrayUtils.swap((Object[]) characterArray0, 4665, 4665, 4665);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = ' ';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'6', '6', ' '}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'6', '6', ' '}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, 815, 815);
      assertNull(byteArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, 6, (-1), 1876);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '6';
      floatArray0[1] = (float) '6';
      floatArray0[2] = (float) '6';
      floatArray0[3] = (float) (-2337);
      floatArray0[4] = (-2258.5723F);
      floatArray0[5] = (float) ' ';
      floatArray0[6] = (float) ' ';
      ArrayUtils.swap(floatArray0, 14, 0);
      assertArrayEquals(new float[] {54.0F, 54.0F, 54.0F, (-2337.0F), (-2258.5723F), 32.0F, 32.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray1, floatArray0);
      assertSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {54.0F, 54.0F, 54.0F, (-2337.0F), (-2258.5723F), 32.0F, 32.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {54.0F, 54.0F, 54.0F, (-2337.0F), (-2258.5723F), 32.0F, 32.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[1] = (-2347);
      intArray0[2] = (int) (byte) (-110);
      ArrayUtils.swap(intArray0, (-4242), 50);
      assertArrayEquals(new int[] {(-110), (-2347), (-110)}, intArray0);
      assertEquals(3, intArray0.length);
      
      Float float0 = new Float(2641.9819005151);
      assertEquals(2641.982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-2347));
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 110;
      intArray0[1] = (-2);
      ArrayUtils.swap(intArray0, 110, (-2), (-2));
      assertArrayEquals(new int[] {110, (-2)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 3025;
      intArray0[2] = (-143);
      intArray0[3] = 116;
      intArray0[4] = 3025;
      intArray0[5] = 0;
      intArray0[6] = (-143);
      intArray0[7] = 116;
      intArray0[8] = 3025;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(105L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2, 116);
      assertNotNull(intStream0);
      
      ArrayUtils.shift(intArray0, 116, Integer.MAX_VALUE, (-446));
      assertArrayEquals(new int[] {0, 3025, (-143), 116, 3025, 0, (-143), 116, 3025}, intArray0);
      assertEquals(9, intArray0.length);
      
      ArrayUtils.swap(intArray0, 3025, (-2145506630));
      assertArrayEquals(new int[] {0, 3025, (-143), 116, 3025, 0, (-143), 116, 3025}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      char[] charArray0 = new char[3];
      charArray0[1] = 'o';
      charArray0[2] = 'M';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', 'o', 'M'}, charArray0);
      assertEquals(3, charArray0.length);
      
      int[] intArray0 = new int[8];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(intArray1, intArray0);
      assertFalse(boolean1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(16, intArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)57;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (-2599));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)64, (byte) (-38), (byte) (-92), (byte)57}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray0.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)64, (byte) (-38), (byte) (-92), (byte)57}, byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)64, (byte) (-38), (byte) (-92), (byte)57}, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray1.length);
      assertEquals(6, byteArray2.length);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      byte byte4 = (byte)97;
      Byte byte5 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte((byte)112);
      assertEquals((byte)112, (byte)byte6);
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte5));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertNotSame(characterArray1, characterArray0);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, 1136);
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (-230);
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte) (-126);
      ArrayUtils.shift((double[]) null, (-1374));
      ArrayUtils.shift((Object[]) characterArray0, (int) byte0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertFalse(byte0 == byte4);
      assertEquals(0, characterArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (int) (short) (-126);
      intArray0[2] = (int) (byte)112;
      intArray0[3] = (-2146861815);
      intArray0[4] = (int) (short)97;
      intArray0[5] = (int) (short) (-230);
      intArray0[6] = (int) byte0;
      intArray0[7] = (int) byte4;
      boolean boolean1 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new int[] {2, (-126), 112, (-2146861815), 97, (-230), (-126), 97}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int int0 = ArrayUtils.indexOf(doubleArray1, (-1584.857623938027), (-1584.857623938027));
      assertEquals((-1), int0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-55);
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)40, (byte)10, (byte) (-55)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)10, (byte) (-55), (byte)40, (byte)10, (byte) (-55)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      Class<?>[] classArray0 = ArrayUtils.nullToEmpty((Class<?>[]) null);
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      
      Byte[] byteArray2 = new Byte[3];
      byteArray2[0] = (Byte) (byte)10;
      byteArray2[1] = (Byte) (byte)10;
      byteArray2[2] = (Byte) (byte) (-55);
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class0);
      assertSame(byteArray3, byteArray2);
      assertSame(byteArray2, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(3, byteArray3.length);
      assertEquals(3, byteArray2.length);
      
      boolean boolean0 = ArrayUtils.isSorted(byteArray1);
      assertFalse(boolean0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)40, (byte)10, (byte) (-55)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)10, (byte) (-55), (byte)40, (byte)10, (byte) (-55)}, byteArray1);
      assertEquals(3, byteArray0.length);
      assertEquals(6, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Byte byte0 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte0);
      assertNotNull(byte0);
      
      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) byte0, 56);
      assertEquals((-1), int0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 56;
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {56.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Byte byte1 = new Byte((byte)51);
      assertEquals((byte)51, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (int) (byte)51, (int) (byte)51);
      assertNull(byteArray0);
      
      byte[] byteArray1 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      Float[] floatArray0 = new Float[0];
      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte)2);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(1, classArray0.length);
      assertEquals(1, classArray1.length);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[8] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1, 4);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(9, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, (byte[]) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-115), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArray2.length);
      
      long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (-1346.0F);
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, (float) (byte)0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-1346.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1346.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = '&';
      charArray0[3] = '5';
      charArray0[4] = 'I';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '&';
      doubleArray0[1] = (double) '&';
      doubleArray0[2] = (double) '5';
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, 2331.7598623891786);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {38.0, 38.0, 53.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-119);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0, (byte)0, (byte) (-119), (byte)0, (byte) (-119)}, byteArray2);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-119), (byte)0, (byte) (-119)}, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(6, byteArray2.length);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 5);
      Class<Byte> class0 = Byte.class;
      classArray0[0] = class0;
      Class<Byte> class1 = Byte.class;
      classArray0[1] = class1;
      Class<Byte> class2 = Byte.class;
      classArray0[2] = class2;
      Class<Byte> class3 = Byte.class;
      classArray0[3] = class3;
      Class<Byte> class4 = Byte.class;
      classArray0[4] = class4;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(5, classArray1.length);
      assertEquals(5, classArray0.length);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)104;
      shortArray0[2] = (short) (-1575);
      shortArray0[3] = (short)1172;
      shortArray0[4] = (short)97;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-129);
      shortArray0[7] = (short) (-49);
      shortArray0[8] = (short)89;
      ArrayUtils.swap(shortArray0, 2, 520);
      assertArrayEquals(new short[] {(short)15, (short)104, (short) (-1575), (short)1172, (short)97, (short)0, (short) (-129), (short) (-49), (short)89}, shortArray0);
      assertEquals(9, shortArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'N');
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals(0, charArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'N');
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2;
      ArrayUtils.shift(shortArray0, (int) (short)2);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      int[] intArray0 = new int[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, (int) (short)2);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      
      ArrayUtils.swap(shortArray0, 0, (int) (short)2, 127);
      assertArrayEquals(new short[] {(short)2, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-176L);
      floatArray0[1] = (float) (-176L);
      boolean boolean1 = new Boolean(false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, 999L);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {(-176L), (-176L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
      
      boolean boolean2 = ArrayUtils.isSameLength((Object) null, (Object) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ArrayUtils.shift(intArray0, (-2215), 85, 85);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte)49, (byte)55, (byte)104, (byte) (-49), (byte)15, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)49, (byte)55, (byte)104, (byte) (-49), (byte)15, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)15;
      Integer[] integerArray0 = ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
      assertNotNull(integerArray0);
      assertEquals(0, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(1143L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(76, 1093);
      assertNotNull(intStream0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)55;
      ArrayUtils.shift(intArray0, (-2169), 3433, 1093);
      assertArrayEquals(new int[] {55}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      ArrayUtils.shift(intArray0, 2, 2, 307);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 307;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 307;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 307;
      longArray0[5] = (long) 2;
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 307L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {307L, 2L, 307L, 2L, 307L, 2L}, longArray0);
      assertArrayEquals(new long[] {2L, 307L, 2L, 307L, 2L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(6, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-43));
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) (-1L);
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (-1L), 41);
      assertEquals(2, int0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 3025;
      intArray0[2] = (-143);
      intArray0[3] = 116;
      intArray0[4] = 3025;
      intArray0[5] = 0;
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)12);
      assertNull(byteArray0);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-131.71F);
      floatArray0[1] = (float) (byte)56;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-131.71F));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {(-131.71F), 56.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-710.268841099);
      doubleArray0[4] = 3465.708883527795;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1390.8089571922046);
      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.5, 1.0, (-1.0), (-710.268841099), 3465.708883527795, 0.0, (-1390.8089571922046)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      int int0 = ArrayUtils.indexOf(doubleArray0, 2995.89, (double) (byte)0);
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray1 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      Class<Byte> class0 = Byte.class;
      Class<Byte> class1 = Byte.TYPE;
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertEquals("byte", class1.toString());
      assertFalse(class1.isSynthetic());
      assertNotSame(class1, class0);
      assertFalse(class1.equals((Object)class0));
      assertNotNull(class1);
      
      Class<Byte> class2 = Byte.class;
      Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
      classArray0[0] = class0;
      classArray0[1] = class1;
      classArray0[2] = class0;
      classArray0[3] = class1;
      classArray0[4] = class2;
      classArray0[5] = class1;
      Class<?>[] classArray1 = ArrayUtils.nullToEmpty(classArray0);
      assertNotNull(classArray1);
      assertEquals(6, classArray1.length);
      assertEquals(6, classArray0.length);
      
      Byte[] byteArray2 = new Byte[0];
      Class<Byte[]> class3 = Byte[].class;
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2, class3);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      int[] intArray0 = ArrayUtils.add((int[]) null, (-505));
      assertArrayEquals(new int[] {(-505)}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1);
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, (-1L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {0L, (-1L), (-1L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(3, longArray0.length);
      assertEquals(3, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray2);
      assertFalse(boolean0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertEquals(3, booleanArray2.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte)10;
      ArrayUtils.shuffle(byteArray2);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10}, byteArray2);
      assertEquals(4, byteArray2.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) (byte)10);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      boolean[] booleanArray3 = ArrayUtils.add(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray3);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertNotSame(booleanArray3, booleanArray2);
      assertNotSame(booleanArray3, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true, true}, booleanArray3));
      assertNotNull(booleanArray3);
      assertEquals(6, booleanArray0.length);
      assertEquals(7, booleanArray3.length);
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
      assertNull(byteArray0);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 1897.779, 111);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isSameType(object0, object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 772.92531469015;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3206.4749), (-5064.623977172575));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 0.0, 772.92531469015}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Byte byte0 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      boolean boolean0 = ArrayUtils.isSameType(byte0, byte1);
      assertTrue(boolean0);
      assertFalse(byte0.equals((Object)byte1));
      assertFalse(byte1.equals((Object)byte0));
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)903;
      shortArray0[1] = (short) (-1575);
      shortArray0[2] = (short) (-573);
      shortArray0[3] = (short)293;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)903, (short) (-1575), (short) (-573), (short)293}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      
      long[] longArray0 = new long[0];
      int int1 = ArrayUtils.indexOf(longArray0, (-1L), 3);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-176L);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-176L));
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-176L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isEquals(boolean0, (-176.0F));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-16);
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = new Byte[2];
      byteArray1[0] = byte1;
      byteArray1[1] = (Byte) (byte)0;
      Byte[] byteArray2 = ArrayUtils.toArray(byteArray1);
      assertSame(byteArray1, byteArray2);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray1.length);
      assertEquals(2, byteArray2.length);
      
      ArrayUtils.shift((Object[]) byteArray1, 303, (int) (byte)0, (int) (byte)0);
      assertSame(byteArray1, byteArray2);
      assertEquals(2, byteArray1.length);
      
      char[] charArray0 = new char[2];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.swap((Object[]) null, (-1), 1596, 35);
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte3);
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte5);
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte6);
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte6;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, (-1380), (int) (byte) (-12), (int) (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'c';
      charArray0[2] = 'Q';
      charArray0[3] = 'X';
      charArray0[4] = 'z';
      charArray0[5] = 'E';
      charArray0[6] = ';';
      charArray0[7] = 'd';
      charArray0[8] = 'R';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'n', 'c', 'Q', 'X', 'z', 'E', ';', 'd', 'R'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      Long[] longArray0 = new Long[6];
      ArrayUtils.shift((Object[]) longArray0, (-1920), (-1920), 1030);
      assertEquals(6, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      ArrayUtils.shift((Object[]) byteArray0, 3, 3, 3);
      assertEquals(5, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      char[] charArray0 = new char[8];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) integerArray0[0], 127);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(2, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      ArrayUtils.swap(booleanArray0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = 520;
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = 127;
      intArray0[4] = 2454;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2454, 1841);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {1841, 520, 1841, 127, 2454}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(booleanArray0, true, 520);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(4, booleanArray0.length);
      
      int[] intArray2 = ArrayUtils.add(intArray1, (-366));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {(-366)}, intArray2);
      assertArrayEquals(new int[] {1841, 520, 1841, 127, 2454}, intArray0);
      assertNotNull(intArray2);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray2.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertTrue(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte0;
      byteArray0[1] = byte3;
      byteArray0[2] = byte2;
      byteArray0[3] = byte0;
      byteArray0[4] = byte0;
      byteArray0[5] = byte2;
      byteArray0[6] = byte3;
      byteArray0[7] = byte3;
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      long[] longArray0 = null;
      long[] longArray1 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 1.0;
      Byte byte0 = Byte.valueOf((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, (Object) byte0);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
      
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)0;
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      ArrayUtils.swap(booleanArray0, (-2146606191), 1515, Integer.MAX_VALUE);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)21;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (byte) (-98));
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new short[] {(short) (-1)}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-91), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -91, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = ArrayUtils.get(objectArray0, (-615), (Object) null);
      assertNull(object0);
      assertEquals(1, objectArray0.length);
      
      objectArray0[0] = null;
      // Undeclared exception!
      try { 
        ArrayUtils.toStringArray(objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2856;
      intArray0[1] = (-1536);
      int int0 = ArrayUtils.indexOf(intArray0, 0, (-1536));
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2856, (-1536)}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Byte[] byteArray0 = null;
      Byte byte0 = Byte.valueOf((byte) (-126));
      assertEquals((byte) (-126), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = ArrayUtils.get((Byte[]) null, (-1), byte0);
      assertEquals((byte) (-126), (byte)byte1);
      assertNotNull(byte1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-126);
      intArray0[1] = (int) (byte) (-126);
      intArray0[2] = (int) (byte) (-126);
      intArray0[3] = (int) (byte) (-126);
      intArray0[4] = (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 1617, (-1327));
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new int[] {(-126), (-126), (-126), (-126), (-1)}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)231;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)0, (-1717));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)231}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(4, shortArray0.length);
      assertEquals(0, shortArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)231;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) (-1L);
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)231;
      boolean boolean1 = ArrayUtils.isEmpty(floatArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {231.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 231.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      float[] floatArray0 = new float[11];
      floatArray0[0] = 548.60254F;
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertEquals(11, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1140;
      shortArray0[1] = (short) (-1480);
      shortArray0[2] = (short)0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (short)1140;
      floatArray0[1] = (float) (short)1140;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1140.0F, 1140.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(902, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 902, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      byte byte0 = (byte)122;
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte2 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = byte0;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) byte0;
      intArray0[2] = (int) byte0;
      intArray0[3] = 2454;
      intArray0[4] = (int) (byte)122;
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) byte0, (int) byte0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {122, 122, 122, 2454, 122}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, (-1918), (-1732));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1918, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = ArrayUtils.isSorted(charArray1);
      assertTrue(boolean0);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertEquals(0, charArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 2140027107;
      longArray0[1] = (long) 2140027107;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2140027107, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2140027107, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1, 36);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short)0}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 'i';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'t', 'i'}, charArray0);
      assertEquals(2, charArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'i';
      longArray0[1] = (long) 'i';
      longArray0[2] = 105L;
      longArray0[3] = 2316L;
      longArray0[4] = (long) 36;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) (short)0;
      longArray0[7] = (long) (short)200;
      longArray0[8] = (long) (short)1064;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (short)200, longArray0, longArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 200, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false, false, true, true, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(10, booleanArray1.length);
      
      Character[] characterArray0 = ArrayUtils.nullToEmpty((Character[]) null);
      assertNotNull(characterArray0);
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      floatArray0[4] = (float) 104;
      floatArray0[5] = (float) 104;
      ArrayUtils.reverse(floatArray0, 2, 1279);
      assertArrayEquals(new float[] {104.0F, 104.0F, 0.0F, 104.0F, 104.0F, 104.0F, 104.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray2, booleanArray0);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray2.length);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      Byte[] byteArray0 = new Byte[8];
      byte byte0 = (byte)40;
      Byte byte1 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte((byte)40);
      assertEquals((byte)40, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)40;
      shortArray0[1] = (short) byte0;
      shortArray0[2] = (short) byte0;
      shortArray0[3] = (short) byte0;
      shortArray0[4] = (short) byte0;
      shortArray0[5] = (short) byte0;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)40, (short)40, (short)40, (short)40, (short)40, (short)40, (short)0, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      ArrayUtils.shift(shortArray0, 89);
      assertArrayEquals(new short[] {(short)0, (short)40, (short)40, (short)40, (short)40, (short)40, (short)40, (short)0}, shortArray0);
      assertEquals(8, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      Long long0 = Long.getLong("java.lang.Object", (long) (short)7);
      assertEquals(7L, (long)long0);
      assertNotNull(long0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', 2);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'X');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertArrayEquals(new char[] {'H'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)7;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)7;
      shortArray0[3] = (short)7;
      shortArray0[4] = (short)10;
      shortArray0[5] = (short)7;
      shortArray0[6] = (short)7;
      shortArray0[7] = (short)7;
      ArrayUtils.shift(shortArray0, 2, 7, (int) (short)7);
      assertArrayEquals(new short[] {(short)7, (short)7, (short)7, (short)7, (short)7, (short)7, (short)10, (short)7}, shortArray0);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)116, (-1327));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (int) (byte)116;
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {116, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 116, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)0;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)46, (int) (byte) (-7));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte) (-7);
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), (-7.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-96));
      assertEquals((byte) (-96), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-7));
      assertEquals((byte) (-7), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      try { 
        Byte.valueOf("F8|D[]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F8|D[]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      short[] shortArray0 = new short[0];
      int int0 = ArrayUtils.indexOf(shortArray0, (short)1);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((double[]) null, 1.0, (int) (short)1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      ArrayUtils.shift((long[]) null, 2122);
      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-10);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte) (-10)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
      
      Float[] floatArray1 = new Float[2];
      Float float0 = new Float((float) (byte) (-10));
      assertEquals((-10.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray1[0] = float0;
      floatArray1[1] = (Float) (-18.1861F);
      Float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);
      assertSame(floatArray2, floatArray1);
      assertSame(floatArray1, floatArray2);
      assertNotNull(floatArray2);
      assertEquals(2, floatArray2.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-4));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      char[] charArray1 = ArrayUtils.subarray(charArray0, (-4), (-1322));
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(0, charArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 91, 91);
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = ArrayUtils.contains(longArray0, 1L);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      Integer integer0 = new Integer((byte) (-69));
      assertEquals((-69), (int)integer0);
      assertNotNull(integer0);
      
      ArrayUtils.shift((long[]) null, (int) (byte) (-69));
      Long long0 = new Long(2462L);
      assertEquals(2462L, (long)long0);
      assertNotNull(long0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-644);
      ArrayUtils.reverse(floatArray0);
      assertArrayEquals(new float[] {(-644.0F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      long[] longArray0 = ArrayUtils.insert((-2146511369), (long[]) null, (long[]) null);
      assertNull(longArray0);
      
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      long[] longArray1 = ArrayUtils.insert(2828, (long[]) null, (long[]) null);
      assertNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1246;
      intArray0[1] = 1495;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 2039);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {1246, 1495}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1246;
      intArray1[1] = 1495;
      intArray1[2] = 1495;
      int[] intArray2 = ArrayUtils.add(intArray1, (-1));
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {1246, 1495, 1495}, intArray1);
      assertArrayEquals(new int[] {1246, 1495, 1495, (-1)}, intArray2);
      assertNotNull(intArray2);
      assertEquals(3, intArray1.length);
      assertEquals(4, intArray2.length);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-5177);
      shortArray0[1] = (short) (-441);
      shortArray0[2] = (short) (-441);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-2852);
      shortArray0[5] = (short) (byte)0;
      short[] shortArray1 = ArrayUtils.insert(2, shortArray0, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-5177), (short) (-441), (short) (-441), (short)0, (short) (-2852), (short)0}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(12, shortArray1.length);
      assertEquals(6, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1246;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1246.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1495;
      longArray0[1] = (long) 1246;
      longArray0[2] = (long) 1246;
      longArray0[3] = (long) 1495;
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L, 2);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new long[] {1495L, 1246L, 1246L, 1495L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '!';
      charArray0[2] = '#';
      charArray0[3] = 'q';
      charArray0[4] = '+';
      charArray0[5] = 'S';
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'2', '!', '#', 'q', '+', 'S'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(6, characterArray0.length);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte) (-11);
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)55, (byte)113, (byte) (-49), (byte)55, (byte) (-11)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)55, (byte)113, (byte) (-49), (byte)55, (byte) (-11)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2244);
      assertEquals(2244, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte) (-49);
      int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte)113, 1, (-1417.20494336));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {(-49.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)5;
      int int0 = ArrayUtils.indexOf(shortArray0, (short)98);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)5}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-206);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -206, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      short short0 = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      short short1 = (short) (-249);
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)0;
      intArray0[1] = (int) (short)200;
      intArray0[2] = (int) (short)1064;
      intArray0[3] = 1;
      intArray0[4] = (int) (short)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1064, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(booleanArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      Byte[] byteArray0 = ArrayUtils.toArray((Byte[]) null);
      assertNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-8);
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte) (-5);
      byteArray1[6] = (byte)4;
      boolean boolean0 = ArrayUtils.contains(byteArray1, (byte)6);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)6, (byte)6, (byte)6, (byte)6, (byte) (-5), (byte)4}, byteArray1);
      assertEquals(7, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)6;
      longArray0[1] = (long) (byte) (-8);
      longArray0[2] = (long) (byte)6;
      longArray0[3] = (long) (byte)6;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new long[] {6L, (-8L), 6L, 6L}, longArray0);
      assertEquals(4, longArray0.length);
      
      ArrayUtils.shift((Object[]) null, 1);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      ArrayUtils.shift(objectArray0, (int) ';');
      assertEquals(6, objectArray0.length);
      
      int[] intArray0 = new int[0];
      Byte byte0 = new Byte((byte) (-33));
      assertEquals((byte) (-33), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(objectArray0[0], intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      ArrayUtils.shift((double[]) null, 88);
      byte[] byteArray0 = new byte[0];
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Array and element cannot both be null";
      objectArray0[1] = (Object) (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Array and element cannot both be null";
      objectArray0[4] = (Object) "Array and element cannot both be null";
      objectArray0[5] = (Object) "Array and element cannot both be null";
      objectArray0[6] = (Object) (byte)0;
      objectArray0[7] = (Object) (byte)0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0, (String) null);
      assertNotNull(stringArray0);
      assertEquals(8, objectArray0.length);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      Float[] floatArray0 = new Float[1];
      ArrayUtils.shift((Object[]) floatArray0, 2106, 2106, 2106);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 434;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 127;
      intArray0[5] = (-2450);
      intArray0[6] = 0;
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 434, (-1), 0, 127, (-2450), 0, Integer.MAX_VALUE, 0}, intArray0);
      assertArrayEquals(new int[] {434, (-1), 127, (-2450), Integer.MAX_VALUE}, intArray1);
      assertNotNull(intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 127;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 2376.72035;
      ArrayUtils.swap(doubleArray0, (-2450), 0, 2873);
      assertArrayEquals(new double[] {2.147483647E9, 0.0, 0.0, 0.0, 127.0, 0.0, 0.0, 2376.72035}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean[] booleanArray0 = ArrayUtils.removeAllOccurrences((boolean[]) null, false);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      int[] intArray0 = ArrayUtils.removeAllOccurrences((int[]) null, 1568);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1503;
      shortArray0[5] = (short)1356;
      int[] intArray0 = ArrayUtils.insert((int) (short)0, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      ArrayUtils.reverse((Object[]) null, (-967), (int) (short)1356);
      byte[] byteArray0 = new byte[0];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)82, (int) (byte)82);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)2, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte1;
      byteArray0[6] = byte1;
      byteArray0[7] = byte1;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, (Byte) null);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(9, byteArray1.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '@';
      charArray0[4] = '?';
      charArray0[5] = 'z';
      charArray0[6] = '<';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'`', '`', '@', '?', 'z', '<', '<'}, charArray0);
      assertEquals(7, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 54);
      assertEquals(0, int0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)200;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(2, int0);
      assertArrayEquals(new short[] {(short)200, (short)200, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, (int) (short)0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      int int2 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1985L;
      longArray0[1] = 105L;
      longArray0[2] = 1985L;
      longArray0[3] = (-1564L);
      longArray0[4] = (-344L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2316L, 0);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertArrayEquals(new long[] {1985L, 105L, 1985L, (-1564L), (-344L)}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(5, longArray0.length);
      
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      Byte[] byteArray0 = new Byte[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, object0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArray1.length);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      long long0 = 0L;
      longArray0[0] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byte byte0 = (byte) (-81);
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)21;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)43);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)43, (byte)57, (byte) (-81), (byte)21}, byteArray1);
      assertArrayEquals(new byte[] {(byte)57, (byte) (-81), (byte)21}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(4, byteArray1.length);
      assertEquals(3, byteArray0.length);
      
      Long[] longArray1 = new Long[2];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, long0);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(2, longArray1.length);
      assertEquals(2, longArray2.length);
      
      Byte[] byteArray2 = new Byte[1];
      byteArray2[0] = (Byte) (byte) (-81);
      Byte[] byteArray3 = ArrayUtils.nullToEmpty(byteArray2);
      assertSame(byteArray2, byteArray3);
      assertSame(byteArray3, byteArray2);
      assertNotNull(byteArray3);
      assertEquals(1, byteArray2.length);
      assertEquals(1, byteArray3.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) byte0;
      intArray0[1] = (int) (byte)57;
      intArray0[2] = 3951;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3951, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1067.0907446);
      doubleArray0[1] = (-266.978108);
      ArrayUtils.swap(doubleArray0, (-1882), (-1882), (-433));
      assertArrayEquals(new double[] {(-1067.0907446), (-266.978108)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1479);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      ArrayUtils.shift(shortArray0, (int) (short) (-1));
      assertArrayEquals(new short[] {(short) (-1479), (short)0, (short) (-1), (short)1}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte) (-58));
      assertEquals((byte) (-58), (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(2123354618, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2123354618, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[3] = (float) (byte)0;
      Byte[] byteArray0 = new Byte[20];
      Byte[] byteArray1 = ArrayUtils.insert((int) 5, byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(20, byteArray0.length);
      assertEquals(40, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      Byte[] byteArray0 = new Byte[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-57), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -57, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.insert((-1), byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = ' ';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'6', '6', ' '}, charArray0);
      assertEquals(3, charArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)2;
      shortArray0[4] = (short)2;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short) (byte)27;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1), (int) (short) (-1));
      assertEquals("{0, 5}", bitSet0.toString());
      assertEquals(2, bitSet0.cardinality());
      assertEquals(6, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {(short) (-1), (short)2, (short)2, (short)2, (short)2, (short) (-1), (short)27}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(7, shortArray0.length);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte>[] abstractMap_SimpleImmutableEntryArray0 = (AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) Array.newInstance(AbstractMap.SimpleImmutableEntry.class, 5);
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      
      abstractMap_SimpleImmutableEntryArray0[0] = abstractMap_SimpleImmutableEntry0;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>((Byte) null, (Byte) null);
      assertNotNull(abstractMap_SimpleImmutableEntry1);
      
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry2 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry1);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry2);
      
      abstractMap_SimpleImmutableEntryArray0[1] = abstractMap_SimpleImmutableEntry2;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry3 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry2);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertNotNull(abstractMap_SimpleImmutableEntry3);
      
      abstractMap_SimpleImmutableEntryArray0[2] = abstractMap_SimpleImmutableEntry3;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry4 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry3);
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry2.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry3.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry4.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertNotNull(abstractMap_SimpleImmutableEntry4);
      
      abstractMap_SimpleImmutableEntryArray0[3] = abstractMap_SimpleImmutableEntry4;
      AbstractMap.SimpleImmutableEntry<Byte, Byte> abstractMap_SimpleImmutableEntry5 = new AbstractMap.SimpleImmutableEntry<Byte, Byte>(abstractMap_SimpleImmutableEntry0);
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertTrue(abstractMap_SimpleImmutableEntry5.equals((Object)abstractMap_SimpleImmutableEntry0));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry3));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry2));
      assertTrue(abstractMap_SimpleImmutableEntry0.equals((Object)abstractMap_SimpleImmutableEntry4));
      assertNotNull(abstractMap_SimpleImmutableEntry5);
      
      abstractMap_SimpleImmutableEntryArray0[4] = abstractMap_SimpleImmutableEntry5;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int)  (-1), abstractMap_SimpleImmutableEntryArray0, abstractMap_SimpleImmutableEntryArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) byte0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((float[]) null, 165.61794F, (-873));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3148), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3148, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 722.71F;
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 's';
      charArray0[2] = 'l';
      charArray0[3] = 'b';
      charArray0[4] = 's';
      charArray0[5] = 'I';
      charArray0[6] = ',';
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-1194), charArray0, charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1194, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      boolean boolean0 = ArrayUtils.isSorted((float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = ArrayUtils.insert((int) (byte)0, (float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(79, byteArray1, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 79, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-176L);
      floatArray0[1] = (float) (-176L);
      boolean boolean1 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-176.0F), (-176.0F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(91, byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      Object object0 = new Object();
      assertNotNull(object0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = Boolean.FALSE;
      assertFalse(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      Boolean boolean2 = Boolean.FALSE;
      assertFalse(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean2;
      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, '>');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(9, charArray0.length);
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray1, (-1670));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertNotNull(intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
      
      double[] doubleArray0 = ArrayUtils.removeAllOccurences((double[]) null, (double) 0);
      assertNull(doubleArray0);
      
      double[] doubleArray1 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray1, (double) (-1670), (double) 0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      Byte[] byteArray0 = new Byte[1];
      Byte byte0 = new Byte((byte)107);
      assertEquals((byte)107, (byte)byte0);
      assertNotNull(byte0);
      
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.add(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      charArray0[1] = 'Q';
      charArray0[2] = '`';
      charArray0[3] = '?';
      charArray0[4] = '}';
      charArray0[5] = '`';
      charArray0[6] = 't';
      charArray0[7] = '<';
      charArray0[8] = '!';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'Q', '`', '?', '}', '`', 't', '<', '!', 'p'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      charArray0[4] = 'f';
      charArray0[5] = 'Q';
      charArray0[6] = '7';
      charArray0[7] = '@';
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '7';
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) 'f';
      floatArray0[3] = (float) '7';
      floatArray0[4] = (float) '7';
      floatArray0[5] = (float) '7';
      floatArray0[6] = (float) '7';
      floatArray0[7] = (float) 'R';
      floatArray0[8] = (float) 'f';
      int int0 = ArrayUtils.indexOf(floatArray0, 55.0F, (-573));
      assertEquals(0, int0);
      assertArrayEquals(new float[] {55.0F, 55.0F, 102.0F, 55.0F, 55.0F, 55.0F, 55.0F, 82.0F, 102.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)0;
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)96, (-1479));
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)15, (byte) (-87), (byte) (-18), (byte)78, (byte)96, (byte)3, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) booleanArray1, (Object) null, 0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(bitSet0);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertTrue(boolean0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1076);
      assertEquals(1076, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      ArrayUtils.swap(charArray0, (-447), (int) integerArray0[0], (int) integerArray0[0]);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      Object object0 = ArrayUtils.toPrimitive((Object) null);
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) (short)0;
      objectArray0[1] = object1;
      objectArray0[2] = null;
      objectArray0[3] = (Object) (short)0;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) (short)0;
      objectArray0[6] = (Object) (short)0;
      objectArray0[7] = null;
      objectArray0[8] = null;
      int int0 = ArrayUtils.indexOf(objectArray0, (Object) null);
      assertEquals(2, int0);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'S';
      charArray0[2] = '9';
      charArray0[3] = 'S';
      charArray0[4] = '9';
      charArray0[5] = '9';
      ArrayUtils.swap(charArray0, (-216), 46);
      assertArrayEquals(new char[] {'9', 'S', '9', 'S', '9', '9'}, charArray0);
      assertEquals(6, charArray0.length);
      
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte)5;
      Byte byte1 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte)5, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)69);
      assertEquals((byte)69, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      try { 
        Byte.decode("F8|D[]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F8|D[]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)120;
      byteArray1[1] = (byte)104;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)121;
      byteArray0[1] = (Byte) (byte) (-126);
      char[] charArray0 = ArrayUtils.insert((int) (byte)0, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)0;
      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(4, byteArray1.length);
      
      char[] charArray0 = ArrayUtils.insert(0, (char[]) null, (char[]) null);
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 19.0975334026665;
      long[] longArray1 = ArrayUtils.insert(594, (long[]) null, (long[]) null);
      assertNull(longArray1);
      
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 772.92531469015, (-3412));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {1.0, 19.0975334026665, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1479);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, 0);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1479), (short)0, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1479);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = 2001.6596747957112;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      int int1 = ArrayUtils.indexOf(shortArray0, (short)1, (int) (short)1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new short[] {(short)1, (short) (-1479), (short)0, (short) (-1)}, shortArray0);
      assertEquals(4, shortArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '@';
      charArray0[2] = 't';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', '@', 't'}, charArray0);
      assertEquals(3, charArray0.length);
      
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.insert((int) (short) (-1479), longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '<';
      charArray0[2] = 'f';
      boolean boolean0 = ArrayUtils.contains(charArray0, '`');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'`', '<', 'f'}, charArray0);
      assertEquals(3, charArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-94);
      ArrayUtils.shuffle(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-94), (byte)2, (byte) (-94), (byte) (-94), (byte)2, (byte)2, (byte) (-94), (byte) (-94)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      ArrayUtils.shift(doubleArray0, 0, 93, 28);
      assertEquals(21, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      ArrayUtils.shift(doubleArray0, 0, 93, (-1));
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) '&';
      ArrayUtils.shift(doubleArray0, (int) (byte) (-69), 1982292598, 1982292598);
      assertArrayEquals(new double[] {38.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3048);
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-3048);
      intArray0[3] = (-3048);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 2112);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, (-3048), (-3048)}, intArray0);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, Integer.MAX_VALUE, (-3048), (-3048)}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2112;
      ArrayUtils.swap(doubleArray0, (-1), (-3048), 1742);
      assertArrayEquals(new double[] {2112.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-44));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)78, (byte)78, (byte)78}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2112.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2112.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 0, 1982292592, 0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte4);
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, 1136);
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (-230);
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte) (-126);
      ArrayUtils.shift((double[]) null, (-1374));
      ArrayUtils.shift((Object[]) characterArray0, (int) byte0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray0.equals((Object)characterArray1));
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[1] = (-176L);
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-176L);
      Boolean boolean1 = Boolean.TRUE;
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-176L));
      assertEquals(1, int0);
      assertArrayEquals(new long[] {0L, (-176L), 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(6, longArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      ArrayUtils.shift(doubleArray0, (-2149), 1371, 1371);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)46);
      assertArrayEquals(new byte[] {(byte)46}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      ArrayUtils.shift(doubleArray0, 1982292592, 1982292592, 1982292592);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      ArrayUtils.reverse((byte[]) null);
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1841;
      doubleArray0[1] = 620.387935988624;
      doubleArray0[2] = (double) (-719);
      doubleArray0[3] = (double) (byte)1;
      ArrayUtils.shift(doubleArray0, (-2809));
      assertArrayEquals(new double[] {620.387935988624, (-719.0), 1.0, 1841.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (int)integerArray0[0];
      ArrayUtils.shift((byte[]) null, (-3462));
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) integerArray0, "Array and element cannot both be null");
      assertNotNull(stringArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = '&';
      charArray0[3] = '5';
      charArray0[4] = 'I';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'I', 'x', '&', '5', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ArrayUtils.swap((short[]) null, (-1194), (-1194));
      char[] charArray1 = ArrayUtils.removeAllOccurences(charArray0, 'x');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'I', 'x', '&', '5', 'I'}, charArray0);
      assertArrayEquals(new char[] {'I', '&', '5', 'I'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(5, charArray0.length);
      assertEquals(4, charArray1.length);
      
      boolean boolean1 = ArrayUtils.contains(charArray0, 'M');
      assertFalse(boolean1);
      assertNotSame(charArray0, charArray1);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'I', 'x', '&', '5', 'I'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, 'N');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      char[] charArray0 = ArrayUtils.removeAllOccurrences((char[]) null, 'i');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '|');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(1, charArray0.length);
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      floatArray0[1] = (-3331.73F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 95.3591F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 670.344F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {1396.4706F, (-3331.73F), 1.0F, 0.0F, 95.3591F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'r';
      charArray0[2] = 'U';
      charArray0[3] = '`';
      charArray0[4] = 'Y';
      charArray0[5] = ':';
      charArray0[6] = '=';
      charArray0[7] = '\"';
      BitSet bitSet0 = ArrayUtils.indexesOf(charArray0, '^');
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new char[] {'x', 'r', 'U', '`', 'Y', ':', '=', '\"'}, charArray0);
      assertNotNull(bitSet0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = ArrayUtils.isArrayIndexValid((Byte[]) null, 2225);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      Byte byte1 = new Byte((byte) (-117));
      assertEquals((byte) (-117), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[3] = byte1;
      byteArray0[4] = byte0;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 1042, 8);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      Byte[] byteArray0 = ArrayUtils.subarray((Byte[]) null, 3230, (-2571));
      assertNull(byteArray0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-71);
      byte byte0 = (byte)86;
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray1, (byte)86);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertArrayEquals(new byte[] {(byte) (-71)}, byteArray1);
      assertNotNull(bitSet0);
      assertEquals(1, byteArray1.length);
      
      byte byte1 = (byte)68;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) (byte) (-71), (byte)68);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -71, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      int[] intArray0 = new int[1];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, integerArray0.length);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray2 = ArrayUtils.add(byteArray0, byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotNull(byteArray2);
      assertEquals(0, byteArray0.length);
      assertEquals(1, byteArray2.length);
      
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-1), (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      Byte[] byteArray0 = new Byte[6];
      byte byte0 = (byte)88;
      Byte byte1 = new Byte((byte)88);
      assertEquals((byte)88, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      byte byte2 = (byte)108;
      Byte byte3 = new Byte((byte)108);
      assertEquals((byte)108, (byte)byte3);
      assertTrue(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte0);
      assertEquals((byte)88, (byte)byte4);
      assertFalse(byte0 == byte2);
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertNotNull(byte4);
      
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte0);
      assertEquals((byte)88, (byte)byte5);
      assertFalse(byte0 == byte2);
      assertTrue(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertTrue(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertTrue(byte5.equals((Object)byte0));
      assertNotNull(byte5);
      
      byteArray0[3] = byte5;
      Byte byte6 = new Byte(byte2);
      assertEquals((byte)108, (byte)byte6);
      assertFalse(byte2 == byte0);
      assertTrue(byte6.equals((Object)byte2));
      assertTrue(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte0));
      assertNotNull(byte6);
      
      byteArray0[4] = byte6;
      Byte byte7 = new Byte(byte0);
      assertEquals((byte)88, (byte)byte7);
      assertFalse(byte0 == byte2);
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte1));
      assertTrue(byte7.equals((Object)byte0));
      assertTrue(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte2));
      assertTrue(byte7.equals((Object)byte5));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      byteArray0[5] = byte7;
      Byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) 88, (int) byte2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byte2 == byte0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)88;
      byteArray2[1] = (byte)88;
      byteArray2[2] = byte0;
      byteArray2[3] = byte0;
      byteArray2[4] = byte0;
      byteArray2[5] = byte0;
      byteArray2[6] = (byte)88;
      byteArray2[7] = byte2;
      byteArray2[8] = byte0;
      byte[] byteArray3 = ArrayUtils.clone(byteArray2);
      assertNotSame(byteArray2, byteArray3);
      assertNotSame(byteArray3, byteArray2);
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)108, (byte)88}, byteArray2);
      assertArrayEquals(new byte[] {(byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)88, (byte)108, (byte)88}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(9, byteArray2.length);
      assertEquals(9, byteArray3.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)88;
      longArray0[1] = (long) (byte)88;
      longArray0[2] = (long) (byte)108;
      ArrayUtils.shift(longArray0, 108, 15, 108);
      assertArrayEquals(new long[] {88L, 88L, 108L}, longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = ArrayUtils.get(objectArray0, 115);
      assertNull(object0);
      assertEquals(6, objectArray0.length);
      
      objectArray0[0] = null;
      int int0 = 3;
      byte byte0 = (byte)103;
      Byte byte1 = new Byte((byte)103);
      assertEquals((byte)103, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Object object1 = ArrayUtils.get(objectArray0, 3, (Object) byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNull(object1);
      assertEquals(6, objectArray0.length);
      
      objectArray0[1] = null;
      int int1 = (-1);
      try { 
        Byte.valueOf(":r32!+t#", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      long[] longArray0 = new long[7];
      shortArray0[0] = (short)0;
      longArray0[1] = (long) (short)0;
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
      assertNull(floatArray0);
      
      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
      assertTrue(boolean0);
      
      Long[] longArray1 = new Long[4];
      longArray1[0] = (Long) 0L;
      longArray1[1] = (Long) 0L;
      longArray1[2] = (Long) 0L;
      longArray1[3] = (Long) 0L;
      long[] longArray2 = ArrayUtils.toPrimitive(longArray1, (long) (short)1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray2);
      assertNotNull(longArray2);
      assertEquals(4, longArray2.length);
      assertEquals(4, longArray1.length);
      
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '`';
      charArray0[1] = 'Y';
      charArray0[2] = 'R';
      charArray0[3] = 'H';
      charArray0[4] = 'M';
      charArray0[5] = '0';
      charArray0[6] = 'd';
      charArray0[7] = 'k';
      boolean boolean0 = ArrayUtils.isEmpty(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'`', 'Y', 'R', 'H', 'M', '0', 'd', 'k'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3154;
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'M';
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3154, 89, 77}, intArray0);
      assertArrayEquals(new int[] {3154, 89, 77, 3154, 89, 77}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5107.489F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-485.0726F);
      floatArray0[3] = 55.0F;
      floatArray0[4] = 994.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-1475.0F);
      boolean boolean0 = ArrayUtils.contains(floatArray0, 55.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {5107.489F, 0.0F, (-485.0726F), 55.0F, 994.0F, 1.0F, (-1475.0F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-123));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)111, (byte)111, (byte)1, (byte)111, (byte)1, (byte)1}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)111;
      longArray0[1] = (long) 'R';
      longArray0[2] = (long) (byte)111;
      longArray0[3] = (long) 'R';
      longArray0[4] = (long) 'R';
      longArray0[5] = (long) 'R';
      longArray0[6] = (long) 'R';
      longArray0[7] = 269L;
      longArray0[8] = (long) (byte)111;
      boolean boolean1 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new long[] {111L, 82L, 111L, 82L, 82L, 82L, 82L, 269L, 111L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-137);
      ArrayUtils.shuffle(shortArray0);
      assertArrayEquals(new short[] {(short) (-137)}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, (-3478.845F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      int int0 = 110;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 110;
      byte byte0 = (byte)1;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) 110;
      floatArray0[3] = (float) 110L;
      floatArray0[4] = (float) (byte)1;
      floatArray0[5] = (float) 110L;
      floatArray0[6] = 1.0F;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 44.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 110.0F, 110.0F, 1.0F, 110.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.0F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 1.0F, 110.0F, 110.0F, 1.0F, 110.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, 110.0F, 110.0F, 1.0F, 110.0F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte)1;
      shortArray0[2] = (short) (byte)1;
      shortArray0[3] = (short) (byte)1;
      shortArray0[4] = (short) (-553);
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(shortArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1313()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 640.496F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 640.496F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray0 = ArrayUtils.insert(97, (double[]) null, (double[]) null);
      assertNull(doubleArray0);
      
      int[] intArray0 = ArrayUtils.insert(97, (int[]) null, (int[]) null);
      assertNull(intArray0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((double[]) null, (double) 640.496F, 100, (double) 0.0F);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1314()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 97, 1.0);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 97;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 97;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 97.0F, 0.0F, 97.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 97;
      floatArray1[2] = 1.0F;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (-2446.4F));
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 97.0F, 1.0F}, floatArray2, 0.01F);
      assertArrayEquals(new float[] {0.0F, 97.0F, 1.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray2.length);
      assertEquals(3, floatArray1.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0, (java.util.Random) null);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-56);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)49);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)11, (byte)49, (byte) (-98), (byte)69, (byte)1, (byte) (-56)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1315()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte) (-1));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      assertEquals(5, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1316()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)55;
      Byte byte0 = new Byte((byte)27);
      assertEquals((byte)27, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      int[] intArray1 = ArrayUtils.insert(64, intArray0, (int[]) null);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {64}, intArray0);
      assertArrayEquals(new int[] {64}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1317()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1318()  throws Throwable  {
      Integer integer0 = new Integer((short) (-3155));
      assertEquals((-3155), (int)integer0);
      assertNotNull(integer0);
      
      Long long0 = new Long((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2854.2974F;
      doubleArray0[1] = (double) (-1L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1L));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {2854.29736328125, (-1.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = ArrayUtils.insert(1, doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2854.29736328125, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2854.29736328125, 2854.29736328125, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = (long) (short) (-3155);
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      int int1 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new long[] {(-1L), (-1L), (-3155L), (-1L), 0L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2854.29736328125, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2854.29736328125, 2854.29736328125, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2854.29736328125, 2854.29736328125, (-1.0), (-1.0), 2854.29736328125, (-1.0)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray0, 3, (byte) (-84));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1319()  throws Throwable  {
      int[] intArray0 = new int[1];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(0, longArray1.length);
      
      Byte byte0 = new Byte((byte)72);
      assertEquals((byte)72, (byte)byte0);
      assertNotNull(byte0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[1] = '+';
      charArray0[2] = 'd';
      charArray0[3] = '^';
      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);
      assertSame(charArray0, charArray1);
      assertSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'v', '+', 'd', '^'}, charArray0);
      assertArrayEquals(new char[] {'v', '+', 'd', '^'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(4, charArray0.length);
      assertEquals(4, charArray1.length);
      
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 'v';
      longArray2[1] = (long) (byte)72;
      longArray2[2] = (long) '^';
      longArray2[3] = (-1102L);
      longArray2[4] = (long) 'd';
      longArray2[5] = (long) 'd';
      longArray2[6] = (-1L);
      longArray2[7] = (long) '^';
      longArray2[8] = (long) 'v';
      long[] longArray3 = ArrayUtils.addFirst(longArray2, (long) (byte)32);
      assertNotSame(longArray3, longArray1);
      assertNotSame(longArray3, longArray2);
      assertNotSame(longArray3, longArray0);
      assertNotSame(longArray2, longArray3);
      assertNotSame(longArray2, longArray1);
      assertNotSame(longArray2, longArray0);
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      assertFalse(longArray2.equals((Object)longArray0));
      assertArrayEquals(new long[] {32L, 118L, 72L, 94L, (-1102L), 100L, 100L, (-1L), 94L, 118L}, longArray3);
      assertArrayEquals(new long[] {118L, 72L, 94L, (-1102L), 100L, 100L, (-1L), 94L, 118L}, longArray2);
      assertNotNull(longArray3);
      assertEquals(10, longArray3.length);
      assertEquals(9, longArray2.length);
  }

  @Test(timeout = 4000)
  public void test1320()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      double[] doubleArray0 = ArrayUtils.addFirst((double[]) null, 11.0);
      assertArrayEquals(new double[] {11.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1321()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1322()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte)49, (byte)55, (byte)104, (byte) (-49), (byte)15, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)49, (byte)55, (byte)104, (byte) (-49), (byte)15, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)15;
      longArray0[1] = (long) (byte)27;
      longArray0[2] = (long) (byte)120;
      longArray0[3] = (long) (byte)104;
      Byte[] byteArray2 = new Byte[0];
      byte[] byteArray3 = ArrayUtils.toPrimitive(byteArray2, (byte)56);
      assertNotSame(byteArray3, byteArray0);
      assertNotSame(byteArray3, byteArray1);
      assertFalse(byteArray3.equals((Object)byteArray0));
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {}, byteArray3);
      assertNotNull(byteArray3);
      assertEquals(0, byteArray2.length);
      assertEquals(0, byteArray3.length);
      
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(0, charArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)55;
      doubleArray0[1] = (double) (byte)55;
      doubleArray0[2] = (double) (byte)104;
      doubleArray0[3] = (double) 120L;
      doubleArray0[4] = (double) (byte)55;
      doubleArray0[5] = 2413.3501974582414;
      doubleArray0[6] = (double) (byte)15;
      doubleArray0[7] = (double) (byte) (-49);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) (byte)27);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {55.0, 55.0, 104.0, 120.0, 55.0, 2413.3501974582414, 15.0, (-49.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {27.0, 55.0, 55.0, 104.0, 120.0, 55.0, 2413.3501974582414, 15.0, (-49.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(5, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)103;
      Byte byte1 = new Byte((byte)103);
      assertEquals((byte)103, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0, class0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)103;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) (byte)103;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) (byte)103;
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'g';
      charArray0[2] = 'V';
      charArray0[3] = 'G';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (int) byte0, '#');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 103, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1324()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, integerArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add(intArray0, 4, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1325()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      floatArray0[3] = (-1470.7252F);
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2542.0F, 0.0F, 27.0F, (-1470.7252F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 1246, 1246, (-2146606191));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte) (-1);
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)4, (int) (byte)21);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte) (-26), (byte)21, (byte)48, (byte) (-42), (byte)85, (byte)122, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1326()  throws Throwable  {
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)2, object0);
      assertNotNull(object0);
      
      boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1327()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addFirst((short[]) null, (short)16);
      assertArrayEquals(new short[] {(short)16}, shortArray0);
      assertNotNull(shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1328()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte4);
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      Byte byte5 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte5);
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      byteArray0[4] = byte5;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      Character[] characterArray0 = new Character[0];
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertNotSame(characterArray1, characterArray0);
      assertNotSame(characterArray0, characterArray1);
      assertFalse(characterArray1.equals((Object)characterArray0));
      assertNotNull(characterArray1);
      assertEquals(0, characterArray1.length);
      assertEquals(0, characterArray0.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1L, 1136);
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) byte0;
      shortArray0[1] = (short) (-230);
      shortArray0[2] = (short) (byte)97;
      shortArray0[3] = (short) (byte) (-126);
      shortArray0[4] = (short) (byte) (-126);
      shortArray0[5] = (short) (byte)91;
      shortArray0[6] = (short) byte0;
      short[] shortArray1 = ArrayUtils.add(shortArray0, (short) (byte) (-126));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short) (-126), (short) (-230), (short)97, (short) (-126), (short) (-126), (short)91, (short) (-126)}, shortArray0);
      assertArrayEquals(new short[] {(short) (-126), (short) (-230), (short)97, (short) (-126), (short) (-126), (short)91, (short) (-126), (short) (-126)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(8, shortArray1.length);
      
      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1329()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'R';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'R';
      charArray0[6] = 'R';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'R');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1330()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean[] booleanArray2 = new boolean[3];
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = true;
      booleanArray2[2] = false;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray2);
      assertFalse(boolean0);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray2, booleanArray1);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray2));
      assertEquals(3, booleanArray2.length);
      
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte)10;
      byteArray2[1] = (byte)10;
      byteArray2[2] = (byte)10;
      byteArray2[3] = (byte)10;
      ArrayUtils.reverse(byteArray2);
      assertArrayEquals(new byte[] {(byte)10, (byte)10, (byte)10, (byte)10}, byteArray2);
      assertEquals(4, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1331()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      charArray0[4] = 'f';
      charArray0[5] = 'Q';
      charArray0[6] = '7';
      charArray0[7] = '@';
      ArrayUtils.shift(charArray0, 1, (-3905), 8);
      assertArrayEquals(new char[] {'J', '(', 'R', '9', 'f', 'Q', '7', '@', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1332()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1333()  throws Throwable  {
      float[] floatArray0 = new float[1];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert(315, charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1334()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 640.496F;
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayUtils.insert((-1194), charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1335()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.shift(intArray0, 1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1336()  throws Throwable  {
      int[] intArray0 = new int[9];
      ArrayUtils.shift(intArray0, (-2145875061));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1337()  throws Throwable  {
      int[] intArray0 = new int[2];
      ArrayUtils.shift(intArray0, 1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1338()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-645);
      shortArray0[1] = (short) (-33);
      ArrayUtils.swap(shortArray0, (-2728), (-919), (-2728));
      assertArrayEquals(new short[] {(short) (-645), (short) (-33)}, shortArray0);
      assertEquals(2, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1339()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)111;
      ArrayUtils.swap(byteArray0, (-15), 10, (-15));
      assertArrayEquals(new byte[] {(byte) (-55), (byte)111}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1340()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)0;
      doubleArray0[4] = (double) (short)0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short)0);
      assertEquals(4, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      ArrayUtils.swap((byte[]) null, (int) (short)0, 233);
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 4, (int) (short)0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte)1);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1341()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MockRandom mockRandom0 = new MockRandom((-2659L));
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(byteArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1342()  throws Throwable  {
      Long long0 = new Long((-1581L));
      assertEquals((-1581L), (long)long0);
      assertNotNull(long0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1581L);
      doubleArray0[1] = (double) (-1581L);
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1581.0));
      assertEquals(1, int0);
      assertArrayEquals(new double[] {(-1581.0), (-1581.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      ArrayUtils.swap((byte[]) null, 233, (int) (byte) (-49));
      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 233, 2619);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1581.0), (-1581.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      byte[] byteArray0 = ArrayUtils.EMPTY_BYTE_ARRAY;
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1343()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-16);
      Byte byte0 = new Byte((byte)1);
      assertEquals((byte)1, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-69));
      assertEquals((byte) (-69), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = new Byte[2];
      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0);
      assertEquals(5, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-16), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ArrayUtils.swap(byteArray0, (int) (byte) (-16), 3380);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-16), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1344()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)200;
      doubleArray0[4] = (-1.0);
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, 1.0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 200.0, (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 200.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte) (-30);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte) (-32);
      int int1 = ArrayUtils.indexOf(byteArray0, (byte)99);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)34, (byte)92, (byte)100, (byte) (-10), (byte) (-30), (byte) (-1), (byte)9, (byte) (-32)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1345()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = ArrayUtils.contains(charArray0, '4');
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1346()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 34);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      
      char[] charArray0 = new char[0];
      int int2 = ArrayUtils.indexOf(charArray0, '<');
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1347()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      ArrayUtils.swap(charArray0, 1513, (-1), 1862);
      assertArrayEquals(new char[] {'5'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1348()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      MockRandom mockRandom0 = new MockRandom(0L);
      assertNotNull(mockRandom0);
      
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-18.1861F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      Byte byte0 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte0);
      assertNotNull(byte0);
      
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)104, object0);
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) byte0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 0.0F;
      Object object1 = ArrayUtils.toPrimitive(objectArray0[1]);
      assertSame(object1, mockRandom0);
      assertNotNull(object1);
      assertEquals(9, objectArray0.length);
      
      objectArray0[5] = object1;
      objectArray0[6] = (Object) mockRandom0;
      objectArray0[7] = (Object) 0.0F;
      Object object2 = new Object();
      assertNotNull(object2);
      
      objectArray0[8] = object2;
      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0]);
      assertEquals(0, int0);
      assertEquals(9, objectArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'S';
      ArrayUtils.swap(charArray0, (int) (byte)104, (-216));
      assertArrayEquals(new char[] {'9', 'S'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1349()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.reverse(intArray0, Integer.MAX_VALUE, 88);
      assertArrayEquals(new int[] {1}, intArray0);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 1;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-926);
      shortArray0[1] = (short) (-3152);
      shortArray0[2] = (short) (-1);
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-2968), (-1501));
      assertNotSame(booleanArray2, booleanArray1);
      assertNotSame(booleanArray2, booleanArray0);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray2);
      assertEquals(0, booleanArray2.length);
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
      
      long[] longArray1 = ArrayUtils.clone(longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 1L}, longArray1);
      assertArrayEquals(new long[] {2147483647L, 2147483647L, 1L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(3, longArray1.length);
      assertEquals(3, longArray0.length);
      
      ArrayUtils.reverse(booleanArray1, Integer.MAX_VALUE, 88);
      assertNotSame(booleanArray0, booleanArray2);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray1, booleanArray2);
      assertFalse(booleanArray0.equals((Object)booleanArray2));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray1.equals((Object)booleanArray2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertEquals(2, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1350()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      Long long0 = new Long(472L);
      assertEquals(472L, (long)long0);
      assertNotNull(long0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-1), (-3833));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, (int) (short)946, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 946, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1351()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)83;
      boolean[] booleanArray1 = ArrayUtils.subarray((boolean[]) null, (-2147171937), (-1));
      assertNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1352()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      shortArray0[2] = (short)2;
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-1), (-4432));
      assertEquals((-1), int0);
      assertEquals(11, shortArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      int int1 = ArrayUtils.lastIndexOf(charArray0, 'y', 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'H'}, charArray0);
      assertEquals(1, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 53, 53);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1353()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      assertEquals(1841, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, integerArray0.length);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)integerArray0[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {1841L}, longArray0);
      assertArrayEquals(new long[] {1841L, 0L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(2, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-590L), 1841);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertTrue(bitSet0.isEmpty());
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray0.equals((Object)longArray1));
      assertArrayEquals(new long[] {1841L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = ' ';
      charArray0[1] = 'E';
      charArray0[2] = '3';
      charArray0[3] = 'i';
      charArray0[4] = 'y';
      charArray0[5] = 'X';
      charArray0[6] = ':';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ' ', 320);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {' ', 'E', '3', 'i', 'y', 'X', ':', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-1));
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1354()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 2378);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1355()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)55, (byte)104, (byte) (-49), (byte)55, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)55, (byte)104, (byte) (-49), (byte)55, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-49);
      longArray0[1] = (long) (byte)27;
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-49);
      byteArray2[1] = (byte) (-49);
      byteArray2[2] = (byte)27;
      byteArray2[3] = (byte)104;
      byteArray2[4] = (byte)2;
      byteArray2[5] = (byte)55;
      byteArray2[6] = (byte)120;
      ArrayUtils.reverse(byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)120, (byte)55, (byte)2, (byte)104, (byte)27, (byte) (-49), (byte) (-49)}, byteArray2);
      assertEquals(7, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1356()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1357()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      charArray0[3] = '9';
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3206.4749);
      doubleArray0[1] = 4019.2856603723;
      doubleArray0[2] = (double) 'f';
      int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 1759.822617);
      assertEquals(2, int0);
      assertArrayEquals(new double[] {(-3206.4749), 4019.2856603723, 102.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1358()  throws Throwable  {
      char[] charArray0 = new char[14];
      ArrayUtils.shift(charArray0, 46, 429, 46);
      assertEquals(14, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1359()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 127;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 82, 0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 127.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap(booleanArray0, 0, 3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2454;
      intArray0[2] = 127;
      intArray0[3] = (-250);
      intArray0[4] = 520;
      intArray0[5] = 127;
      intArray0[6] = 127;
      intArray0[7] = 2760;
      intArray0[8] = 3;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 44, 2454);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 2454, 127, (-250), 520, 127, 127, 2760, 3}, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1360()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (short) (-369);
      floatArray0[2] = (float) 560;
      floatArray0[3] = (float) (byte)0;
      floatArray0[4] = (float) (short) (-369);
      floatArray0[5] = (float) (byte)0;
      floatArray0[6] = 741.5375F;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short) (-3561), (-1682));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, (-369.0F), 560.0F, 0.0F, (-369.0F), 0.0F, 741.5375F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap((boolean[]) null, 102, 48);
  }

  @Test(timeout = 4000)
  public void test1361()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      Long long0 = new Long((-1329L));
      assertEquals((-1329L), (long)long0);
      assertNotNull(long0);
      
      longArray0[0] = long0;
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) longArray0[0]);
      assertArrayEquals(new long[] {(-1329L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1362()  throws Throwable  {
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte4);
      assertTrue(byte4.equals((Object)byte2));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte1));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte5);
      assertFalse(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      float[] floatArray0 = new float[0];
      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte) (-49));
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)0;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int[] intArray2 = ArrayUtils.addAll(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(intArray2);
      assertEquals(1, intArray1.length);
      assertEquals(5, intArray2.length);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1363()  throws Throwable  {
      Long[] longArray0 = new Long[1];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (-1063L));
      assertArrayEquals(new long[] {(-1063L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(1, longArray0.length);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1364()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) (byte)8);
      assertArrayEquals(new long[] {}, longArray1);
      assertNotNull(longArray1);
      assertEquals(0, longArray0.length);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1365()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray1[0] = object0;
      Object object1 = ArrayUtils.get(objectArray1, 0);
      assertNotSame(objectArray1, objectArray0);
      assertSame(object1, object0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(object1);
      assertEquals(3, objectArray1.length);
      
      objectArray1[1] = object1;
      Object object2 = ArrayUtils.get(objectArray1, 0);
      assertNotSame(objectArray1, objectArray0);
      assertSame(object2, object1);
      assertSame(object2, object0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotNull(object2);
      assertEquals(3, objectArray1.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(6, booleanArray1.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray1);
      assertFalse(boolean1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, objectArray0.length);
      assertEquals(3, objectArray1.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-1));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte) (-81)}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-81)}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(2, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1366()  throws Throwable  {
      byte byte0 = (byte)122;
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte2 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertTrue(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte2;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray2 = new byte[0];
      ArrayUtils.reverse(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      
      ArrayUtils.hashCode((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test1367()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      ArrayUtils.hashCode((Object) byte0);
  }

  @Test(timeout = 4000)
  public void test1368()  throws Throwable  {
      int[] intArray0 = new int[3];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 493);
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(bitSet0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1369()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.addFirst((boolean[]) null, true);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(1, booleanArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'R';
      boolean boolean0 = ArrayUtils.contains(charArray0, 'R');
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'R'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1370()  throws Throwable  {
      int[] intArray0 = new int[3];
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray1.length);
      
      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
      assertNull(floatArray0);
      
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(integerArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, integerArray0.length);
      assertEquals(3, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1371()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)55, (byte)104, (byte) (-49), (byte)55, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)27, (byte)55, (byte)104, (byte) (-49), (byte)55, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte) (-49);
      longArray0[1] = (long) (byte)27;
      longArray0[2] = (long) (byte)120;
      longArray0[3] = (long) (byte)104;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 338L);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-49L), 27L, 120L, 104L}, longArray0);
      assertArrayEquals(new long[] {338L, (-49L), 27L, 120L, 104L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray1, 322L);
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-49L), 27L, 120L, 104L}, longArray0);
      assertArrayEquals(new long[] {338L, (-49L), 27L, 120L, 104L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(2244);
      assertEquals(2244, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      assertEquals(1, integerArray0.length);
      assertEquals(1, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test1372()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 85);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-23);
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)28);
      assertEquals("{3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertArrayEquals(new byte[] {(byte) (-33), (byte) (-1), (byte)64, (byte)28, (byte)1, (byte) (-23)}, byteArray0);
      assertNotNull(bitSet0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1373()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      boolean boolean0 = ArrayUtils.isSorted(floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 2, 1, 720);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 748);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-32.6489F), 38.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1374()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)186;
      shortArray0[1] = (short) (-81);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (short)186;
      doubleArray0[2] = (-5064.623977172575);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-5064.623977172575);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (short)186;
      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0.0);
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 186.0, (-5064.623977172575), 0.0, (-5064.623977172575), 0.0, 186.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1375()  throws Throwable  {
      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1376()  throws Throwable  {
      BitSet bitSet0 = ArrayUtils.indexesOf((long[]) null, 1652L);
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
  }

  @Test(timeout = 4000)
  public void test1377()  throws Throwable  {
      char[] charArray0 = new char[0];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      
      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);
      assertSame(characterArray0, characterArray1);
      assertSame(characterArray1, characterArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(characterArray1);
      assertEquals(0, charArray0.length);
      assertEquals(0, characterArray0.length);
      assertEquals(0, characterArray1.length);
  }

  @Test(timeout = 4000)
  public void test1378()  throws Throwable  {
      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test1379()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayUtils.clone(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1380()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-20);
      ArrayUtils.shift(longArray0, (-20));
      assertArrayEquals(new long[] {0L, (-20L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      
      ArrayUtils.shift(longArray0, (-20), (-20), (-3246));
      assertArrayEquals(new long[] {0L, (-20L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1381()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 432;
      ArrayUtils.shift(longArray0, 432);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 432L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1382()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'w');
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'w', 'N'}, charArray0);
      assertArrayEquals(new char[] {'N'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(1, charArray1.length);
      
      ArrayUtils.shift((float[]) null, 0);
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'w';
      longArray0[1] = (long) 'w';
      longArray0[2] = 3517L;
      longArray0[3] = 0L;
      longArray0[4] = 3517L;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 'w';
      ArrayUtils.shift(longArray0, 16);
      assertArrayEquals(new long[] {0L, 119L, 119L, 119L, 3517L, 0L, 3517L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1383()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      long[] longArray0 = null;
      ArrayUtils.shift((long[]) null, (-1194), 46, 34);
      short[] shortArray0 = null;
      short[] shortArray1 = ArrayUtils.removeElement((short[]) null, (short)1190);
      assertNull(shortArray1);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (short)1190);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 46;
      floatArray0[1] = (float) 34;
      floatArray0[2] = (float) 46;
      floatArray0[3] = (float) (-1194);
      java.util.Random random0 = null;
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle((char[]) null, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1384()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 97.0;
      doubleArray0[1] = (double) (-14);
      doubleArray0[2] = (double) 104;
      doubleArray0[3] = (double) (byte)69;
      doubleArray0[3] = (double) 104;
      doubleArray0[5] = (double) (-14);
      doubleArray0[6] = (double) (-14);
      doubleArray0[7] = (double) '7';
      doubleArray0[8] = (double) (byte)69;
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (-1.0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {97.0, (-14.0), 104.0, 104.0, 0.0, (-14.0), (-14.0), 55.0, 69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {97.0, (-14.0), 104.0, 104.0, 0.0, (-14.0), (-14.0), 55.0, 69.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      ArrayUtils.reverse(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      boolean boolean0 = ArrayUtils.contains(doubleArray1, 0.0, 1844.6656538);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {97.0, (-14.0), 104.0, 104.0, 0.0, (-14.0), (-14.0), 55.0, 69.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {97.0, (-14.0), 104.0, 104.0, 0.0, (-14.0), (-14.0), 55.0, 69.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1385()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      assertArrayEquals(new short[] {(short)200, (short)0, (short)0, (short)0, (short)1064, (short) (-249)}, shortArray0);
      assertEquals(6, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[4] = 'D';
      charArray0[2] = 'O';
      charArray0[3] = 'R';
      charArray0[4] = 't';
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'O', 'R', 't', '4'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1386()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (-14.0F), (double) (-14.0F));
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1387()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 2901L;
      longArray0[4] = 0L;
      longArray0[5] = 2575L;
      longArray0[6] = 0L;
      longArray0[7] = 3517L;
      longArray0[8] = 293L;
      boolean boolean0 = ArrayUtils.contains((double[]) null, (-611.8), (double) 0L);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = '_';
      charArray0[2] = 's';
      charArray0[3] = 'o';
      charArray0[4] = 'h';
      charArray0[5] = 'r';
      charArray0[6] = 'w';
      charArray0[7] = 'k';
      charArray0[8] = '*';
      // Undeclared exception!
      try { 
        ArrayUtils.shuffle(charArray0, (java.util.Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1388()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(2, booleanArray0.length);
      assertEquals(2, booleanArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      boolean boolean0 = ArrayUtils.isEmpty(longArray0);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      boolean boolean1 = ArrayUtils.isSameLength(objectArray0, objectArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, objectArray0.length);
      
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-81);
      shortArray0[1] = (short) (byte)57;
      shortArray0[2] = (short) (byte) (-81);
      shortArray0[3] = (short) (byte) (-81);
      shortArray0[4] = (short) (byte)57;
      shortArray0[5] = (short) (byte) (-81);
      shortArray0[6] = (short) (byte) (-81);
      shortArray0[7] = (short) (byte)57;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-605), (-2501));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray1);
      assertArrayEquals(new short[] {(short) (-81), (short)57, (short) (-81), (short) (-81), (short)57, (short) (-81), (short) (-81), (short)57}, shortArray0);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1389()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)122);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1390()  throws Throwable  {
      Byte[] byteArray0 = new Byte[1];
      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte)61);
      assertArrayEquals(new byte[] {(byte)61}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1391()  throws Throwable  {
      Double[] doubleArray0 = new Double[0];
      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((Byte[]) null, (-1682));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1682, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1392()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      floatArray0[1] = (-3331.73F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[2];
      Byte byte2 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1393()  throws Throwable  {
      Byte byte0 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[1];
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1394()  throws Throwable  {
      int[] intArray0 = ArrayUtils.insert(3174, (int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1395()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      
      ArrayUtils.swap((float[]) null, 2522, (-1513), 1726);
  }

  @Test(timeout = 4000)
  public void test1396()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-598);
      intArray0[1] = (-598);
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      ArrayUtils.shift(shortArray0, (-598));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1397()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1398()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = new Byte((byte) (-42));
      assertEquals((byte) (-42), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byte byte2 = (byte) (-70);
      Byte byte3 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-12));
      assertEquals((byte) (-12), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte3));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertTrue(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte1));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte2));
      assertNotNull(byte6);
      
      Byte byte7 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte7);
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte5));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte3));
      assertFalse(byte7.equals((Object)byte4));
      assertFalse(byte7.equals((Object)byte6));
      assertNotNull(byte7);
      
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte7;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(1, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, (-1380), (int) (byte) (-12), (int) (byte)0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      ArrayUtils.swap((float[]) null, (int) (byte) (-52), 1304);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(0, floatArray0.length);
      
      boolean[] booleanArray2 = ArrayUtils.removeAllOccurences((boolean[]) null, false);
      assertNull(booleanArray2);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte2;
      longArray0[1] = (long) byte2;
      longArray0[2] = (long) byte2;
      longArray0[3] = (long) (byte)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertArrayEquals(new long[] {(-70L), (-70L), (-70L), 0L}, longArray0);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(4, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1399()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1400()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = ']';
      charArray0[2] = 'J';
      charArray0[3] = '@';
      charArray0[4] = 'B';
      charArray0[5] = '_';
      charArray0[6] = 'Q';
      charArray0[7] = 'f';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {')', ']', 'J', '@', 'B', '_', 'Q', 'f'}, charArray0);
      assertEquals(8, charArray0.length);
      
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-955), (-955));
      assertNull(byteArray0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ']';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) '_';
      objectArray0[3] = (Object) 'B';
      objectArray0[4] = (Object) ')';
      objectArray0[5] = (Object) 'B';
      ArrayUtils.swap(objectArray0, (-4378), (-2337), (-955));
      assertEquals(6, objectArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 'f';
      floatArray0[1] = (-2258.5723F);
      ArrayUtils.swap(floatArray0, (-2337), 0);
      assertArrayEquals(new float[] {102.0F, (-2258.5723F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);
      assertSame(floatArray0, floatArray1);
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {102.0F, (-2258.5723F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {102.0F, (-2258.5723F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, false);
      assertNotSame(booleanArray1, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1401()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) (-25));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertSame(floatArray0, floatArray2);
      assertNotSame(floatArray2, floatArray1);
      assertSame(floatArray2, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray2.length);
  }

  @Test(timeout = 4000)
  public void test1402()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[9];
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) booleanArray0);
      assertSame(booleanArray0, objectArray0);
      assertNotNull(objectArray0);
      assertEquals(9, booleanArray0.length);
      assertEquals(9, objectArray0.length);
      
      ArrayUtils.swap((Object[]) booleanArray0, 115, 115, (-2355));
      assertSame(booleanArray0, objectArray0);
      assertEquals(9, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1403()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1012, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1012, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1404()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      assertEquals((byte) (-126), (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      assertEquals((byte) (-126), (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[1] = byte2;
      Byte byte3 = new Byte((byte)91);
      assertEquals((byte)91, (byte)byte3);
      assertFalse(byte3.equals((Object)byte0));
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertNotNull(byte3);
      
      byteArray0[2] = byte3;
      Byte byte4 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      byteArray0[3] = byte4;
      int[] intArray0 = new int[1];
      intArray0[0] = 64;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(64, intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 64, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1405()  throws Throwable  {
      byte byte0 = (byte)122;
      Byte byte1 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte[] byteArray0 = new Byte[5];
      Byte byte2 = new Byte((byte)122);
      assertEquals((byte)122, (byte)byte2);
      assertTrue(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      byteArray0[0] = byte2;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(4, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = byte0;
      byteArray2[1] = (byte)10;
      ArrayUtils.reverse(byteArray2);
      assertArrayEquals(new byte[] {(byte)10, (byte)122}, byteArray2);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1406()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      ArrayUtils.swap((short[]) null, (-2356), 1349);
      double[] doubleArray1 = ArrayUtils.addFirst(doubleArray0, (double) 1349);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1349.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1407()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-108));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArray1.length);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);
      assertNotSame(integerArray0, integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertNotNull(integerArray1);
      assertEquals(0, integerArray0.length);
      assertEquals(0, integerArray1.length);
      
      ArrayUtils.shift((int[]) null, (-2711), (-2711), 2379);
      ArrayUtils.swap((int[]) null, 70, (int) (byte) (-108));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2711);
      double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2711.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2711.0), (-2711.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = ArrayUtils.removeElements((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1408()  throws Throwable  {
      int[] intArray0 = new int[1];
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1409()  throws Throwable  {
      int[] intArray0 = new int[3];
      ArrayUtils.shift(intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1410()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 3025;
      intArray0[1] = 3025;
      intArray0[2] = (-143);
      intArray0[3] = 116;
      intArray0[4] = 3025;
      intArray0[5] = 0;
      intArray0[6] = (-143);
      intArray0[7] = 0;
      intArray0[8] = 3025;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertArrayEquals(new int[] {3025, 3025, (-143), 116, 3025, 0, (-143), 0, 3025}, intArray0);
      assertNotNull(integerArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, integerArray0.length);
      
      MockRandom mockRandom0 = new MockRandom(105L);
      assertNotNull(mockRandom0);
      
      IntStream intStream0 = mockRandom0.ints(2, 116);
      assertNotNull(intStream0);
      
      ArrayUtils.shift(intArray0, 116, Integer.MAX_VALUE, (-446));
      assertArrayEquals(new int[] {3025, 3025, (-143), 116, 3025, 0, (-143), 0, 3025}, intArray0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1411()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte) (-10));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)0, (byte)0}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      
      byte[] byteArray2 = ArrayUtils.removeAllOccurences(byteArray1, (byte) (-10));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray2);
      assertNotNull(byteArray2);
      assertEquals(2, byteArray0.length);
      assertEquals(3, byteArray1.length);
      assertEquals(2, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test1412()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)10;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)106);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)16, (byte) (-16), (byte)106, (byte)0, (byte)106, (byte)10}, byteArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-16), (byte)0, (byte)10}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(4, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1413()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[0] = 'I';
      charArray0[1] = '=';
      ArrayUtils.shift(charArray0, (int) (byte) (-5), 46, (int) (byte) (-5));
      assertEquals(20, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1414()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)898;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)3338);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)898}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)898}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shift((Object[]) null, (int) (short)898, 1495, (-1));
      ArrayUtils.shift(charArray0, (-1), 53, (-1));
      assertArrayEquals(new char[] {'(', 'R', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'J'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1415()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)186;
      shortArray0[1] = (short) (-81);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-2279);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '<';
      charArray0[2] = '7';
      ArrayUtils.shift(charArray0, (int) (short)0, 1841, 110);
      assertArrayEquals(new char[] {'<', '7', 'Q'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1416()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      floatArray0[2] = (float) 104;
      floatArray0[3] = (float) 104;
      floatArray0[4] = (float) 104;
      floatArray0[5] = (float) 104;
      floatArray0[6] = 1.0F;
      ArrayUtils.reverse(floatArray0, 2, 1279);
      assertArrayEquals(new float[] {104.0F, 104.0F, 1.0F, 104.0F, 104.0F, 104.0F, 104.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1417()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 1883.63158);
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1418()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      float[] floatArray0 = new float[1];
      ArrayUtils.reverse(floatArray0, (int) 'R', 1279);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1419()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      ArrayUtils.shift((long[]) null, (-1194), 46, 34);
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)1190);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (short)1190);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 46;
      floatArray0[1] = (float) 34;
      floatArray0[2] = (float) 46;
      floatArray0[3] = (float) (-1194);
      floatArray0[4] = (float) (-1194);
      floatArray0[5] = (float) 46;
      floatArray0[6] = (float) (-1194);
      floatArray0[7] = (float) (short)1190;
      floatArray0[8] = (float) (short)1190;
      ArrayUtils.reverse(floatArray0, 34, (-1194));
      assertArrayEquals(new float[] {46.0F, 34.0F, 46.0F, (-1194.0F), (-1194.0F), 46.0F, (-1194.0F), 1190.0F, 1190.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1420()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'i';
      charArray0[3] = 't';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'i', '\u0000', '\u0000', 't', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) (-1));
      assertNull(shortArray0);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 't';
      char[] charArray2 = ArrayUtils.subarray(charArray1, (-3025), (-3025));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertArrayEquals(new char[] {'t'}, charArray1);
      assertArrayEquals(new char[] {}, charArray2);
      assertNotNull(charArray2);
      assertEquals(1, charArray1.length);
      assertEquals(0, charArray2.length);
  }

  @Test(timeout = 4000)
  public void test1421()  throws Throwable  {
      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1422()  throws Throwable  {
      int[] intArray0 = new int[9];
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'J', (-2146152734));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'J'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1423()  throws Throwable  {
      long[] longArray0 = new long[4];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 0L);
      assertEquals(4, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(4, bitSet0.length());
      assertFalse(bitSet0.isEmpty());
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(bitSet0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1424()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      int int0 = 0;
      ArrayUtils.swap(booleanArray0, 0, 0, 0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-120));
      assertEquals((-120), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-1564));
      assertEquals((-1564), (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.valueOf((-1564));
      assertEquals((-1564), (int)integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertEquals(0, (int)integer5);
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2146328558));
      assertArrayEquals(new int[] {(-120), 0, 0, (-1564), (-1564), 0}, intArray0);
      assertNotNull(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, integerArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (int)integerArray0[4];
      longArray0[1] = (long) (-120);
      long[] longArray1 = ArrayUtils.add(longArray0, (long) integerArray0[3]);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1564L), (-120L)}, longArray0);
      assertArrayEquals(new long[] {(-1564L), (-120L), (-1564L)}, longArray1);
      assertNotNull(longArray1);
      assertEquals(2, longArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(3, longArray1.length);
      
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray1, (long) integerArray0[3], 1);
      assertFalse(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(3, bitSet0.length());
      assertEquals("{2}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {(-1564L), (-120L)}, longArray0);
      assertArrayEquals(new long[] {(-1564L), (-120L), (-1564L)}, longArray1);
      assertNotNull(bitSet0);
      assertEquals(2, longArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(3, longArray1.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      int int1 = ArrayUtils.lastIndexOf(charArray0, '3', (-1564));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'y'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1425()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = ArrayUtils.subarray(intArray0, (-1302), 48);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int[] intArray2 = ArrayUtils.toPrimitive((Integer[]) null);
      assertNull(intArray2);
  }

  @Test(timeout = 4000)
  public void test1426()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Byte[] byteArray0 = ArrayUtils.insert(171, (Byte[]) null, (Byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1427()  throws Throwable  {
      int[] intArray0 = new int[2];
      Byte byte0 = new Byte((byte)120);
      assertEquals((byte)120, (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = (byte) (-52);
      Byte byte2 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte2);
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte3);
      assertFalse(byte3.equals((Object)byte2));
      assertFalse(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte0));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte) (-49));
      assertEquals((byte) (-49), (byte)byte4);
      assertFalse(byte4.equals((Object)byte1));
      assertFalse(byte4.equals((Object)byte0));
      assertFalse(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertNotNull(byte4);
      
      Byte byte5 = new Byte((byte) (-70));
      assertEquals((byte) (-70), (byte)byte5);
      assertFalse(byte5.equals((Object)byte0));
      assertTrue(byte5.equals((Object)byte3));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte2));
      assertNotNull(byte5);
      
      Byte byte6 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte6);
      assertFalse(byte6.equals((Object)byte0));
      assertFalse(byte6.equals((Object)byte5));
      assertFalse(byte6.equals((Object)byte4));
      assertFalse(byte6.equals((Object)byte2));
      assertFalse(byte6.equals((Object)byte3));
      assertFalse(byte6.equals((Object)byte1));
      assertNotNull(byte6);
      
      Byte[] byteArray0 = new Byte[6];
      byteArray0[0] = byte4;
      Byte byte7 = new Byte((byte) (-52));
      assertEquals((byte) (-52), (byte)byte7);
      assertFalse(byte7.equals((Object)byte3));
      assertTrue(byte7.equals((Object)byte2));
      assertFalse(byte7.equals((Object)byte4));
      assertTrue(byte7.equals((Object)byte1));
      assertFalse(byte7.equals((Object)byte0));
      assertFalse(byte7.equals((Object)byte6));
      assertFalse(byte7.equals((Object)byte5));
      assertNotNull(byte7);
      
      byteArray0[2] = byte4;
      byteArray0[3] = byte2;
      byteArray0[4] = byte3;
      byteArray0[5] = byte2;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArray1.length);
      
      boolean[] booleanArray0 = new boolean[3];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray1);
      assertTrue(boolean0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertEquals(3, booleanArray0.length);
      assertEquals(0, booleanArray1.length);
      
      int[] intArray1 = ArrayUtils.subarray(intArray0, (int) (byte) (-52), (int) byte1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1428()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, 0, Integer.MAX_VALUE, 65);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 65;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 1424, (-3097));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {65.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      ArrayUtils.swap(booleanArray0, 1098, 3);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 82;
      int[] intArray1 = ArrayUtils.subarray(intArray0, 520, 82);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {82}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1429()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((float[]) null, 1664.679F);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ArrayUtils.add((char[]) null, (-4471), '0');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4471, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1430()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'F';
      charArray0[2] = 'p';
      charArray0[3] = 'Z';
      // Undeclared exception!
      try { 
        ArrayUtils.add(charArray0, (-1203), 'p');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1203, Length: 4
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1431()  throws Throwable  {
      boolean boolean0 = ArrayUtils.contains((boolean[]) null, true);
      assertFalse(boolean0);
      
      char[] charArray0 = ArrayUtils.add((char[]) null, 0, 'N');
      assertArrayEquals(new char[] {'N'}, charArray0);
      assertNotNull(charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1432()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)55;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte) (-80));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertArrayEquals(new byte[] {(byte)15, (byte)4, (byte)55, (byte) (-49), (byte)120, (byte)15, (byte)0, (byte)55}, byteArray0);
      assertArrayEquals(new byte[] {(byte)15, (byte)4, (byte)55, (byte) (-49), (byte)120, (byte)15, (byte)0, (byte)55}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArray1.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)55;
      longArray0[1] = (long) (byte)55;
      longArray0[2] = (long) (byte)4;
      longArray0[3] = (long) (byte)4;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-976L));
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {55L, 55L, 4L, 4L}, longArray0);
      assertArrayEquals(new long[] {(-976L), 55L, 55L, 4L, 4L}, longArray1);
      assertNotNull(longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
      
      boolean boolean0 = ArrayUtils.contains(longArray1, (-1152L));
      assertFalse(boolean0);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertArrayEquals(new long[] {55L, 55L, 4L, 4L}, longArray0);
      assertArrayEquals(new long[] {(-976L), 55L, 55L, 4L, 4L}, longArray1);
      assertEquals(4, longArray0.length);
      assertEquals(5, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1433()  throws Throwable  {
      Long[] longArray0 = new Long[0];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) longArray0, (Object) byte0, (int) (byte)2);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.cardinality());
      assertNotNull(bitSet0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1434()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 0L;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      BitSet bitSet0 = ArrayUtils.indexesOf(objectArray0, objectArray0[0]);
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals(1, bitSet0.cardinality());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertNotNull(bitSet0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1435()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "java.util.AbstractMap$SimpleImmutableEntry";
      boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[0]);
      assertTrue(boolean0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1436()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      
      Byte byte2 = new Byte((byte) (-94));
      assertEquals((byte) (-94), (byte)byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertNotNull(byte2);
      
      Byte byte3 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte3);
      assertTrue(byte3.equals((Object)byte0));
      assertTrue(byte3.equals((Object)byte1));
      assertFalse(byte3.equals((Object)byte2));
      assertNotNull(byte3);
      
      Byte byte4 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte4);
      assertTrue(byte4.equals((Object)byte3));
      assertFalse(byte4.equals((Object)byte2));
      assertTrue(byte4.equals((Object)byte1));
      assertTrue(byte4.equals((Object)byte0));
      assertNotNull(byte4);
      
      Byte[] byteArray0 = new Byte[8];
      byteArray0[0] = byte1;
      byteArray0[1] = byte4;
      byteArray0[2] = byte3;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      byteArray0[5] = byte3;
      byteArray0[6] = byte4;
      byteArray0[7] = byte4;
      BitSet bitSet0 = ArrayUtils.indexesOf((Object[]) byteArray0, (Object) byte0);
      assertEquals(64, bitSet0.size());
      assertEquals(8, bitSet0.length());
      assertEquals(8, bitSet0.cardinality());
      assertEquals("{0, 1, 2, 3, 4, 5, 6, 7}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertNotNull(bitSet0);
      assertEquals(8, byteArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1437()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3307.647000447186);
      doubleArray0[1] = (-3307.647000447186);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3307.647000447186), (-3307.647000447186));
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(0, bitSet0.length());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {(-3307.647000447186), (-3307.647000447186)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1438()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3306.9610209303287), (-3306.9610209303287));
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1439()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 772.92531469015;
      int int0 = ArrayUtils.indexOf(doubleArray0, (-3206.4749), (-5064.623977172575));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, 0.0, 772.92531469015}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1440()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1441()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = 2.5;
      doubleArray0[2] = 1440.0532;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 3.2;
      doubleArray0[6] = (-3387.492);
      doubleArray0[7] = 893.838312;
      doubleArray0[8] = 993.692876;
      boolean boolean0 = ArrayUtils.contains(doubleArray0, (-3387.492));
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.0, 2.5, 1440.0532, 1.0, Double.NaN, 3.2, (-3387.492), 893.838312, 993.692876}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertEquals(0, byteArray0.length);
      assertEquals(0, byteArray1.length);
      
      int int0 = ArrayUtils.lastIndexOf((double[]) null, 3.0, (-2133447806), 993.692876);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1442()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2325.7143489003306);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1443()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, Integer.MAX_VALUE, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1444()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.contains(doubleArray0, 2325.9);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = 1803;
      // Undeclared exception!
      try { 
        ArrayUtils.add((boolean[]) null, 1803, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1803, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1445()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((int[]) null, 1554, 1554);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1554, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1446()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short) (-685));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-685), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      
      short[] shortArray2 = ArrayUtils.subarray(shortArray1, (-112), 55);
      assertNotSame(shortArray0, shortArray2);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray2);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray2, shortArray1);
      assertNotSame(shortArray2, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray2.equals((Object)shortArray1));
      assertFalse(shortArray2.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short) (-685), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short) (-685), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray2);
      assertNotNull(shortArray2);
      assertEquals(6, shortArray0.length);
      assertEquals(7, shortArray1.length);
      assertEquals(7, shortArray2.length);
  }

  @Test(timeout = 4000)
  public void test1447()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 1, (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1448()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (-649), (int) (byte) (-40));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1449()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1140;
      shortArray0[1] = (short) (-1480);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-280);
      shortArray0[4] = (short)440;
      shortArray0[5] = (short)231;
      shortArray0[6] = (short)0;
      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 56, 34);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)1140, (short) (-1480), (short)0, (short) (-280), (short)440, (short)231, (short)0}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(7, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1450()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (double) 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1451()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-10.0);
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-10.0));
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new double[] {(-10.0)}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1452()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      ArrayUtils.shift(longArray0, 0, 0, 46);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-176L);
      short[] shortArray1 = ArrayUtils.nullToEmpty((short[]) null);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray1.length);
      
      ArrayUtils.reverse((short[]) null);
      int int0 = ArrayUtils.indexOf(doubleArray0, 90.0, (-1));
      assertEquals((-1), int0);
      assertArrayEquals(new double[] {0.0, (-176.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1453()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((float[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1454()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isEmpty(intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1455()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      ArrayUtils.shift(longArray0, 0, 0, 46);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-176L);
      doubleArray0[2] = (double) 46;
      doubleArray0[3] = (double) (-176L);
      doubleArray0[0] = (double) (-1L);
      doubleArray0[3] = (double) (-1L);
      doubleArray0[7] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-176L));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0), (-176.0), 46.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 46.0, (-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test1456()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, (-3313.637));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertNotNull(bitSet0);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1457()  throws Throwable  {
      int[] intArray0 = new int[0];
      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      ArrayUtils.shift(longArray0, 0, 0, 46);
      assertArrayEquals(new long[] {(-176L), (-1L)}, longArray0);
      assertEquals(2, longArray0.length);
      
      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)0);
      assertNull(shortArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (-176L);
      doubleArray0[2] = (double) 46;
      doubleArray0[3] = (double) (-176L);
      doubleArray0[4] = (double) (-1L);
      doubleArray0[5] = (double) 46;
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) (short)0;
      double[] doubleArray1 = ArrayUtils.removeAllOccurrences(doubleArray0, (double) (-176L));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 46.0, (-1.0), 46.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-176.0), 46.0, (-176.0), (-1.0), 46.0, (-1.0), 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test1458()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.1);
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals("{}", bitSet0.toString());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(bitSet0);
      assertEquals(2, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-8058);
      shortArray0[1] = (short)160;
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-4597), shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4597, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1459()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.shift(floatArray0, 111);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = ArrayUtils.isSorted(doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1916);
      shortArray0[1] = (short) (-738);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(111, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 111, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1460()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short[] shortArray1 = ArrayUtils.addFirst(shortArray0, (short)699);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)699, (short)0, (short)0}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(2, shortArray0.length);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1461()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addFirst((int[]) null, 2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test1462()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.insert((-1), shortArray0, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1463()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 1495;
      int int0 = ArrayUtils.lastIndexOf(intArray0, 1246);
      assertEquals((-1), int0);
      assertArrayEquals(new int[] {2, 1495}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = ArrayUtils.add(intArray0, 1495);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, 1495}, intArray0);
      assertArrayEquals(new int[] {2, 1495, 1495}, intArray1);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(3, intArray1.length);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2685;
      shortArray0[1] = (short) (-562);
      shortArray0[2] = (short) (-3448);
      shortArray0[3] = (short)0;
      shortArray0[4] = (short) (-441);
      shortArray0[5] = (short) (-5177);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-2852);
      shortArray0[8] = (short)1968;
      // Undeclared exception!
      try { 
        ArrayUtils.insert(1495, shortArray0, shortArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1495, Length: 9
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1464()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1465()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-18.1861F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 640.496F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-18.1861F), (-1.0F), 640.496F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1466()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-14);
      ArrayUtils.shift(longArray0, (-14));
      assertArrayEquals(new long[] {(-14L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1467()  throws Throwable  {
      long[] longArray0 = new long[2];
      ArrayUtils.shift(longArray0, (-2179));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1468()  throws Throwable  {
      long[] longArray0 = new long[0];
      ArrayUtils.shift(longArray0, 2);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1469()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 2901L;
      longArray0[4] = 0L;
      longArray0[5] = 2575L;
      longArray0[6] = 0L;
      longArray0[7] = 3517L;
      longArray0[8] = 293L;
      ArrayUtils.shift(longArray0, 0);
      assertArrayEquals(new long[] {(-1L), (-1L), 0L, 2901L, 0L, 2575L, 0L, 3517L, 293L}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1470()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[2] = (short)0;
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1471()  throws Throwable  {
      ArrayUtils.shift((short[]) null, 1767);
      Byte byte0 = new Byte((byte)0);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[4];
      byteArray0[0] = byte0;
      byteArray0[1] = byte0;
      byteArray0[2] = byte0;
      byteArray0[3] = byte0;
      short[] shortArray0 = ArrayUtils.subarray((short[]) null, (-3334), (int) (byte)0);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1472()  throws Throwable  {
      short[] shortArray0 = new short[0];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1473()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = '(';
      charArray0[2] = 'R';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)898;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)3338);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)898}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)898}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(3, shortArray0.length);
      assertEquals(3, shortArray1.length);
      
      ArrayUtils.shift((Object[]) null, (int) (short)898, 1495, (-1));
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'R', '(', 'J'}, charArray0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1474()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)117;
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)117, (-1));
      assertEquals(64, bitSet0.size());
      assertFalse(bitSet0.isEmpty());
      assertEquals("{0}", bitSet0.toString());
      assertEquals(1, bitSet0.cardinality());
      assertEquals(1, bitSet0.length());
      assertArrayEquals(new short[] {(short)117}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1475()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 623L;
      Byte byte0 = new Byte((byte)5);
      assertEquals((byte)5, (byte)byte0);
      assertNotNull(byte0);
      
      Byte[] byteArray0 = new Byte[15];
      byteArray0[0] = byte0;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      
      ArrayUtils.shift((Object[]) byteArray1, 1, 8, 1);
      assertSame(byteArray0, byteArray1);
      assertSame(byteArray1, byteArray0);
      assertEquals(15, byteArray0.length);
      assertEquals(15, byteArray1.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = '+';
      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'m', '+'}, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charArray1);
      assertEquals(2, charArray0.length);
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1476()  throws Throwable  {
      short[] shortArray0 = new short[5];
      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-157));
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[15];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, false, 753);
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      assertEquals(15, booleanArray0.length);
      
      int int2 = ArrayUtils.indexOf((char[]) null, 'u');
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      ArrayUtils.swap((char[]) null, (int) (short)0, 14, 3457);
      ArrayUtils.shift(booleanArray0, 1309);
      assertEquals(15, booleanArray0.length);
      
      ArrayUtils.reverse((char[]) null);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short) (-157);
      longArray0[1] = (long) 'u';
      longArray0[2] = (long) (short) (-157);
      longArray0[3] = (long) (-1);
      longArray0[4] = (long) 14;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 753;
      longArray0[7] = (long) (-1);
      longArray0[8] = (-1L);
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {(-157L), 117L, (-157L), (-1L), 14L, (-1L), 753L, (-1L), (-1L)}, longArray0);
      assertEquals(9, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test1477()  throws Throwable  {
      char[] charArray0 = new char[3];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, characterArray0.length);
      
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1478()  throws Throwable  {
      short[] shortArray0 = new short[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-1378), (-1));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertEquals(0, bitSet0.length());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1479()  throws Throwable  {
      ArrayUtils.shift((Object[]) null, 2106, 2106, 205);
  }

  @Test(timeout = 4000)
  public void test1480()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short) (-1));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(0, shortArray0.length);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1481()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1482()  throws Throwable  {
      short[] shortArray0 = new short[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short) (-82));
      assertEquals("{}", bitSet0.toString());
      assertEquals(0, bitSet0.cardinality());
      assertEquals(0, bitSet0.length());
      assertTrue(bitSet0.isEmpty());
      assertEquals(64, bitSet0.size());
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(bitSet0);
      assertEquals(0, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1483()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)186;
      shortArray0[1] = (short) (-81);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)4;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-2279);
      shortArray0[7] = (short)0;
      short[] shortArray1 = ArrayUtils.removeAllOccurrences(shortArray0, (short)0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertArrayEquals(new short[] {(short)186, (short) (-81), (short)0, (short)4, (short)0, (short)0, (short) (-2279), (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)186, (short) (-81), (short)4, (short) (-2279)}, shortArray1);
      assertNotNull(shortArray1);
      assertEquals(8, shortArray0.length);
      assertEquals(4, shortArray1.length);
      
      ArrayUtils.shift((Object[]) null, (int) (short)4, 0, 0);
      char[] charArray0 = new char[7];
      charArray0[0] = '/';
      charArray0[1] = 'r';
      charArray0[2] = 'q';
      charArray0[3] = '9';
      charArray0[4] = 'W';
      charArray0[5] = '-';
      charArray0[6] = 'D';
      ArrayUtils.reverse(charArray0);
      assertArrayEquals(new char[] {'D', '-', 'W', '9', 'q', 'r', '/'}, charArray0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1484()  throws Throwable  {
      float[] floatArray0 = new float[3];
      boolean boolean0 = ArrayUtils.contains(floatArray0, (-1.0F));
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1485()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      float[] floatArray0 = new float[1];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, 11.6701F);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      int int1 = ArrayUtils.lastIndexOf((long[]) null, (-1L));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray1, (float) (-1), (-1797));
      assertEquals(1, bitSet0.length());
      assertEquals(64, bitSet0.size());
      assertEquals("{0}", bitSet0.toString());
      assertFalse(bitSet0.isEmpty());
      assertEquals(1, bitSet0.cardinality());
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotNull(bitSet0);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1486()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1487()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 722.71F;
      floatArray0[1] = (-521.9F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1077.5872F;
      floatArray0[4] = (-2730.2F);
      floatArray0[5] = 741.5375F;
      floatArray0[6] = 0.0F;
      int int0 = ArrayUtils.indexOf(floatArray0, 2413.97F, (-573));
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {722.71F, (-521.9F), 0.0F, 1077.5872F, (-2730.2F), 741.5375F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1488()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[8] = 13;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Length: 10
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1489()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1328);
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1490()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1491()  throws Throwable  {
      char[] charArray0 = new char[1];
      Character[] characterArray0 = ArrayUtils.toObject(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(characterArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, characterArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.remove((int[]) null, (-1868));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1868, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1492()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'Y';
      charArray0[2] = 'o';
      charArray0[3] = '\'';
      charArray0[4] = '8';
      charArray0[5] = 'L';
      charArray0[6] = ']';
      charArray0[7] = 'J';
      char[] charArray1 = ArrayUtils.remove(charArray0, 0);
      assertNotSame(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'f', 'Y', 'o', '\'', '8', 'L', ']', 'J'}, charArray0);
      assertArrayEquals(new char[] {'Y', 'o', '\'', '8', 'L', ']', 'J'}, charArray1);
      assertNotNull(charArray1);
      assertEquals(8, charArray0.length);
      assertEquals(7, charArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'J';
      intArray0[1] = (int) '\'';
      intArray0[2] = (int) '8';
      intArray0[3] = (int) 'L';
      intArray0[4] = (int) '8';
      intArray0[5] = 1549;
      intArray0[6] = 0;
      intArray0[7] = (int) 'o';
      // Undeclared exception!
      try { 
        ArrayUtils.remove(intArray0, 56);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 56, Length: 8
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1493()  throws Throwable  {
      float[] floatArray0 = new float[6];
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (short)13, (int) (short)13);
      assertEquals((-1), int0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1494()  throws Throwable  {
      short[] shortArray0 = new short[2];
      ArrayUtils.shift(shortArray0, (int) (short)0);
      assertArrayEquals(new short[] {(short)0, (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2401.0F);
      // Undeclared exception!
      try { 
        ArrayUtils.insert(51, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1495()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[1] = (-521.9F);
      int[] intArray0 = new int[9];
      intArray0[0] = 2868;
      intArray0[1] = 2868;
      intArray0[2] = (-1);
      intArray0[3] = 2491;
      intArray0[4] = 220;
      intArray0[5] = 10;
      intArray0[6] = 1;
      intArray0[7] = 2375;
      intArray0[8] = 730;
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {2868, 2868, (-1), 2491, 220, 10, 1, 2375, 730}, intArray0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        ArrayUtils.insert(220, floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 220, Length: 7
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1496()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte) (-110);
      floatArray0[1] = (float) (-2145699191);
      floatArray0[2] = (float) (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2145699191), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2145699191, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1497()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3048);
      floatArray0[1] = (float) (-3048);
      floatArray0[2] = (float) (-3048);
      floatArray0[3] = (float) (-3048);
      floatArray0[4] = (float) (-3048);
      floatArray0[5] = (float) (-3048);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3048), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3048, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1498()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.removeAllOccurences(booleanArray0, true);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(6, booleanArray0.length);
      assertEquals(4, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1499()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1500()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
      assertTrue(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      
      int int0 = (-3048);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3048);
      floatArray0[1] = (float) (-3048);
      floatArray0[2] = (float) (-3048);
      floatArray0[3] = (float) (-3048);
      floatArray0[4] = (float) (-3048);
      floatArray0[5] = (float) (-3048);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-3048), floatArray0, floatArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3048, Length: 6
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1501()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-157);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2);
      assertEquals((-1), int0);
      assertArrayEquals(new short[] {(short) (-157)}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      int int1 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short) (-157));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      
      ArrayUtils.shift(booleanArray0, 753);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertEquals(4, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1502()  throws Throwable  {
      ArrayUtils.shift((int[]) null, 1);
  }

  @Test(timeout = 4000)
  public void test1503()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = true;
      ArrayUtils.lastIndexOf(booleanArray0, true, 758);
      ArrayUtils.shift(booleanArray0, 1309);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1504()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1194));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1505()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2542.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 27.0F;
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      ArrayUtils.reverse(intArray0, Integer.MAX_VALUE, 88);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) Integer.MAX_VALUE;
      longArray0[1] = (long) Integer.MAX_VALUE;
      longArray0[2] = (long) 1;
      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-926);
      shortArray0[1] = (short) (-926);
      shortArray0[2] = (short) (-1);
      boolean[] booleanArray2 = ArrayUtils.subarray(booleanArray1, (-2968), (-1501));
      assertEquals(0, booleanArray2.length);
      
      ArrayUtils.clone(longArray0);
      ArrayUtils.reverse(booleanArray1, Integer.MAX_VALUE, 88);
      assertEquals(4, booleanArray1.length);
      
      ArrayUtils.shift(floatArray0, 172);
      assertArrayEquals(new float[] {2542.0F, 0.0F, 27.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1506()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'S';
      charArray0[2] = 'W';
      int int0 = ArrayUtils.indexOf(charArray0, 'Z', (int) (short) (-3155));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1507()  throws Throwable  {
      ArrayUtils.shift((float[]) null, 1841);
  }

  @Test(timeout = 4000)
  public void test1508()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-42));
      Byte byte1 = new Byte((byte) (-42));
      byte byte2 = (byte) (-70);
      Byte byte3 = new Byte((byte)0);
      Byte byte4 = new Byte((byte) (-52));
      Byte byte5 = new Byte((byte) (-12));
      Byte byte6 = new Byte((byte) (-52));
      Byte byte7 = new Byte((byte) (-70));
      Byte[] byteArray0 = new Byte[2];
      byteArray0[0] = byte0;
      byteArray0[1] = byte7;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.isSorted(booleanArray1);
      ArrayUtils.shift((Object[]) byteArray1, (-1380), (int) (byte) (-12), (int) (byte)0);
      ArrayUtils.swap((float[]) null, (int) (byte) (-52), 1304);
      float[] floatArray0 = ArrayUtils.nullToEmpty((float[]) null);
      assertNotNull(floatArray0);
      
      ArrayUtils.removeAllOccurences((boolean[]) null, false);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) byte2;
      longArray0[1] = (long) byte2;
      longArray0[2] = (long) byte2;
      longArray0[3] = (long) (byte)0;
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(4, longArray1.length);
      assertNotNull(longArray1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'n';
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '%');
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1509()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'N';
      ArrayUtils.removeElement(charArray0, 'w');
      ArrayUtils.shift((float[]) null, 0);
      Byte byte0 = new Byte((byte)0);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'N';
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1510()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = ArrayUtils.contains(charArray0, '\u0000');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1511()  throws Throwable  {
      char[] charArray0 = new char[1];
      char[] charArray1 = ArrayUtils.removeElement(charArray0, '\u0000');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1512()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-2363), intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2363, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1513()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = ArrayUtils.addFirst(intArray0, 3216);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3216, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1514()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[2];
      intArray1[0] = (-598);
      intArray1[1] = (-598);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-598), intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -598, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1515()  throws Throwable  {
      ArrayUtils.isEmpty((byte[]) null);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 325);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 325, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1516()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.remove((double[]) null, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1517()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        ArrayUtils.remove(longArray0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1518()  throws Throwable  {
      float[] floatArray0 = new float[3];
      MockRandom mockRandom0 = new MockRandom(0L);
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1519()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1520()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 0, 0, 0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[3] = (-771.1927F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1521()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, (-2703), (-2703), (-2703));
      Random.setNextRandom((-2771));
  }

  @Test(timeout = 4000)
  public void test1522()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 670.0F;
      floatArray0[1] = 95.3591F;
      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2109.636F));
      assertEquals((-1), int0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-232), (-1627));
      assertEquals(0, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test1523()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.swap(booleanArray0, 0, 0, 0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-771.1927F);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1524()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 51;
      intArray0[2] = (-1);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((byte[]) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 51, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1525()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.lastIndexOf(byteArray0, (byte)23, (int) (byte)23);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)46;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Boolean.valueOf(false);
      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
      assertNull(booleanArray0);
  }

  @Test(timeout = 4000)
  public void test1526()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)46;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)46;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (int) (byte)46;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = (int) (byte)46;
      ArrayUtils.shuffle(intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1527()  throws Throwable  {
      int[] intArray0 = new int[16];
      ArrayUtils.shuffle(intArray0);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);
      assertEquals(2, byteArray1.length);
      
      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);
      assertEquals(15, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1528()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1529()  throws Throwable  {
      float[] floatArray0 = new float[0];
      int[] intArray0 = new int[2];
      intArray0[0] = (-12);
      intArray0[1] = (-12);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(floatArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -12, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1530()  throws Throwable  {
      int[] intArray0 = new int[4];
      ArrayUtils.shuffle(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1531()  throws Throwable  {
      int[] intArray0 = new int[13];
      float[] floatArray0 = new float[16];
      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);
      assertEquals(15, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1532()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)46;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      Byte[] byteArray1 = new Byte[0];
      byte[] byteArray2 = ArrayUtils.toPrimitive(byteArray1, (byte)0);
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1533()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      ArrayUtils.lastIndexOf(charArray0, 'H', 2);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test1534()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(504);
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 504);
      assertArrayEquals(new int[] {504}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1535()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'L';
      charArray0[1] = '6';
      charArray0[2] = 'e';
      charArray0[3] = '/';
      charArray0[4] = ' ';
      charArray0[5] = '6';
      charArray0[6] = 'L';
      charArray0[7] = 'j';
      ArrayUtils.lastIndexOf(charArray0, 'E');
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1);
      BitSet bitSet0 = ArrayUtils.indexesOf(shortArray0, (short)2, (int) (short)2);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1536()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) Integer.MAX_VALUE;
      objectArray0[1] = (Object) Integer.MAX_VALUE;
      objectArray0[2] = (Object) Integer.MAX_VALUE;
      int int0 = ArrayUtils.lastIndexOf((char[]) null, 'H', 1215);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, Integer.MAX_VALUE, 114);
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1537()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[0] = (short)1117;
      shortArray0[1] = (short) (-3155);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, (-4432));
      byte[] byteArray0 = new byte[0];
      int int1 = ArrayUtils.lastIndexOf(byteArray0, (byte)27);
      assertTrue(int1 == int0);
      
      ArrayUtils.swap(byteArray0, (-1327), (-1327));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) (-1327);
      doubleArray0[2] = (double) (short)10;
      ArrayUtils.swap(doubleArray0, (-1327), (-1327));
      assertArrayEquals(new double[] {17.0, (-1327.0), 10.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1538()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-3173));
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {(-3173)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test1539()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'H', (int) 'H');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1540()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 0;
      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);
      assertFalse(boolean0);
      
      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1), (-11));
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1541()  throws Throwable  {
      long[] longArray0 = ArrayUtils.addFirst((long[]) null, 1903L);
      assertArrayEquals(new long[] {1903L}, longArray0);
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test1542()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      ArrayUtils.add(byteArray0, byteArray0[0]);
      Integer integer0 = new Integer(1070);
      assertEquals(1070, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1543()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)2;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((short)2);
      integerArray0[0] = integer0;
      Integer.getInteger("~T-$7pDpu_");
      integerArray0[1] = null;
      Integer integer1 = new Integer((short)2);
      integerArray0[2] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer2;
      ArrayUtils.toPrimitive(integerArray0, (int) (short)2);
      Byte byte0 = new Byte((byte) (-95));
      assertEquals((byte) (-95), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test1544()  throws Throwable  {
      ArrayUtils.swap((double[]) null, 0, 1841);
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      assertArrayEquals(new int[] {1841}, intArray0);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)integerArray0[0];
      long[] longArray1 = ArrayUtils.add(longArray0, 0L);
      assertArrayEquals(new long[] {1841L, 0L}, longArray1);
      
      ArrayUtils.indexesOf(longArray0, (-590L), 1841);
      char[] charArray0 = new char[7];
      charArray0[0] = ' ';
      charArray0[1] = 'E';
      charArray0[2] = '3';
      charArray0[3] = 'i';
      charArray0[4] = 'y';
      charArray0[5] = 'X';
      charArray0[6] = ':';
      int int0 = ArrayUtils.lastIndexOf(charArray0, ' ', 320);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1545()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1546()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-142);
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      boolean[] booleanArray0 = new boolean[0];
      ArrayUtils.toObject(booleanArray0);
      float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_ARRAY;
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1547()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-143);
      intArray0[2] = 0;
      intArray0[3] = 3025;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertEquals(4, integerArray0.length);
      assertNotNull(integerArray0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.ints(0, 4640);
      ArrayUtils.shuffle(booleanArray0, (java.util.Random) mockRandom0);
      assertTrue(Arrays.equals(new boolean[] {false, true}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1548()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1549()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1550()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSorted((byte[]) null);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      boolean boolean1 = ArrayUtils.isEmpty(booleanArray0);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = ArrayUtils.addFirst((byte[]) null, (byte) (-10));
      assertArrayEquals(new byte[] {(byte) (-10)}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1551()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[10];
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      ArrayUtils.shift(booleanArray0, 1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
  }

  @Test(timeout = 4000)
  public void test1552()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      ArrayUtils.toObject(booleanArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      ArrayUtils.isEmpty(longArray0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0L;
      ArrayUtils.isSameLength(objectArray0, objectArray0);
      ArrayUtils.shuffle(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)21;
      byte[] byteArray1 = ArrayUtils.addFirst(byteArray0, (byte)43);
      assertArrayEquals(new byte[] {(byte)43, (byte)57, (byte) (-81), (byte)21}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1553()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = 'I';
      charArray0[2] = '=';
      ArrayUtils.shift(charArray0, (int) (short)1, 1301, (-1));
      assertArrayEquals(new char[] {'>', '=', 'I'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      boolean[] booleanArray1 = ArrayUtils.insert((int) (short)1, booleanArray0, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, false, true, true, true, false}, booleanArray1));
  }

  @Test(timeout = 4000)
  public void test1554()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertEquals(2, booleanArray1.length);
      assertNotNull(booleanArray1);
  }

  @Test(timeout = 4000)
  public void test1555()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 110;
      ArrayUtils.lastIndexOf(longArray0, (-742L), 0);
      int[] intArray0 = new int[9];
      int[] intArray1 = ArrayUtils.EMPTY_INT_ARRAY;
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1556()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert(242, booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 242, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1557()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'p';
      longArray0[1] = (long) 'F';
      longArray0[2] = (long) 'G';
      longArray0[3] = 1L;
      longArray0[4] = (long) 'Z';
      longArray0[5] = (long) 'F';
      longArray0[6] = (long) 'Z';
      longArray0[7] = (long) 'p';
      longArray0[8] = (long) 'G';
      int int0 = ArrayUtils.lastIndexOf(longArray0, 1L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test1558()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      ArrayUtils.swap(booleanArray0, (int) (byte)0, (int) (byte)0, 2);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) 0;
      ArrayUtils.subarray(floatArray0, (int) (byte)46, 307);
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null, class0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1559()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArrayUtils.addAll(byteArray0, byteArray0);
      Byte[] byteArray1 = new Byte[0];
      // Undeclared exception!
      try { 
        ArrayUtils.nullToEmpty(byteArray1, (Class<Byte[]>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1560()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      // Undeclared exception!
      try { 
        ArrayUtils.insert((-142), booleanArray0, booleanArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -142, Length: 1
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1561()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, false);
      assertNotNull(booleanArray1);
      assertEquals(1, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1562()  throws Throwable  {
      double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      Short[] shortArray0 = new Short[0];
      long[] longArray0 = new long[0];
      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1563()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
      assertNotNull(byteArray1);
      
      Class<Byte[]> class0 = Byte[].class;
      Byte[] byteArray2 = ArrayUtils.nullToEmpty(byteArray1, class0);
      assertSame(byteArray2, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1564()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      boolean[] booleanArray1 = ArrayUtils.addFirst(booleanArray0, true);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, true}, booleanArray1));
      assertNotNull(booleanArray1);
      
      Byte[] byteArray0 = new Byte[1];
      byte byte0 = (byte)103;
      Byte byte1 = new Byte((byte)103);
      byteArray0[0] = byte1;
      Class<Byte[]> class0 = Byte[].class;
      ArrayUtils.nullToEmpty(byteArray0, class0);
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)103;
      longArray0[1] = (long) byte0;
      longArray0[2] = (long) byte0;
      longArray0[3] = (long) byte0;
      longArray0[4] = (long) (byte)103;
      longArray0[5] = (long) byte0;
      longArray0[6] = (long) (byte)103;
      int int0 = ArrayUtils.lastIndexOf(longArray0, 598L);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1565()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1398);
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1398));
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test1566()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1567()  throws Throwable  {
      char[] charArray0 = new char[4];
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      int int0 = ArrayUtils.lastIndexOf(intArray0, (-1657), 0);
      assertEquals((-1), int0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'J');
      assertArrayEquals(new char[] {'J', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1568()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);
      assertArrayEquals(new short[] {}, shortArray1);
  }

  @Test(timeout = 4000)
  public void test1569()  throws Throwable  {
      int[] intArray0 = new int[7];
      ArrayUtils.toObject(intArray0);
      ArrayUtils.lastIndexOf(intArray0, 1064);
      short[] shortArray0 = ArrayUtils.insert((-1), (short[]) null, (short[]) null);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test1570()  throws Throwable  {
      char[] charArray0 = new char[4];
      ArrayUtils.shuffle(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1571()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = ArrayUtils.lastIndexOf(charArray0, 'o');
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (-3074);
      shortArray0[2] = (short)1204;
      shortArray0[3] = (short)720;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short) (-3074);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)0;
      ArrayUtils.isEmpty(shortArray0);
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)0);
      int[] intArray0 = new int[0];
      int int1 = ArrayUtils.lastIndexOf(intArray0, (int) (short)1635, (-364));
      assertTrue(int1 == int0);
      
      boolean boolean0 = ArrayUtils.isEmpty(shortArray1);
      assertArrayEquals(new short[] {(short) (-3074), (short)1204, (short)720, (short)0, (short) (-3074), (short)0, (short)0}, shortArray1);
      assertFalse(boolean0);
      
      char[] charArray1 = ArrayUtils.addFirst(charArray0, 'G');
      assertArrayEquals(new char[] {'G'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1572()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayUtils.addFirst(charArray0, '\u0000');
      assertNotNull(charArray1);
      assertEquals(4, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1573()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) 'M';
      intArray0[1] = 59;
      intArray0[2] = (int) 'M';
      ArrayUtils.lastIndexOf(intArray0, (-1249));
      Byte byte0 = new Byte((byte) (-115));
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-115);
      shortArray0[1] = (short) (byte) (-115);
      ArrayUtils.isSorted(shortArray0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      ArrayUtils.shift(booleanArray0, (int) (short) (-115));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-115);
      ArrayUtils.addAll(byteArray0, byteArray0);
      ArrayUtils.lastIndexOf(intArray0, 3132);
      ArrayUtils.lastIndexOf(intArray0, (-491), (-1683));
      Short[] shortArray1 = new Short[0];
      Short[] shortArray2 = ArrayUtils.nullToEmpty(shortArray1);
      assertNotSame(shortArray1, shortArray2);
  }

  @Test(timeout = 4000)
  public void test1574()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.isNotEmpty(intArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (-176L);
      longArray0[1] = (-1L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-176L);
      floatArray0[1] = (float) (-176L);
      ArrayUtils.isSorted(floatArray0);
      Byte byte0 = new Byte((byte) (-110));
      Byte byte1 = new Byte((byte) (-99));
      ArrayUtils.shift((char[]) null, (-297), (-2147171937), (-668));
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte) (-110);
      shortArray0[1] = (short) (byte) (-99);
      shortArray0[2] = (short) (byte) (-99);
      shortArray0[3] = (short) (byte) (-110);
      shortArray0[4] = (short) (byte) (-110);
      ArrayUtils.shift(shortArray0, (-1557));
      assertArrayEquals(new short[] {(short) (-99), (short) (-110), (short) (-110), (short) (-110), (short) (-99)}, shortArray0);
      
      char[] charArray0 = ArrayUtils.addFirst((char[]) null, 'o');
      assertArrayEquals(new char[] {'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1575()  throws Throwable  {
      long[] longArray0 = new long[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, (-1L));
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1576()  throws Throwable  {
      long[] longArray0 = new long[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 64L);
      assertEquals(0, bitSet0.length());
  }

  @Test(timeout = 4000)
  public void test1577()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1985L;
      longArray0[1] = 105L;
      longArray0[2] = 1403L;
      longArray0[3] = (-1564L);
      longArray0[4] = (-344L);
      BitSet bitSet0 = ArrayUtils.indexesOf(longArray0, 2316L, 0);
      assertEquals(0, bitSet0.cardinality());
  }

  @Test(timeout = 4000)
  public void test1578()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      boolean[] booleanArray1 = ArrayUtils.EMPTY_BOOLEAN_ARRAY;
      ArrayUtils.isSorted(booleanArray0);
      ArrayUtils.hashCode((Object) byteArray0[4]);
  }

  @Test(timeout = 4000)
  public void test1579()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte) (-110);
      intArray0[2] = (int) (byte) (-110);
      ArrayUtils.subarray(intArray0, (-110), (-110));
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-110);
      ArrayUtils.contains((char[]) null, 'Q');
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      boolean[] booleanArray1 = new boolean[1];
      booleanArray1[0] = false;
      ArrayUtils.removeElements(booleanArray0, booleanArray1);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-110);
      floatArray0[1] = (float) (-110);
      ArrayUtils.shift(floatArray0, 2, (-1093), (-110));
      assertArrayEquals(new float[] {(-110.0F), (-110.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1580()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1396.4706F;
      Byte byte0 = new Byte((byte)120);
      Byte byte1 = new Byte((byte)120);
      Byte byte2 = new Byte((byte)120);
      Byte byte3 = new Byte((byte) (-53));
      Byte byte4 = new Byte((byte)84);
      Byte byte5 = new Byte((byte)112);
      Byte byte6 = new Byte((byte) (-46));
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte4;
      byteArray0[1] = byte4;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte3;
      ArrayUtils.toArray(byteArray0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      ArrayUtils.removeElements(booleanArray0, booleanArray0);
      ArrayUtils.isSorted(booleanArray0);
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.subarray(intArray0, 2122, (-249));
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test1581()  throws Throwable  {
      ArrayUtils.shift((int[]) null, (-1194));
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'x';
      charArray0[2] = '&';
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      
      ArrayUtils.reverse((byte[]) null);
      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)1);
      assertNotNull(byteArray0);
      assertEquals(1, byteArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'x';
      doubleArray0[1] = (double) 'x';
      doubleArray0[2] = (double) '&';
      doubleArray0[3] = (double) 'x';
      doubleArray0[4] = (double) 'I';
      doubleArray0[5] = (double) '&';
      doubleArray0[6] = (double) 'I';
      ArrayUtils.shift(doubleArray0, (-719));
      assertArrayEquals(new double[] {38.0, 73.0, 120.0, 120.0, 38.0, 120.0, 73.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1582()  throws Throwable  {
      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);
      assertNull(booleanArray0);
      
      boolean boolean0 = ArrayUtils.isSorted((boolean[]) null);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)99;
      ArrayUtils.reverse(byteArray0);
      assertArrayEquals(new byte[] {(byte)99, (byte)83, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1583()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1584()  throws Throwable  {
      byte byte0 = (byte) (-69);
      Byte byte1 = new Byte((byte) (-69));
      Byte[] byteArray0 = new Byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte1;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      Byte[] byteArray1 = ArrayUtils.toArray(byteArray0);
      Byte byte2 = new Byte(byte0);
      // Undeclared exception!
      try { 
        ArrayUtils.add(byteArray1, (int) byte0, byte2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -69, Length: 5
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1585()  throws Throwable  {
      Byte[] byteArray0 = new Byte[5];
      byte byte0 = (byte) (-126);
      Byte byte1 = new Byte((byte) (-126));
      byteArray0[0] = byte1;
      Byte byte2 = new Byte(byte0);
      byteArray0[1] = byte2;
      byte byte3 = (byte)91;
      Byte byte4 = new Byte((byte)91);
      byteArray0[2] = byte4;
      byte byte5 = (byte)97;
      Byte byte6 = new Byte((byte)97);
      byteArray0[3] = byte6;
      Byte byte7 = new Byte((byte)91);
      byteArray0[4] = byte7;
      ArrayUtils.toArray(byteArray0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
      
      boolean boolean0 = ArrayUtils.isSorted(booleanArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = byte0;
      byteArray1[1] = (byte) (-126);
      byteArray1[2] = byte5;
      byteArray1[3] = (byte)97;
      byteArray1[4] = byte0;
      byteArray1[5] = byte0;
      byteArray1[6] = byte0;
      byteArray1[7] = byte3;
      byteArray1[8] = (byte) (-126);
      ArrayUtils.reverse(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-126), (byte)91, (byte) (-126), (byte) (-126), (byte) (-126), (byte)97, (byte)97, (byte) (-126), (byte) (-126)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1586()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte[] byteArray0 = ArrayUtils.add((Byte[]) null, byte0);
      ArrayUtils.swap((Object[]) byteArray0, (int) (byte)0, (-2781), (int) (byte)0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1587()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-66.5F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 468.13F;
      floatArray0[5] = 1182.6206F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 2142.077F;
      floatArray0[8] = (-1.0F);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextGaussian();
      ArrayUtils.shuffle(floatArray0, (java.util.Random) mockRandom0);
      Byte byte0 = new Byte((byte)104);
      Object object0 = ArrayUtils.toPrimitive((Object) byte0);
      assertEquals((byte)104, object0);
  }

  @Test(timeout = 4000)
  public void test1588()  throws Throwable  {
      float[] floatArray0 = new float[7];
      ArrayUtils.shift(floatArray0, 94);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      ArrayUtils.swap(floatArray0, (-1301), (-1301), 973);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test1589()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[6] = '=';
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1590()  throws Throwable  {
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.valueOf("Cannot store ");
      booleanArray0[0] = boolean0;
      Boolean boolean1 = Boolean.valueOf((boolean) boolean0);
      booleanArray0[1] = boolean1;
      ArrayUtils.toPrimitive(booleanArray0, false);
      ArrayUtils.swap((Object[]) booleanArray0, (-2761), (-2761), Integer.MAX_VALUE);
      assertEquals(2, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test1591()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.lastIndexOf(charArray0, 'o');
      ArrayUtils.isSorted(charArray0);
      Object object0 = new Object();
      ArrayUtils.swap((Object[]) null, (-1), 1596, 0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1596;
      ArrayUtils.swap(floatArray0, 358, 14);
      ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.removeAllOccurences((boolean[]) null, false);
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1592()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      char[] charArray0 = new char[2];
      boolean boolean0 = ArrayUtils.isSorted(charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1593()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-143);
      intArray0[2] = 0;
      intArray0[3] = 3025;
      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
      assertNotNull(integerArray0);
      
      Object object0 = new Object();
      ArrayUtils.swap((Object[]) integerArray0, 3025, (-2337), (-2337));
      assertEquals(4, integerArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2258.5723F);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-2258.5723F);
      floatArray0[4] = (float) (-2337);
      floatArray0[5] = (float) 0;
      floatArray0[6] = 1.0F;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) (-2337);
      ArrayUtils.swap(floatArray0, (-4378), 0);
      assertArrayEquals(new float[] {(-2258.5723F), 0.0F, 0.0F, (-2258.5723F), (-2337.0F), 0.0F, 1.0F, 0.0F, (-2337.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1594()  throws Throwable  {
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      char[] charArray0 = new char[7];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '~';
      charArray0[6] = '~';
      char[] charArray1 = ArrayUtils.EMPTY_CHAR_ARRAY;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '~';
      doubleArray0[1] = 0.1;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
      String[] stringArray0 = ArrayUtils.toStringArray((Object[]) doubleArray1);
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte)0, (int) (byte)105);
      byte[] byteArray2 = ArrayUtils.addAll(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)105, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test1595()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test1596()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.isSorted(charArray0);
      Object object0 = new Object();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1596;
      ArrayUtils.swap(floatArray0, 358, 14);
      ArrayUtils.nullToEmpty(floatArray0);
      ArrayUtils.removeAllOccurences((boolean[]) null, false);
      long[] longArray0 = new long[0];
      Long[] longArray1 = ArrayUtils.toObject(longArray0);
      assertEquals(0, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1597()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = ArrayUtils.addFirst(floatArray0, 0.0F);
      assertNotNull(floatArray1);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1598()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ArrayUtils.shift(objectArray0, (-1199), 2083, 2083);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1599()  throws Throwable  {
      ArrayUtils.isArrayIndexValid((Byte[]) null, 0);
      byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-1500), 0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1600()  throws Throwable  {
      Object object0 = new Object();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1601()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = ArrayUtils.toPrimitive(object0);
      assertSame(object1, object0);
  }

  @Test(timeout = 4000)
  public void test1602()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Object object0 = ArrayUtils.toPrimitive((Object) byte1);
      objectArray0[0] = object0;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) byte1, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1603()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-588), 2623, 2623);
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1604()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = '6';
      charArray0[2] = ' ';
      ArrayUtils.shift(charArray0, 0, 1, (-2146916307));
      ArrayUtils.toPrimitive((Double[]) null, (double) 0);
      char[] charArray1 = ArrayUtils.remove(charArray0, 1);
      assertArrayEquals(new char[] {'B', ' '}, charArray1);
  }

  @Test(timeout = 4000)
  public void test1605()  throws Throwable  {
      char[] charArray0 = new char[11];
      charArray0[6] = '=';
      ArrayUtils.shift(charArray0, (int) (byte)0, (int) '=', (int) (byte)0);
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1606()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayUtils.shift(charArray0, (int) (byte) (-5), 46, (int) (byte) (-5));
      Character[] characterArray0 = ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY;
      assertEquals(0, characterArray0.length);
  }

  @Test(timeout = 4000)
  public void test1607()  throws Throwable  {
      ArrayUtils.removeElements((long[]) null, (long[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '<';
      charArray0[2] = '7';
      ArrayUtils.shift(charArray0, 281, 1018, 1018);
      assertArrayEquals(new char[] {'Q', '<', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1608()  throws Throwable  {
      char[] charArray0 = new char[0];
      ArrayUtils.shift(charArray0, (-1181), (-1181), (-1181));
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test1609()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(1841);
      integerArray0[0] = integer0;
      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (int)integerArray0[0];
      Byte byte0 = new Byte((byte) (-40));
      ArrayUtils.indexesOf(intArray0, 1841);
      ArrayUtils.clone(longArray0);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.insert(1841, byteArray0, byteArray0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1610()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-32.6489F);
      floatArray0[1] = (float) '&';
      ArrayUtils.isSorted(floatArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-118);
      // Undeclared exception!
      try { 
        ArrayUtils.insert((int) (byte) (-110), byteArray0, byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -110, Length: 3
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1611()  throws Throwable  {
      ArrayUtils.insert(176, (byte[]) null, (byte[]) null);
      int int0 = ArrayUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1612()  throws Throwable  {
      long[] longArray0 = new long[3];
      ArrayUtils.isSameLength((char[]) null, (char[]) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1613()  throws Throwable  {
      ArrayUtils.insert(176, (byte[]) null, (byte[]) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '&';
      charArray0[2] = 'g';
      charArray0[3] = ' ';
      charArray0[4] = 'I';
      charArray0[5] = 'z';
      charArray0[6] = 'x';
      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1614()  throws Throwable  {
      Integer integer0 = new Integer((short) (-3155));
      Long long0 = new Long((-1L));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2854.2974F;
      doubleArray0[1] = (double) (-1L);
      ArrayUtils.lastIndexOf(doubleArray0, (double) (-1L));
      Object[] objectArray0 = new Object[0];
      ArrayUtils.shift(objectArray0, (int) (short) (-3155), (int) (short) (-3155), (-1272));
      char[] charArray0 = new char[0];
  }

  @Test(timeout = 4000)
  public void test1615()  throws Throwable  {
      short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
      assertNull(shortArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2001.6596747957112;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2001.6596747957112;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1759.822617);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1616()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      BitSet bitSet0 = ArrayUtils.indexesOf(doubleArray0, 0.0, 0.0);
      assertEquals("{0, 1, 2, 3, 4}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1617()  throws Throwable  {
      Long long0 = new Long((-1L));
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (short)0;
      ArrayUtils.lastIndexOf(doubleArray0, 2815.38837559704);
      ArrayUtils.swap((byte[]) null, (int) (byte) (-49), 2);
  }

  @Test(timeout = 4000)
  public void test1618()  throws Throwable  {
      ArrayUtils.removeElements((long[]) null, (long[]) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 19.0975334026665;
      ArrayUtils.lastIndexOf(doubleArray0, 1.5, 2146466955);
      ArrayUtils.shift((long[]) null, (-1));
  }

  @Test(timeout = 4000)
  public void test1619()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-1503);
      shortArray0[2] = (short)0;
      shortArray0[3] = (short) (-1);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)2, 0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short) (-1503);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (double) (short)2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (short) (-1);
      doubleArray0[6] = 2001.6596747957112;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (short)1;
      int int1 = ArrayUtils.lastIndexOf(doubleArray0, (double) (short) (-1));
      assertEquals(5, int1);
  }

  @Test(timeout = 4000)
  public void test1620()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = ArrayUtils.contains(intArray0, 1274);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1621()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 11;
      intArray0[1] = 4;
      intArray0[2] = (-598);
      intArray0[3] = (-2138640336);
      intArray0[4] = 27;
      intArray0[5] = (-3396);
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 104);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {11, 4, (-598), (-2138640336), 27, (-3396)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1622()  throws Throwable  {
      char[] charArray0 = new char[24];
      charArray0[1] = '}';
      char[] charArray1 = ArrayUtils.removeAllOccurrences(charArray0, '}');
      assertEquals(23, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test1623()  throws Throwable  {
      int[] intArray0 = new int[1];
      BitSet bitSet0 = ArrayUtils.indexesOf(intArray0, 0);
      assertEquals("{0}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1624()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = ArrayUtils.insert(0, intArray0, intArray0);
      int[] intArray2 = ArrayUtils.removeAllOccurences(intArray1, 0);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertEquals(8, intArray1.length);
      
      boolean boolean0 = ArrayUtils.contains((double[]) null, (double) (-1670), (double) (-1670));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1625()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 409;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 127;
      intArray0[5] = (-2450);
      intArray0[6] = 0;
      intArray0[7] = Integer.MAX_VALUE;
      intArray0[8] = 0;
      int[] intArray1 = ArrayUtils.removeAllOccurences(intArray0, 0);
      assertArrayEquals(new int[] {409, (-1), 127, (-2450), Integer.MAX_VALUE}, intArray1);
  }

  @Test(timeout = 4000)
  public void test1626()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ArrayUtils.lastIndexOf(byteArray0, (byte)46, (int) (byte)0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte)0;
      ArrayUtils.isSameLength(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      ArrayUtils.shuffle(intArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(byteArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Length: 2
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1627()  throws Throwable  {
      char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1628()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test1629()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1630()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 2385;
      intArray0[1] = 2385;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll((Object) null, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2385, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1631()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      Object object0 = new Object();
      objectArray1[0] = object0;
      Object object1 = ArrayUtils.get(objectArray1, 0);
      objectArray1[1] = object1;
      Object object2 = ArrayUtils.get(objectArray1, 0);
      objectArray1[2] = object2;
      int int0 = 0;
      Byte[] byteArray0 = new Byte[9];
      byte byte0 = (byte)62;
      Byte byte1 = new Byte((byte)62);
      byteArray0[0] = byte1;
      byte byte2 = (byte)48;
      Byte byte3 = new Byte((byte)48);
      byteArray0[1] = byte3;
      Byte byte4 = new Byte(byte2);
      byteArray0[2] = byte4;
      Byte byte5 = new Byte(byte2);
      byteArray0[3] = byte5;
      String string0 = "";
      int int1 = 1117;
      try { 
        Byte.valueOf("", 1117);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1117 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1632()  throws Throwable  {
      Object object0 = new Object();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)114;
      BitSet bitSet0 = BitSet.valueOf(byteArray0);
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1633()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2653.15F);
      floatArray0[1] = (-1042.5F);
      floatArray0[2] = (-3313.8F);
      floatArray0[3] = 5107.489F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-3292.4055F);
      floatArray0[7] = 120.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, 5107.489F);
      assertArrayEquals(new float[] {(-2653.15F), (-1042.5F), (-3313.8F), (-1.0F), 1.0F, (-3292.4055F), 120.0F, 0.0F}, floatArray1, 0.01F);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);
      assertEquals(0, booleanArray1.length);
  }

  @Test(timeout = 4000)
  public void test1634()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ArrayUtils.get(objectArray0, 0);
      ArrayUtils.shift(objectArray0, 2146064984, 2146064984, 2167);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test1635()  throws Throwable  {
      ArrayUtils.get((AbstractMap.SimpleImmutableEntry<Byte, Byte>[]) null, 8);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test1636()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 6);
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(0, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1637()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ArrayUtils.get(objectArray0, 0);
      objectArray0[0] = null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      float[] floatArray0 = new float[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(floatArray0, (-5046.021F));
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(object0, bitSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1638()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-2523L));
      assertArrayEquals(new long[] {(-2523L), 0L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1639()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      char[] charArray0 = new char[0];
      Byte byte0 = new Byte((byte)32);
      char[] charArray1 = ArrayUtils.insert((int) (byte)32, charArray0, charArray0);
      assertNotNull(charArray1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      String[] stringArray0 = ArrayUtils.toStringArray(objectArray0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      long[] longArray1 = ArrayUtils.addFirst((long[]) null, 1L);
      assertArrayEquals(new long[] {1L}, longArray1);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1640()  throws Throwable  {
      long[] longArray0 = new long[1];
      boolean boolean0 = ArrayUtils.contains(longArray0, (-62L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1641()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayUtils.addFirst(longArray0, (-307L));
      assertNotNull(longArray1);
      assertArrayEquals(new long[] {(-307L)}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1642()  throws Throwable  {
      long[] longArray0 = new long[2];
      long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
      assertEquals(1, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test1643()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)120);
      assertArrayEquals(new byte[] {(byte)27, (byte)42, (byte)55, (byte)104, (byte) (-49), (byte)15, (byte)0}, byteArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)15;
      longArray0[1] = (long) (byte)27;
      longArray0[2] = (long) (byte)120;
      longArray0[3] = (long) (byte)104;
      long[] longArray1 = ArrayUtils.addFirst(longArray0, 338L);
      assertNotNull(longArray1);
      
      boolean boolean0 = ArrayUtils.contains(longArray1, 322L);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {338L, 15L, 27L, 120L, 104L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test1644()  throws Throwable  {
      int[] intArray0 = new int[0];
      ArrayUtils.removeAllOccurences(intArray0, 104);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 104;
      floatArray0[1] = (float) 104;
      ArrayUtils.shift(floatArray0, 3007);
      Byte byte0 = new Byte((byte)42);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0.0F;
      objectArray0[1] = (Object) 0.0F;
      ArrayUtils.shift(objectArray0, (-4455), (int) (byte)42, (-2146767077));
      ArrayUtils.swap((short[]) null, 2, 2, 1);
  }

  @Test(timeout = 4000)
  public void test1645()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1751;
      shortArray0[2] = (short)2;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1503;
      shortArray0[5] = (short)1356;
      ArrayUtils.swap(shortArray0, 2449, 687, 407);
      assertArrayEquals(new short[] {(short)0, (short)1751, (short)2, (short)0, (short)1503, (short)1356, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1646()  throws Throwable  {
      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);
      assertNull(longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
      ArrayUtils.indexesOf(doubleArray0, 0.0, 97, 1.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (float) 97;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 97;
      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.0F);
      float[] floatArray1 = new float[3];
      floatArray1[0] = 0.0F;
      floatArray1[2] = 1.0F;
      float[] floatArray2 = ArrayUtils.removeElement(floatArray1, (-2446.4F));
      assertNotNull(floatArray2);
      assertEquals(3, floatArray2.length);
      
      short[] shortArray0 = new short[0];
      ArrayUtils.shuffle(shortArray0, (java.util.Random) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-56);
      boolean boolean1 = ArrayUtils.contains(byteArray0, (byte)0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArrayUtils.isNotEmpty((long[]) null);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test1647()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);
      assertEquals(3, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test1648()  throws Throwable  {
      short[] shortArray0 = new short[11];
      ArrayUtils.shift(shortArray0, (-139));
      assertEquals(11, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test1649()  throws Throwable  {
      float[] floatArray0 = new float[7];
      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-573));
      assertEquals(0, int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) (-573);
      longArray0[3] = (long) (-573);
      longArray0[4] = (long) 0;
      longArray0[4] = (long) (-573);
      longArray0[6] = (long) 0;
      longArray0[7] = (-891L);
      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1650()  throws Throwable  {
      int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test1651()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);
      assertEquals(0, longArray1.length);
      assertNotNull(longArray1);
  }

  @Test(timeout = 4000)
  public void test1652()  throws Throwable  {
      int[] intArray0 = new int[6];
      ArrayUtils.shift(intArray0, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Length: 0
         //
         verifyException("org.apache.commons.lang3.ArrayUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1653()  throws Throwable  {
      short[] shortArray0 = new short[4];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1194);
      intArray0[1] = (-1194);
      intArray0[2] = (-1194);
      intArray0[3] = (-1194);
      intArray0[4] = (-1194);
      intArray0[5] = (-1194);
      intArray0[6] = (-1194);
      ArrayUtils.shift(intArray0, 2258);
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '&';
      ArrayUtils.isSameLength(charArray0, charArray0);
      ArrayUtils.swap(shortArray0, (-1194), (-1194));
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1654()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)4941;
      shortArray0[1] = (short) (-2490);
      shortArray0[2] = (short)12;
      short short0 = (short) (-3269);
      shortArray0[3] = (short) (-3269);
      shortArray0[4] = (short)2280;
      shortArray0[5] = (short) (-1);
      shortArray0[6] = (short)0;
      ArrayUtils.swap(shortArray0, 3256, 128);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3256;
      longArray0[1] = (long) (short)12;
      ArrayUtils.isNotEmpty(longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-3269);
      doubleArray0[1] = (double) 12L;
      doubleArray0[2] = (double) 3256L;
      doubleArray0[3] = (double) (short)12;
      // Undeclared exception!
      try { 
        ArrayUtils.removeAll(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test1655()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1174;
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1174);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1656()  throws Throwable  {
      short[] shortArray0 = new short[2];
      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)74);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1657()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)1045);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1658()  throws Throwable  {
      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1659()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)200;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1064;
      shortArray0[5] = (short) (-249);
      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);
      assertEquals(1, int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1660()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Object object0 = new Object();
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, object0);
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1661()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Object object0 = new Object();
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, object0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test1662()  throws Throwable  {
      Byte[] byteArray0 = new Byte[0];
      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1663()  throws Throwable  {
      Object object0 = new Object();
      boolean boolean0 = ArrayUtils.contains((Object[]) null, object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1664()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1665()  throws Throwable  {
      Object object0 = new Object();
      Byte[] byteArray0 = ArrayUtils.removeElement((Byte[]) null, object0);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test1666()  throws Throwable  {
      Byte[] byteArray0 = new Byte[3];
      Byte byte0 = new Byte((byte) (-94));
      byteArray0[0] = byte0;
      Byte byte1 = new Byte((byte) (-94));
      byteArray0[1] = byte1;
      Byte byte2 = new Byte((byte)0);
      byteArray0[2] = byte2;
      Byte byte3 = new Byte((byte)29);
      Byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (Object) byte3);
      assertEquals(3, byteArray1.length);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1667()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) (-38));
      assertNotNull(byteArray1);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1668()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = ArrayUtils.removeAllOccurrences(floatArray0, (float) 6);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test1669()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1670()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)4);
      assertEquals(0, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1671()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BitSet bitSet0 = ArrayUtils.indexesOf(byteArray0, (byte)11);
      assertEquals("{}", bitSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1672()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)0);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test1673()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byte[] byteArray1 = ArrayUtils.removeAllOccurences(byteArray0, (byte)106);
      assertArrayEquals(new byte[] {(byte)0, (byte)16}, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test1674()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength(object0, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test1675()  throws Throwable  {
      int[] intArray0 = new int[2];
      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1676()  throws Throwable  {
      Byte byte0 = new Byte((byte)11);
      // Undeclared exception!
      try { 
        ArrayUtils.isSameLength((Object) byte0, (Object) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Argument is not an array
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }
}
