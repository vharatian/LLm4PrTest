/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 24 08:50:01 GMT 2025
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0000()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = 32;
      StringUtils.substringAfterLast("", 32);
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      StringUtils.leftPad("!{/>:2=0&f", 32);
      charSequenceArray0[2] = (CharSequence) "                      !{/>:2=0&f";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "                      !{/>:2=0&f", 0, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0001()  throws Throwable  {
      int[] intArray0 = new int[1];
      StringUtils.join(intArray0, 'H');
      StringUtils.isNumeric("0");
      StringUtils.substringAfter("0", ".5N!e ZMy3h|&!IW");
  }

  @Test(timeout = 4000)
  public void test0002()  throws Throwable  {
      String string0 = "F)!jQ9PJ&";
      StringUtils.replaceChars("Illegal range. There's no way to get from %s to %s with a step of %s.", "Illegal range. There's no way to get from %s to %s with a step of %s.", "F)!jQ9PJ&");
      StringUtils.length("F))jQ)PJQjPjJjPPPPQjPJPPPPPPjPP");
      StringUtils.containsWhitespace("Illegal range. There's no way to get from %s to %s with a step of %s.");
      StringUtils.isAsciiPrintable("F)!jQ9PJ&");
      StringUtils.indexOfDifference((CharSequence) "F)!jQ9PJ&", (CharSequence) "F)!jQ9PJ&");
      StringUtils.getLevenshteinDistance((CharSequence) "Illegal range. There's no way to get from %s to %s with a step of %s.", (CharSequence) "Illegal range. There's no way to get from %s to %s with a step of %s.");
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 'S', 31, (-1));
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      Stack<Object> stack0 = new Stack<Object>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'B', 61, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(61) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0003()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = StringUtils.toRootUpperCase("J");
      assertEquals("J", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("A(NXT<6PFz", "J", stringArray0);
      assertEquals("JA(NXT<6PFz", string1);
      assertEquals(8, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("A(NXT<6PFz", "J");
      assertEquals("JA(NXT<6PFzJ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      // Undeclared exception!
      StringUtils.join(longArray0, '/', (-61300178), 102);
  }

  @Test(timeout = 4000)
  public void test0004()  throws Throwable  {
      String string0 = StringUtils.repeat("i[", 3668);
      assertNotNull(string0);
      
      String string1 = "|";
      String string2 = StringUtils.abbreviate("i[", "|", 3668, 3);
      assertEquals("i[", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '1';
      charArray0[2] = '2';
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0005()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("\r", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart("\r", ";|r!J9z\"#kLLkMgj");
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("...", 3285, "iA$/OJ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = '~';
      charArray0[2] = 'b';
      charArray0[3] = 'j';
      charArray0[4] = 'C';
      charArray0[5] = 'L';
      charArray0[6] = 'f';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string3, charArray0);
  }

  @Test(timeout = 4000)
  public void test0006()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("$I", '|');
      assertEquals("|$I|", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "org.apache.commons.lang3.CharSequenceUtils");
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("HK1`EVR'^h0sgG", 71, "meCSrCYx");
      assertEquals("meCSrCYxmeCSrCYxmeCSrCYxmeCSrCYxmeCSrCYxmeCSrCYxmeCSrCYxmHK1`EVR'^h0sgG", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("HK1`EVR'^h0sgG", 71);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "|$I|";
      objectArray0[3] = (Object) "meCSrCYx";
      objectArray0[4] = (Object) "|$I|";
      objectArray0[5] = (Object) "org.apache.commons.lang3.CharSequenceUtils";
      objectArray0[6] = (Object) "";
      String string4 = StringUtils.join(objectArray0, '|', 71, 71);
      assertEquals("", string4);
      assertEquals(7, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "", 14, (-1658));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfter((String) null, "qSZA`}");
      assertNull(string5);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "org.apache.commons.lang3.CharSequenceUtils", 71);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 14;
      floatArray0[2] = (float) '|';
      floatArray0[3] = (float) 14;
      String string6 = StringUtils.join(floatArray0, 'g', 71, (-1658));
      assertEquals("", string6);
      assertEquals(4, floatArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertArrayEquals(new float[] {(-1.0F), 14.0F, 124.0F, 14.0F}, floatArray0, 0.01F);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0007()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 89);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.repeat("Dp{gq", Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test0008()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.abbreviate("b\r", "b\r", (-653), 420);
      assertEquals("b\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("b\r");
      assertEquals("b", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0009()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(" ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", 10, "");
      assertEquals("          ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("          ", "", locale0);
      assertEquals(0, int0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 10;
      longArray0[4] = (long) 0;
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      // Undeclared exception!
      StringUtils.leftPad("", 65536, "");
  }

  @Test(timeout = 4000)
  public void test0010()  throws Throwable  {
      String string0 = StringUtils.repeat(".A-ZjLylvBDex", 3668);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.containsOnly((CharSequence) string0, string0);
  }

  @Test(timeout = 4000)
  public void test0011()  throws Throwable  {
      String string0 = StringUtils.chomp("\n\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("qFmQiLNZ=&", "*S8uI*lY+(gSG", "{/W:2=0&f");
      assertNull(string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "\n\n";
      objectArray0[1] = (Object) "*S8uI*lY+(gSG";
      objectArray0[2] = (Object) "\n\n";
      objectArray0[3] = (Object) "\n\n";
      String string2 = StringUtils.joinWith("\n\n", objectArray0);
      assertEquals("\n\n\n\n*S8uI*lY+(gSG\n\n\n\n\n\n\n\n", string2);
      assertEquals(4, objectArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("\n", "\n\n\n\n*S8uI*lY+(gSG\n\n\n\n\n\n\n\n");
      assertEquals(0.68, double0, 0.01);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("qFmQiLNZ=&"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "kjMR'C<bCzW%ega", 2002, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2002) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0012()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints(" ");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {32}, intArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("Cannot store ", " ");
      assertEquals("store", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0013()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "-_hrT.D}1nS4a4cJt9";
      charSequenceArray0[1] = (CharSequence) "-_hrT.D}1nS4a4cJt9";
      String string0 = StringUtils.substringAfter("-_hrT.D}1nS4a4cJt9", 1646);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("-_hrT.D}1nS4a4cJt9", 1646);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.isAsciiPrintable(string1);
  }

  @Test(timeout = 4000)
  public void test0014()  throws Throwable  {
      String string0 = StringUtils.center("m\"bt2v[X8az88WU", 16);
      assertEquals("m\"bt2v[X8az88WU ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'y';
      charArray0[1] = 'X';
      charArray0[2] = 'E';
      charArray0[3] = 'z';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "m\"bt2v[X8az88WU ", charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'y', 'X', 'E', 'z'}, charArray0);
      
      String string1 = StringUtils.rightPad("onExtensionC", 32, "m\"bt2v[X8az88WU");
      assertEquals("onExtensionCm\"bt2v[X8az88WUm\"bt2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "onExtensionC";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "onExtensionCm\"bt2v[X8az88WUm\"bt2";
      String string2 = StringUtils.joinWith("]wae9l", objectArray0);
      assertEquals(3, objectArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("m\"bt2v[X8az88WU ", "`j=a<b");
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize("onExtensionCm\"bt2v[X8az88WUm\"bt2");
      assertEquals("onExtensionCm\"bt2v[X8az88WUm\"bt2", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0015()  throws Throwable  {
      String string0 = StringUtils.rightPad("Cannot store ", 102, "o");
      assertEquals("Cannot store ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Cannot store ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", 102, 102);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny("Cannot store ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("o", "o");
      assertEquals("o", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("Cannot store ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo", "o", 89);
      assertEquals(99, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.startsWithAny("o", (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.substringAfterLast("t", (-1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast("M[\"j+EJU", 89);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringAfterLast("o", (-1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int2 = StringUtils.indexOfAny((CharSequence) "o", (CharSequence[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M[\"j+EJU";
      stringArray0[1] = "";
      stringArray0[2] = "M[\"j+EJU";
      stringArray0[3] = "o";
      stringArray0[4] = "t";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string5);
      assertEquals(5, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0016()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000\u0000", string0);
      assertEquals(2, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\u0000\u0000", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.chop("\u0000\u0000");
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("\u0000\u0000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0017()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string0 = StringUtils.truncate("T>^.B&L!ZI+D/_", 4, 1114111);
      assertEquals("B&L!ZI+D/_", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("B&L!ZI+D/_");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "T>^.B&L!ZI+D/_", (CharSequence) "B&L!ZI+D/_");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0018()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip(" ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = " ";
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
      
      String string2 = StringUtils.stripStart(" ", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0019()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ".A-ZjLylvBDex", (char[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank(".A-ZjLylvBDex");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(".A-ZjLylvBDex"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, ".A-ZjLylvBDex", 32, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(32) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0020()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apaLhe.commons.l)ng3.StringUtils", 111, 1);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'C', 0, (-1075));
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0021()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[7] = (byte)16;
      String string0 = StringUtils.chop("g2\n");
      assertEquals("g2", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("g2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0022()  throws Throwable  {
      String string0 = StringUtils.chop("g2\n");
      assertEquals("g2", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("g2\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0023()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\u0000", charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.chomp("\u0000");
      assertEquals("\u0000", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'j', 2627, 2627);
      assertEquals("", string2);
      assertEquals(0, intArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0024()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", ", (CharSequence) "");
      assertEquals(2, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", ", ", ", 2);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultIfEmpty(", ", ", ");
      assertEquals(", ", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ", ", (CharSequence) "", 2);
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.rightPad("", 76, '\\');
      assertEquals("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0025()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\n\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "\n\n");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStart("", "saW{8siS~JE5=*6Vx");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0026()  throws Throwable  {
      String string0 = "S|A~uIl";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", ">m5o^z;xoP$*yboS@~a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0027()  throws Throwable  {
      String string0 = StringUtils.stripAccents("maxWith cannot be negativemaxWith cannot be negative");
      assertEquals("maxWith cannot be negativemaxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("maxWith cannot be negativemaxWith cannot be negative", "maxWith cannot be negativemaxWith cannot be negative");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", 8192);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.deleteWhitespace("maxWith cannot be negativemaxWith cannot be negative");
      assertEquals("maxWithcannotbenegativemaxWithcannotbenegative", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("BPmC*sjJ.gth M]oi0\"", charset0);
      assertEquals(19, byteArray0.length);
      assertNotNull(byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String string4 = StringUtils.rightPad("Mx/{)|wUmm4|,?+=%n^", (-1467), "maxWith cannot be negative");
      assertEquals("Mx/{)|wUmm4|,?+=%n^", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0028()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.center("<GZk3", 206, '|');
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||<GZk3|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "<GZk3", (String) null, 206);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||<GZk3|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", '|');
      assertEquals("<GZk3", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '|';
      intArray0[1] = 206;
      intArray0[2] = (int) '|';
      intArray0[3] = 206;
      intArray0[4] = 19;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'K', 19, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0029()  throws Throwable  {
      String string0 = "L";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) '9';
      longArray0[1] = (long) '9';
      longArray0[2] = (long) 32;
      longArray0[3] = 16L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '9', 293, Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0030()  throws Throwable  {
      String string0 = StringUtils.chomp("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n");
      assertEquals("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?", "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?", "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?");
      assertEquals("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0031()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      String string1 = StringUtils.wrapIfMissing("Could not resolve parameter of type %s.", '\u0000');
      assertEquals("Could not resolve parameter of type %s.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("Could not resolve parameter of type %s.");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Could not resolve parameter of type %s.", 116, 31);
      assertEquals(31, int0);
      
      String string2 = StringUtils.difference(" ", "d");
      assertEquals("d", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0032()  throws Throwable  {
      String string0 = StringUtils.repeat("<GZk3", 4393);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.split(string0);
  }

  @Test(timeout = 4000)
  public void test0033()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 34;
      intArray0[4] = (-1600);
      intArray0[5] = (-1);
      String string1 = StringUtils.join(intArray0, 'J', 4, 5);
      assertEquals("-1600", string1);
      assertEquals(6, intArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {34, 0, 0, 0, (-1600), (-1)}, intArray0);
      
      String string2 = StringUtils.join(intArray0, 'J', 477, 477);
      assertEquals("", string2);
      assertEquals(6, intArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {34, 0, 0, 0, (-1600), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0034()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.leftPad("StdIoExtension is active but neither System.out or System.in are getting redirected.", 3902, '2');
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(string0, "np1", 3902, 2888);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0035()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("Locale must not be null", "Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("Locale must not be null");
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("(a=(eT[2$ar?+Cgz}fd", 97, '(');
      assertEquals("(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "(a=(eT[2$ar?+Cgz}fd";
      objectArray0[2] = (Object) "(a=(eT[2$ar?+Cgz}fd";
      objectArray0[3] = (Object) "(a=(eT[2$ar?+Cgz}fd";
      String string3 = StringUtils.joinWith("(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd", objectArray0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "java.lang.Object@310d698e(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd", 97);
      assertEquals(363, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      charSequenceArray0[4] = (CharSequence) "Locale must not be null";
      charSequenceArray0[5] = (CharSequence) "java.lang.Object@310d698e(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd";
      charSequenceArray0[6] = (CharSequence) "Locale must not be null";
      boolean boolean0 = StringUtils.endsWithAny("Locale must not be null", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("java.lang.Object@310d698e(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((a=(eT[2$ar?+Cgz}fd(a=(eT[2$ar?+Cgz}fd");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Locale must not be null", charArray0);
      assertEquals(0, int1);
      assertEquals(4, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'(', '(', '(', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0036()  throws Throwable  {
      String[] stringArray0 = new String[21];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[3] = "g0jShM}UM+zB\"F";
      // Undeclared exception!
      StringUtils.center("oy<1Sy^V2n", 32767, "%z8<Nr'7cw{\"Uu'Z)");
  }

  @Test(timeout = 4000)
  public void test0037()  throws Throwable  {
      String string0 = StringUtils.stripAccents("maxWith cannot be negativemaxWith cannot be negative");
      assertEquals("maxWith cannot be negativemaxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("maxWith cannot be negativemaxWith cannot be negative", "maxWith cannot be negativemaxWith cannot be negative");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("", 8192);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chomp("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      // Undeclared exception!
      StringUtils.center("", 8192);
  }

  @Test(timeout = 4000)
  public void test0038()  throws Throwable  {
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      char[] charArray0 = new char[8];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.join(charArray0, 'q');
      assertEquals("\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000";
      stringArray0[1] = "\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000";
      stringArray0[2] = "\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000", string1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000");
      assertEquals("\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000q\u0000", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0039()  throws Throwable  {
      String string0 = StringUtils.center("@DefaultLocale can only be used with language tag if language, country, and varant are not set", 101, "j_jv");
      assertEquals("j_j@DefaultLocale can only be used with language tag if language, country, and varant are not setj_jv", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("@DefaultLocale can only be used with language tag if language, country, and varant are not set");
      assertFalse(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.leftPad("j_j@DefaultLocale can only be used with language tag if language, country, and varant are not setj_jv", 101, "@DefaultLocale can only be used with language tag if language, country, and varant are not set");
      assertEquals("j_j@DefaultLocale can only be used with language tag if language, country, and varant are not setj_jv", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("@DefaultLocale can only be used with language tag if language, country, and varant are not set");
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and varant are not set", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("@DefaultLocale can only be used with language tag if language, country, and varant are not set");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "j_jv";
      charSequenceArray0[1] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and varant are not set";
      charSequenceArray0[2] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and varant are not set";
      charSequenceArray0[3] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and varant are not set";
      charSequenceArray0[4] = (CharSequence) "j_jv";
      charSequenceArray0[5] = (CharSequence) "@DefaultLocale can only be used with language tag if language, country, and varant are not set";
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("j_j@DefaultLocale can only be used with language tag if language, country, and varant are not setj_jv", charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0040()  throws Throwable  {
      String string0 = StringUtils.rightPad(".A-ZjBylvBDex", 30, ".A-ZjBylvBDex");
      assertEquals(".A-ZjBylvBDex.A-ZjBylvBDex.A", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(".A-ZjBylvBDex", ".A-ZjBylvBDex");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0041()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 32;
      floatArray0[2] = (float) 32;
      floatArray0[3] = (float) 32;
      floatArray0[4] = (float) 32;
      floatArray0[5] = (float) 32;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '>', 32, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0042()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("u-e^4Amc:kTW$ =L{}dGX;`", " ", " ");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isBlank("u-e^4Amc:kTW$ =L{}dGX;`");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) " ", 32);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0043()  throws Throwable  {
      String string0 = StringUtils.center("_j<ly5o2=Z", 8192, (String) null);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("_j<ly5o2=Z"));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = StringUtils.substringAfterLast("/a2|FTUVvv", 8192);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[2] = ')';
      charArray0[3] = '\\';
      charArray0[4] = 'D';
      charArray0[5] = '=';
      charArray0[6] = 'D';
      charArray0[7] = 'L';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "/a2|FTUVvv", charArray0);
      assertFalse(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'$', '\u0000', ')', '\\', 'D', '=', 'D', 'L'}, charArray0);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test0044()  throws Throwable  {
      String string0 = StringUtils.unwrap("The String must not be empty", 'H');
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2381);
      doubleArray0[1] = (-2216.2291352791863);
      doubleArray0[2] = (double) 'H';
      doubleArray0[3] = (double) (-2381);
      doubleArray0[4] = (double) (-2381);
      doubleArray0[5] = (double) (-2381);
      doubleArray0[6] = (double) (-2381);
      String string1 = StringUtils.join(doubleArray0, 'H', (-1968), (-2381));
      assertEquals("", string1);
      assertEquals(7, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-2381.0), (-2216.2291352791863), 72.0, (-2381.0), (-2381.0), (-2381.0), (-2381.0)}, doubleArray0, 0.01);
      
      int int0 = StringUtils.ordinalIndexOf("", "", (-1968));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("org.junitpioneer.jupiter.ReportEntryExtension", "The String must not be empty");
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = StringUtils.getBytes("\n", (Charset) null);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("The String must not be empty", "", 2557);
      assertEquals(28, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0045()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("The type must not be null");
      assertEquals("THE TYPE MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("S|A~uIl", 7, 7);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 7;
      longArray0[1] = (long) 7;
      longArray0[2] = 0L;
      longArray0[3] = (long) 7;
      String string2 = StringUtils.join(longArray0, 'U', 76, 13);
      assertEquals("", string2);
      assertEquals(4, longArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {7L, 7L, 0L, 7L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0046()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("\n", charSequence0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("\n", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "offset cannot be negative");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0047()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.appendIfMissing("S|A~uIl", "org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals("S|A~uIlorg.apache.commons.lang3.StringUtils", string0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("The type must not be null");
      assertEquals("THE TYPE MUST NOT BE NULL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-57);
      String string2 = StringUtils.join(byteArray0, '8', (int) (byte)2, (int) (byte)4);
      assertEquals("518-120", string2);
      assertEquals(7, byteArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-30), (byte)2, (byte)51, (byte) (-120), (byte)16, (byte)4, (byte) (-57)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0048()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" doesn't match any regular expression.");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceIgnoreCase("g0jSM}M+zB\"F", "r", "-/ux");
      assertEquals("g0jSM}M+zB\"F", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithAny("I", stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("g0jSM}M+zB\"F", stringArray0);
      assertFalse(boolean1);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("g0jSM}M+zB\"F");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "g0jSM}M+zB\"F", 48, 2338);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0049()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = "JS8r";
      String string4 = "t!l$`L[&JiRd$NEqXhb";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("JS8r", "", "t!l$`L[&JiRd$NEqXhb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test0050()  throws Throwable  {
      String string0 = StringUtils.abbreviate("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", "A(NXT<6PFz", 32, 32);
      assertEquals("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n");
      assertNull(stringArray0);
      
      String string1 = StringUtils.remove("StdIoExtension is active but no %s annotation was found.", '%');
      assertEquals("StdIoExtension is active but no s annotation was found.", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((float[]) null, '%', 32, 32);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "StdIoExtension is active but no s annotation was found.", 32);
      assertEquals(14, int0);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("StdIoExtension is active but no %s annotation was found.");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", (CharSequence) "StdIoExtension is active but no s annotation was found.", 2803);
      assertEquals(52, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0051()  throws Throwable  {
      String string0 = StringUtils.repeat("}zb./9tg`w7 Mj", 31);
      assertEquals("}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "}zb./9tg`w7 Mj";
      stringArray0[1] = "}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj";
      stringArray0[2] = "}zb./9tg`w7 Mj";
      stringArray0[3] = "}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj";
      stringArray0[4] = "}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj";
      stringArray0[5] = "}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj}zb./9tg`w7 Mj";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("}zb./9tg`w7 Mj", string1);
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0052()  throws Throwable  {
      String string0 = StringUtils.center("<@B:h,4G:", 887);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                      <@B:h,4G:                                                                                                                                                                                                                                                                                                                                                                                                                                                       ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "                                                                                                                                                                                                                                                                                                                                                                                                                                                      <@B:h,4G:                                                                                                                                                                                                                                                                                                                                                                                                                                                       ", (CharSequence) "<@B:h,4G:");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0053()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.substringAfterLast("H/0)p[Jd5c:0X{", "H/0)p[Jd5c:0X{");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.wrapIfMissing("6:9J4xW(O~G", '&');
      assertEquals("&6:9J4xW(O~G&", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '&', 181, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0054()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("gg");
      assertEquals("gg", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "gg";
      String string1 = StringUtils.substringBetween("gg", "gg");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "gg";
      charSequenceArray0[3] = (CharSequence) "gg";
      charSequenceArray0[4] = (CharSequence) "gg";
      charSequenceArray0[5] = (CharSequence) "gg";
      charSequenceArray0[6] = (CharSequence) "gg";
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[6]);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("gg", charSequenceArray0[3], 10);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[3]);
      assertTrue(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.repeat("gg", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0055()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "U;3@eR5Y|b-}!-y$D";
      charSequenceArray0[1] = (CharSequence) "U;3@eR5Y|b-}!-y$D";
      int int0 = StringUtils.indexOfAny((CharSequence) "U;3@eR5Y|b-}!-y$D", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string0 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "U;3@eR5Y|b-}!-y$D", 36);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0056()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Array element ");
      assertEquals("array element ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents(".A-ZjLylvBDex");
      assertEquals(".A-ZjLylvBDex", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string2 = StringUtils.repeat(".A-ZjLylvBDex", 1);
      assertEquals(".A-ZjLylvBDex", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.chomp(".A-ZjLylvBDex");
      assertEquals(".A-ZjLylvBDex", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0057()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("l[Zgs%|:Tji=5C! 19", "l[Zgs%|:Tji=5C! 19", 22);
      assertEquals("l[Zgs%|:Tji=5C! 19", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("org.junitpioneer.jupiter.params.Range", "l[Zgs%|:Tji=5C! 19");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "l[Zgs%|:Tji=5C! 19", (CharSequence) "l[Zgs%|:Tji=5C! 19");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring("org.junitpioneer.jupiter.params.Range", 33, 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp("1/\"QcG07pn9a.aUV`");
      assertEquals("1/\"QcG07pn9a.aUV`", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.ordinalIndexOf("l[Zgs%|:Tji=5C! 19", "1/\"QcG07pn9a.aUV`", 108);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.repeat("", 367);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0058()  throws Throwable  {
      String string0 = StringUtils.repeat('u', 1);
      assertEquals("u", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("u", "u", 1);
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((float[]) null, 'I', 0, 0);
      assertNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = ']';
      charArray0[2] = 'u';
      charArray0[3] = 'I';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "u", charArray0);
      assertTrue(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'u', ']', 'u', 'I'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0059()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Q", "y%8]q`T]");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfterLast("eF9\"yA(1H3a:T", 51);
      assertEquals("a:T", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0060()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("HK1`EVR'^h0sgG", 71);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0061()  throws Throwable  {
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'L';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", charArray0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'T', 'L'}, charArray0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string0 = StringUtils.substringBeforeLast("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string2 = StringUtils.removeIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("chFV5MmCLp)e'A7'B", 109);
      assertEquals("CLp)e'A7'B", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean4);
      assertEquals(2, charArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertArrayEquals(new char[] {'T', 'L'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0062()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("\u0004$o@WoI?e@4estH", "\u0004$o@WoI?e@4estH", "\u0004$o@WoI?e@4estH");
      assertNotNull(string0);
      
      long[] longArray0 = new long[2];
      String string1 = StringUtils.join(longArray0, 'h');
      assertEquals("0h0", string1);
      assertEquals(2, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      
      String string2 = StringUtils.substringBeforeLast("n<Df]w:?MdJIENR+}", "\u0004$o@WoI?e@4estH");
      assertEquals("n<Df]w:?MdJIENR+}", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBeforeLast("\u0004$o@WoI?e@4estH", "Locale must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart("C{N;q$SkE", (String) null);
      assertEquals("C{N;q$SkE", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "C{N;q$SkE", (CharSequence) "\u0004$o@WoI?e@4estH");
      assertEquals((-1), int0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) " uF0bt'p7", supplier0);
      assertEquals(" uF0bt'p7", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " uF0bt'p7", "ch");
      assertFalse(boolean0);
      
      String string5 = StringUtils.repeat("\u0004$o@WoI?e@4estH", "jM\"gMFS#Y\"ps", (-1));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertEquals(2, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'h', 'h'}, charArray0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "\u0004$o@WoI?e@4estH", (CharSequence) "C{N;q$SkE");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0063()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("tExtension", "org.junitpioneer.jupiter.params.Range");
      assertEquals(0.42, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0064()  throws Throwable  {
      String string0 = StringUtils.difference("2GF*,UZ'6pPFWj>-<h", "ggbWX}_@s|{9S=ie");
      assertEquals("ggbWX}_@s|{9S=ie", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ggbWX}_@s|{9S=ie";
      // Undeclared exception!
      StringUtils.leftPad(" G<", 32767, 'F');
  }

  @Test(timeout = 4000)
  public void test0065()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", ", (CharSequence) "");
      assertEquals(2, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("", ", ", ", ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ", ", (CharSequence) ", ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode(")Oe");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(3, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      ByteBuffer byteBuffer1 = charset0.encode(")Oe");
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotNull(byteBuffer1);
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer1.toString());
      assertEquals(3, byteBuffer1.remaining());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(3, byteBuffer1.capacity());
      assertEquals(3, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.position());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertTrue(byteBuffer1.hasRemaining());
      assertFalse(byteBuffer1.isReadOnly());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0066()  throws Throwable  {
      String string0 = StringUtils.repeat("o", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("o");
      assertEquals("O", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3438.5857F);
      String string2 = StringUtils.join(floatArray0, 'W', 1114111, 3);
      assertEquals("", string2);
      assertEquals(1, floatArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new float[] {(-3438.5857F)}, floatArray0, 0.01F);
      
      String string3 = StringUtils.removeStartIgnoreCase("_Y8f", "a;YpkN4aMSL");
      assertEquals("_Y8f", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("O");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("O");
      assertTrue(boolean0);
      
      String string4 = StringUtils.stripStart("5!)) vs ", ";ursvI/a]q");
      assertEquals("5!)) vs ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.remove("org.junitpioneer.jupiter.AbstractEntryBasedExtension", 'W');
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.replaceEach("org.junitpioneer.jupiter.AbstractEntryBasedExtension", stringArray0, (String[]) null);
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string6);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = "f(XAk7yz~9z6QtUUY1-X";
      // Undeclared exception!
      try { 
        Charset.forName("p`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0067()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.junitpioneer.jupiter.StdIoExtension", 'C', 'C');
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "org.junitpioneer.jupiter.StdIoExtension";
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "org.junitpioneer.jupiter.StdIoExtension";
      charSequenceArray0[3] = (CharSequence) "org.junitpioneer.jupiter.StdIoExtension";
      charSequenceArray0[4] = (CharSequence) "org.junitpioneer.jupiter.StdIoExtension";
      charSequenceArray0[5] = (CharSequence) "org.junitpioneer.jupiter.StdIoExtension";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.jupiter.StdIoExtension";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad("", 8192, 'C');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEnd("u-e^4Amc:kTW", "$ =L{}dGX;`");
      assertEquals("u-e^4Amc:kTW", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      byte[] byteArray0 = StringUtils.getBytes("lXUk]6b;-mJpP_P-f,", (String) null);
      assertEquals(18, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string4 = StringUtils.rightPad(string2, 8192, '~');
      assertNotNull(string4);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0068()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.join(floatArray0, '&');
      assertEquals("10.0&0.0", string0);
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {10.0F, 0.0F}, floatArray0, 0.01F);
      
      charSequenceArray0[0] = (CharSequence) "10.0&0.0";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("10.0&0.0", charSequence0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "10.0&0.0";
      String string1 = StringUtils.unwrap("10.0&0.0", '1');
      assertEquals("10.0&0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "10.0&0.0";
      String string2 = StringUtils.repeat("-", 10);
      assertEquals("----------", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "----------";
      String string3 = StringUtils.abbreviateMiddle("10.0&0.0", "Locale must not be null", 127);
      assertEquals("10.0&0.0", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "10.0&0.0";
      String string4 = StringUtils.removeAll("----------", "10.0&0.0");
      assertEquals("----------", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      
      charSequenceArray0[5] = (CharSequence) "----------";
      String string5 = StringUtils.stripToEmpty("''");
      assertEquals("''", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      charSequenceArray0[6] = (CharSequence) "''";
      String string6 = StringUtils.removeFirst("UY1-X", "----------");
      assertEquals("UY1-X", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      
      charSequenceArray0[7] = (CharSequence) "UY1-X";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string7 = StringUtils.rightPad("''", 127);
      assertEquals("''                                                                                                                             ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)charSequence0));
      
      String string8 = StringUtils.unwrap("q/J2ok{{vGM#r", "al");
      assertEquals("q/J2ok{{vGM#r", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      
      String string9 = StringUtils.stripAccents("al");
      assertEquals("al", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string10 = StringUtils.upperCase("''", locale0);
      assertEquals("''", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)charSequence0));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test0069()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "\n";
      stringArray0[4] = "";
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny("\n", stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", 3705);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.overlay("\n", "\n", 3705, 3705);
      assertEquals("\n\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rightPad("\n", 99, "\n");
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.getDigits("org.junitpioneer.jupiter.params.IntRange");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0070()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[16];
      floatArray0[0] = (-1378.44F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      String string1 = StringUtils.join(floatArray0, '=');
      assertEquals("-1378.44=-1.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0", string1);
      assertEquals(16, floatArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-1378.44=-1.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0=0.0", "*)o?)324@HZ");
      assertEquals(2, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "=;#q3jaKCR0L9[", 12);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0071()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "Wl|xU|6:Z~c/Z/K<H", (-1595));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootUpperCase("Never disable parameterized test method itself");
      assertEquals("NEVER DISABLE PARAMETERIZED TEST METHOD ITSELF", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("NEVER DISABLE PARAMETERIZED TEST METHOD ITSELF", "NEVER DISABLE PARAMETERIZED TEST METHOD ITSELF");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("Ddhfu?U");
      assertEquals("DDHFU?U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.rightPad("Ddhfu?U", (-1595), "NEVER DISABLE PARAMETERIZED TEST METHOD ITSELF");
      assertEquals("Ddhfu?U", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replacePattern("Wl|xU|6:Z~c/Z/K<H", "ZF*?D@@}#xI", "Z");
      assertEquals("Wl|xU|6:Z~c/Z/K<H", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceChars("Never disable parameterized test method itself", "\r", "s9$");
      assertEquals("Never disable parameterized test method itself", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((long[]) null, '#', 1759, 1179);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, "DDHFU?U");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      int int2 = StringUtils.indexOfAny((CharSequence) "8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", charArray0);
      assertEquals(9, int2);
      assertEquals(1, charArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Z", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      
      int int3 = StringUtils.getFuzzyDistance("Wl|xU|6:Z~c/Z/K<H", "ZF*?D@@}#xI", locale0);
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      
      String string6 = StringUtils.rightPad("w2h{?I1#_6Gi9{x", 1, '#');
      assertEquals("w2h{?I1#_6Gi9{x", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0072()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("saqygo", 'g');
      assertEquals("gsaqygog", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("gsaqygog");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("gsaqygog", "saqygo");
      assertEquals("gsaqygog", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "gsaqygog", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing("gsaqygog", 'g');
      assertEquals("gsaqygog", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((short[]) null, 'q', 5, 1801);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0073()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)322;
      shortArray0[2] = (short) (-527);
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.join(shortArray0, 'R');
      assertEquals("322R0R-527R0R0R0R0", string0);
      assertEquals(7, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)322, (short)0, (short) (-527), (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      charSequenceArray0[0] = (CharSequence) "322R0R-527R0R0R0R0";
      String string1 = StringUtils.appendIfMissingIgnoreCase("322R0R-527R0R0R0R0", charSequenceArray0[0], charSequenceArray0);
      assertEquals("322R0R-527R0R0R0R0", string1);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "322R0R-527R0R0R0R0";
      String string2 = StringUtils.rightPad("", 322);
      assertEquals("                                                                                                                                                                                                                                                                                                                                  ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "                                                                                                                                                                                                                                                                                                                                 ";
      String string3 = StringUtils.rightPad("", (int) (short)322, ", Length: ");
      assertEquals(", Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) ", Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: , Length: ,";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.stripStart("F^Cf{,*gSNEczo-", "Search and Replace array lengths don't match: ");
      assertEquals("F^Cf{,*gSNEczo-", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "322R0R-527R0R0R0R0", 51);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "322R0R-527R0R0R0R0", (int) (short) (-527));
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" of another", "322R0R-527R0R0R0R0", 3051);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0074()  throws Throwable  {
      String string0 = ", '";
      String string1 = StringUtils.center(", '", 8192, "'da)zJ(qw-#^%},*6?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(", '"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(", '"));
      
      boolean boolean0 = linkedList1.add((Object) "?1+N-C+");
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(", '"));
      assertTrue(linkedList1.contains("?1+N-C+"));
      
      String string2 = StringUtils.join((List<?>) linkedList1, 'Q', 8192, 1124);
      assertEquals("", string2);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string2);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(", '"));
      assertTrue(linkedList1.contains("?1+N-C+"));
      
      String[] stringArray0 = StringUtils.split("FiJy`{)&(Ds0|m/(", "JpFnIW{hF |SS.|^");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      StringUtils.containsAnyIgnoreCase(string1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test0075()  throws Throwable  {
      String string0 = StringUtils.repeat("", 32);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = 'x';
      String string1 = StringUtils.rightPad("Locale must not be null", (-1), 'x');
      assertEquals("Locale must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.chomp("yH;G#n ZL*L");
      assertEquals("yH;G#n ZL*L", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "yH;G#n ZL*L", 32);
      assertTrue(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("I(I`V", 'x');
      assertEquals("xI(I`Vx", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Locale must not be null", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string5 = "<;8tA:PV#0sa.";
      String string6 = "w}mgag";
      String string7 = StringUtils.stripEnd("<;8tA:PV#0sa.", "w}mgag");
      assertEquals("<;8tA:PV#0sa.", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      
      char char1 = 'A';
      String string8 = StringUtils.wrap("y~", 'A');
      assertEquals("Ay~A", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      
      String string9 = StringUtils.getIfBlank("", (Supplier<String>) null);
      assertNull(string9);
      
      String string10 = StringUtils.wrap("}", 'A');
      assertEquals("A}A", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      
      String string11 = StringUtils.chomp("w}mgag");
      assertEquals("w}mgag", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      try { 
        StringUtils.toString(byteArray0, "A}A");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0076()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = stack0.removeElement(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      
      boolean boolean2 = stack0.add("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(string0));
      
      boolean boolean3 = stack0.add("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(string0));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(string0));
      
      String string1 = StringUtils.join(iterator0, 'I');
      assertEquals("IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(string0));
      assertFalse(stack0.contains(string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", "IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", 3);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean4 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean4);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0077()  throws Throwable  {
      String string0 = StringUtils.repeat("o", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("o");
      assertEquals("O", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) "O", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("{-j ", '%');
      assertEquals("%{-j %", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.replaceChars("%{-j %", "{-j ", string0);
      assertEquals("%oooo%", string3);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "%oooo%", (CharSequence) "maxWith cannot be negative");
      assertEquals("%oooo%", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfBlank("%oooo%", supplier0);
      assertEquals("%oooo%", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.trimToNull("maxWith cannot be negative@sY_8)$N3");
      assertEquals("maxWith cannot be negative@sY_8)$N3", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '%';
      charArray0[2] = 'a';
      charArray0[3] = '%';
      charArray0[4] = '%';
      charArray0[5] = '%';
      charArray0[6] = '%';
      charArray0[7] = 'W';
      int int1 = StringUtils.indexOfAny((CharSequence) "%oooo%", charArray0);
      assertEquals(0, int1);
      assertEquals(8, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'{', '%', 'a', '%', '%', '%', '%', 'W'}, charArray0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "{-j ", (CharSequence) "%oooo%");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0078()  throws Throwable  {
      String string0 = StringUtils.repeat("_q'&;>C-:3n", "Strings must not be null", 1);
      assertEquals("_q'&;>C-:3n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "_q'&;>C-:3n", (CharSequence) "Strings must not be null", 84);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0079()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string0 = StringUtils.normalizeSpace(", ");
      assertEquals(",", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ", ";
      String string1 = StringUtils.substringBefore(",", ", ");
      assertEquals(",", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) ",";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0080()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("g$U).lboyJs>");
      assertEquals("g$U).lboyJs>", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("g$U).lboyJs>");
      assertEquals("G$U).LBOYJS>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("g$U).lboyJs>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", 4);
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripAccents("g$U).lboyJs>");
      assertEquals("g$U).lboyJs>", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.deleteWhitespace("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?");
      assertEquals("Ol!f40^i%!|#ARlFk*PLBUeM`/Wi&I?", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Ol!f40^i%!|#ARlFk*PLBUeM`/Wi&I?";
      charSequenceArray0[1] = (CharSequence) "Ol!f40^i%!|#ARl";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(15, int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0081()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The String dust not be empty", "The String dust not be empty");
      assertNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0082()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", " ", (-1));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.defaultIfBlank("VNYt*13ME", "Never disable parameterized test method itself");
      assertEquals("VNYt*13ME", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Iterator<?>) null, "{f.v8z\"N!kS.");
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0083()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterator<?>) null, "Z~r*^Yex9VP2K");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0084()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("/H$_q m'p&4&G", (-1), "");
      assertEquals("/H$_q m'p&4&G", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replacePattern("", "k!L+#rajn6", "4g[T2zL=`&`\")Lt}^");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceChars("gmHg_\\I|122.0&122.0&81.0&122.0&0.0&81.0&122.0&122.0", "_D; 7kFEt", "_D; 7kFEt");
      assertEquals("gmHg_\\I|122.0&122.0&81.0&122.0&0.0&81.0&122.0&122.0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((long[]) null, ')', 53, 733);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "gmHg_\\I|122.0&122.0&81.0&122.0&0.0&81.0&122.0&122.0");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) ')';
      doubleArray0[1] = 2188.4;
      doubleArray0[11] = (double) (-1);
      doubleArray0[3] = (double) ')';
      doubleArray0[4] = 44.0;
      doubleArray0[5] = (double) ')';
      doubleArray0[6] = (double) ')';
      doubleArray0[7] = (double) 733;
      String string6 = StringUtils.join(doubleArray0, ')', 4, 9);
      assertEquals("44.0)41.0)41.0)733.0)0.0", string6);
      assertEquals(22, doubleArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.stripEnd(":v//dlFJ,kWH1{a", "4g[T2zL=`&`\")Lt}^");
      assertEquals(":v//dlFJ,kWH1{a", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0085()  throws Throwable  {
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", true);
      assertEquals(0, int0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Spliterator<Locale.FilteringMode> spliterator0 = serviceLoader0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      boolean boolean0 = StringUtils.isMixedCase("...");
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootUpperCase("yolK:y)crW7nR<M");
      assertEquals("YOLK:Y)CRW7NR<M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("yolK:y)crW7nR<M", "YOLK:Y)CRW7NR<M", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.deleteWhitespace("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother{!#`&dyF~ZTr;dwMinimumabbreviationwidthwithoffsetis%d{!#`&dyF~ZTr;dw", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllUpperCase("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.stripEnd("offset cannot be negative", ",IU{r<*m`czQ{}Z;9T");
      assertEquals("offset cannot be negative", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 2733L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'o', 0, 442);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0086()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("S/YaQ<yH m*Lhh.))", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0087()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Strings must not be null", "WWPy", "\" should have a parent context.", Integer.MIN_VALUE);
      assertEquals("Strings must not be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Strings must not be null", Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'Z';
      charArray0[2] = 'L';
      charArray0[3] = 'y';
      charArray0[4] = '~';
      charArray0[5] = '\'';
      charArray0[6] = '_';
      int int1 = StringUtils.indexOfAny((CharSequence) "WWPy", charArray0);
      assertEquals(3, int1);
      assertEquals(7, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'3', 'Z', 'L', 'y', '~', '\'', '_'}, charArray0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "Strings must not be null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0088()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Q", "Q");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (-4896.33905658633);
      doubleArray0[3] = 1684.0;
      doubleArray0[4] = 1.5;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'h', Integer.MAX_VALUE, (-385));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0089()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring((String) null, 2765, 2765);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0090()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("/H$_q m'p&4&G", (-1), "");
      assertEquals("/H$_q m'p&4&G", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "4g[T2zL=`&`\")Lt}^";
      String string4 = StringUtils.replacePattern("", "k!L+#rajn6", "4g[T2zL=`&`\")Lt}^");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.replaceChars("gmHg_\\I|122.0&122.0&81.0&122.0&0.0&81.0&122.0&122.0", "_D; 7kFEt", "_D; 7kFEt");
      assertEquals("gmHg_\\I|122.0&122.0&81.0&122.0&0.0&81.0&122.0&122.0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.join((long[]) null, ')', 53, 733);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "gmHg_\\I|122.0&122.0&81.0&122.0&0.0&81.0&122.0&122.0");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {')'}, charArray0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) ')';
      doubleArray0[1] = 2188.4;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) ')';
      doubleArray0[4] = 44.0;
      doubleArray0[5] = (double) ')';
      doubleArray0[6] = (double) ')';
      doubleArray0[7] = (double) 733;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, ')', 4, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0091()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      boolean boolean0 = stack0.add("!SeqOQsf*_t&p in an array of ");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[!SeqOQsf*_t&p in an array of ]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains("!SeqOQsf*_t&p in an array of "));
      
      boolean boolean1 = stack0.add((String) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[!SeqOQsf*_t&p in an array of , null]", stack0.toString());
      assertTrue(stack0.contains("!SeqOQsf*_t&p in an array of "));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[!SeqOQsf*_t&p in an array of , null]", stack0.toString());
      assertTrue(stack0.contains("!SeqOQsf*_t&p in an array of "));
      
      String string0 = StringUtils.join(iterator0, '?');
      assertEquals("!SeqOQsf*_t&p in an array of ?", string0);
      assertNotNull(string0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals("[!SeqOQsf*_t&p in an array of , null]", stack0.toString());
      assertTrue(stack0.contains("!SeqOQsf*_t&p in an array of "));
      assertFalse(stack0.contains(string0));
      
      String string1 = StringUtils.remove((String) null, 'Q');
      assertNull(string1);
      
      String string2 = StringUtils.substringBetween((String) null, "]tt5tgO$*J");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0092()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      String string0 = StringUtils.substringAfter("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", 4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad(" IOrLY", 99, " IOrLY");
      assertEquals(" IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IOrLY IO", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'o';
      charArray0[2] = 'D';
      charArray0[3] = '%';
      charArray0[4] = 'S';
      charArray0[5] = 'T';
      charArray0[6] = 'A';
      String string2 = StringUtils.join(charArray0, '$', 4, 7);
      assertEquals("S$T$A", string2);
      assertEquals(7, charArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'I', 'o', 'D', '%', 'S', 'T', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0093()  throws Throwable  {
      String string0 = StringUtils.stripEnd("\r", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "\r", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0094()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("A(NXT<6PFz");
      assertEquals("A(NXT<6PFZ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd("\r", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "1w.?hDvCN", (CharSequence) "\r", 39);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.normalizeSpace("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n");
      assertEquals("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.truncate("|6~{^MalYa^t", 2, 32);
      assertEquals("~{^MalYa^t", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.toRootLowerCase("%f) J.iVd7OV11");
      assertEquals("%f) j.ivd7ov11", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank("^^I5(U}=SuG`xB0");
      assertFalse(boolean0);
      
      String string7 = StringUtils.substring("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", 13, 98);
      assertEquals("Fk*P LBUeM`/Wi&I?\n", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNotEmpty("Fk*P LBUeM`/Wi&I?\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^^I5(U}=SuG`xB0";
      stringArray0[1] = "Locale must not be null";
      stringArray0[2] = "^^I5(U}=SuG`xB0";
      String string8 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("^^I5(U}=SuG`xB0", string8);
      assertEquals(3, stringArray0.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      
      String string9 = StringUtils.substringBefore("A(NXT<6PFz", "Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*");
      assertEquals("A(NXT<6PFz", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) 13;
      floatArray0[3] = (float) 39;
      floatArray0[4] = 573.1114F;
      floatArray0[5] = (float) 32;
      floatArray0[6] = (float) (-1);
      floatArray0[7] = (float) 39;
      String string10 = StringUtils.join(floatArray0, 'l', (-1), (-3305));
      assertEquals("", string10);
      assertEquals(8, floatArray0.length);
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 13.0F, 39.0F, 573.1114F, 32.0F, (-1.0F), 39.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0095()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "Index: ", 64);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Index: ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("Displ|ay name '", "Index: ");
      assertEquals("Index: ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Index: ", "*FS]?d");
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.stripToNull("ggbWX}_@s|{9S=ie");
      assertEquals("ggbWX}_@s|{9S=ie", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "8M`!VwI<J)*@-PkS", "::T/`L\u0004a.1J&$K");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = StringUtils.ordinalIndexOf("Index: ", "*FS]?d", 64);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int3);
      assertEquals(0, stringArray0.length);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0096()  throws Throwable  {
      String string0 = StringUtils.unwrap("org.junitpioneer.jupiter.params.LongRange", '1');
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "org.junitpioneer.jupiter.params.LongRange", (CharSequence) "org.junitpioneer.jupiter.params.LongRange");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      charArray0[1] = '1';
      charArray0[2] = '_';
      charArray0[3] = '1';
      charArray0[4] = '1';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "org.junitpioneer.jupiter.params.LongRange", charArray0);
      assertFalse(boolean1);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'F', '1', '_', '1', '1'}, charArray0);
      
      String string1 = StringUtils.deleteWhitespace("The type must not be null");
      assertEquals("Thetypemustnotbenull", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("Thetypemustnotbenull", "\r", "The type must not be null");
      assertEquals("Thetypemustnotbenull", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.length("org.junitpioneer.jupiter.params.LongRange");
      assertEquals(41, int0);
      
      String string3 = StringUtils.truncate("org.junitpioneer.jupiter.params.LongRange", 16, 41);
      assertEquals(".jupiter.params.LongRange", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.trimToNull("Thetypemustnotbenull");
      assertEquals("Thetypemustnotbenull", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.leftPad("fHtJ=*OA[^((<'", 16, 'i');
      assertEquals("iifHtJ=*OA[^((<'", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllUpperCase("\r");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.substringAfterLast("{ohs\"NDYxOD^}.{ ", ".jupiter.params.LongRange");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Thetypemustnotbenull", charArray0);
      assertEquals(0, int1);
      assertEquals(5, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'F', '1', '_', '1', '1'}, charArray0);
      
      String string7 = StringUtils.wrapIfMissing("K,9:?5&desg A, ,_", 'l');
      assertEquals("lK,9:?5&desg A, ,_l", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.removeEnd("K,9:?5&desg A, ,_", "K,9:?5&desg A, ,_");
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      
      String string9 = StringUtils.wrap("lK,9:?5&desg A, ,_l", '1');
      assertEquals("1lK,9:?5&desg A, ,_l1", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0097()  throws Throwable  {
      String string0 = StringUtils.repeat('c', 1582);
      assertNotNull(string0);
      
      int int0 = StringUtils.length(string0);
      assertEquals(1582, int0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(string0, string0);
  }

  @Test(timeout = 4000)
  public void test0098()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = stack0.removeElement(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(""));
      
      boolean boolean2 = stack0.add("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(""));
      
      boolean boolean3 = stack0.add("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'I');
      assertEquals("IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(""));
      
      String string2 = "9l</aQ";
      String string3 = StringUtils.lowerCase("9l</aQ");
      assertEquals("9l</aq", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*");
      assertEquals(0, int0);
      
      String string4 = StringUtils.chop("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean4 = stack0.add("Object varargs must not be null");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertEquals(3, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*, Object varargs must not be null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains("9l</aQ"));
      assertTrue(stack0.contains("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, ':', 0, 86);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 86
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0099()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart(" has no clone method", (String) null);
      assertEquals("has no clone method", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" has no clone method");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("{G", 54, 54);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "org.junitpioneer.jupiter.DefaultTimeZoneExtension", "has no clone method");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string5 = StringUtils.normalizeSpace("ie");
      assertEquals("ie", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0100()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = stack0.removeElement("?");
      assertFalse(boolean0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("?"));
      
      boolean boolean1 = stack0.add("?");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[?]", stack0.toString());
      assertTrue(stack0.contains("?"));
      
      boolean boolean2 = stack0.add((String) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(10, stack0.capacity());
      assertEquals("[?, null]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("?"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[?, null]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("?"));
      
      char char0 = 'I';
      String string0 = StringUtils.join(iterator0, 'I');
      assertEquals("?I", string0);
      assertNotNull(string0);
      assertEquals(10, stack0.capacity());
      assertEquals("[?, null]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("?"));
      assertFalse(stack0.contains(string0));
      
      String string1 = "9l</aQ";
      String string2 = StringUtils.lowerCase("9l</aQ");
      assertEquals("9l</aq", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnce("Display name '", "maxWith cannot be negative", "\n");
      assertEquals("Display name '", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Display name '", (CharSequence) "Display name '");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = "@P";
      String string6 = StringUtils.upperCase("+j");
      assertEquals("+J", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0101()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0102()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = stack0.removeElement(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(""));
      
      boolean boolean2 = stack0.add("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("[Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*"));
      assertFalse(stack0.contains(""));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*"));
      assertFalse(stack0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'I');
      assertEquals("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*"));
      assertFalse(stack0.contains(""));
      
      String string2 = "9l<`/aQ";
      String string3 = StringUtils.getDigits("9l<`/aQ");
      assertEquals("9", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
      
      String string4 = StringUtils.chop("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, ':', 0, 86);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 86
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0103()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("\r", "\r", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0104()  throws Throwable  {
      int int0 = 1;
      String string0 = StringUtils.repeat('u', 1);
      assertEquals("u", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("u", "u", 1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        Charset.forName("u");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // u
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0105()  throws Throwable  {
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.", (CharSequence) "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.");
  }

  @Test(timeout = 4000)
  public void test0106()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.vintage.TimeoutExtension", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate("", 37);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string4 = StringUtils.substringAfterLast("org.junitpioneer.vintage.TimeoutExtension", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      String string5 = StringUtils.substringBefore("i(s|EF[_/", "");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "org.junitpioneer.vintage.TimeoutExtension";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "org.junitpioneer.vintage.TimeoutExtension";
      boolean boolean1 = StringUtils.startsWithAny("org.junitpioneer.vintage.TimeoutExtension", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.toRootUpperCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.rightPad("offset cannot be negative", 4623, 'i');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "WqU6-Z9|", (CharSequence) "WqU6-Z9|");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0107()  throws Throwable  {
      String string0 = StringUtils.substringBefore("AgpHP=", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0108()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.replaceOnce("a(_F'j^$[!3uHoS#nU", "/S?M5_R'ECR", "/}#+%j0y^!*rju+O");
      assertEquals("a(_F'j^$[!3uHoS#nU", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "a(_F'j^$[!3uHoS#nU", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.chomp("/S?M5_R'ECR", "fESdeHB_(");
      assertEquals("/S?M5_R'ECR", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = '~';
      charArray0[2] = 'X';
      charArray0[3] = ')';
      charArray0[4] = '>';
      charArray0[5] = '/';
      charArray0[6] = 'b';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "/S?M5_R'ECR", charArray0);
      assertEquals(1, int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'#', '~', 'X', ')', '>', '/', 'b'}, charArray0);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0109()  throws Throwable  {
      String string0 = StringUtils.strip("_!*MG");
      assertEquals("_!*MG", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("_!*MG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0110()  throws Throwable  {
      String string0 = StringUtils.stripEnd("i", (String) null);
      assertEquals("i", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0111()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(3695));
      
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>(linkedHashSet0);
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet0.contains(3695));
      assertFalse(linkedHashSet1.contains(3695));
      
      String string1 = StringUtils.unwrap("{", "?");
      assertEquals("{", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "{", (CharSequence) string0);
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isBlank("{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0112()  throws Throwable  {
      String string0 = StringUtils.rightPad("RxLixe9", 51, '?');
      assertEquals("RxLixe9????????????????????????????????????????????", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("RxLixe9???????????????????????????????????????????", 51);
      assertEquals("RxLixe9???????????????????????????????????????????", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = 'H';
      charArray0[3] = '?';
      String string3 = StringUtils.join(charArray0, '?');
      assertEquals("????H??", string3);
      assertEquals(4, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'?', '?', 'H', '?'}, charArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "????H??", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.leftPad("org.junitpioneer.jupiter.CartesianProductTestExtension", 0, "DefaultTimeZone");
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripToNull("org.junitpioneer.jupiter.CartesianProductTestExtension");
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("#u+_NanY]6", "Minimum abbreviation width is %d", "Method `");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("g0jShM}UM+zB\"F", "g0jShM}UM+zB\"F");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfter("g0jShM}UM+zB\"F", 99);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("g0jShM}UM+zB\"F", "g0jShM}UM+zB\"F");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("", "Un[CX[:}#*}Az1", "Un[CX[:}#*}Az1");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "g0jShM}UM+zB\"F", (CharSequence) "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isBlank("g0jShM}UM+zB\"F");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ZOd.hhpPw";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string3 = StringUtils.stripStart("", "E");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean4 = StringUtils.isWhitespace("");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      boolean boolean5 = StringUtils.contains(charSequenceArray0[0], 99);
      assertFalse(boolean5);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'r', 103, 99);
      assertEquals("", string4);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.rightPad("", (-148), "E");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0114()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "V=y)RTu^Yb)~[bj6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", "", (String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("Cannot store ", "+n!Y\"zS!$G}", ",yI1");
      assertEquals("Cannot store ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.stripEnd("The Array must not be null", "V=y)RTu^Yb)~[bj6");
      assertEquals("The Array must not be null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.getDigits("hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&HN<iS0&");
      assertEquals("000000000000000000000000000000000", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.repeat("?Y3;cZ>nB/", 27);
      assertEquals("?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/?Y3;cZ>nB/", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean0 = StringUtils.isNumeric("hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&hZdd)UI OXcsdHN<iS0&HN<iS0&");
      assertFalse(boolean0);
      
      String string8 = StringUtils.stripEnd("", "org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", (CharSequence) "", 27);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0115()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("u", (-1), '?');
      assertEquals("u", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("-DLf", 866);
      assertEquals("-DLf", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int1 = StringUtils.indexOf((CharSequence) "u", (CharSequence) "u");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.leftPad("DefaultTimeZone", 2, "-DLf");
      assertEquals("DefaultTimeZone", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.stripToNull("#u+_NanY]6");
      assertEquals("#u+_NanY]6", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.substringsBetween("\" should have a parent context.", "\" should have a parent context.", "Bv]`xQ-&3)VgJ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0116()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 18;
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.join(floatArray0, '&');
      assertEquals("18.0&0.0", string0);
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {18.0F, 0.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.unwrap("18.0&0.0", '1');
      assertEquals("18.0&0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "18.0&0.0";
      boolean boolean0 = StringUtils.contains((CharSequence) "18.0&0.0", (int) '&');
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "18.0&0.0");
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0117()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("]u3dcj-", "M\"zWJ4");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "M\"zWJ4");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace((String) null, "", "j*jh^/_D(F5I");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "]u3dcj-";
      String string4 = StringUtils.join((Object[]) charSequenceArray0, (String) null, (-2788), (-4324));
      assertEquals("", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.deleteWhitespace("?w3SO0PXwLl#b9=m");
      assertEquals("?w3SO0PXwLl#b9=m", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isBlank("?w3SO0PXwLl#b9=m");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string6 = StringUtils.stripStart("saqygo", ";=kuJT");
      assertEquals("saqygo", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean4 = StringUtils.contains((CharSequence) "-qtzCCnZLZOgm:r*Q<", 90);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      boolean boolean5 = StringUtils.isAlpha("?w3SO0PXwLl#b9=m");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      
      String string7 = StringUtils.normalizeSpace("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " @3Dh44u(MDMnKJdB18";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string8);
      assertEquals(2, stringArray0.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "j*jh^/_D(F5I";
      stringArray1[1] = "@DisableIfDisplayName requires that either `contains` or `matches` is specified, but both are empty.";
      stringArray1[2] = "Minimum abbreviation width with offset is %d";
      stringArray1[3] = ";=kuJT";
      stringArray1[4] = "Minimum abbreviation width with offset is %d";
      stringArray1[5] = "-qtzCCnZLZOgm:r*Q<";
      String string9 = StringUtils.firstNonBlank(stringArray1);
      assertEquals("j*jh^/_D(F5I", string9);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertNotNull(string9);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0118()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 100);
      assertNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 160);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int1);
      assertEquals(1, charArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'P'}, charArray0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string1 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
      
      int int3 = StringUtils.indexOf((CharSequence) null, (CharSequence) string0, (-1));
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfEmpty(string0, supplier0);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)41;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals(">T@lF)", string4);
      assertEquals(6, byteArray0.length);
      assertNotNull(string4);
      assertArrayEquals(new byte[] {(byte)62, (byte)84, (byte)64, (byte)108, (byte)70, (byte)41}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test0119()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, 3695);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad(string0, 3695, string0);
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, string0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0120()  throws Throwable  {
      String string0 = StringUtils.swapCase("X");
      assertEquals("x", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("%,)&!D|>jA)'VF@b96Q");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "X", 11);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short)24;
      shortArray0[1] = (short) (-580);
      shortArray0[2] = (short)99;
      shortArray0[3] = (short)3413;
      String string2 = StringUtils.join(shortArray0, 'L', 0, 13);
      assertEquals("24L-580L99L3413L0L0L0L0L0L0L0L0L0", string2);
      assertEquals(13, shortArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("%,)&!D|>jA)'VF@b96Q");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.remove((String) null, 'e');
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 33);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0121()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertFalse(boolean3);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string1 = "Strings must not be null";
      String string2 = StringUtils.removeEnd((String) null, "Strings must not be null");
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, (-1));
      assertNull(string3);
      
      String string4 = StringUtils.replacePattern((String) null, ", Length: 0", (String) null);
      assertNull(string4);
      
      boolean boolean4 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      String string5 = "I[:uNo%^ws[E^q=";
      try { 
        StringUtils.getBytes(", ", "I[:uNo%^ws[E^q=");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0122()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 16);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace(" ", "tnixpPL`_vmTj!Pi)S", " ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "StdIo_S";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      String string2 = StringUtils.appendIfMissing(" ", "StdIo_S", charSequenceArray0);
      assertEquals(" ", string2);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBeforeLast("", " ");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("tnixpPL`_vmTj!Pi)S", "", "QZ#e848EA4DE");
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)76;
      String string4 = StringUtils.join(byteArray0, '&', 56, 8);
      assertEquals("", string4);
      assertEquals(2, byteArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)70, (byte)76}, byteArray0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>((SortedSet<? extends Locale>) treeSet0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Locale> priorityQueue1 = new PriorityQueue<Locale>((Collection<? extends Locale>) priorityQueue0);
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      Locale locale0 = Locale.lookup(vector0, priorityQueue1);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertNull(locale0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0123()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "zBCXJ5TA>1bE(D");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "zBCXJ5TA>1bE(D", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("zBCXJ5TA>1bE(D", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfter("", " K<");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 31);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0124()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      String string4 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string4);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0125()  throws Throwable  {
      String string0 = StringUtils.substring("Lz", (-1339));
      assertEquals("Lz", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Lz", 76);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("Lz");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("Displ|ay name '", "Lz");
      assertEquals("Lz", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      stringArray0[7] = "Lz";
      String string2 = StringUtils.replaceAll("Lz", "Lz", "Lz");
      assertEquals("Lz", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Lz", "Lz");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.stripToNull("Lz");
      assertEquals("Lz", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Lz", "Lz");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0126()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "b%?Vo@@L&#v]z&e(6%";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string0 = StringUtils.center("offse ca\not be negaNive", (-1), '`');
      assertEquals("offse ca\not be negaNive", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[4], (CharSequence) "offse ca\not be negaNive", (-1));
      assertEquals((-1), int1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.stripAccents("offse ca\not be negaNive");
      assertEquals("offse ca\not be negaNive", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "offse ca\not be negaNive");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("|");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0127()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.rightPad("!^Id@0Qz(uh`Zv", 35, "offset cannot be negative");
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "!^Id@0Qz(uh`Zvoffset cannot be nega";
      String string1 = StringUtils.center("!^Id@0Qz(uh`Zvoffset cannot be nega", 35, "!^Id@0Qz(uh`Zv");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "!^Id@0Qz(uh`Zvoffset cannot be nega";
      String string2 = StringUtils.strip("m", "R!");
      assertEquals("m", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "m";
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 35;
      longArray0[1] = (long) 35;
      longArray0[2] = (long) 35;
      longArray0[3] = 1L;
      longArray0[4] = (long) 35;
      longArray0[5] = (long) 35;
      longArray0[6] = (long) 35;
      longArray0[7] = (long) 35;
      longArray0[8] = (long) 35;
      String string3 = StringUtils.join(longArray0, '\\');
      assertEquals("35\\35\\35\\1\\35\\35\\35\\35\\35", string3);
      assertEquals(9, longArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new long[] {35L, 35L, 35L, 1L, 35L, 35L, 35L, 35L, 35L}, longArray0);
      
      charSequenceArray0[3] = (CharSequence) "35\u001D\u001D\u0001\u001D\u001D\u001D\u001D\u001D";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0128()  throws Throwable  {
      String string0 = StringUtils.rightPad("p{InCombiningDiacriticalMarks}+", 5743, '@');
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[2] = string0;
      stringArray0[3] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[4] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[5] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[6] = string0;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertEquals(7, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("p{InCombiningDiacriticalMarks}+", (-1889), (-3095));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.reverse("#7B-");
      assertEquals("-B7#", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints(stringArray0[2]);
      assertEquals(7, stringArray0.length);
      assertEquals(5743, intArray0.length);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.wrap((String) null, '@');
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.truncate("p{InCombiningDiacriticalMarks}+", 6, 1566);
      assertEquals("mbiningDiacriticalMarks}+", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", (-3095), '@');
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0129()  throws Throwable  {
      String string0 = StringUtils.defaultString("ve", "ve");
      assertEquals("ve", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("ve");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0130()  throws Throwable  {
      String string0 = StringUtils.repeat("o", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("o");
      assertEquals("O", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.stripEnd(string0, "O");
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string2, "o");
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((double[]) null, '[');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)9;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '[', (int) (byte)0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0131()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertSame(locale0, locale1);
      assertNotNull(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertNotNull(locale2);
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      
      String string1 = StringUtils.replace("", "v<In'#EsieV3w7BT", ",SpZ^cesFfb");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale2;
      objectArray0[1] = (Object) ",SpZ^cesFfb";
      objectArray0[2] = (Object) "";
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(locale2));
      
      String string2 = StringUtils.removeFirst("org.apache.commons.lang3.StringUtils", ",SpZ^cesFfb");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("or.apache.commons.laB3.StrinUtils", "", "AOr`>ji");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0132()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.trimToNull("org.apache.commons.lang3zCharsets");
      assertEquals("org.apache.commons.lang3zCharsets", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("org.apache.commons.lang3zCharsets", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("org.apache.commons.lang3zCharsets", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "*7");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      String string3 = StringUtils.valueOf(charArray0);
      assertEquals("0", string3);
      assertEquals(1, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'0'}, charArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("0", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0133()  throws Throwable  {
      String string0 = StringUtils.substringAfter("/>A/y{oXnU~C1", "' matches '");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "' matches '";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "' matches '", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '1', 0, 4);
      assertEquals("1' matches '11", string1);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("I5Tor31hZ'}kqb0X?&", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.defaultIfBlank("' matches '", "");
      assertEquals("' matches '", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.deleteWhitespace("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.repeat("1' matches '11", 117);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumeric("I5Tor31hZ'}kqb0X?&");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substringBetween("I5Tor31hZ'}kqb0X?&", "\"8h)Rpkf}/L3wy7", "N[5Y5)V");
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0134()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0135()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("`n03aBLK~&z~ok+%", '#');
      assertEquals("#`n03aBLK~&z~ok+%#", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("NqFd", 10, "\n");
      assertEquals("\n\n\nNqFd\n\n\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("\n\n\nNqFd\n\n\n", "ML]L\"(?$i3.9#");
      assertEquals("\n\n\nNqFd\n\n\n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.wrap("No instructins to disablefU_7SZu1o7hGV]", 't');
      assertEquals("tNo instructins to disablefU_7SZu1o7hGV]t", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\n");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ML]L\"(?$i3.9#");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("\n\n\nNqFd\n\n\n", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("ML]L\"(?$i3.9#");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("\n\n\nNqFd\n\n\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean3);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string5 = StringUtils.replaceChars(":(#q/ +;e@v/", "No instructins to disablefU_7SZu1o7hGV]", "TW{?GTF.8n6");
      assertEquals(":(#q/{+;@v/", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\n\n\nNqFd\n\n\n", (CharSequence) ":(#q/{+;@v/", 2);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray1 = StringUtils.split("tNo instructins to disablefU_7SZu1o7hGV]t", '#');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0136()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("\u0004$o@WoI?e@4estH", "\u0004$o@WoI?e@4estH", "\u0004$o@WoI?e@4estH");
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "\u0004$o@WoI?e@4estH", 'c');
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("n<Df]w:?MdJINR+}");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getDigits("n<Df]w:?MdJINR+}");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\u0004$o@WoI?e@4estH", (CharSequence) "n<Df]w:?MdJINR+}", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("n<Df]w:?MdJINR+}", stringArray1);
      assertFalse(boolean0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0137()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=vp!-/L-<ms9\"i.sa'x", (CharSequence) "=vp!-/L-<ms9\"i.sa'x", 7);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0138()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "Minimum abbreviation with ith offset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Minimum abbreviation with ith offset is %d", 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("hW)y( K.+$I_uXA+]d5");
      assertEquals("hW)y( K.+$I_uXA+]d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0139()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(" not be null", " not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " not be null", 1);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("", (-1), "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '7';
      charArray0[2] = 'W';
      charArray0[3] = '?';
      charArray0[4] = '?';
      charArray0[5] = '}';
      charArray0[6] = '.';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\'', '7', 'W', '?', '?', '}', '.'}, charArray0);
      
      String[] stringArray0 = StringUtils.substringsBetween("y|YBjme>pWr", " not be null", "");
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.getDigits("(%325Az}z6X!`[\".L");
      assertEquals("3256", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string3 = StringUtils.stripToEmpty(" not be null");
      assertEquals("not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0140()  throws Throwable  {
      String string0 = StringUtils.leftPad("{[0-9]+}", 13, "%7:7");
      assertEquals("%7:7%{[0-9]+}", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{[0-9]+}", (CharSequence) "%7:7", 18);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0141()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("g$U).lboyJs>");
      assertEquals("g$U).lboyJs>", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("g$U).lboyJs>");
      assertEquals("G$U).LBOYJS>", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("g$U).lboyJs>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", 34);
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?  ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?  ", "Ol!f40^i%!|#ARl");
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?  ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceOnce((String) null, "g$U).lboyJs>", "G$U).LBOYJS>");
      assertNull(string4);
      
      String string5 = StringUtils.replaceOnce("g$U).lboyJs>", (String) null, "Minimum abbreviation width is %d");
      assertEquals("g$U).lboyJs>", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string6 = StringUtils.leftPad("Minimum abbreviation width is %d", 34, "K|");
      assertEquals("K|Minimum abbreviation width is %d", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.stripToNull("StdIoExtension is active but no %s annotation was found.");
      assertEquals("StdIoExtension is active but no %s annotation was found.", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.repeat("g$U).lboyJs>", Integer.MIN_VALUE);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      
      String string9 = StringUtils.unwrap("wS\\T}UK;K?qP0>if", "G$U).LBOYJS>");
      assertEquals("wS\\T}UK;K?qP0>if", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0142()  throws Throwable  {
      String string0 = StringUtils.leftPad("RxLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RxLixe9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("RxLixe9", (-1), (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter(";kR? ]&Y;q#/SE>XT", (-792));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast(";kR? ]&Y;q#/SE>XT", 322);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("-rKq1?-7&O?Cxu29", "", 4939, (-1));
      assertEquals("-rKq1?-7&O?Cxu29", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.wrapIfMissing("", 'H');
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0143()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.replaceOnce("t3#@i07\"EeVDK'", (String) null, "`fh3_?bsy]4c?PO");
      assertEquals("t3#@i07\"EeVDK'", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "t3#@i07\"EeVDK'";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "ZOd.hhpPw";
      charSequenceArray0[3] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw";
      charSequenceArray0[4] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw";
      charSequenceArray0[5] = (CharSequence) "ZOd.hhpPw";
      charSequenceArray0[6] = (CharSequence) "t3#@i07\"EeVDK'";
      charSequenceArray0[7] = (CharSequence) "t3#@i07\"EeVDK'";
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0144()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Object[]) null, "-\"D}-Li}J__,Ed,C6");
      assertNull(string0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) ", ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Jkh8|u_qz", '\\');
      assertEquals("\\Jkh8|u_qz\\", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0145()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '|';
      charArray0[1] = 'u';
      charArray0[2] = 'H';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", ", charArray0);
      assertFalse(boolean0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'|', 'u', 'H'}, charArray0);
      
      String string0 = StringUtils.replace(", ", "Me~%6lYtVf&ZE", "Display name (m-_Y8\"XT;<-T", (-1830));
      assertEquals(", ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAlphaSpace(", ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringBeforeLast(", ", ", ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Display name (m-_Y8\"XT;<-T", (CharSequence) ", ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad("M~A2pYrx85Sv Z1#23W:U'z?$tT", 3);
      assertEquals("M~A2pYrx85Sv Z1#23W:U'z?$tT", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("The type must not be null", 51);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrapIfMissing("Display name (m-_Y8\"XT;<-T", 'T');
      assertEquals("TDisplay name (m-_Y8\"XT;<-T", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.defaultString(".{dk#-e!YK");
      assertEquals(".{dk#-e!YK", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.unwrap((String) null, "&");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0146()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      floatArray0[1] = (float) (-2882);
      floatArray0[0] = (float) (-2882);
      floatArray0[3] = (float) '{';
      floatArray0[4] = (float) (-2882);
      String string1 = StringUtils.join(floatArray0, '{', (-2882), (-2882));
      assertEquals("", string1);
      assertEquals(5, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {(-2882.0F), (-2882.0F), 0.0F, 123.0F, (-2882.0F)}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeStartIgnoreCase("5!)) vs ", (String) null);
      assertEquals("5!)) vs ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("5!)) vs ");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5!)) vs ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, "5!)) vs ", (-2882));
      assertNull(string3);
      
      String string4 = StringUtils.stripStart((String) null, "~%bgRZc3");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.getDigits((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "5!)) vs ");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = "Expected exactly one annotation to prvide an ArgumentSource, found %d.";
      String string7 = StringUtils.rotate((String) null, (-1));
      assertNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfBlank("Expected exactly one annotation to prvide an ArgumentSource, found %d.", supplier0);
      assertEquals("Expected exactly one annotation to prvide an ArgumentSource, found %d.", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      
      int int1 = StringUtils.compare((String) null, "ad' P", true);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "~%bgRZc3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0147()  throws Throwable  {
      String string0 = StringUtils.abbreviate(";kR? ]&Y;q#/SE>XT", ";kR? ]&Y;q#/SE>XT", 1295, 1295);
      assertEquals(";kR? ]&Y;q#/SE>XT", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("!U.]]jF6#I", ";kR? ]&Y;q#/SE>XT");
      assertEquals("!U.]]jF6#I", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter(";kR? ]&Y;q#/SE>XT", 2);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference((String) null, "!U.]]jF6#I");
      assertEquals("!U.]]jF6#I", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.left((String) null, 2);
      assertNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "Y9");
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string5 = StringUtils.upperCase("@um'Eq^P7J", locale0);
      assertEquals("@UM'EQ^P7J", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int1 = StringUtils.indexOfAny((CharSequence) "@um'Eq^P7J", "8dP");
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.trimToNull("8dP");
      assertEquals("8dP", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "!U.]]jF6#I";
      charSequenceArray0[1] = (CharSequence) ";kR? ]&Y;q#/SE>XT";
      charSequenceArray0[2] = (CharSequence) "@UM'EQ^P7J";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "!U.]]jF6#I";
      charSequenceArray0[5] = (CharSequence) "@UM'EQ^P7J";
      charSequenceArray0[6] = (CharSequence) "Y9";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("YZ,7/tc/", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("[;yv-bc{(u$*w&Tc");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfBlank("8dP", supplier0);
      assertEquals("8dP", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      
      char[] charArray0 = new char[0];
      int int2 = StringUtils.indexOfAny((CharSequence) "@UM'EQ^P7J", charArray0);
      assertEquals((-1), int2);
      assertEquals(0, charArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string9 = StringUtils.defaultString((String) null);
      assertEquals("", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0148()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "og.junitpiqneer.jupiter.params.DoubleRange", "Zr:=l(=%s}p");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0149()  throws Throwable  {
      String string0 = StringUtils.leftPad("RxLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RxLixe9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("RxLixe9", (-1), (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(", '", "RxLixe9", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("@DefaultLocale can only be used with language tag if language, country, and variant are not set", 'y');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.stripToNull("n");
      assertEquals("n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0150()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 16);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace(" ", "tnixpPL`_vmTj!Pi)S", " ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      String string2 = StringUtils.appendIfMissing(" ", "StdIo_S", charSequenceArray0);
      assertEquals(" ", string2);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("", " ");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '=', 2, 861);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0151()  throws Throwable  {
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceAll("\n", "\n", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[1], (-1789), (-1));
      assertEquals((-1), int2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBefore("\n", "\n");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int3 = StringUtils.indexOf((CharSequence) "\n", 46);
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("\n"));
      
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>(linkedHashSet0);
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet0.contains("\n"));
      assertFalse(linkedHashSet1.contains("\n"));
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet1, "??????????????????");
      assertEquals("", string3);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotNull(string3);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertFalse(linkedHashSet0.contains("\n"));
      assertFalse(linkedHashSet1.contains("\n"));
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[0], "\n");
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0152()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string1 = StringUtils.join(iterator0, 'h');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.replace("+<k5$Sol:+7x.^6FL", "-ZqjW?", "-ZqjW?", (int) 'h');
      assertEquals("+<k5$Sol:+7x.^6FL", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Iterator<Locale.FilteringMode> iterator1 = serviceLoader0.iterator();
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.left("", 'h');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat("", 4555);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "+<k5$Sol:+7x.^6FL", (CharSequence) "");
      assertEquals(0, int0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string5 = StringUtils.upperCase("", locale0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = '8';
      charArray0[7] = 'h';
      String string7 = StringUtils.valueOf(charArray0);
      assertEquals("shhhhh8h", string7);
      assertEquals(8, charArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertArrayEquals(new char[] {'s', 'h', 'h', 'h', 'h', 'h', '8', 'h'}, charArray0);
      
      charSequenceArray0[0] = (CharSequence) "shhhhh8h";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string8 = StringUtils.defaultString("[Uly.E");
      assertEquals("[Uly.E", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0153()  throws Throwable  {
      String string0 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "\r");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("o;uk# t-W&cF", 'h');
      assertEquals("ho;uk# t-W&cFh", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.removePattern((String) null, "ROAQ:bx3");
      assertNull(string2);
      
      String string3 = StringUtils.chop("i)_$3");
      assertEquals("i)_$", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      String string4 = StringUtils.rightPad("BB4<A/WM`+I4", (-1), 'e');
      assertEquals("BB4<A/WM`+I4", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "BB4<A/WM`+I4", (CharSequence) "BB4<A/WM`+I4", 66);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.wrap("u+6yZE~fo", 'e');
      assertEquals("eu+6yZE~foe", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isWhitespace("i)_$");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlpha("i)_$3");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.substringBeforeLast("eu+6yZE~foe", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("eu+6yZE~foe", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0154()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Display name '", "d;//<b:");
      assertEquals("Display name '", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("", (String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      String string4 = StringUtils.substringAfterLast((String) null, "d;//<b:");
      assertNull(string4);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string5 = StringUtils.wrapIfMissing((String) null, '&');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0155()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("g$U).lboyJs>");
      assertEquals("g$U).lboyJs>", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("g$U).lboyJs>", "Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("g$U).lboyJs>", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("g$U).lboyJs>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", 4);
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", "Ol!f40^i%!|#ARl");
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((float[]) null, '7', (-3237), (-3237));
      assertNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("Expected exactly one annotation to provide an ArgumentSource, found %d.T3}", "\r");
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.T3}", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("g$U).lboyJs>");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)58;
      String string6 = StringUtils.join(shortArray0, '~');
      assertEquals("58", string6);
      assertEquals(1, shortArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertArrayEquals(new short[] {(short)58}, shortArray0);
      
      String string7 = StringUtils.substringBetween((String) null, "Ol!f40^i%!|#ARl", (String) null);
      assertNull(string7);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width is %d", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0156()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) (-2882);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string1);
      
      String string2 = StringUtils.replacePattern((String) null, (String) null, "567Y8DWJN)NaV/");
      assertNull(string2);
      
      String string3 = StringUtils.rotate("9l3OV1;5d8", 5);
      assertEquals("1;5d89l3OV", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("L*x$RJ?}HAP4L.;eJ?", "\nn6%]/a0g\"-M", "QG");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase("9l3OV1;5d8");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("7w{#RACF", (String) null, (String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "9l3OV1;5d8", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0157()  throws Throwable  {
      String string0 = StringUtils.leftPad("X", 49, "RPy,JfC|/vBQ`+L7");
      assertEquals("RPy,JfC|/vBQ`+L7RPy,JfC|/vBQ`+L7RPy,JfC|/vBQ`+L7X", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("%,)&!D|>jA)'VF@b96Q");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "X", 11);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)24;
      shortArray0[1] = (short) (-580);
      shortArray0[2] = (short)99;
      shortArray0[3] = (short)3413;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'L', 0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0158()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.chop("Display name '");
      assertEquals("Display name ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("Display name ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString((String) null, "Invalid exceptionStatus");
      assertEquals("Invalid exceptionStatus", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((Object[]) null, '\'');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("Invalid exceptionStatus", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0159()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'Q';
      charArray0[2] = 'z';
      String string0 = StringUtils.chomp("(m-_Y8\"XT;<-T", "w)");
      assertEquals("(m-_Y8\"XT;<-T", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("w)", 'z');
      assertEquals("w)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(locale0));
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      assertNotNull(predicate0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = vector0.removeIf(predicate0);
      assertFalse(boolean0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) vector0, locale_FilteringMode0);
      assertNotNull(list0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "w)";
      charSequenceArray0[1] = (CharSequence) "C<s";
      charSequenceArray0[2] = (CharSequence) "(m-_Y8\"XT;<-T";
      charSequenceArray0[3] = (CharSequence) "C<s";
      charSequenceArray0[4] = (CharSequence) "-u41${!NI9\".7";
      charSequenceArray0[5] = (CharSequence) "w)";
      charSequenceArray0[6] = (CharSequence) "w)";
      charSequenceArray0[7] = (CharSequence) "C<s";
      charSequenceArray0[8] = (CharSequence) "(m-_Y8\"XT;<-T";
      String string2 = StringUtils.prependIfMissing("-u41${!NI9\".7", "w)", charSequenceArray0);
      assertEquals("-u41${!NI9\".7", string2);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("-u41${!NI9\".7", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0160()  throws Throwable  {
      String string0 = StringUtils.mid("{u LYDg=iz", (-276), (-276));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0161()  throws Throwable  {
      String string0 = StringUtils.unwrap("]Ele@Vejd9wqu2^", ']');
      assertEquals("]Ele@Vejd9wqu2^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0162()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("-DLf", 4146, '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.truncate(string1, 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.indexOf((CharSequence) "-DLf", (CharSequence) "-DLf");
      assertEquals(0, int0);
      
      String string4 = StringUtils.leftPad("", 4146, "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripToNull("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.removeEndIgnoreCase((String) null, string1);
      assertNull(string6);
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      byte[] byteArray0 = new byte[0];
      String string7 = StringUtils.join(byteArray0, '$', 0, (-655));
      assertEquals("", string7);
      assertEquals(0, byteArray0.length);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0163()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.vintage.TimeoutExtension", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:*Q<");
      assertEquals("v<In'#EsieV3w7BT", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripEnd("-qtzCCnZLZOgm:*Q<", "-qtzCCnZLZOgm:*Q<");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.getDigits("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = StringUtils.repeat("", 27);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      
      String string7 = StringUtils.replaceChars("", ":,x-A~:@zNSAMJ", "-qtzCCnZLZOgm:*Q<");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      
      String string8 = StringUtils.rightPad("o", 52, "v<In'#EsieV3w7BT");
      assertEquals("ov<In'#EsieV3w7BTv<In'#EsieV3w7BTv<In'#EsieV3w7BTv<I", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0164()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((short[]) null, 'A', 0, 0);
      assertNull(string4);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[3] = (Object) "";
      String string5 = null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, 0, 262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0165()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "\r", 'N');
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringBefore("\r", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("N\"6:[fC@Yb.$L#J|!T}B<u_YU>/4<J|!T}B<u_YU>/4<", 'N');
      assertEquals("N\"6:[fC@Yb.$L#J|!T}B<u_YU>/4<J|!T}B<u_YU>/4<N", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0166()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr_CA", locale1.toString());
      
      String string1 = StringUtils.replace("", "v<In'#EsieV3w7BT", ",SpZ^cesFfb");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) ",SpZ^cesFfb";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) set0;
      objectArray0[0] = (Object) "";
      objectArray0[6] = (Object) "-qtzCCnZLZOgm:*Q<";
      objectArray0[7] = (Object) "";
      String string2 = StringUtils.join(objectArray0, "");
      assertEquals(",SpZ^cesFfb[]-qtzCCnZLZOgm:*Q<", string2);
      assertEquals(8, objectArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "v<In'#EsieV3w7BT");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing(",SpZ^cesFfb", ',');
      assertEquals(",SpZ^cesFfb,", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0167()  throws Throwable  {
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", true);
      assertEquals(0, int0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string0 = StringUtils.rotate("/&J6~xcRoVbo", 0);
      assertEquals("/&J6~xcRoVbo", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((int[]) null, ':', 0, 0);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", 5547, ':');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "\n");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = ':';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Object varargs must not be null", charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'S', '=', '=', ':'}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) '=';
      floatArray0[1] = (float) ':';
      floatArray0[2] = (float) '=';
      String string4 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+#N@E1,4", 77, "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("Aborting to protect against StackOverflp{InCombiningDiacriticalMarks}+#N@E1,4", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.stripToNull((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0168()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "{[0-9]+}", (String) null, 118);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart((String) null, "8M`!VwI<J)*@-PkS");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("{[0-9]+}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", (char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeFirst((String) null, "h&TMXOoj_2>_?3T");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0169()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(94);
      assertNotNull(charBuffer0);
      assertEquals(94, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(94, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(94, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(94, charBuffer0.length());
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) charBuffer0;
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) charBuffer0;
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      charSequenceArray0[5] = (CharSequence) charBuffer0;
      charSequenceArray0[6] = (CharSequence) charBuffer0;
      charSequenceArray0[7] = (CharSequence) charBuffer0;
      boolean boolean0 = StringUtils.equalsAny(charBuffer0, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(94, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(94, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(94, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(94, charBuffer0.length());
      
      // Undeclared exception!
      StringUtils.repeat("fR[[\"%n#9Ut=r\"3pT{/", "\n", 1114111);
  }

  @Test(timeout = 4000)
  public void test0170()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("DEJm-v&xm=r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = null;
      String string1 = StringUtils.substringAfter((String) null, "DEJm-v&xm=r");
      assertNull(string1);
      
      String string2 = "VcWKjqA%";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "VcWKjqA%";
      stringArray1[1] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("VcWKjqA%", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0171()  throws Throwable  {
      String string0 = "\">:Nkl!&L0!T;<";
      String string1 = StringUtils.getIfBlank("\">:Nkl!&L0!T;<", (Supplier<String>) null);
      assertEquals("\">:Nkl!&L0!T;<", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "\">:Nkl!&L0!T;<";
      charSequenceArray0[1] = (CharSequence) "\">:Nkl!&L0!T;<";
      charSequenceArray0[2] = (CharSequence) "\">:Nkl!&L0!T;<";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\">:Nkl!&L0!T;<";
      stringArray0[1] = "\">:Nkl!&L0!T;<";
      stringArray0[2] = "\">:Nkl!&L0!T;<";
      stringArray0[3] = "\">:Nkl!&L0!T;<";
      stringArray0[4] = "\">:Nkl!&L0!T;<";
      stringArray0[5] = "\">:Nkl!&L0!T;<";
      stringArray0[6] = "\">:Nkl!&L0!T;<";
      stringArray0[7] = "\">:Nkl!&L0!T;<";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("\">:Nkl!&L0!T;<", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 8 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0172()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace(" ", " ", " ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("", " ");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("", "-1234.4836444196O3.0");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "-1234.4836444196O3.0");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " uF0bt'p7", " ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "-1234.4836444196O3.0", (CharSequence) "org.apache.commons.lang3.Charsets");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0173()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      floatArray0[1] = (float) (-2882);
      floatArray0[0] = (float) (-2882);
      floatArray0[3] = (float) '{';
      floatArray0[4] = (float) (-2882);
      String string1 = StringUtils.join(floatArray0, '{', (-2882), (-2882));
      assertEquals("", string1);
      assertEquals(5, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {(-2882.0F), (-2882.0F), 0.0F, 123.0F, (-2882.0F)}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeStartIgnoreCase("5!)) vs ", (String) null);
      assertEquals("5!)) vs ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("5!)) vs ");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5!)) vs ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, "5!)) vs ", (-2882));
      assertNull(string3);
      
      String string4 = StringUtils.stripStart((String) null, "~%bgRZc3");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.getDigits((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "5!)) vs ");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = "Expected exactly one annotation to prvide an ArgumentSource, found %d.";
      String string7 = StringUtils.rotate((String) null, (-1));
      assertNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfBlank("Expected exactly one annotation to prvide an ArgumentSource, found %d.", supplier0);
      assertEquals("Expected exactly one annotation to prvide an ArgumentSource, found %d.", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      
      int int1 = StringUtils.compare((String) null, "ad' P", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "~%bgRZc3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0174()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("maxWith cannot be negative", 3695, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripStart("ML]L\"(?$i3.9#", "No instructins to disablefU_7SZu1o7hGV]");
      assertEquals("ML]L\"(?$i3.9#", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrap("?", 'T');
      assertEquals("T?T", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("?");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("ML]L\"(?$i3.9#", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.wrap("Minimum abbreviation width is %d", "HH");
      assertEquals("HHMinimum abbreviation width is %dHH", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAlphaSpace("HHMinimum abbreviation width is %dHH");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string6 = StringUtils.replaceChars("A(p`4*", "No instructins to disablefU_7SZu1o7hGV]", (String) null);
      assertEquals("A(p`4*", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "ML]L\"(?$i3.9#", (CharSequence) "No instructins to disablefU_7SZu1o7hGV]", 7);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray1 = StringUtils.split("dmk1G@~YEq", '`');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      int int3 = StringUtils.lastIndexOfAny("T?T", (CharSequence[]) null);
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 3695;
      longArray0[1] = (long) 'T';
      longArray0[2] = (long) 7;
      longArray0[3] = (long) 7;
      longArray0[4] = (long) '`';
      longArray0[5] = (long) 3695;
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) '`';
      longArray0[8] = (long) (-1);
      String string7 = StringUtils.join(longArray0, '`', 2502, 2502);
      assertEquals("", string7);
      assertEquals(9, longArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertArrayEquals(new long[] {3695L, 84L, 7L, 7L, 96L, 3695L, (-1L), 96L, (-1L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0175()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("+%j=^PnA{", "+%j=^PnA{", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0176()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("\n", "\r");
      assertEquals("\r\n\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Strings must not be null", "Strings must not be null");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat("Illegal range. The step cannot be zero.", 434);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be null", "\r");
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      StringUtils.getDigits(string2);
  }

  @Test(timeout = 4000)
  public void test0177()  throws Throwable  {
      String[] stringArray0 = new String[0];
      boolean boolean0 = StringUtils.endsWithAny("c0bewB", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.equalsAny("c0bewB", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0178()  throws Throwable  {
      String string0 = StringUtils.stripStart(", '", ", '");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull(", '");
      assertEquals(", '", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Qgc0f5Dkq[}X");
      assertEquals(10, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.leftPad("4@m", 3733, '.');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getDigits("w}");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(0, int0);
      
      String string4 = StringUtils.stripToNull("offset cannot be negative");
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.swapCase("offset cannot be negative");
      assertEquals("OFFSET CANNOT BE NEGATIVE", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "4@m", 1430, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0179()  throws Throwable  {
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      String string0 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", 'L', 'T');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("|8a}FF#6c9C-)7", "|8a}FF#6c9C-)7");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.deleteWhitespace("maxWith cannot be negative");
      assertEquals("maxWithcannotbenegative", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "ZvM";
      stringArray0[3] = "";
      stringArray0[4] = "E#t&F";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertEquals(5, stringArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.overlay("Supplied value must be a valid byte literal between -32768 and 32767: [", "maxWithcannotbenegative", 3155, 0);
      assertEquals("maxWithcannotbenegative", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.abbreviateMiddle("Minimum abbreviation width is %d", "", (-2308));
      assertEquals("Minimum abbreviation width is %d", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0180()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 23, 684);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0181()  throws Throwable  {
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      charArray0[1] = 'L';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", charArray0);
      assertFalse(boolean1);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'T', 'L'}, charArray0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = StringUtils.substringBeforeLast("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string2 = StringUtils.rotate("", (-1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0182()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'J');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEnd("&-m\"", "IxM#;t{HBT{n");
      assertEquals("&-m\"", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0183()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'z');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("c4}QkvZ2Y_33','Z%", "org.junitpioneer.jupiter.params.Range", "iFOC{^/xyHq 4|qU})_");
      assertEquals("c4}QkvZ2Y_33','Z%", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "B16Ly'y9bQ3y}$$[&", true);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("<0fLJR@Ab<)u@fWi");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'z'}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("z", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        StringUtils.indexOf((CharSequence) charBuffer0, (-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Character", e);
      }
  }

  @Test(timeout = 4000)
  public void test0184()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char char0 = '|';
      String string1 = "d#3-.'";
      // Undeclared exception!
      StringUtils.center("d#3-.'", 65536, '|');
  }

  @Test(timeout = 4000)
  public void test0185()  throws Throwable  {
      String string0 = "RxLi\\xe9";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      byte[] byteArray0 = StringUtils.getBytes("RxLixe9", charset0);
      assertEquals(7, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)82, (byte)120, (byte)76, (byte)105, (byte)120, (byte)101, (byte)57}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      String string1 = "QL\"^s@_S~IS`$";
      String string2 = "d fo";
      String string3 = StringUtils.replaceFirst("QL\"^s@_S~IS`$", "d fo", (String) null);
      assertEquals("QL\"^s@_S~IS`$", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripEnd("RxLixe9", "QL\"^s@_S~IS`$");
      assertEquals("RxLixe9", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = "hZsU(Mr\\qgc.B{";
      String string6 = StringUtils.rotate("hZsU(Mrqgc.B{", 3163);
      assertEquals("c.B{hZsU(Mrqg", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      char char0 = '$';
      // Undeclared exception!
      StringUtils.center("' contains '", 1114111, '$');
  }

  @Test(timeout = 4000)
  public void test0186()  throws Throwable  {
      char char0 = 'N';
      // Undeclared exception!
      StringUtils.leftPad("{}", 65536);
  }

  @Test(timeout = 4000)
  public void test0187()  throws Throwable  {
      String string0 = StringUtils.center("Mx>`HvP", 8, "Mx>`HvP");
      assertEquals("Mx>`HvPM", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBeforeLast("Mx>`HvP", (String) null);
      assertEquals("Mx>`HvP", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Mx>`HvP", "Mx>`HvP");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnce("x=~L#S*PGn30]*", "M", "P+");
      assertEquals("x=~L#S*PGn30]*", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Mx>`HvPM", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.stripToEmpty("LG");
      assertEquals("LG", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isBlank("LG");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "x=~L#S*PGn30]*";
      charSequenceArray0[1] = (CharSequence) "Mx>`HvP";
      boolean boolean3 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertNotNull(serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      Iterator<Object> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      String string4 = StringUtils.join(iterator0, "x=~L#S*PGn30]*");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.Object]", serviceLoader0.toString());
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "P+", (CharSequence) null, 8);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0188()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 488);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0189()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      String string1 = StringUtils.removeStartIgnoreCase("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Could not resolve parameter of type %s.";
      stringArray0[1] = "Could not resolve parameter of type %s.";
      stringArray0[2] = "Could not resolve parameter of type %s.";
      stringArray0[3] = "Could not resolve parameter of type %s.";
      stringArray0[4] = "Could not resolve parameter of type %s.";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Could not resolve parameter of type %s.", string2);
      assertEquals(5, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("Could not resolve parameter of type %s.");
      assertTrue(boolean0);
      
      String string3 = StringUtils.deleteWhitespace("Could not resolve parameter of type %s.");
      assertEquals("Couldnotresolveparameteroftype%s.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("Could not resolve parameter of type %s.", string4);
      assertEquals(5, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.upperCase("Could not resolve parameter of type %s.");
      assertEquals("COULD NOT RESOLVE PARAMETER OF TYPE %S.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0190()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "-_hrT.D}1nS4a4cJt9";
      charSequenceArray0[1] = (CharSequence) "-_hrT.D}1nS4a4cJt9";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0191()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string1 = StringUtils.capitalize(", ");
      assertEquals(", ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, 'e');
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) ", ", (CharSequence) " ");
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ", ";
      String string3 = StringUtils.EMPTY;
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny(", ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isMixedCase(" ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.toRootUpperCase(", ");
      assertEquals(", ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.rightPad("CartesianProductTest can only take exactly one type of arguments source", 1495, '{');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.replaceIgnoreCase(" ", "Pc;]yW90j:H$", ", ");
      assertEquals(" ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      
      String string7 = StringUtils.substringBeforeLast("0eM}jBwP!01_2|r*Qw+", "@");
      assertEquals("0eM}jBwP!01_2|r*Qw+", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0192()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0193()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0194()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.stripEnd(string0, "?");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "?", 32767);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("?");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.truncate("Threshold must not be negative", 12, 5);
      assertEquals("st no", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.toRootLowerCase("I<+02");
      assertEquals("i<+02", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "S^BYEUa34)\"{}`6", "S^BYEUa34)\"{}`6");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0196()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("\r", "\r", 3);
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Object varargs must not bp null");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "Object varargs must not bp null", "nN+5PoCzEP>2|R");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.substring("Object varargs must not bp null", 13, (-1478));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("", "fU_7SZu1o7hGV]fU_7SZu1o7hGV]");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.substring("", 6460);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("d6", "fU_7SZu1o7hGV]fU_7SZu1o7hGV]");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate(" vs ", (-1109));
      assertEquals("vs  ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(13));
      
      String string4 = StringUtils.join((List<?>) linkedList0, ',', 65536, (-137));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(13));
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("", "Object varargs must not bp null", stringArray0);
      assertEquals("Object varargs must not bp null", string5);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(12, stringArray0.length);
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0197()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, 'F');
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, 128);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-1);
      String string2 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\u000E7\uFFFD", string2);
      assertEquals(3, byteArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)14, (byte)55, (byte) (-1)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0198()  throws Throwable  {
      String string0 = StringUtils.substringBefore("eF9", (String) null);
      assertEquals("eF9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0199()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((short[]) null, '7', 0, 0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.join((float[]) null, '\'', 0, (-3237));
      assertNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((short[]) null, 'E');
      assertNull(string6);
      
      String string7 = StringUtils.substringBetween("", "", "1^%t>92! MV3.YRF`");
      assertNull(string7);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0200()  throws Throwable  {
      String string0 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "\r");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (-604));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("\r", "fU_7SZu1o7hGV]No instructins to disable", false);
      assertEquals((-89), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.trimToNull("fU_7SZu1o7hGV]No instructins to disable");
      assertEquals("fU_7SZu1o7hGV]No instructins to disable", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", 9, 9);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string2 = "\\u";
      String string3 = StringUtils.unwrap(string2, 'Y');
      assertEquals("\\u", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int3 = StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) string2);
      assertEquals(0, int3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals((-1), int4);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test0201()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst(" ", " ", "lWcO83~bFy!q");
      assertEquals("lWcO83~bFy!q", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase(" ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean0 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "lWcO83~bFy!q", (CharSequence) " ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split(" vs ", '6');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase(" vs ", stringArray0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("lWcO83~bFy!q"));
      
      boolean boolean3 = linkedList0.add((Object) " vs ");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("lWcO83~bFy!q"));
      assertTrue(linkedList0.contains(" vs "));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      
      boolean boolean4 = linkedList0.offer(locale_FilteringMode1);
      assertTrue(boolean4);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("lWcO83~bFy!q"));
      assertTrue(linkedList0.contains(" vs "));
      
      String string3 = StringUtils.join((Iterable<?>) linkedList0, 'V');
      assertEquals(" vs VIGNORE_EXTENDED_RANGES", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("lWcO83~bFy!q"));
      assertTrue(linkedList0.contains(" vs "));
      
      String string4 = StringUtils.removeEnd(" ", (String) null);
      assertEquals(" ", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0202()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertEquals("[Search and Replace array lengths don't match: ]", stack0.toString());
      assertTrue(stack0.contains("Search and Replace array lengths don't match: "));
      
      boolean boolean1 = stack0.add("Search and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[Search and Replace array lengths don't match: , Search and Replace array lengths don't match: ]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Search and Replace array lengths don't match: "));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.isEmpty());
      assertEquals("[Search and Replace array lengths don't match: , Search and Replace array lengths don't match: ]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains("Search and Replace array lengths don't match: "));
      
      String string0 = StringUtils.join(iterator0, 'Q');
      assertEquals("Search and Replace array lengths don't match: QSearch and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      assertFalse(stack0.isEmpty());
      assertEquals("[Search and Replace array lengths don't match: , Search and Replace array lengths don't match: ]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("Search and Replace array lengths don't match: "));
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: QSearch and Replace array lengths don't match: ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0203()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("(MIl>&H");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(8, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes("(MIl>&H", charset0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)77, (byte)73, (byte)108, (byte)62, (byte)127, (byte)38, (byte)72}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      String string0 = StringUtils.replaceFirst("(MIl>&H", "OwTz3;Htub![Y&?R _K", (String) null);
      assertEquals("(MIl>&H", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("OwTz3;Htub![Y&?R _K", "(MIl>&H");
      assertEquals("OwTz3;Htub![Y&?R _K", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.rotate("OwTz3;Htub![Y&?R _K", (-16));
      assertEquals(" _KOwTz3;Htub![Y&?R", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = "\\u";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) string3;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) " _KOwTz3;Htub![Y&?R";
      charSequenceArray0[3] = (CharSequence) "(MIl>&H";
      String string4 = StringUtils.center("(MIl>&H", 18, 'F');
      assertEquals("FFFFF(MIl>&HFFFFF", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      charSequenceArray0[4] = (CharSequence) "FFFFF(MIl>&HFFFFF";
      String string5 = StringUtils.prependIfMissing(string3, string3, charSequenceArray0);
      assertEquals("\\u", string5);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.stripEnd("Array and element cannot both be null", "Array and element cannot both be null");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-16)));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains((-16)));
      
      boolean boolean0 = linkedList1.add((Object) charSequenceArray0[1]);
      assertTrue(boolean0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains((-16)));
      
      boolean boolean1 = linkedList1.offer("Array and element cannot both be null");
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains("Array and element cannot both be null"));
      assertFalse(linkedList1.contains((-16)));
      
      String string7 = StringUtils.join((Iterable<?>) linkedList1, '(');
      assertEquals("(Array and element cannot both be null", string7);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string7);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertEquals(2, linkedList1.size());
      assertTrue(linkedList1.contains("Array and element cannot both be null"));
      assertFalse(linkedList1.contains((-16)));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "(MIl>&H", (CharSequence) "FFFFF(MIl>&HFFFFF", (-16));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0204()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      String string1 = StringUtils.uncapitalize("16.0W16.0W16.0W16.0W16.0W0.0");
      assertEquals("16.0W16.0W16.0W16.0W16.0W0.0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split((String) null, "or.apache.commons.lan3.StrinUtils");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0205()  throws Throwable  {
      String string0 = StringUtils.leftPad("RxLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RxLixe9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("|3<nz#?4Dsw5?FmLhDV");
      assertEquals("|3<NZ#?4dSW5?fMlHdv", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeIgnoreCase("N%tjW", " doesn't contain any substring.");
      assertEquals("N%tjW", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("RxLixe9"));
      
      String string4 = StringUtils.stripToNull("N%tjW");
      assertEquals("N%tjW", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string5 = StringUtils.prependIfMissing("8_}Jm;:Jp5U<zb", "", charSequenceArray0);
      assertEquals("8_}Jm;:Jp5U<zb", string5);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("8_}Jm;:Jp5U<zb");
      assertFalse(boolean0);
      
      String string6 = StringUtils.LF;
      assertEquals("\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0206()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("ue^4Amc:kTW$ =L{}dGX;`", "mD9", "mD9");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0207()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("u-e^4Amc:kTW$ =L{}dGX;`", " ", " ");
      assertNull(stringArray0);
      
      String string1 = StringUtils.overlay("w 8fVXcU-NPx", "}P", (-2649), 63);
      assertEquals("}P", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("}P", 63);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0208()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[1] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[2] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[3] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[4] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 2375);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.toRootUpperCase("\"kTDsY[YAyA`[8h[");
      assertEquals("\"KTDSY[YAYA`[8H[", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.StringUtils", "No instructins to disable");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("No instructins to disable");
      assertEquals("NO INSTRUCTINS TO DISABLE", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.rightPad("\"kTDsY[YAyA`[8h[", (-1), "NO INSTRUCTINS TO DISABLE");
      assertEquals("\"kTDsY[YAyA`[8h[", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replacePattern("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", "No instructins to disable", "org.junitpioneer.jupiter.params.Range");
      assertEquals("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceChars("s9$", ":SH-,JG<UuI4.", "8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange");
      assertEquals("s9$", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((long[]) null, ')', (-1), 76);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "s9$", "1lBhRAK$3-H*a^K@}H7X;u");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      int int2 = StringUtils.indexOfAny((CharSequence) "8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", charArray0);
      assertEquals(9, int2);
      assertEquals(3, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {')', ')', ')'}, charArray0);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[4], (CharSequence) "8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange");
      assertFalse(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0209()  throws Throwable  {
      String string0 = StringUtils.substringAfter("/>A/y{oXnU~C1", "' matches '");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[1] = (CharSequence) "' matches '";
      charSequenceArray0[2] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "' matches '", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      char char0 = '1';
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '1', 0, 4);
      assertEquals("/>A/y{oXnU~C11' matches '1/>A/y{oXnU~C11", string1);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "I5Tor31hZ'}kqb0X?&";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("I5Tor31hZ'}kqb0X?&", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultIfBlank("' matches '", "");
      assertEquals("' matches '", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.unwrap("/>A/y{oXnU~C11' matches '1/>A/y{oXnU~C11", "/>A/y{oXnU~C11' matches '1/>A/y{oXnU~C11");
      assertEquals("/>A/y{oXnU~C11' matches '1/>A/y{oXnU~C11", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'n', (-798), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -798
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0210()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'Q';
      charArray0[2] = 'z';
      charArray0[3] = 'Q';
      charArray0[4] = 'z';
      charArray0[5] = '\'';
      charArray0[6] = ':';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("2QzQz':", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', 'Q', 'z', 'Q', 'z', '\'', ':'}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "2QzQz':", charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'2', 'Q', 'z', 'Q', 'z', '\'', ':'}, charArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "2QzQz':";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "2QzQz':";
      charSequenceArray0[3] = (CharSequence) "2QzQz':";
      charSequenceArray0[4] = (CharSequence) "2QzQz':";
      charSequenceArray0[5] = (CharSequence) "2QzQz':";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultString("2QzQz':", "2QzQz':");
      assertEquals("2QzQz':", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, '2');
      assertEquals("2QzQz':222QzQz':22QzQz':22QzQz':22QzQz':", string2);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[3], "2QzQz':222QzQz':22QzQz':22QzQz':22QzQz':");
      assertEquals(0.77, double0, 0.01);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween((String) null, "2QzQz':", "2QzQz':");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0211()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Cannot store ", "Cannot store ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultIfBlank("#tG,`cF", "Cannot store ");
      assertEquals("#tG,`cF", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", 1685, 7);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("Cannot store ", "#tG,`cF", stringArray0);
      assertEquals("Cannot store #tG,`cF", string1);
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.unwrap("Cannot store #tG,`cF", 'W');
      assertEquals("Cannot store #tG,`cF", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.joinWith("[W:ks0NxQ0N", stringArray0);
      assertEquals("", string3);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.remove("#tG,`cF", 'q');
      assertEquals("#tG,`cF", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceChars("Cannot store #tG,`cF", "Cannot store ", "(r-I?");
      assertEquals("(r--??#G,`cF", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substringBetween("(r-I?", "[W:ks0NxQ0N");
      assertNull(string6);
      
      String string7 = StringUtils.substringAfter("", 40);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.stripToNull("VR4G,+, ;>fbRJrRb*");
      assertEquals("VR4G,+, ;>fbRJrRb*", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Cannot store ", "(r-I?");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string9 = StringUtils.defaultString("VR4G,+, ;>fbRJrRb*");
      assertEquals("VR4G,+, ;>fbRJrRb*", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      
      String string10 = StringUtils.substring("", (-1), Integer.MAX_VALUE);
      assertEquals("", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      
      String string11 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string11);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 40;
      doubleArray0[1] = (double) 1685;
      doubleArray0[2] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'q', 7, 120);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0212()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 40);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "A(NXT<6PFz";
      String string0 = StringUtils.prependIfMissingIgnoreCase("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", "A(NXT<6PFz", charSequenceArray0);
      assertEquals("A(NXT<6PFzg0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A(NXT<6PFzg0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "A(NXT<6PFzg0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("A(NXT<6PFzg0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.deleteWhitespace("ZvM");
      assertEquals("ZvM", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertEquals(4, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.overlay("+4NJP#t\"q", "Never disable parameterized test method itself", 40, 40);
      assertEquals("+4NJP#t\"qNever disable parameterized test method itself", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0213()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("chV");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0214()  throws Throwable  {
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      String string0 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", 'L', 'T');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("|8a}FF#6c9C-)7", "|8a}FF#6c9C-)7");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK", ";", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfAny("E#t&F", stringArray0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.toRootLowerCase("+\"sEiwY)y:,=`XJg");
      assertEquals("+\"seiwy)y:,=`xjg", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0215()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Comparator should not be null.", "Comparator should not be null.", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0216()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 851);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.strip("G@F", ";%Y*8LHyU4K");
      assertEquals("G@F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase((String) null);
      assertNull(string1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(851));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(851));
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'I', 10, (-1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(10));
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty(charSequenceArray0[0], supplier0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0217()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '5');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0218()  throws Throwable  {
      String string0 = StringUtils.remove("g~zm<-HQei!BQ2_CjhO", 'z');
      assertEquals("g~m<-HQei!BQ2_CjhO", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0219()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " must return `CartesianProductTest.Sets`";
      stringArray0[1] = "clone";
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(" must return `CartesianProductTest.Sets`", "clone");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, "clone", "Ystjhp,");
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd(" must return `CartesianProductTest.Sets`", "}6sk5af+`");
      assertEquals(" must return `CartesianProductTest.Set", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("Test '%s' was supposed to run no longer than %d ms.");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.repeat("NWQ2*p%?d", 27);
      assertEquals("NWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?dNWQ2*p%?d", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width with offset is %d", (String) null);
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.replaceFirst((String) null, "NWQ2*p%?d", "Y~8j!iPH");
      assertNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "clone", (CharSequence) null, (-1050));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0220()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("15k_]WDL'Nm|C/mk.h", 7);
      assertEquals("|C/mk.h", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0221()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.defaultString("\r", (String) null);
      assertEquals("\r", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = null;
      String string5 = "Strings must not be null";
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Strings must not be null", "\r");
      assertNull(stringArray0);
      
      String string6 = StringUtils.substring("\r", (-5728), (-137));
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0222()  throws Throwable  {
      String string0 = StringUtils.abbreviate("DEJm-v&xm=r", "", 31, (-1244));
      assertEquals("DEJm-v&xm=r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("", "', has a length less than 2");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0223()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = '\"';
      charArray0[2] = 'T';
      charArray0[3] = 'Z';
      charArray0[4] = '<';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("h\"TZ<", string0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'h', '\"', 'T', 'Z', '<'}, charArray0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "h\"TZ<", (CharSequence) "h\"TZ<", 15);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "h\"TZ<", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isMixedCase("h\"TZ<");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("h\"TZ<");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfterLast("h\"TZ<", "h\"TZ<");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = StringUtils.countMatches((CharSequence) "", 'Z');
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("h\"TZ<", "", (CharSequence[]) null);
      assertEquals("h\"TZ<", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(" vs ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBetween("...", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) 'T';
      intArray0[1] = (int) 'Z';
      intArray0[2] = (int) '\"';
      intArray0[3] = (int) 'h';
      String string4 = StringUtils.join(intArray0, '1', 0, 0);
      assertEquals("", string4);
      assertEquals(4, intArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new int[] {84, 90, 34, 104}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0224()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      vector0.ensureCapacity(50);
      assertTrue(vector0.isEmpty());
      assertEquals(50, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = vector0.add((Locale.FilteringMode) null);
      assertTrue(boolean0);
      assertEquals(50, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains(locale_FilteringMode0));
      
      boolean boolean1 = vector0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("[null, AUTOSELECT_FILTERING]", vector0.toString());
      assertEquals(50, vector0.capacity());
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.abbreviateMiddle("3RYoO", (String) null, 50);
      assertEquals("3RYoO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.replaceEach("3RYoO", stringArray0, stringArray0);
      assertEquals("3RYoO", string3);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.repeat("3RYoO", 16);
      assertEquals("3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO3RYoO", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.abbreviateMiddle("3RYoO", (String) null, 5);
      assertEquals("3RYoO", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isNumeric("3RYoO");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
  }

  @Test(timeout = 4000)
  public void test0225()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test0226()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, ".A-1ZjLylvBDex");
      assertNull(stringArray0);
      
      String string0 = StringUtils.join((Object[]) null, ".A-1ZjLylvBDex", 2628, 2628);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0227()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      String string0 = StringUtils.rightPad("9IMs6/W oje*ne", 938);
      assertEquals("9IMs6/W oje*nestring0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "object");
      assertEquals(1, int0);
      
      String string2 = StringUtils.stripToNull("g");
      assertEquals("g", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.appendIfMissingIgnoreCase((String) null, "oy<1Sy^V2n", stringArray0);
      assertEquals(4, stringArray0.length);
      assertNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "9IMs6/W oje*ne", (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charArray0);
      assertEquals(0, int2);
      assertEquals(1, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-458));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0228()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.center("...", 223, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV...VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "{[0-9]+}", (String) null, 118);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart((String) null, "8M`!VwI<J)*@-PkS");
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.join((Object[]) null, (String) null, 1909, 3862);
      assertNull(string3);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV...VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.");
  }

  @Test(timeout = 4000)
  public void test0229()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[4] = (-3.1042604F);
      String string0 = StringUtils.uncapitalize("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("\" should have a parent context.", "n", 5, 25);
      assertEquals("nuld have a parent conten", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("nuld have a parent conten", "\" should have a parent context.");
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("\" should have a parent context."));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      boolean boolean1 = stack0.add((Object) locale_FilteringMode0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[REJECT_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("\" should have a parent context."));
      
      String string2 = StringUtils.join((List<?>) stack0, "\" should have a parent context.", 32767, 14);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[REJECT_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("\" should have a parent context."));
      
      int int0 = StringUtils.countMatches((CharSequence) "\" should have a parent context.", 'b');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0230()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with ffset is %d{!#`&dyF~ZTr;dw";
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with ffset is %d{!#`&dyF~ZTr;dw", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with ffset is %d{!#`&dyF~ZTr;dw", 4452);
  }

  @Test(timeout = 4000)
  public void test0231()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      String string1 = StringUtils.substring("Fk*P LBUeM`/W", 718, 718);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("Fk*P LBUeM`/W", "\r");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.substring("", 718);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "Fk*P LBUeM`/W");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.rotate("", 718);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.appendIfMissing("", "org.junitpioneer.jupiter.CartesianProductTestExtension", charSequenceArray0);
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string4);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string5);
      
      boolean boolean3 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string6 = StringUtils.abbreviateMiddle("iU,p ``tk926j", " I5?Hk-'q", 1466);
      assertEquals("iU,p ``tk926j", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean4 = StringUtils.startsWithAny("iU,p ``tk926j", charSequenceArray0);
      assertFalse(boolean4);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      String string7 = StringUtils.trimToNull("Z:;V@Xk~:le{2u=D");
      assertEquals("Z:;V@Xk~:le{2u=D", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0232()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0233()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'z');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.removeStart("gmHg_\\I|", (String) null);
      assertEquals("gmHg_\\I|", string2);
      assertNotNull(string2);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("gmHg_\\I|", (String) null);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0234()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, ",qyApuZ:5", "9).;Zpb{bq|I}?}");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "test-template-invocation";
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.rotate("...", 706);
      assertEquals("...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '=', 2804, 2804);
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("org.junitpioneer.jupiter.CartesianProductTestExtension", 4, ':');
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = ':';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'=', ':', '=', '=', ':', ':', ':'}, charArray0);
      
      int[] intArray1 = StringUtils.toCodePoints(",qyApuZ:5");
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {44, 113, 121, 65, 112, 117, 90, 58, 53}, intArray1);
  }

  @Test(timeout = 4000)
  public void test0235()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      
      String string0 = StringUtils.substringBeforeLast((String) null, "\n\r");
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'Z';
      charArray0[1] = ' ';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean2);
      assertEquals(2, charArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'Z', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0236()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("5*=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0237()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace(".v.z.4_F", ".v.z.4_F", "RxLixe9");
      assertEquals("RxLixe9", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "RxLixe9";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "RxLixe9";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.swapCase("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", ".v.z.4_F");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "Fk*P LBUeM`/Wi&I?g0jSh}UM+zB\"F", ".ug*B?I2I");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("", (-5237), '4');
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      
      int int1 = StringUtils.compareIgnoreCase("{5YUk.&|", "EmXi", false);
      assertEquals(22, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0238()  throws Throwable  {
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'T';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'T';
      intArray0[1] = (-3576);
      String string0 = StringUtils.join(intArray0, 'D');
      assertEquals("84D-3576", string0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {84, (-3576)}, intArray0);
      
      String string1 = StringUtils.trimToNull("84D-3576");
      assertEquals("84D-3576", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfAny("84D-3576", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0);
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(true));
      
      String string2 = StringUtils.substring("84D-3576", 84, 3543);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.ordinalIndexOf("", "84D-3576", 3543);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "84D-3576", (CharSequence[]) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      String string3 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", (-1), 'T');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", (CharSequence) null, 6);
      assertEquals((-1), int4);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      String string4 = StringUtils.replaceFirst("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", "B4.7ozl`ZbYkR=Kx2", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0239()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0240()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Q");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBetween((String) null, "Q", (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Q", (CharSequence) null, 4056);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0241()  throws Throwable  {
      String string0 = StringUtils.mid(" vs ", (-659), 3088);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " vs ", "0?0?0?0?-527?0?0|uQp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0242()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("R", supplier0);
      assertEquals("R", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("GMT");
      assertEquals("GMT", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad("\n", (-2662), "\n");
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("R", "\n");
      assertFalse(boolean0);
      
      String string3 = StringUtils.upperCase("\n");
      assertEquals("\n", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "d|FBQ#G+Uu._>u6R)&";
      stringArray0[1] = "GMT";
      stringArray0[2] = "\n";
      stringArray0[3] = "GMT";
      stringArray0[4] = "GMT";
      stringArray0[5] = "R";
      stringArray0[6] = "R";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.mid("R", (-2662), 125);
      assertEquals("R", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0243()  throws Throwable  {
      String string0 = StringUtils.center("jPjv", 1, "jPjv");
      assertEquals("jPjv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0244()  throws Throwable  {
      String string0 = StringUtils.center("org.apache.commons.lang3.CharSequenceUtils", 12, "9).;Zpb{bq|I}?}");
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("org.apache.commons.lang3.CharSequenceUtils", "sGM%da?RJOl");
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap((String) null, 'a');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("fkTm_N`iU_gy9^");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(",qyApuZ:5", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("org.apache.commons.lang3.CharSequenceUtils");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.upperCase("fkTm_N`iU_gy9^");
      assertEquals("FKTM_N`IU_GY9^", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.CharSequenceUtils", "bjq>&#w}K:rTGY)`", 32);
      assertEquals("org.apacbjq>&#w}K:rTGY)`nceUtils", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.reverse("bjq>&#w}K:rTGY)`");
      assertEquals("`)YGTr:K}w#&>qjb", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.rotate(":HZ|", 1666);
      assertEquals("Z|:H", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      int[] intArray0 = StringUtils.toCodePoints("Z|:H");
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {90, 124, 58, 72}, intArray0);
      
      String string8 = StringUtils.wrap("", 'a');
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0245()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMbrks}+");
      assertEquals("p{InCombiningDiacriticalMbrks}+", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, "\n");
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replace("\n", "", "\n");
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "p{InCombiningDiacriticalMbrks}+";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.rotate((String) null, (-1));
      assertNull(string3);
      
      String string4 = StringUtils.join((int[]) null, '=', 1438, 104);
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("org.apache.commons.lang3.StringUtils", 32, 'S');
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.defaultString("Object varargs must not be null", "org.apache.commons.lang3.StringUtils");
      assertEquals("Object varargs must not be null", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = 'S';
      charArray0[5] = '=';
      charArray0[6] = '=';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'S', '=', '=', '=', 'S', '=', '='}, charArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) '=';
      floatArray0[3] = (float) 32;
      floatArray0[4] = (float) '=';
      floatArray0[5] = (float) '=';
      floatArray0[6] = 1.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '=', 2, 104);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0246()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.substring("e%*x@tr^", (int) '>');
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "e%*x@tr^";
      String string2 = StringUtils.swapCase("Search and Replace array lengths don't match: ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string3 = StringUtils.appendIfMissing("e%*x@tr^", (CharSequence) null, charSequenceArray0);
      assertEquals("e%*x@tr^", string3);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains((-1304)));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, ", ", (String) null, (-1304));
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[2]);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      doubleArray0[2] = (double) (-1304);
      byte[] byteArray0 = StringUtils.getBytes("BH_v|6)Z", (String) null);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte)72, (byte)95, (byte)118, (byte)124, (byte)54, (byte)41, (byte)90}, byteArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("e%*x@tr^", 32, (-1304));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0247()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.chop("Display name '");
      assertEquals("Display name ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("t3#@i07\"EeVDK'", (String) null, "Un[CX[:}#*}Az1");
      assertEquals("t3#@i07\"EeVDK'", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Display name '", (String) null, 102);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("t3#@i07\"EeVDK'", stringArray0);
      assertEquals(13, int0);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllLowerCase("t3#@i07\"EeVDK'");
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("t3#@i07\"EeVDK'");
      assertEquals("t3#@i07\"eevdk'", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Display name ", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.wrap("t3#@i07\"EeVDK'", '#');
      assertEquals("#t3#@i07\"EeVDK'#", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0248()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("-DLf", 4146, '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string1));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("-DLf", string1, (CharSequence[]) null);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) "-DLf", 0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      
      String string4 = StringUtils.right("El?Z_#Fr_$*", 53);
      assertEquals("El?Z_#Fr_$*", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string5 = StringUtils.substringAfter("Strings must not be null", (String) null);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0249()  throws Throwable  {
      String string0 = StringUtils.substringAfter(".A-ZjLylvBDex", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0250()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:r*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      int int0 = StringUtils.indexOfAny((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("EmXi", 'I');
      assertEquals("IEmXiI", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 24;
      intArray0[1] = (-312);
      intArray0[2] = (-312);
      intArray0[3] = (-312);
      intArray0[4] = (int) '=';
      intArray0[5] = (int) 'I';
      String string5 = StringUtils.join(intArray0, 'I', 10, 6);
      assertEquals("", string5);
      assertEquals(6, intArray0.length);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new int[] {24, (-312), (-312), (-312), 61, 73}, intArray0);
      
      String string6 = StringUtils.rightPad("", (-312), 'H');
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, '\\');
      assertEquals("\\org.junitpioneer.jupiter.params.ShortRange\\", string7);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0251()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst(" ", " ", "lWcO83~bFy!q");
      assertEquals("lWcO83~bFy!q", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.toRootUpperCase(" ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean0 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "lWcO83~bFy!q", (CharSequence) " ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split(" vs ", '6');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase(" vs ", stringArray0);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = StringUtils.compare((String) null, "bW");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.repeat((String) null, 16);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0252()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[IGNORE_EXTENDED_RANGES]", stack0.toString());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean1 = stack0.add(locale_FilteringMode1);
      assertTrue(boolean1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[IGNORE_EXTENDED_RANGES, EXTENDED_FILTERING]", stack0.toString());
      assertTrue(stack0.contains(locale_FilteringMode1));
      
      int int0 = StringUtils.compare((String) null, "bW");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.repeat((String) null, 16);
      assertNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 16);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("CY_%YgpF'F03tAv ", 'R', 'R');
      assertEquals("CY_%YgpF'F03tAv ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("test-template-invocation");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'B');
      assertEquals("", string1);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string2 = StringUtils.join((Iterable<?>) serviceLoader0, '.');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string3 = StringUtils.strip("Arguments cannot both be null");
      assertEquals("Arguments cannot both be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverseDelimited("", '}');
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0254()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("fI!ftpZQ/#", "*[oj$)f[5v\"@p8r");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0255()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'T';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "maxWith cannot be negative", charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'L', 'L', 'T'}, charArray0);
      
      boolean boolean2 = StringUtils.isAlphaSpace("maxWith cannot be negative");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string0 = StringUtils.substringBeforeLast("maxWith cannot be negative", "maxWith cannot be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "?", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.isWhitespace("maxWith cannot be negative");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string1 = StringUtils.rotate("Expected exactly one annotation to prvide an ArgumentSource, found %d.", 3695);
      assertEquals("y one annotation to prvide an ArgumentSource, found %d.Expected exactl", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("Aborting to protect against StackOverflowError - output of one loop is the input of another", supplier0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.compare("maxWith cannot be negative", "Aborting to protect against StackOverflowError - output of one loop is the input of another", true);
      assertEquals(44, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0256()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\r", "\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0257()  throws Throwable  {
      String string0 = StringUtils.leftPad("RxLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RxLixe9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "RxLixe9");
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "RxLixe9";
      String string4 = StringUtils.removeStartIgnoreCase("RxLixe9", "2gOGd9E_?D.");
      assertEquals("RxLixe9", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[3], "");
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.rightPad("8M`!VwI<J)*@-PkS", 50, "RxLixe9");
      assertEquals("8M`!VwI<J)*@-PkSRxLixe9RxLixe9RxLixe9RxLixe9RxLixe", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.getDigits("Minimum abbreviation width with offset is %d");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.indexOf((CharSequence) "j", (CharSequence) "RxLixe9");
      assertEquals((-1), int0);
      
      String string7 = StringUtils.leftPad("", 50);
      assertEquals("                                                  ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.substringAfter("2gOGd9E_?D.", 2967);
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      
      String[] stringArray0 = StringUtils.split("Ld+G)", '(');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0258()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 5421);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0259()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(string0.equals((Object)charSequence0));
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 7);
      assertEquals(0, int0);
      
      String string2 = StringUtils.swapCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0260()  throws Throwable  {
      String string0 = StringUtils.substring("i", 256, 57);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '}';
      charArray0[1] = '8';
      charArray0[2] = '7';
      charArray0[3] = ':';
      charArray0[4] = 'G';
      charArray0[5] = '9';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'}', '8', '7', ':', 'G', '9'}, charArray0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0261()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, 262, 262);
      assertEquals("", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 262;
      longArray0[1] = (long) 262;
      longArray0[2] = (long) 262;
      longArray0[3] = (long) 262;
      longArray0[4] = (long) 262;
      longArray0[5] = (long) 262;
      String string2 = StringUtils.replace((String) null, "-qtzCCnZLZOgm:*Q<", "");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBefore("Illegal range. There's no way to get from %s to %s with a step of %s.", "dW}n]rs");
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "-qtzCCnZLZOgm:*Q<", (-2537));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceOnce("Illegal range. There's no way to get from %s to %s with a step of %s.", (String) null, (String) null);
      assertEquals("Illegal range. There's no way to get from %s to %s with a step of %s.", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOf(charSequenceArray0[1], (CharSequence) null);
      assertEquals((-1), int1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0262()  throws Throwable  {
      String string0 = StringUtils.capitalize("[R.:)Z2x#oY");
      assertEquals("[R.:)Z2x#oY", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("i:*#cy", 0, 'S');
      assertEquals("i:*#cy", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "My=g< e_~Y>v!\"", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripStart("en6%]/a0g\"-M", "Timeout for vintage @Test must be positive.");
      assertEquals("6%]/a0g\"-M", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("[R.:)Z2x#oY", "ly=2XixO", 14);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0263()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'z', 23, 23);
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, 'z');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0264()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.vintage.TimeoutExtension", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", "\r", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.trimToNull("");
      assertNull(string5);
      
      String string6 = StringUtils.substring("Search and Replace array lengths don't match: ", 32, 786);
      assertEquals(" don't match: ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0265()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      String string0 = StringUtils.leftPad("", (-1809), "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(string0.equals((Object)charSequence0));
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0266()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("i[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0267()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "QSN.CL9";
      stringArray0[1] = "QSN.CL9";
      stringArray0[2] = "QSN.CL9";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("QSN.CL9", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("", "qI{(");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("\" should have a parent context.", 2144);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("\" should have a parent context.");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1548;
      String string4 = StringUtils.join(doubleArray0, 'o', 13, 6);
      assertEquals("", string4);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertArrayEquals(new double[] {0.0, 1548.0}, doubleArray0, 0.01);
      
      String string5 = StringUtils.substringAfterLast("u", 35);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0268()  throws Throwable  {
      String string0 = StringUtils.removeStart("org.apache.commons.lang3.CharSequenceUtils", "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-1019));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", (-1774), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.substringBetween("org.apache.commons.lang3.CharSequenceUtils", "BH3v|6)Z", "r.params.IntRange");
      assertNull(string1);
      
      charSequenceArray0[3] = (CharSequence) null;
      String string2 = StringUtils.prependIfMissingIgnoreCase("r.params.IntRange", "org.apache.commons.lang3.CharSequenceUtils", charSequenceArray0);
      assertEquals("r.params.IntRange", string2);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string3 = StringUtils.replacePattern("o", "r.params.IntRange", "org.apache.commons.lang3.StringUtils");
      assertEquals("o", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int2 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.CharSequenceUtils", charSequenceArray0[0], (-1019));
      assertEquals((-1), int2);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("+53=Q", supplier0);
      assertEquals("+53=Q", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 402;
      intArray0[1] = (-1774);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1019);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1774);
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'J', (-1019), 211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1019
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0269()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      
      Set<String> set0 = new TreeSet<String>();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test0270()  throws Throwable  {
      String string0 = StringUtils.center("Mx>`HvP", 8, "Mx>`HvP");
      assertEquals("Mx>`HvPM", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("ZatvbR,OvFt t9sx", "Mx>`HvPM", "org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("No instructins to disable");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootUpperCase(":EG-/645{Dj!");
      assertEquals(":EG-/645{DJ!", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(":EG-/645{Dj!", ":EG-/645{DJ!");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.upperCase("  ");
      assertEquals("  ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.rightPad("ZatvbR,OvFt t9sx", (-1), "No instructins to disable");
      assertEquals("ZatvbR,OvFt t9sx", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.replacePattern("org.apache.commons.lang3.ObjectUtils", "Mx>`HvPM", "No instructins to disable");
      assertEquals("org.apache.commons.lang3.ObjectUtils", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.replaceChars(":SH-,JG<UuI4.", "  ", "  ");
      assertEquals(":SH-,JG<UuI4.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.join((long[]) null, ')', 2375, 76);
      assertNull(string6);
      
      String string7 = StringUtils.center((String) null, (-1), ')');
      assertNull(string7);
      
      boolean boolean2 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0271()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MIN_VALUE, 1495);
      assertEquals("", string1);
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.normalizeSpace("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK");
      assertEquals("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast((String) null, 64);
      assertNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("DefaultTimeZone", "m\"jvwbA((7+gmX");
      assertEquals("DefaultTimeZone", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "r.params.IntRange", ",");
      assertFalse(boolean0);
      
      String string5 = StringUtils.rightPad("DefaultTimeZone", (-50), "16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK");
      assertEquals("DefaultTimeZone", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.getDigits("d?JV=3j");
      assertEquals("3", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "3");
      assertEquals(23, int0);
      
      String string7 = StringUtils.leftPad("Method `CartesianProductTest.Sets ", 1495);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.substringAfter("yCVF#", Integer.MIN_VALUE);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split((String) null, ']');
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.compare("DefaultTimeZone", "bW");
      assertEquals((-30), int1);
      assertFalse(int1 == int0);
      
      String string9 = StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1495);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0272()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "";
      String string5 = StringUtils.rotate("c^:eX><", 0);
      assertEquals("c^:eX><", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "c^:eX><";
      String string6 = StringUtils.prependIfMissing((String) null, "", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd((String) null, "");
      assertNull(string7);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[3], "c^:eX><");
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean1 = linkedList0.remove((Object) "");
      assertFalse(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string8 = StringUtils.join((Iterable<?>) linkedList0, '}');
      assertEquals("", string8);
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      String string9 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string9);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0273()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string1 = StringUtils.replaceAll("\r", "\r", "\r");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "\r";
      String string2 = StringUtils.deleteWhitespace("\r");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.overlay("", "", (-1385), (-1385));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0274()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("BH3v|6)Z");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("BH3v|6)Z", (String) null);
      assertEquals("BH3v|6)Z", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-128);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("\uFFFDpj\u0000\r\uFFFD", string1);
      assertEquals(6, byteArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-38), (byte)112, (byte)106, (byte)0, (byte)13, (byte) (-128)}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
  }

  @Test(timeout = 4000)
  public void test0275()  throws Throwable  {
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0276()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0277()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("yi:*#c", 'X');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("Wy'?!KV", (String) null);
      assertEquals("Wy'?!KV", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Wy'?!KV", (CharSequence) "yi:*#c", 4128);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'X';
      intArray0[1] = 4128;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      intArray0[4] = (-1);
      String string1 = StringUtils.join(intArray0, '+');
      assertEquals("88+4128+88+88+-1", string1);
      assertEquals(5, intArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {88, 4128, 88, 88, (-1)}, intArray0);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfAny("88+4128+88+88+-1", stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.ordinalIndexOf("Wy'?!KV", "88+4128+88+88+-1", 3543);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int3);
      assertEquals(1, stringArray0.length);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      String string3 = StringUtils.center("", (-1), 'v');
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Wy'?!KV", (-1));
      assertEquals((-1), int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      String string4 = StringUtils.replaceFirst("", (String) null, "-l");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0278()  throws Throwable  {
      String string0 = StringUtils.chomp("offset cannot be negative", "offset cannot be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("offset cannot be negative");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeIgnoreCase("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0279()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "(N6PFz";
      String string1 = StringUtils.prependIfMissingIgnoreCase("\n", "(N6PFz", charSequenceArray0);
      assertEquals("(N6PFz\n", string1);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "(N6PFz", (CharSequence) "(N6PFz\n");
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\n", "", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0280()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("ionNo instructins to disable", "", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center((String) null, 447, 'L');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "D1<", (String) null, 13);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart("0@ [yC", "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals("0@ [yC", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = 'p';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'L';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "0@ [yC", charArray0);
      assertFalse(boolean2);
      assertEquals(6, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'V', 'V', 'p', 'V', 'V', 'L'}, charArray0);
      
      String string3 = StringUtils.reverseDelimited(" vs ", 'p');
      assertEquals(" vs ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0281()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0282()  throws Throwable  {
      String string0 = StringUtils.leftPad("RxLixe9", (-1), "RxLixe9");
      assertEquals("RxLixe9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("RxLixe9", "RxLixe9");
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "RxLixe9";
      String string4 = StringUtils.lowerCase("j");
      assertEquals("j", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.abbreviate((String) null, (-1), (-1));
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      char char0 = '2';
      String string6 = StringUtils.wrapIfMissing((String) null, '2');
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string7 = "cL,MW.tuC[xQ{}=";
      String string8 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "cL,MW.tuC[xQ{}=");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[0], 3460);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0283()  throws Throwable  {
      String string0 = StringUtils.center("@DefaultLocale can only be used with language tag if language, country, and variant are not set", 101, " has no clone method");
      assertEquals(" ha@DefaultLocale can only be used with language tag if language, country, and variant are not set ha", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("R");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "R", 101);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.removeEndIgnoreCase("]]", "R");
      assertEquals("]]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "R";
      charSequenceArray0[1] = (CharSequence) "]]";
      charSequenceArray0[2] = (CharSequence) "-1234.4836444196O3.0";
      charSequenceArray0[3] = (CharSequence) "-1234.4836444196O3.0";
      charSequenceArray0[4] = (CharSequence) "Atj'_vv1_RZh-<cCQH";
      charSequenceArray0[5] = (CharSequence) "-1234.4836444196O3.0";
      charSequenceArray0[6] = (CharSequence) "]]";
      String string2 = StringUtils.prependIfMissingIgnoreCase("Atj'_vv1_RZh-<cCQH", "]]", charSequenceArray0);
      assertEquals("Atj'_vv1_RZh-<cCQH", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.getLevenshteinDistance(charSequenceArray0[5], (CharSequence) " has no clone method", 26);
      assertEquals(20, int2);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.right("R", 1508);
      assertEquals("R", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0284()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = "g";
      String string3 = StringUtils.removeEndIgnoreCase("g", "");
      assertEquals("g", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "g";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) " in an array of ";
      charSequenceArray0[5] = (CharSequence) "g";
      charSequenceArray0[6] = (CharSequence) "g";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "g";
      String string4 = StringUtils.prependIfMissingIgnoreCase(" in an array of ", "g", charSequenceArray0);
      assertEquals(" in an array of ", string4);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) " in an array of ", charSequenceArray0[4], (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0285()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("jD", (String) null);
      assertEquals("jD", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("!{/W:2=0&", 54);
      assertEquals("!{/W:2=0&                                             ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.replaceChars((String) null, "jD", "jD");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0286()  throws Throwable  {
      String string0 = "' matches '";
      String string1 = StringUtils.substringAfter("/>A/y{oXnU~C1", "' matches '");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[1] = (CharSequence) "' matches '";
      charSequenceArray0[2] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "' matches '", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      char char0 = '1';
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '1', 0, 1888);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0287()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, 's');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0288()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32767);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(32767));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(32767));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean1 = linkedHashSet0.add(object2);
      assertTrue(boolean1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(32767));
      assertTrue(linkedHashSet0.contains(object2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string0 = StringUtils.mid("fU_7SZu1o7hGV]", (-12), (-3080));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(32767));
      
      String string1 = StringUtils.stripToNull(".)");
      assertEquals(".)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("No instructins to disable", "e");
      assertEquals("eNo instructins to disable", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.reverseDelimited((String) null, '=');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0289()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "fI!ftpZQ/#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0290()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      int int0 = (-2882);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      String string2 = ":`(Mxzgf'hFkAWod";
      String string3 = "/Ahidm(=Cp$DB,x";
      String[] stringArray0 = StringUtils.substringsBetween("B[x\"j", ":`(Mxzgf'hFkAWod", "/Ahidm(=Cp$DB,x");
      assertNull(stringArray0);
      
      int int1 = 23;
      int int2 = 316;
      int int3 = 1702;
      String string4 = StringUtils.substring("Index: h3/e>TuF5@z`Zn=3)K", 316, 1702);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0291()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      floatArray0[1] = (float) (-2882);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2882);
      doubleArray0[1] = (double) '{';
      String string1 = StringUtils.join(doubleArray0, '');
      assertEquals("-2882.0123.0", string1);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {(-2882.0), 123.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.swapCase("Display name ");
      assertEquals("dISPLAY NAME ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Display name ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Display name ", charSequence0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      
      String string3 = StringUtils.upperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.appendIfMissing("dISPLAY NAME ", (CharSequence) null, charSequenceArray0);
      assertEquals("dISPLAY NAME ", string4);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      
      String string5 = StringUtils.substringBeforeLast("Search and Replace array lengths don't match: ", "org.apache.commons.lang3.Charsets");
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.stripStart((String) null, "org.apache.commons.lang3.Charsets");
      assertNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Display name ", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Strings must not be nullI(/yC.5ll'kC,");
      assertFalse(boolean0);
      
      String string7 = StringUtils.repeat("Search and Replace array lengths don't match: ", (String) null, (-2882));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)charSequence0));
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "dISPLAY NAME ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0292()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("(m-_Y8\"XT;<-T", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0293()  throws Throwable  {
      String string0 = StringUtils.remove("]u3dcj-", "Minimum abbreviation width with offset is %d");
      assertEquals("]u3dcj-", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("]u3dcj-", "]u3dcj-");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.defaultString("]u3dcj-", "', '");
      assertEquals("]u3dcj-", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("]u3dcj-", "d6", ":`(Mxzgf'hFkAWod");
      assertNull(stringArray0);
      
      String string2 = StringUtils.substring("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", 23, (-137));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double double1 = StringUtils.getJaroWinklerDistance("d6", "]u3dcj-");
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      String string3 = StringUtils.substring("or.apache.commons.lan3.StrinUtils", (-137));
      assertEquals("or.apache.commons.lan3.StrinUtils", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("or.apache.commons.lan3.StrinUtils", "', '");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rotate("16.0W16.0W16.0W16.0W16.0W0.0", (-137));
      assertEquals("0.016.0W16.0W16.0W16.0W16.0W", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.appendIfMissing("org.junitpioneer.jupiter.CartesianProductTestExtension", "No instructins to disable", (CharSequence[]) null);
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtensionNo instructins to disable", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("]u3dcj-", supplier0);
      assertEquals("]u3dcj-", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.abbreviateMiddle((String) null, ":`(Mxzgf'hFkAWod", (-2511));
      assertNull(string7);
      
      String string8 = StringUtils.join((Iterable<?>) null, '&');
      assertNull(string8);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '&';
      charArray0[1] = '&';
      int int0 = StringUtils.indexOfAny((CharSequence) ":`(Mxzgf'hFkAWod", charArray0);
      assertEquals((-1), int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'&', '&'}, charArray0);
      
      String string9 = StringUtils.stripToNull("fU_7SZu1o7hGV]fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0294()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("\r", "z(*@P3!;wYvYW;8_PmJ,wwe");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("z(*@P3!;wYvYW;8_PmJ,wwe", "z(*@P3!;wYvYW;8_PmJ,wwe");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Iterable<?>) null, '#');
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "z(*@P3!;wYvYW;8_PmJ,wwe");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "z(*@P3!;wYvYW;8_PmJ,wwe", "PyZL`x]\"U!K_L:gEK6=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      
      int int1 = StringUtils.getFuzzyDistance("z(*@P3!;wYvYW;8_PmJ,wwe", "\r", locale0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0295()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0296()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      floatArray0[1] = (float) (-2882);
      floatArray0[0] = (float) (-2882);
      floatArray0[3] = (float) '{';
      floatArray0[4] = (float) (-2882);
      String string1 = StringUtils.join(floatArray0, '{', (-2882), (-2882));
      assertEquals("", string1);
      assertEquals(5, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {(-2882.0F), (-2882.0F), 0.0F, 123.0F, (-2882.0F)}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeStartIgnoreCase("5!)) vs ", (String) null);
      assertEquals("5!)) vs ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("5!)) vs ");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5!)) vs ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, "org.junitpioneer.jupiter.AbstractEntryBasedExtension", (-2882));
      assertNull(string3);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "~%bgRZc3", (char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.repeat("DefaultTimeZone", 7);
      assertEquals("DefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZone", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean3 = StringUtils.isNumeric("~%bgRZc3");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string6 = StringUtils.strip((String) null, "0");
      assertNull(string6);
      
      String string7 = StringUtils.leftPad((String) null, (-2882), '{');
      assertNull(string7);
      
      String[] stringArray1 = StringUtils.split((String) null, (String) null, 7);
      assertNull(stringArray1);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      String[] stringArray2 = StringUtils.substringsBetween((String) null, (String) null, " annotation, but there were ");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test0297()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("\"{$*$!0WvF", " ");
      assertEquals(" \"{$*$!0WvF ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0298()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0299()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[1] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[2] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[4] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 2375);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.toRootUpperCase("\"kTDsY[YAyA`[8h[");
      assertEquals("\"KTDSY[YAYA`[8H[", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.StringUtils", "No instructins to disable");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("No instructins to disable");
      assertEquals("NO INSTRUCTINS TO DISABLE", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.rightPad("\"kTDsY[YAyA`[8h[", (-1), "NO INSTRUCTINS TO DISABLE");
      assertEquals("\"kTDsY[YAyA`[8h[", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replacePattern("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", "No instructins to disable", "org.junitpioneer.jupiter.params.Range");
      assertEquals("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replaceChars("s9$", ":SH-,JG<UuI4.", "8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange");
      assertEquals("s9$", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.join((long[]) null, ')', (-1), 76);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.endsWith(charSequenceArray0[3], "s9$");
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.join((long[]) null, ')');
      assertNull(string6);
      
      int int2 = StringUtils.indexOf((CharSequence) null, (CharSequence) "org.junitpioneer.jupiter.params.Range");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.countMatches(charSequenceArray0[1], charSequenceArray0[0]);
      assertEquals(1, int3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0300()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "\r";
      charSequenceArray0[8] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("\r", 'H', 'H');
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("\r", "\r");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, 'H');
      assertEquals("", string3);
      assertEquals(0, charArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], "", (-1553));
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("\r");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0301()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("tdVZ!C}", ">[~\"v}0dk", ">[~\"v}0dk");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // >[~\"v}0dk
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0302()  throws Throwable  {
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("\n", (-1339));
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removePattern("\n", "\n");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference("Display name '", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      stringArray0[1] = "QLS4~w[&6 VqZs";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("8M`!VwI<J)*@-PkS", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "\n");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.stripToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "QLS4~w[&6 VqZs", (CharSequence) "\n");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "8M`!VwI<J)*@-PkS", (CharSequence) "Display name '");
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String string6 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", 0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.rotate("", (-1339));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Display name '", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string8 = StringUtils.leftPad("QLS4~w[&6 VqZs", 0, " doesn't match any regular expression.");
      assertEquals("QLS4~w[&6 VqZs", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      
      boolean boolean3 = StringUtils.contains((CharSequence) "QLS4~w[&6 VqZs", (CharSequence) "QLS4~w[&6 VqZs");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string9 = StringUtils.center("Strings must not be null", 76, "");
      assertEquals("                          Strings must not be null                          ", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0303()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("=ZBf", "=ZBf", "=ZBf");
      assertNull(stringArray0);
      
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertEquals("org.apache.commons.lang3.CharUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("bWX}_@s|{9S=ieT<sXXiX(~HH~", "(*f4?;l8iHN", "StdIo_Std_In");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("bWX}_@s|{9S=ieT<sXXiX(~HH~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-2756);
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)9;
      shortArray0[3] = (short)1010;
      shortArray0[4] = (short)160;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Q', Integer.MIN_VALUE, (-108));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0304()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 2449);
      assertNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = ';';
      charArray0[1] = 'l';
      charArray0[2] = '=';
      charArray0[3] = 'x';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {';', 'l', '=', 'x'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0305()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("", 'H', 'H');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("E#t&F", ";", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllLowerCase(charSequenceArray0[3]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase(charSequenceArray0[8], charSequenceArray0[7]);
      assertTrue(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "test-template-invocation", (char[]) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string4 = StringUtils.removeFirst("ZOd.hhpPw", "E~_7f");
      assertEquals("ZOd.hhpPw", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean5 = StringUtils.endsWithAny("ZOd.hhpPw", stringArray0);
      assertFalse(boolean5);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      
      String string5 = StringUtils.replaceOnce("", "E#t&F", "");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0306()  throws Throwable  {
      String string0 = "r_>";
      String string1 = "Minimum abbreviation width with offset is %d";
      int int0 = 35;
      String string2 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "TVA5}hx2<5TP)sxR", 16, 35);
      assertEquals("Minimum abbreviatioTVA5}hx2<5TP)sxR", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      char char0 = ';';
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, ';', 16, 115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 115
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0307()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBetween((String) null, "QvsX)5lrq~]#uQ`'K/ ");
      assertNull(string0);
      
      String string1 = StringUtils.removeAll("ZOd.hhpPw", "offset cannot be negative");
      assertEquals("ZOd.hhpPw", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ZOd.hhpPw", (CharSequence) "offset cannot be negative");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.replaceIgnoreCase(",qyApuZ:5", "QvsX)5lrq~]#uQ`'K/ ", "ZOd.hhpPw", (-3080));
      assertEquals(",qyApuZ:5", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((short[]) null, 'e', 1, (-78));
      assertNull(string3);
      
      String string4 = StringUtils.join((float[]) null, 'I', (-78), (-5237));
      assertNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase((String) null, "tI*#P92%");
      assertNull(string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("ZOd.hhpPw");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(",qyApuZ:5");
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((short[]) null, 'E');
      assertNull(string6);
      
      String string7 = StringUtils.substringBetween("1$R8", (String) null, "~?dux@B.e!57#\"ku");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0308()  throws Throwable  {
      String string0 = StringUtils.wrap(" ", '3');
      assertEquals("3 3", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("3 3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0309()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string1 = StringUtils.capitalize(", ");
      assertEquals(", ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, 'e');
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) ", ", (CharSequence) " ");
      assertEquals(1, int0);
      
      String string3 = StringUtils.stripStart("A,rnU;pVK", "v#^XQT");
      assertEquals("A,rnU;pVK", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.left("A,rnU;pVK", 16);
      assertEquals("A,rnU;pVK", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOf((CharSequence) "v#^XQT", (CharSequence) "v#^XQT");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.repeat('e', 16);
      assertEquals("eeeeeeeeeeeeeeee", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.wrapIfMissing("hvk4-Tv5", 'e');
      assertEquals("ehvk4-Tv5e", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertNotNull(serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Spliterator<Locale.FilteringMode> spliterator0 = serviceLoader0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string7 = StringUtils.replaceChars("6xzV", '3', 'T');
      assertEquals("6xzV", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      charSequenceArray0[0] = (CharSequence) "6xzV";
      charSequenceArray0[1] = (CharSequence) "A,rnU;pVK";
      charSequenceArray0[2] = (CharSequence) "A,rnU;pVK";
      charSequenceArray0[3] = (CharSequence) "A,rnU;pVK";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string8 = StringUtils.trimToNull("eeeeeeeeeeeeeeee");
      assertEquals("eeeeeeeeeeeeeeee", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0310()  throws Throwable  {
      String string0 = "test-template-invocation";
      String string1 = StringUtils.abbreviate("test-template-invocation", ",qyApuZ:5", 2804, 2804);
      assertEquals("test-template-invocation", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.deleteWhitespace(", Length: ");
      assertEquals(",Length:", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: ";
      stringArray0[1] = ", Length: ";
      stringArray0[2] = "test-template-invocation";
      stringArray0[3] = ",Length:";
      stringArray0[4] = ",Length:";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertEquals(5, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.overlay("g", (String) null, 2804, 857);
      assertEquals("g", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.removeStartIgnoreCase(", Length: ", ",Length:");
      assertEquals(", Length: ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string6 = StringUtils.SPACE;
      assertEquals(" ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      charSequenceArray0[1] = (CharSequence) " ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string7 = StringUtils.center("Expected exactly one annotation to provide an ArgumentSource, found %d.", 0, ",Length:");
      assertEquals("Expected exactly one annotation to provide an ArgumentSource, found %d.", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", ",Length:", 2804, (-762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0311()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 1, 1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("", (String) null, (-16), 24);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0312()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("g", "g", "g");
      assertEquals("g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("g", "g");
      assertEquals("g", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Myz'}1ga5jgBDnikK_o");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("z", "g");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string2 = StringUtils.substringBeforeLast("\n", "g");
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substring((String) null, (-61));
      assertNull(string3);
      
      String string4 = StringUtils.removeIgnoreCase("Z23*b}7Q3", "Minimum abbreviation width with offset is %d");
      assertEquals("Z23*b}7Q3", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("g");
      assertTrue(boolean0);
      
      String string5 = StringUtils.center("Minimum abbreviation width with offset is %d", 4081, 'G');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.removeEnd("", "g");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray2);
      assertFalse(boolean1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.wrap("\n", 'm');
      assertEquals("m\nm", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0313()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Illegal range. There's no way to get from %s to %s with a step of %s.", "eQi68");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Illegal range. There's no way to get from %s to %s with a step of %s.", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0314()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'C', 'x');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "Up");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWithAny("DefaultTimeZone", stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, "Object varargs must not be null");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("Object varargs must not be null", 4838, 'C');
      assertNotNull(string2);
      
      String string3 = StringUtils.remove((String) null, '>');
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "UdWW Le5", 7);
      assertNull(stringArray1);
      
      String string4 = StringUtils.normalizeSpace("X[:}#*}Az1");
      assertEquals("X[:}#*}Az1", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0315()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("org.apache.commons.lang3.Charsets");
      assertEquals("org.apache.commons.lang3.Charsets", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter("", (-532));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "gg");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0316()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "maxWith cannot be negative");
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeStartIgnoreCase("maxWith cannot be negative", "6WXrrTbMkMmnt&E+");
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "maxWith cannot be negative", "StdIoExtension is active but neither System.out or System.in are getting redirected.,qyApuZ:5");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("wMzNC*shB<`WT2k,", 0, "w;0JQ4Y'Iy#{l`");
      assertEquals("wMzNC*shB<`WT2k,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getDigits("U>=cGpO,^YkdhV#NPYY");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "6WXrrTbMkMmnt&E+", (CharSequence) "U>=cGpO,^YkdhV#NPYY");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.leftPad("", 1);
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringAfter("U>=cGpO,^YkdhV#NPYY", 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.split("?", 'j');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "U>=cGpO,^YkdhV#NPYY";
      charSequenceArray0[1] = (CharSequence) "wMzNC*shB<`WT2k,";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      String string5 = StringUtils.defaultString("-)>", "wMzNC*shB<`WT2k,");
      assertEquals("-)>", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      charSequenceArray0[3] = (CharSequence) "-)>";
      charSequenceArray0[4] = (CharSequence) "wMzNC*shB<`WT2k,";
      charSequenceArray0[5] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) "wMzNC*shB<`WT2k,";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0317()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0318()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMbrks}+");
      assertEquals("p{InCombiningDiacriticalMbrks}+", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, "\n");
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      assertEquals("UTF-8", charset1.displayName());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("p{InCombiningDiacriticalMbrks}+");
      assertSame(charset0, charset1);
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=31 cap=34]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(34, byteBuffer0.capacity());
      assertEquals(31, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(31, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertSame(charset0, charset1);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      String string2 = StringUtils.replaceFirst("", "", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "p{InCombiningDiacriticalMbrks}+";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("p{InCombiningDiacriticalMbrks}+", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0319()  throws Throwable  {
      String string0 = StringUtils.getDigits("org.junitpioneer.jupiter.StdIoExtension");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("@~j>Ihp3");
      assertEquals("@~j>Ihp", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trimToNull("*;SE 8N;Z>VK");
      assertEquals("*;SE 8N;Z>VK", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "@~j>Ihp3", (CharSequence) "*;SE 8N;Z>VK");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("@~j>Ihp", '-');
      assertEquals("-@~j>Ihp-", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      vector0.ensureCapacity(4053);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(4053, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean1 = vector0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, vector0.size());
      assertEquals("[EXTENDED_FILTERING]", vector0.toString());
      assertEquals(4053, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(locale_FilteringMode0));
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean2 = vector0.add(locale_FilteringMode1);
      assertTrue(boolean2);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, vector0.size());
      assertEquals(4053, vector0.capacity());
      assertEquals("[EXTENDED_FILTERING, EXTENDED_FILTERING]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(locale_FilteringMode1));
      
      String string4 = StringUtils.join((List<?>) vector0, "", 32, 32);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals(2, vector0.size());
      assertEquals(4053, vector0.capacity());
      assertEquals("[EXTENDED_FILTERING, EXTENDED_FILTERING]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(vector0.contains(locale_FilteringMode1));
      
      String string5 = StringUtils.remove("", 'r');
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0320()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.junitpioneer.jupiter.params.DoubleRange", (CharSequence) "org.junitpioneer.jupiter.params.DoubleRange");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("%s %s!+7R", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0321()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.unwrap(">4mX]ChGl", 'E');
      assertEquals(">4mX]ChGl", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceAll("", (String) null, (String) null);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) vector0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      int int1 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test0322()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) '{';
      doubleArray0[2] = 1.5;
      String string1 = StringUtils.join(doubleArray0, 'j');
      assertEquals("62.0j123.0j1.5", string1);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {62.0, 123.0, 1.5}, doubleArray0, 0.01);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "62.0j123.0j1.5";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("62.0j123.0j1.5", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string3 = StringUtils.appendIfMissing((String) null, charSequenceArray0[0], charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(0, charSequenceArray1.length);
      assertEquals(7, charSequenceArray0.length);
      assertNull(string3);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains('{'));
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("62.0j123.0j1.5");
      assertFalse(boolean0);
      
      String string5 = StringUtils.replaceIgnoreCase("tI*#P92%", (String) null, ", ", 1649);
      assertEquals("tI*#P92%", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      
      boolean boolean1 = StringUtils.isEmpty("62.0j123.0j1.5");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.join((long[]) null, 'c');
      assertNull(string6);
      
      String string7 = StringUtils.join(doubleArray0, '{', 1649, (-154));
      assertEquals("", string7);
      assertEquals(3, doubleArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)charSequence0));
      assertArrayEquals(new double[] {62.0, 123.0, 1.5}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0323()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing((String) null, "\r", (CharSequence[]) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0324()  throws Throwable  {
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("Display name '", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      stringArray0[1] = "QLS4~w[&6 VqZs";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("8M`!VwI<J)*@-PkS", string2);
      assertEquals(8, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "\n", "\n");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.stripToNull("QLS4~w[&6 VqZs");
      assertEquals("QLS4~w[&6 VqZs", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "QLS4~w[&6 VqZs", (CharSequence) "\n");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      String string4 = StringUtils.join(charArray0, ' ', 76, 8);
      assertEquals("", string4);
      assertEquals(2, charArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new char[] {'2', '\u0000'}, charArray0);
      
      boolean boolean1 = StringUtils.isNotBlank("8M`!VwI<J)*@-PkS");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0325()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      charArray0[1] = 'f';
      charArray0[2] = 'Y';
      charArray0[3] = 'M';
      charArray0[4] = 'C';
      charArray0[5] = 'n';
      charArray0[6] = '+';
      charArray0[7] = 'D';
      String string0 = StringUtils.join(charArray0, 'n', 64, 64);
      assertEquals("", string0);
      assertEquals(8, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\\', 'f', 'Y', 'M', 'C', 'n', '+', 'D'}, charArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0326()  throws Throwable  {
      String string0 = "\\Z5w( gDigT?OIw";
      char char0 = ')';
      String string1 = StringUtils.reverseDelimited("Z5w( gDigT?OIw", ')');
      assertEquals("Z5w( gDigT?OIw", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("Z5w( gDigT?OIw", "Z5w( gDigT?OIw", (-1222));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric("Z5w( gDigT?OIw");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "Z5w( gDigT?OIw", (CharSequence) "Z5w( gDigT?OIw");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String string2 = "org.junitpioneer.jupiter.SystemPropertyExtension";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(hashSet0.contains(locale_FilteringMode0));
      
      // Undeclared exception!
      try { 
        stack0.addAll((-1), (Collection<? extends Locale.FilteringMode>) hashSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test0327()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0328()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Could not resolve parameter of type %s.yq't|%ve:B!o");
      assertEquals("Couldnotresolveparameteroftype%s.yq't|%ve:B!o", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ", (String) null, 100);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart("offset cannot be negative", "dcO6j}oiZcgp\"\"<)H@");
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0329()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "M\"zWJ4");
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "M\"zWJ4");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace((String) null, (String) null, "j*jh^/_D(F5I");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "]u3dcj-";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "-qtzCCnZLZOgm:r*Q<";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'C');
      assertEquals("C]u3dcj-CC-qtzCCnZLZOgm:r*Q<C", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase((CharSequence) null, "j*jh^/_D(F5I");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("X", "X$r0Mw22zHxm`:H~", "~E{+3@");
      assertEquals("X", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.leftPad("e", 8192, 'C');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.compareIgnoreCase("e", "EmXi", false);
      assertEquals((-3), int0);
      
      String string7 = StringUtils.center("mE @?", (-1), 'C');
      assertEquals("mE @?", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.stripToEmpty(", '");
      assertEquals(", '", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", '", "mE @?", 8192);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string9 = StringUtils.rightPad((String) null, 256);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test0330()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 224, 'F');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0331()  throws Throwable  {
      String string0 = StringUtils.substringAfter("/>A/y{oXnU~C1", "' matches '");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[1] = (CharSequence) "' matches '";
      charSequenceArray0[2] = (CharSequence) "/>A/y{oXnU~C1";
      String string1 = StringUtils.replaceAll("' matches '", "...", "");
      assertEquals(" '", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) " '";
      charSequenceArray0[4] = (CharSequence) "' matches '";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "' matches '", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("EmXi", '1');
      assertEquals("1EmXi1", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.stripStart("StdIoExtension is active but neither System.out or System.in are getting redirected.,qyApuZ:5", "1EmXi1");
      assertEquals("StdIoExtension is active but neither System.out or System.in are getting redirected.,qyApuZ:5", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "1EmXi1", charSequenceArray0[0], 1438);
      assertEquals(11, int1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("`", '1');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0332()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMbrks}+");
      assertEquals("p{InCombiningDiacriticalMbrks}+", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, "\n");
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("p{InCombiningDiacriticalMbrks}+", 1438, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripStart(string2, "");
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrap((String) null, 'x');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "sGM%da?RJOl", 124);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("sGM%da?RJOl");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.toRootUpperCase("\n");
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.upperCase("\n");
      assertEquals("\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.abbreviateMiddle((String) null, string2, 1438);
      assertNull(string7);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      
      String string8 = StringUtils.reverse(string3);
      assertNotNull(string8);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string9 = StringUtils.wrap("p{InCombiningDiacriticalMbrks}+", '8');
      assertEquals("8p{InCombiningDiacriticalMbrks}+8", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAlpha(string8);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(string2.equals((Object)string8));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string9));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string1));
      
      boolean boolean4 = StringUtils.containsNone((CharSequence) null, (char[]) null);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0333()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'|'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0334()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.join(doubleArray0, '>');
      assertEquals("-1304.0>1.5>-1304.0>-1304.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-1304.0), 1.5, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "-1304.0>1.5>-1304.0>-1304.0";
      charSequenceArray0[3] = (CharSequence) "e%*x@tr^";
      String string2 = StringUtils.swapCase("Search and Replace array lengths don't match: ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissing("e%*x@tr^", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("e%*x@tr^", string3);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains((-1304)));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", ", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'>'}, charArray0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Array element ", ">4mX]ChGl", (-1304));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("e%*x@tr^", "e%*x@tr^");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.center(">4mX]ChGl", 189, 'C');
      assertEquals("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>4mX]ChGlCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) ">4mX]ChGl";
      int int0 = StringUtils.indexOfAny((CharSequence) "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>4mX]ChGlCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", charSequenceArray1);
      assertEquals(90, int0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(1, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test0335()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", "{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EmX";
      stringArray0[1] = "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[2] = "EmX";
      stringArray0[3] = "{!#`&dyF~ZTr;dw";
      stringArray0[4] = "{!#`&dyF~ZTr;dw";
      stringArray0[3] = "{!#`&dyF~ZTr;dw";
      String string2 = StringUtils.replaceEachRepeatedly("EmX", (String[]) null, stringArray0);
      assertEquals("EmX", string2);
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeFirst("", "', is neither of type Map.Entry nor an Array");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "{!#`&dyF~ZTr;dw";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[3] = (CharSequence) "EmX";
      charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "EmX";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceEachRepeatedly("{!#`&dyF~ZTr;dw", (String[]) null, stringArray0);
      assertEquals("{!#`&dyF~ZTr;dw", string4);
      assertEquals(6, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripStart("{!#`&dyF~ZTr;dw", "{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], charSequenceArray0[1], 2100);
      assertEquals(44, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.split("EmX", ':');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0336()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMbrks}+");
      assertEquals("p{InCombiningDiacriticalMbrks}+", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, "\n");
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("p{InCombiningDiacriticalMbrks}+", 1438, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripStart(string2, "");
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrap((String) null, 'x');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("sGM%da?RJOl");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.toRootUpperCase("\n");
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.upperCase("\n");
      assertEquals("\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = StringUtils.abbreviateMiddle((String) null, string2, 1438);
      assertNull(string7);
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string8 = StringUtils.reverse(string3);
      assertNotNull(string8);
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string9 = StringUtils.wrap("p{InCombiningDiacriticalMbrks}+", '8');
      assertEquals("8p{InCombiningDiacriticalMbrks}+8", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0337()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, "M\"zWJ4");
      assertNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "M\"zWJ4");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace((String) null, (String) null, "j*jh^/_D(F5I");
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "]u3dcj-";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "-qtzCCnZLZOgm:r*Q<";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'C');
      assertEquals("C]u3dcj-CC-qtzCCnZLZOgm:r*Q<C", string4);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase((CharSequence) null, "j*jh^/_D(F5I");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("X", "X$r0Mw22zHxm`:H~", "~E{+3@");
      assertEquals("X", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.leftPad("e", 8192, 'C');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.compareIgnoreCase("e", "EmXi", false);
      assertEquals((-3), int0);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "M\"zWJ4", charArray0);
      assertFalse(boolean3);
      assertEquals(0, charArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0338()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.join((float[]) null, '\'', 0, (-3237));
      assertNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("3F", "3F");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((short[]) null, 'E');
      assertNull(string6);
      
      String string7 = StringUtils.substringBetween("", "", "1^%t>92! MV3.YRF`");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test0339()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      floatArray0[1] = (float) (-2882);
      floatArray0[0] = (float) (-2882);
      floatArray0[3] = (float) '{';
      floatArray0[4] = (float) (-2882);
      String string1 = StringUtils.join(floatArray0, '{', (-2882), (-2882));
      assertEquals("", string1);
      assertEquals(5, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {(-2882.0F), (-2882.0F), 0.0F, 123.0F, (-2882.0F)}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeStartIgnoreCase("5!)) vs ", (String) null);
      assertEquals("5!)) vs ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("5!)) vs ");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("5!)) vs ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, "org.junitpioneer.jupiter.AbstractEntryBasedExtension", (-2882));
      assertNull(string3);
      
      String string4 = StringUtils.stripStart("org.junitpioneer.jupiter.AbstractEntryBasedExtension", "~%bgRZc3");
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "~%bgRZc3", (char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.repeat("DefaultTimeZone", 7);
      assertEquals("DefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZone", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string6 = StringUtils.strip((String) null, "0");
      assertNull(string6);
      
      String string7 = StringUtils.leftPad("org.junitpioneer.jupiter.AbstractEntryBasedExtension", (-2882), '{');
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.split((String) null, (String) null, 7);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0340()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0341()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", 251);
      assertEquals("Search and Replace array lengths don't match:                                                                                                                                                                                                              ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 251;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) 251;
      doubleArray0[3] = (double) 251;
      String string1 = StringUtils.join(doubleArray0, '>');
      assertEquals("251.0>1.5>251.0>251.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {251.0, 1.5, 251.0, 251.0}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "251.0>1.5>251.0>251.0";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match:                                                                                                                                                                                                              ";
      charSequenceArray0[3] = (CharSequence) "e%*x@tr^";
      String string2 = StringUtils.swapCase("Search and Replace array lengths don't match:                                                                                                                                                                                                              ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH:                                                                                                                                                                                                              ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH:                                                                                                                                                                                                              ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match:                                                                                                                                                                                                              ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissing("e%*x@tr^", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("e%*x@tr^", string3);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains('>'));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      boolean boolean0 = StringUtils.startsWith(charSequenceArray0[3], "251.0>1.5>251.0>251.0");
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Array element ", ">4mX]ChGl", 251);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0342()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("|6~{^MalYa^]");
      assertEquals("|6~{^MalYa^]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("|6~{^MalYa^]", "|6~{^MalYa^]", "|6~{^MalYa^]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 2
         // |6~{^MalYa^]
         //   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0343()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMbrks}+");
      assertEquals("p{InCombiningDiacriticalMbrks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace("{!#`&dyF~ZTr;dw", "{!#`&dyF~ZTr;dw", "lWU.!p<MJYy\"");
      assertEquals("lWU.!p<MJYy\"", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "lWU.!p<MJYy\"";
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMbrks}+";
      charSequenceArray0[2] = (CharSequence) "lWU.!p<MJYy\"";
      charSequenceArray0[3] = (CharSequence) "zD\"FtF";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.center((String) null, 97, '\'');
      assertNull(string2);
      
      String string3 = StringUtils.rotate("Locale must not be null", 76);
      assertEquals("be nullLocale must not ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (int) '\"';
      intArray0[2] = 706;
      String string4 = StringUtils.join(intArray0, 'K', 706, 0);
      assertEquals("", string4);
      assertEquals(3, intArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new int[] {0, 34, 706}, intArray0);
      
      String string5 = StringUtils.rightPad("4R#:k", 76, 'K');
      assertEquals("4R#:kKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0344()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      floatArray0[4] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("0.0#-1.0#459.3239#459.3239#0.0#0.0", string0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 459.3239F, 459.3239F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("QmW", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("R-=4w!~V0Vo");
      assertFalse(boolean0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      Comparator<Locale.FilteringMode> comparator0 = (Comparator<Locale.FilteringMode>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Locale.FilteringMode> priorityQueue1 = new PriorityQueue<Locale.FilteringMode>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = priorityQueue1.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue0.contains(locale_FilteringMode0));
      assertTrue(priorityQueue1.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue1, "R-=4w!~V0Vo");
      assertEquals("REJECT_EXTENDED_RANGES", string2);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertNotNull(string2);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(1, priorityQueue1.size());
      assertFalse(priorityQueue0.contains(locale_FilteringMode0));
      assertTrue(priorityQueue1.contains(locale_FilteringMode0));
  }

  @Test(timeout = 4000)
  public void test0345()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:r*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "\r";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'C');
      assertEquals("Corg.junitpioneer.jupiter.params.ShortRangeC\r", string4);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty("Locale must not be null", supplier0);
      assertEquals("Locale must not be null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isAlphanumeric("\r");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.join((byte[]) null, 'C');
      assertNull(string6);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string7 = StringUtils.getIfBlank("v<In'#EsieV3w7BT", supplier1);
      assertEquals("v<In'#EsieV3w7BT", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.substringAfter("", "");
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = StringUtils.substringAfterLast("ogC[}V:)Zy@,}", (-2055));
      assertEquals("", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      
      boolean boolean3 = StringUtils.isEmpty("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string10 = StringUtils.trimToNull("test-template-invocation");
      assertEquals("test-template-invocation", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0346()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'C');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0347()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance(".A-1ZjLylvBDex", "Array element ", locale0);
      assertEquals(1, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0348()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = stringArray0[0];
      String string0 = StringUtils.repeat((String) null, "7Z#)E", (-1356));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0349()  throws Throwable  {
      String string0 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "\r");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.removeIgnoreCase(string1, "Comparator should not be null.");
      assertEquals("\\u", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast((String) null, "\r");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("gg", "5Av]dPs3o>H.+Uv;");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.chomp("", "tv-UMxcH");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "tv-UMxcH";
      stringArray0[1] = null;
      stringArray0[2] = "offset cannot be negative";
      stringArray0[3] = "Hx|";
      String string7 = StringUtils.replaceEach("Hx|", stringArray0, stringArray0);
      assertEquals("Hx|", string7);
      assertEquals(4, stringArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.repeat("Locale must not be null", 999);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      
      String string9 = StringUtils.repeat((String) null, (String) null, 999);
      assertNull(string9);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) null, (-2283));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0350()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)116;
      String string0 = StringUtils.join(byteArray0, 'B');
      assertEquals("-109B114B79B76B116", string0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)114, (byte)79, (byte)76, (byte)116}, byteArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      String string1 = StringUtils.join((Iterable<?>) serviceLoader0, '\\');
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.strip("FtX-08q#p<g)/");
      assertEquals("FtX-08q#p<g)/", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "FtX-08q#p<g)/";
      charSequenceArray0[2] = (CharSequence) "-109B114B79B76B116";
      charSequenceArray0[3] = (CharSequence) "-109B114B79B76B116";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("-109B114B79B76B116", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0351()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MIN_VALUE, 1495);
      assertEquals("", string1);
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.normalizeSpace("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK");
      assertEquals("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast((String) null, 64);
      assertNull(string3);
      
      int int0 = StringUtils.compare(",qyApuZ:5", "][W1^5*u Q(6@xHn");
      assertEquals((-49), int0);
      
      String string4 = StringUtils.leftPad("X", 8, '=');
      assertEquals("=======X", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.difference("org.apache.commons.lang3.ArrayUtils", (String) null);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(";r54", 'w');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) Integer.MIN_VALUE;
      longArray0[1] = (long) 'w';
      longArray0[2] = (long) 8;
      longArray0[3] = (long) 8;
      longArray0[4] = (long) Integer.MIN_VALUE;
      String string7 = StringUtils.join(longArray0, '=');
      assertEquals("-2147483648=119=8=8=-2147483648", string7);
      assertEquals(5, longArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertArrayEquals(new long[] {(-2147483648L), 119L, 8L, 8L, (-2147483648L)}, longArray0);
      
      String string8 = StringUtils.defaultIfEmpty("org.junitpioneer.jupiter.params.LongRange", "=======X");
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0352()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
      
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0353()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate(" ", 98);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0354()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("VwCx++", "TuWt(|", (-2375));
      assertEquals("VwCx++", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "TuWt(|", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "VwCx++", "org.junitpioneer.jupiter.ReportEntryExtension", 277);
      assertNull(string3);
      
      String string4 = StringUtils.join((short[]) null, 'I', (-3498), 441);
      assertNull(string4);
      
      String string5 = StringUtils.substringAfter("null.", "VwCx++");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.rotate("]8", (-3498));
      assertEquals("]8", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.prependIfMissing("TuWt(|", "TuWt(|", (CharSequence[]) null);
      assertEquals("TuWt(|", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      
      String string8 = StringUtils.stripEnd("org.apache.commons.lang3.exception.CloneFailedException", (String) null);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("TuWt(|"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("TuWt(|"));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "o;uT";
      stringArray0[2] = "TuWt(|";
      String string9 = StringUtils.replaceEach("c^:eX><", stringArray0, stringArray0);
      assertEquals("c^:eX><", string9);
      assertEquals(3, stringArray0.length);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "c^:eX><", "yE!oQ>8L=3~e^nur?");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string10 = StringUtils.join((Iterable<?>) linkedList1, '}');
      assertEquals("", string10);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("o;uT"));
  }

  @Test(timeout = 4000)
  public void test0355()  throws Throwable  {
      int int0 = (-3080);
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32767);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(32767));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(object0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      boolean boolean1 = linkedHashSet0.add(object2);
      assertTrue(boolean1);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(object0));
      assertTrue(linkedHashSet0.contains(object2));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", (-1));
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string0 = StringUtils.mid("fU_7SZu1o7hGV]", (-12), (-3080));
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains((-12)));
      
      String string1 = StringUtils.stripToNull(".)");
      assertEquals(".)", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("No instructins to disable", "e");
      assertEquals("eNo instructins to disable", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "No instructins to disable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0356()  throws Throwable  {
      String string0 = StringUtils.abbreviate("+", "+", 3658, 3658);
      assertEquals("+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) null, "Array element ", (-889), 3658);
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("Array element ", " ");
      assertEquals(" Array element ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0357()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("-A&5b&TLb", 2310);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", 2310, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0358()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.junitpioneer.jupiter.StdIoExtension", 'C', 'C');
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.junitpioneer.jupiter.StdIoExtension";
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'C';
      floatArray0[1] = (float) 'C';
      floatArray0[2] = (float) 'C';
      floatArray0[3] = (float) 'C';
      String string1 = StringUtils.join(floatArray0, '');
      assertEquals("67.067.067.067.0", string1);
      assertEquals(4, floatArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {67.0F, 67.0F, 67.0F, 67.0F}, floatArray0, 0.01F);
      
      String[] stringArray1 = StringUtils.split("g0+&");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("org.junitpioneer.jupiter.StdIoExtension");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, "org.junitpioneer.jupiter.StdIoExtension");
      assertNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "g0+&", (CharSequence) "oAn");
      assertEquals(4, int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("JH-t%");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(4, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string4 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0359()  throws Throwable  {
      String string0 = StringUtils.wrap("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", (-388));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "A(NXT<6PFz";
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[7] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[8] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.prependIfMissingIgnoreCase("A(NXT<6PFz", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("A(NXT<6PFz", string1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      stringArray0[2] = "A(NXT<6PFz";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[6]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("Search and Replace array lengths don't match: ");
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.overlay((String) null, (String) null, (-388), (-1));
      assertNull(string5);
      
      String string6 = StringUtils.removeStartIgnoreCase("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", (String) null);
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertEquals(3, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.center("A(NXT<6PFz", 0, "A(NXT<6PFz");
      assertEquals("A(NXT<6PFz", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.leftPad("SearchandReplacearraylengthsdon'tmatch:", (-388), '[');
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "N>bP@GQ7yC+9HlWn", false);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0360()  throws Throwable  {
      String string0 = StringUtils.chop("e");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("e");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {101}, intArray0);
      
      String string1 = StringUtils.substringAfterLast("e", (String) null);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "", false);
      assertEquals(1, int0);
      
      String string2 = StringUtils.stripEnd("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int1 = StringUtils.countMatches((CharSequence) null, (CharSequence) "e");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = linkedList0.removeAll(stack0);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(linkedList0.contains(string1));
      assertFalse(stack0.contains(""));
      
      String string3 = StringUtils.join((List<?>) linkedList0, 'g', 9983, 1);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "e", charArray0);
      assertFalse(boolean1);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g'}, charArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.unwrap("R:KxxB^+iB,.!(", "");
      assertEquals("R:KxxB^+iB,.!(", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0361()  throws Throwable  {
      String string0 = StringUtils.getDigits(" doesn't contain any substring.Expected exactly one annotation to provide an ArgumentSource, found %d.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "\n", 2147483645, (-2731));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test0362()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " must return `CartesianProductTest.Sets`";
      stringArray0[1] = "tI*#P92%";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, " must return `CartesianProductTest.Sets`");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByCharacterType(" must return `CartesianProductTest.Sets`");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(16, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string0 = StringUtils.substringBeforeLast(" must return `CartesianProductTest.Sets`", "]J<ckI{Oj'YZM;");
      assertEquals(" must return `CartesianProductTest.Sets`", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring(",N)fQ4E\"", (-61));
      assertEquals(",N)fQ4E\"", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.length(",N)fQ4E\"");
      assertEquals(8, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("tI*#P92%");
      assertTrue(boolean0);
      
      String string2 = StringUtils.center(",N)fQ4E\"", 8, 'G');
      assertEquals(",N)fQ4E\"", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0363()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, "VYvdE0d%31lkPv");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0364()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      int int1 = StringUtils.indexOfAny((CharSequence) "Could not resolve parameter of type %s.", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.wrapIfMissing("\r", '\u0000');
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceChars((String) null, "Locale must not be null", "Could not resolve parameter of type %s.");
      assertNull(string2);
      
      String string3 = StringUtils.chop("\r");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "");
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string3));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", 1438);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0365()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", 't');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
  }

  @Test(timeout = 4000)
  public void test0366()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, 'D');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0367()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.chop("{I");
      assertEquals("{", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("{I", (String) null, "Fk*P LBUeM`/Wi&I?");
      assertEquals("{I", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd("Fk*P LBUeM`/Wi&I?", "LE?'Y793]@r;Fect");
      assertEquals("Fk*P LBUeM`/Wi&I?", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Display name '", (CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("LE?'Y793]@r;Fect", (-2865));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0368()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string1 = StringUtils.replace("", "", "+<k5$Sol:+7x.^6FL", 8192);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ServiceLoader<Locale.FilteringMode> serviceLoader1 = ServiceLoader.load(class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertNotNull(serviceLoader1);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader1.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader1.iterator();
      assertNotSame(serviceLoader1, serviceLoader0);
      assertNotNull(iterator0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader1.toString());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^:W#lEys1u`Xl2ou7";
      stringArray0[1] = "+<k5$Sol:+7x.^6FL";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("^:W#lEys1u`Xl2ou7", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "16.0W16.0W16.0W16.0W16.0W0.0");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripToNull("16.0W16.0W16.0W16.0W16.0W0.0");
      assertEquals("16.0W16.0W16.0W16.0W16.0W0.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "^:W#lEys1u`Xl2ou7", (CharSequence) "+<k5$Sol:+7x.^6FL");
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "^:W#lEys1u`Xl2ou7", (char[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0369()  throws Throwable  {
      String string0 = StringUtils.stripAccents(".A-ZjmALylvBDex");
      assertEquals(".A-ZjmALylvBDex", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 98, ".A-ZjmALylvBDex");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0370()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("", 'H', 'H');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.leftPad((String) null, 0, "-`VxSAIhlY,a=e|V");
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "E#t&F", 34, (-1124));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.defaultString("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "*i");
      assertNull(stringArray0);
      
      String string5 = StringUtils.join((Object[]) null, 'n', 0, 322);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0371()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("s");
      assertEquals("s", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "s", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "s", (String) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter((String) null, (-1));
      assertNull(string1);
      
      String string2 = StringUtils.repeat("m", (-3961));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "Jq", "NyN&u0bmZdb4i&vo;");
      assertNull(stringArray0);
      
      String string3 = StringUtils.removeEnd((String) null, "M#-'>u-4");
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "xhodP$2?Z=XxG)vl");
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.split("org.apache.commons.lang3.StringUtils");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("m");
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string5 = StringUtils.stripToNull("s");
      assertEquals("s", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.substringBetween("Qk3B+Cec!", "NyN&u0bmZdb4i&vo;", (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.removeStart("QL\"^s@_S~IS`$", "@CartesianProductTest not found");
      assertEquals("QL\"^s@_S~IS`$", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.getDigits("]y'Z_");
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0372()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0373()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      floatArray0[1] = (float) (-2882);
      floatArray0[0] = (float) (-2882);
      floatArray0[3] = (float) '{';
      floatArray0[4] = (float) (-2882);
      String string1 = StringUtils.join(floatArray0, '{', (-2882), (-2882));
      assertEquals("", string1);
      assertEquals(5, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {(-2882.0F), (-2882.0F), 0.0F, 123.0F, (-2882.0F)}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeStartIgnoreCase("5!)) vs ", "_Y8f");
      assertEquals("5!)) vs ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("5!)) vs ");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("_Y8f");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, "org.junitpioneer.jupiter.AbstractEntryBasedExtension", (-2882));
      assertNull(string3);
      
      String string4 = StringUtils.stripStart("org.junitpioneer.jupiter.AbstractEntryBasedExtension", "~%bgRZc3");
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("_Y8f");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "~%bgRZc3", (char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.repeat("DefaultTimeZone", 7);
      assertEquals("DefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZoneDefaultTimeZone", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean3 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string6 = StringUtils.strip((String) null, "0");
      assertNull(string6);
      
      String string7 = StringUtils.leftPad("org.junitpioneer.jupiter.AbstractEntryBasedExtension", (-2882), '{');
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0374()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl", 223);
      assertNull(stringArray0);
      
      String string0 = StringUtils.center("Wf+t", 223, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVWf+tVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("{[0-9]+}", "{[0-9]+}", "Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl", 118);
      assertEquals("Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("Wf+t", "org.apache.commons.lang3.StringUtils");
      assertEquals("Wf+t", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Wf+t", (char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.reverseDelimited("Wf+t", '^');
      assertEquals("Wf+t", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.defaultIfBlank((String) null, "]");
      assertEquals("]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0375()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.difference((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0376()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("fI!ftpZ,a#", "fI!ftpZ,a#");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.substring((String) null, 627);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0377()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "NQF:YGw? [g", 'N');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0378()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '9', 32, 3477);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0379()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("Comparator should not be null.", "f");
      assertEquals("Comparator should not be null.", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("Sp1:Jl", (String) null);
      assertEquals("Sp1:Jl", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast("Comparator should not be null.", "Comparator should not be null.");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.defaultString("5Av]dPs3o>H.+Uv;");
      assertEquals("5Av]dPs3o>H.+Uv;", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.chomp("Comparator should not be null.", "<GZk3");
      assertEquals("Comparator should not be null.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.leftPad("_FKek{zdHYuK|ID!n", 3534);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'V';
      String string7 = StringUtils.join(floatArray0, '`', 3534, 3173);
      assertEquals("", string7);
      assertEquals(1, floatArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertArrayEquals(new float[] {86.0F}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string8 = StringUtils.unwrap("Comparator should not be null.", 'm');
      assertEquals("Comparator should not be null.", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'V';
      longArray0[1] = (long) '`';
      longArray0[2] = (long) 223;
      longArray0[3] = (long) 3173;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'o', 80, 2593);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0380()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join((char[]) null, 'q', 10, (-2732));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0381()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:r*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      int int0 = StringUtils.indexOfAny((CharSequence) "[`~d.4v'Q6mto)Bj", charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("-qtzCCnZLZOgm:r*Q<"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("-qtzCCnZLZOgm:r*Q<"));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("[`~d.4v'Q6mto)Bj");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.[`~d.4v'Q6mto)Bj
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test0382()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      String string1 = StringUtils.valueOf(charArray0);
      assertEquals(">6f", string1);
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'>', '6', 'f'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">6f", "Could not resolve parameter of type %s.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("U>=cGpO,^YkdhV#NPYY", 2967, ">6f");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getDigits("Could not resolve parameter of type %s.");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.leftPad("U>=cGpO,^YkdhV#NPYY", 1458);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringAfter("", 1458);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split(string2, '6');
      assertEquals(983, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase(">6f", stringArray0);
      assertFalse(boolean1);
      assertEquals(983, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.stripToEmpty(">6f");
      assertEquals(">6f", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isBlank(string4);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0383()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'a');
      assertEquals("0", string1);
      assertEquals(1, shortArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\r", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("Comparator should not be null.", "0");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0384()  throws Throwable  {
      String string0 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", "Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", (String[]) null, (String[]) null);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("X", "X");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'o';
      charArray0[2] = 'b';
      charArray0[3] = 'c';
      charArray0[4] = 'p';
      charArray0[5] = ']';
      charArray0[6] = 't';
      charArray0[7] = 'Q';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      assertTrue(boolean1);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'|', 'o', 'b', 'c', 'p', ']', 't', 'Q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0385()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("?");
      assertEquals("?", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isEmpty("?");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.trimToNull("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isAllUpperCase("?");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "?";
      stringArray0[1] = "?";
      stringArray0[2] = "?";
      stringArray0[3] = "?";
      stringArray0[4] = "?";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "wO:#j");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("?", "?", (-358));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0386()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("\r", "\r");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0387()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("earch and Re");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0388()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.join(stringArray0);
      assertEquals("aaabaeafakamanarasavayazbabebgbhbibmbnbobrbscacechcocrcscucvcydadedvdzeeeleneoeseteufafffifjfofrfygagdglgngugvhahehihohrhthuhyhziaidieigiiikinioisitiuiwjajijvkakgkikjkkklkmknkokrkskukvkwkylalblglilnloltlulvmgmhmimkmlmnmomrmsmtmynanbndnengnlnnnonrnvnyocojomorospapiplpsptqurmrnrorurwsascsdsesgsiskslsmsnsosqsrssstsusvswtatetgthtitktltntotrtstttwtyugukuruzvevivowawoxhyiyozazhzu", string0);
      assertEquals(188, stringArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'n', 51, 4541);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 188
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0389()  throws Throwable  {
      String string0 = "' matches '";
      String string1 = StringUtils.substringAfter("/>A/y{oXnU~C1", "' matches '");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[1] = (CharSequence) "' matches '";
      charSequenceArray0[2] = (CharSequence) "/>A/y{oXnU~C1";
      String string2 = StringUtils.replaceAll("i", "...", "");
      assertEquals("i", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "i";
      charSequenceArray0[4] = (CharSequence) "' matches '";
      charSequenceArray0[5] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "' matches '", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      char char0 = '1';
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '1', 0, 1888);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0390()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 10;
      String string0 = StringUtils.join(floatArray0, '&');
      assertEquals("0.0&10.0", string0);
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 10.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.substringBeforeLast("line.separator", "*)o?)324@HZ");
      assertEquals("line.separator", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("*)o?)324@HZ", "org.apache.commons.lang3.Charsets");
      assertEquals("*)o?)324@HZ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "line.separator", (CharSequence) "line.separator");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " uF0bt'p7", " uF0bt'p7");
      assertTrue(boolean0);
      
      String string3 = StringUtils.repeat("line.separator", "*)o?)324@HZ", 1);
      assertEquals("line.separator", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0391()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1y^";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1y^", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("$YBAZ@ 7V0`\"", '5');
      assertEquals("$YBAZ@ 7V0`\"", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("...", "oy<1y^");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substringAfter("QW.HB.5qK`Z", 11);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.difference("Su", "Cannot clear and set the following entries at the same time: ");
      assertEquals("Cannot clear and set the following entries at the same time: ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string6);
      assertEquals(4, stringArray0.length);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", "C;1h5[2");
      assertEquals(0, int0);
      
      String string7 = StringUtils.replaceEach("Threshold must not be negative", stringArray0, stringArray0);
      assertEquals("Threshold must not be negative", string7);
      assertEquals(4, stringArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.repeat("", 11);
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isNumeric("Threshold must not be negative");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string9 = StringUtils.stripEnd("it:pL`VT^c9", "J7&mj5a#]Jc");
      assertEquals("it:pL`VT^c9", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0392()  throws Throwable  {
      String string0 = StringUtils.repeat("", 2142);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0393()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("yi:*#c", "}Np@7h^L", 0);
      assertEquals("yi:*#c", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("o?+nKF@F|#@zqj,4ite", "}Np@7h^L");
      assertNull(string1);
      
      String string2 = StringUtils.normalizeSpace("Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl\r");
      assertEquals("Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "yi:*#c", (CharSequence) "Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replaceIgnoreCase("yi:*#c", "/PJ6P", "yi:*#c", (-5237));
      assertEquals("yi:*#c", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((short[]) null, 'h', 7, 7);
      assertNull(string4);
      
      String string5 = StringUtils.substringAfter(" has no clone method", "");
      assertEquals(" has no clone method", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.rotate("yi:*#c", 18);
      assertEquals(":*#cyi", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "9=U:kY1Bf>oZ% (/";
      charSequenceArray0[2] = (CharSequence) " has no clone method";
      String string7 = StringUtils.prependIfMissing(" has no clone method", "yi:*#c", charSequenceArray0);
      assertEquals(" has no clone method", string7);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.stripEnd("yi:*#c", (String) null);
      assertEquals("yi:*#c", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(" has no clone method"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(" has no clone method"));
      
      boolean boolean0 = linkedList0.add((Object) linkedList1);
      assertTrue(boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList0.contains(" has no clone method"));
      assertFalse(linkedList1.contains(" has no clone method"));
      
      String string9 = StringUtils.join((Iterable<?>) linkedList0, '}');
      assertEquals("[]", string9);
      assertNotSame(linkedList0, linkedList1);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl\r"));
  }

  @Test(timeout = 4000)
  public void test0394()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) '7';
      doubleArray0[3] = 1.5;
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce(":FT*}$zQ(_cbi", "j]7X'YuE6It9g07\bQ", "Un[CX[:}#*}Az1");
      assertEquals(":FT*}$zQ(_cbi", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEnd((String) null, "o'");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "j]7X'YuE6It9g07\bQ", (CharSequence) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) 55.0;
      objectArray0[1] = (Object) 55.0;
      objectArray0[2] = (Object) "3RYo";
      objectArray0[3] = (Object) 55.0;
      objectArray0[4] = (Object) "Un[CX[:}#*}Az1";
      objectArray0[5] = (Object) "o'";
      objectArray0[6] = object0;
      String string3 = StringUtils.join(objectArray0, '0', (-1089), (-1089));
      assertEquals("", string3);
      assertEquals(7, objectArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0395()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("$SOc0JtjU2-n>D");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.params.ByteRange", 2352, 'b');
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)66;
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\u0000\u0019f\nAB", string1);
      assertEquals(6, byteArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)25, (byte)102, (byte)10, (byte)65, (byte)66}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0396()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", "{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("!5GY#Ua^;*:+]]", "{}", ":FT*}$zQ(_cbi:FT*}$zQ(_cbi");
      assertEquals("!5GY#Ua^;*:+]]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = new Locale("E-Q|CKF");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("e-q|ckf", locale0.getLanguage());
      assertEquals("e-q|ckf", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.lowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", locale0);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another{!#`&dyf~ztr;dwminimum abbreviation width with offset is %d{!#`&dyf~ztr;dw", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("e-q|ckf", locale0.getLanguage());
      assertEquals("e-q|ckf", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.lowerCase("Minimum abbreviation width is %d");
      assertEquals("minimum abbreviation width is %d", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw";
      charSequenceArray0[1] = (CharSequence) ".Q7h&Il`h;";
      charSequenceArray0[2] = (CharSequence) ".Q7h&Il`h;";
      String string4 = StringUtils.lowerCase("aborting to protect against stackoverflowerror - output of one loop is the input of another{!#`&dyf~ztr;dwminimum abbreviation width with offset is %d{!#`&dyf~ztr;dw", locale0);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another{!#`&dyf~ztr;dwminimum abbreviation width with offset is %d{!#`&dyf~ztr;dw", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("e-q|ckf", locale0.getLanguage());
      assertEquals("e-q|ckf", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      charSequenceArray0[3] = (CharSequence) "aborting to protect against stackoverflowerror - output of one loop is the input of another{!#`&dyf~ztr;dwminimum abbreviation width with offset is %d{!#`&dyf~ztr;dw";
      charSequenceArray0[4] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw";
      charSequenceArray0[5] = (CharSequence) "minimum abbreviation width is %d";
      charSequenceArray0[6] = (CharSequence) "#khQaiRzL;dJO@";
      charSequenceArray0[7] = (CharSequence) "Minimum abbreviation width is %d";
      String string5 = StringUtils.reverseDelimited("!5GY#Ua^;*:+]]", '}');
      assertEquals("!5GY#Ua^;*:+]]", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      charSequenceArray0[8] = (CharSequence) "!5GY#Ua^;*:+]]";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "!5GY#Ua^;*:+]]", 0, (-706));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string6 = StringUtils.substringBefore((String) null, "FEO77<jDT");
      assertNull(string6);
      
      int int2 = StringUtils.indexOf(charSequenceArray0[5], 4897);
      assertEquals((-1), int2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.ordinalIndexOf("!5GY#Ua^;*:+]]", "aborting to protect against stackoverflowerror - output of one loop is the input of another{!#`&dyf~ztr;dwminimum abbreviation width with offset is %d{!#`&dyf~ztr;dw", (-1931));
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0397()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "fGPJ[I>T>z";
      stringArray1[1] = "org.apache.commons.lang3.StringUtils";
      stringArray1[3] = "fGPJ[I>T>z";
      stringArray1[6] = "fGPJ[I>T>z";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("fGPJ[I>T>z", stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0398()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      String string1 = StringUtils.trim("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = "c4}QkvZ2Y_33','Z%";
      String string3 = StringUtils.replace("zD\"FtF", "{!#`&dyF~ZTr;dw", "org.junitpioneer.jupiter.params.Range");
      assertEquals("zD\"FtF", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int0 = (-992);
      String string4 = StringUtils.abbreviateMiddle("c4}QkvZ2Y_33','Z%", "c4}QkvZ2Y_33','Z%", 13);
      assertEquals("c4}QkvZ2Y_33','Z%", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{!#`&dyF~ZTr;dw";
      stringArray0[1] = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "c4}QkvZ2Y_33','Z%";
      stringArray1[1] = "$ Ce~_Dy>_qTEZ";
      stringArray1[2] = "E#t&F";
      stringArray1[3] = "E#t&F";
      stringArray1[4] = "}>";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("$ Ce~_Dy>_qTEZ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0399()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'I';
      floatArray0[2] = (float) 'I';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'I', 0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0400()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "l2U5y+CN/a%~ZR", (-1527), (-1527));
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[18];
      stringArray0[0] = "l2U5y+CN/a%~ZR";
      stringArray0[1] = "l2U5y+CN/a%~ZR";
      stringArray0[1] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("l2U5y+CN/a%~ZR", string1);
      assertEquals(18, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char char0 = '{';
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '{';
      floatArray0[1] = (float) (-2882);
      floatArray0[2] = (float) '{';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '@', (-2882), (-1527));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2882
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0401()  throws Throwable  {
      char char0 = 'W';
      String string0 = "DRFr:yW0/h7";
      // Undeclared exception!
      try { 
        StringUtils.upperCase("DRFr:yW0/h7", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0402()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(106);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = linkedHashSet0.add(object1);
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains(0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains(0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[5] = (CharSequence) "P27tXDb&)";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(18, charSequenceArray0.length);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.center("Backup", 56, '\'');
      assertEquals("'''''''''''''''''''''''''Backup'''''''''''''''''''''''''", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("Backup", 413);
      assertEquals("ackupB", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0403()  throws Throwable  {
      String string0 = StringUtils.swapCase("2xAb5m");
      assertEquals("2XaB5M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("$Could not resolve parameter of type %s.", 48);
      assertEquals("$Could not resolve parameter of type %s.        ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "$Could not resolve parameter of type %s.        ";
      charSequenceArray0[1] = (CharSequence) "2XaB5M";
      charSequenceArray0[2] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[3] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[4] = (CharSequence) " is not in the range '0' - '9'";
      String string2 = StringUtils.removeStartIgnoreCase("2xAb5m", ";Kp42p&*4z$2~X,BdRt");
      assertEquals("2xAb5m", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[1], "$Could not resolve parameter of type %s.");
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.rightPad("$", 8, ";Kp42p&*4z$2~X,BdRt");
      assertEquals("$;Kp42p&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.getDigits("9nG");
      assertEquals("9", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) ";Kp42p&*4z$2~X,BdRt", (CharSequence) "$");
      assertEquals(10, int0);
      
      String string5 = StringUtils.leftPad(";Kp42p&*4z$2~X,BdRt", 48);
      assertEquals("                             ;Kp42p&*4z$2~X,BdRt", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringAfter("\n", 4838);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String[] stringArray0 = StringUtils.split("5!)) vs ", '/');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("9", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0404()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "J", stringArray0[1]);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0405()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      String string1 = StringUtils.rightPad("Could not resolve parameter of type %s.", (-4211));
      assertEquals("Could not resolve parameter of type %s.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Could not resolve parameter of type %s.";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Could not resolve parameter of type %s.", charSequence0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string2 = StringUtils.removePattern((String) null, "=a");
      assertNull(string2);
      
      String string3 = StringUtils.appendIfMissing(", ", ", ", charSequenceArray0);
      assertEquals(", ", string3);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      
      String string4 = StringUtils.substringBeforeLast("=a", "...");
      assertEquals("=a", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      
      String string5 = StringUtils.uncapitalize("FZ2HI8(yz3B");
      assertEquals("fZ2HI8(yz3B", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.substringAfter(", ", "b>4<N- ?");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ", ", (CharSequence) "");
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "YCk0ZC", (String) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.joinWith("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertEquals("Could not resolve parameter of type %s.", string7);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)charSequence0));
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "=a", (CharSequence) "Could not resolve parameter of type %s.", 16);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0406()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.chomp("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int int1 = StringUtils.ordinalIndexOf("", "", (-5237));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("<)z})7J$a(@5XK\"'3*6");
      assertFalse(boolean0);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.defaultString("<)z})7J$a(@5XK\"'3*6");
      assertEquals("<)z})7J$a(@5XK\"'3*6", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0407()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0408()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.replaceOnceIgnoreCase(",", "", "");
      assertEquals(",", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) ",";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap((String) null, 'V');
      assertNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",";
      stringArray0[1] = null;
      stringArray0[2] = ",";
      stringArray0[3] = ",";
      stringArray0[4] = "";
      stringArray0[5] = "Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(",", string2);
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("4;kgml", string1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0409()  throws Throwable  {
      String string0 = StringUtils.unwrap("(m-_Y8\"XT;<-T", '\f');
      assertEquals("(m-_Y8\"XT;<-T", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Supplied value must be a valid byte literal between -128 and 127: [", ", ", 32, 32);
      assertEquals(", yte literal between -128 and, ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(", ", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0410()  throws Throwable  {
      String string0 = "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", "A(NXT<6PFz", 16, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 21
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0411()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("line.separator");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("line.separator");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0412()  throws Throwable  {
      String string0 = StringUtils.stripStart("Locale must not be null", "Locale must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase(">", "");
      assertEquals(">", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull(">");
      assertEquals(">", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace(">");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap(">Aborting to protect against StackOverflowError - output of one loop is the input of another", ">");
      assertEquals(">Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlpha(">");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0413()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      String string0 = StringUtils.join((List<?>) stack0, "MimI]b0tL*V><1", (-1759), (-1759));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = ';';
      charArray0[4] = 'f';
      charArray0[5] = ';';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'(', 'f', 'f', ';', 'f', ';'}, charArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('f'));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains('f'));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = linkedList0.removeFirstOccurrence(object1);
      assertFalse(boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(object1, object0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('f'));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      boolean boolean1 = linkedList0.add((Object) locale_FilteringMode0);
      assertTrue(boolean1);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains('f'));
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("Display name 'ZOd.hhpPw");
      assertEquals("display name 'ZOd.hhpPw", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.countMatches((CharSequence) "display name 'ZOd.hhpPw", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.defaultIfBlank(", '", ",3S9&1eDoX5]");
      assertEquals(", '", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.toRootLowerCase(", '");
      assertEquals(", '", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.reverse("MimI]b0tL*V><1");
      assertEquals("1<>V*Lt0b]ImiM", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.removeEnd("MimI]b0tL*V><1", (String) null);
      assertEquals("MimI]b0tL*V><1", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.replaceAll(", '", ",3S9&1eDoX5]", (String) null);
      assertEquals(", '", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0414()  throws Throwable  {
      String string0 = StringUtils.substringBetween(", Length: ", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd(", Length: ", (String) null);
      assertEquals(", Length: ", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0415()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad((String) null, 0, 'i');
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripStart("8#)(~v bUmL-^]w", "8#)(~v bUmL-^]w");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      float[] floatArray0 = new float[0];
      String string4 = StringUtils.join(floatArray0, 'W');
      assertEquals("", string4);
      assertEquals(0, floatArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      String string5 = StringUtils.wrapIfMissing("\r", "Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl");
      assertEquals("Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl\rFk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":FT*}$zQ(_cbi:FT*}$zQ(_cbi", "\r", (-1));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0416()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'z');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, " vs ");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", (String) null);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeStart("gmHg_\\I|", (String) null);
      assertEquals("gmHg_\\I|", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.join((double[]) null, 'z', (-722), 465);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0417()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0418()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" '?z~esvzh\r", (String) null);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0419()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0420()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("-`VxSAIhlY,a=e|V", (-1339), "\n");
      assertEquals("-`VxSAIhlY,a=e|V", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("sGM%da?RJOl", "-`VxSAIhlY,a=e|V");
      assertEquals("sGM%da?RJOl", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap("\n", 'R');
      assertEquals("R\nR", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("sGM%da?RJOl");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("R\nR", "-`VxSAIhlY,a=e|V", (-1339));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumeric("sGM%da?RJOl");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.upperCase("E: DX,");
      assertEquals("E: DX,", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.abbreviateMiddle("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", "@G5$:Xj1-nEES7Bj", (-1339));
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.reverse("\n");
      assertEquals("\n", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string8 = StringUtils.wrap("ZOd.hhpPw", 'R');
      assertEquals("RZOd.hhpPwR", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0421()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("E]dnN!J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0422()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.upperCase("", locale0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test0423()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], charSequenceArray0[3], 10);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[6]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'G';
      charArray0[2] = '-';
      charArray0[3] = 'g';
      charArray0[4] = '<';
      String string2 = StringUtils.difference("-VsFlA$2Yh|Wg:R^]", "*:X$%R?Z");
      assertEquals("*:X$%R?Z", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      stringArray0[4] = "\n";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "*:X$%R?Z", "^Z6");
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("\n", stringArray0);
      assertTrue(boolean2);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("*:X$%R?Z");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.upperCase("\n", locale0);
      assertEquals("\n", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string5 = StringUtils.replaceFirst("\n", "Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", "C(yk'^lk6]4I");
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0424()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("-DLf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0425()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("<GZk3", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0426()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", "{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EmX";
      stringArray0[1] = "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[2] = "EmX";
      stringArray0[3] = "{!#`&dyF~ZTr;dw";
      stringArray0[4] = "{!#`&dyF~ZTr;dw";
      stringArray0[5] = "{!#`&dyF~ZTr;dw";
      String string2 = StringUtils.replaceEachRepeatedly("EmX", (String[]) null, stringArray0);
      assertEquals("EmX", string2);
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeFirst("", "', is neither of type Map.Entry nor an Array");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "{!#`&dyF~ZTr;dw";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      String string4 = StringUtils.stripToNull("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "EmX");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string5);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)0;
      String string6 = StringUtils.join(shortArray0, 'v', (int) (short)0, (int) (short)0);
      assertEquals("", string6);
      assertEquals(1, shortArray0.length);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      
      String string7 = StringUtils.wrapIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dwAborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0427()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("$I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0428()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("\r", '\f');
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0429()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 1, 1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.rightPad("5!)) vs ", 1);
      assertEquals("5!)) vs ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string4 = StringUtils.removePattern("aF2Aua)'YTD-^SO:,Mm", "");
      assertEquals("aF2Aua)'YTD-^SO:,Mm", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.appendIfMissing(" is not in the range '0' - '9'", "", charSequenceArray0);
      assertEquals(" is not in the range '0' - '9'", string5);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.substringBeforeLast("...", "aF2Aua)'YTD-^SO:,Mm");
      assertEquals("...", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.uncapitalize("");
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) " is not in the range '0' - '9'");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "#pI(");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "", (-5448));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0430()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("yi:*#c", 'X');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = null;
      String string1 = StringUtils.removeStart("Wy'?!KV", (String) null);
      assertEquals("Wy'?!KV", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Wy'?!KV", (CharSequence) "yi:*#c", 4128);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) 'X';
      intArray0[1] = 4128;
      intArray0[2] = (int) 'X';
      intArray0[3] = (int) 'X';
      intArray0[4] = (-1);
      String string2 = StringUtils.join(intArray0, '+');
      assertEquals("88+4128+88+88+-1", string2);
      assertEquals(5, intArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {88, 4128, 88, 88, (-1)}, intArray0);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      int int1 = StringUtils.lastIndexOfAny("88+4128+88+88+-1", stringArray0);
      assertEquals((-1), int1);
      assertEquals(1, stringArray0.length);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.ordinalIndexOf("Wy'?!KV", "88+4128+88+88+-1", 3543);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = StringUtils.compare("D", (String) null, true);
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("yi:*#c", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "Illegal range. There's no way to get from %s to %s with a step of %s.";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 88, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0431()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "sGM%da?RJOl");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("", 'X');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null, 124);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      String string3 = StringUtils.rightPad("", (-1408));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string4);
      assertEquals(0, stringArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.abbreviate("", 8, 8);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", charSequenceArray0[1]);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string6 = StringUtils.join((Object[]) stringArray0, (String) null);
      assertEquals("", string6);
      assertEquals(0, stringArray0.length);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      
      String string7 = StringUtils.getDigits("");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      
      String string8 = StringUtils.replaceIgnoreCase("5!)) vs ", "MYL#:R%", " ");
      assertEquals("5!)) vs ", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      
      String string9 = StringUtils.joinWith("", stringArray0);
      assertEquals("", string9);
      assertEquals(0, stringArray0.length);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0432()  throws Throwable  {
      String string0 = StringUtils.center("$XA~x0(", (-3362), "$XA~x0(");
      assertEquals("$XA~x0(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("$XA~x0(");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("$XA~x0(", 2615);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("", 3416, 3416);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1002));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.wrap("", "$XA~x0(");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0433()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", 965);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0434()  throws Throwable  {
      String string0 = StringUtils.capitalize("Timeout for vintage @Test must be positive.");
      assertEquals("Timeout for vintage @Test must be positive.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("My=g< e_~Y>v!\"", 0, ']');
      assertEquals("My=g< e_~Y>v!\"", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "Timeout for vintage @Test must be positive.");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.stripStart("ly=2XixO", "~p<Y#`E");
      assertEquals("ly=2XixO", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Timeout for vintage @Test must be positive.", 0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0435()  throws Throwable  {
      String string0 = StringUtils.substring("r4N6ne4rU", (-1), (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('&', (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0436()  throws Throwable  {
      String string0 = StringUtils.substring("Arguments cannot both be null", (-712), (-712));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("Arguments cannot both be null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("Arguments cannot both be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("j_jv");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0437()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) '7';
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) '7';
      doubleArray0[7] = (-327.82383441897);
      doubleArray0[8] = 1.5;
      String string0 = StringUtils.join(doubleArray0, '?');
      assertEquals("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", string0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {55.0, 55.0, 55.0, 1.5, 1.5, 0.0, 55.0, (-327.82383441897), 1.5}, doubleArray0, 0.01);
      
      String string1 = StringUtils.swapCase("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5");
      assertEquals("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'7'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string2 = StringUtils.repeat('7', 54);
      assertEquals("777777777777777777777777777777777777777777777777777777", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "777777777777777777777777777777777777777777777777777777";
      charSequenceArray0[1] = (CharSequence) "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5";
      charSequenceArray0[2] = (CharSequence) "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5";
      charSequenceArray0[3] = (CharSequence) "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5";
      charSequenceArray0[4] = (CharSequence) "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5";
      String string3 = StringUtils.replaceFirst("*p.DIioMh\"", "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", "777777777777777777777777777777777777777777777777777777");
      assertEquals("*p.DIioMh\"", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) "*p.DIioMh\"";
      charSequenceArray0[6] = (CharSequence) "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.removeStart("*p.DIioMh\"", "*p.DIioMh\"");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], 1157);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string5 = StringUtils.substring("Method `", (-16), 1157);
      assertEquals("Method `", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("\n", "4M50v:");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0438()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0439()  throws Throwable  {
      String string0 = StringUtils.stripEnd("org.apache.commons.lang3.RegExUtils", "");
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0440()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1Sy^V2n";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1Sy^V2n", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultTimeZone", "u(NxXP");
      assertEquals(4, int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("u(NxXP", stringArray0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.right("g0jShM}UM+zB\"F", 4);
      assertEquals("zB\"F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((Object[]) stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string4);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'a';
      charArray0[2] = 'V';
      boolean boolean2 = StringUtils.isAlphaSpace("g0jShM}UM+zB\"F");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.LF;
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.stripEnd("f`kHV ??J(6mv/RdM", "");
      assertEquals("f`kHV ??J(6mv/RdM", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      int int1 = StringUtils.countMatches((CharSequence) "9yWR<?[SnY4", 'V');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "f`kHV ??J(6mv/RdM", "oy<1Sy^V2n");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string7 = StringUtils.abbreviate("rjE 3N%~'@", "\"HpP", 942, 666);
      assertEquals("rjE 3N%~'@", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test0441()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("m#/6bs8|X", "m#/6bs8|X", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0442()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "l2U5y+CN/a%~ZR", (-1527), (-1527));
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l2U5y+CN/a%~ZR";
      stringArray0[1] = "l2U5y+CN/a%~ZR";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("l2U5y+CN/a%~ZR", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Could not resolve parameter of type %s.";
      String string3 = StringUtils.rotate("", (-1527));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.getDigits("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.prependIfMissing("o;", "", stringArray0);
      assertEquals("o;", string5);
      assertEquals(4, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.stripEnd("l2U5y+CN/a%~ZR", "l2U5y+CN/a%~ZR");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      String[] stringArray1 = null;
      String[] stringArray2 = new String[3];
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "";
      stringArray2[1] = "l2U5y+CN/a%~ZR";
      stringArray2[2] = "";
      String string7 = StringUtils.lowerCase("l2U5y+CN/a%~ZR");
      assertEquals("l2u5y+cn/a%~zr", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.removeFirst("c^:eX><", "l2u5y+cn/a%~zr");
      assertEquals("c^:eX><", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(4, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray2));
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("l2U5y+CN/a%~ZR", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0443()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1194);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0444()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.substringBeforeLast("", "z");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string6 = StringUtils.valueOf((char[]) null);
      assertNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("B>T,xx1;0:bNs)5Hmv", "");
      assertEquals("B>T,xx1;0:bNs)5Hmv", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[4]);
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0445()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("(E;/&,QS;mFP4", "");
      assertEquals("(E;/&,QS;mFP4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0446()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      String string0 = "org.junitpioneer.jupiter.DefaultLocaleExtension";
      String string1 = "r";
      String string2 = StringUtils.chomp("org.junitpioneer.jupiter.DefaultLocaleExtension", "r");
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "r";
      String string4 = StringUtils.removeIgnoreCase("r", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertEquals("r", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = "l=Y%,`[;AW<v";
      String string6 = StringUtils.substringBeforeLast("5j.<pI&H9k`MS", "l=Y%,`[;AW<v");
      assertEquals("5j.<pI&H9k`MS", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAllLowerCase("r");
      assertTrue(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("org.junitpioneer.jupiter.DefaultLocaleExtension"));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-557));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -557
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0447()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0448()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "l2U5y+CN/a%~ZR", (-1527), (-1527));
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l2U5y+CN/a%~ZR";
      stringArray0[1] = "l2U5y+CN/a%~ZR";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("l2U5y+CN/a%~ZR", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("q#0H=$[~4", "fg,~^_ =Fo5J#, ");
      assertEquals("q#0H=$[~4", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", 13);
      assertEquals("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("q#0H=$[~4");
      assertTrue(boolean0);
      
      String string4 = StringUtils.strip("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.reverseDelimited("", '\u0019');
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.chomp((String) null, "<{6)wv");
      assertNull(string6);
      
      String string7 = StringUtils.defaultIfBlank("<{6)wv", (String) null);
      assertEquals("<{6)wv", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0449()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) '>';
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("Could not resolve parameter of type %s.", "Lr!~&6!}C6KJ");
      assertEquals("Could not resolve parameter of type %s.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("", "?/uB8;k2&D~S)");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Lr!~&6!}C6KJ", (CharSequence) "");
      assertEquals(12, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase(", '");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.removeIgnoreCase("Lr!~&6!}C6KJ", ":<>DlKQ&U3Xg|J%ys");
      assertEquals("Lr!~&6!}C6KJ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean2 = StringUtils.endsWithAny("/-~E%El.K&hqSMVO", stringArray1);
      assertFalse(boolean2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean3);
      assertEquals(5, charArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '>'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0450()  throws Throwable  {
      String string0 = StringUtils.substringAfter("c0bewB", "c0bewB");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "c0bewB", (CharSequence) "");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test0451()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1Sy^V2n";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1Sy^V2n", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("Method `Could not resolve parameter of type %s.", 'y', 'e');
      assertEquals("Method `Could not resolve parameter of tepe %s.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("U>4mX]ChGl", "Fk*P LBUeM`/Wi&I?g0jSh}UM+zB\"F");
      assertEquals(">4mX]ChGl", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Object varargs must not be null");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("g0jShM}UM+zB\"F", ">4mX]ChGl", 8192);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("DefaultTimeZone");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase((String) null, " vs ", "Method `Could not resolve parameter of tepe %s.");
      assertNull(string2);
      
      String string3 = StringUtils.repeat("org.junitpioneer.jupiter.EnvironmentVariableExtension", (-1));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.right("Object varargs must not be null", (-3740));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.EnvironmentVariableExtension";
      objectArray0[1] = (Object) null;
      String string5 = StringUtils.join(objectArray0);
      assertEquals("org.junitpioneer.jupiter.EnvironmentVariableExtension", string5);
      assertEquals(2, objectArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.defaultIfBlank("U>4mX]ChGl", "A");
      assertEquals("U>4mX]ChGl", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.stripToEmpty("Method `Could not resolve parameter of tepe %s.");
      assertEquals("Method `Could not resolve parameter of tepe %s.", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.rightPad("Threshold must not be negative", (-1), 'e');
      assertEquals("Threshold must not be negative", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0452()  throws Throwable  {
      String string0 = StringUtils.center("@DefaultLocaYe can only be used with language tag if languagee country, and variant aie not set", 101, "@DefaultLocaYe can only be used with language tag if languagee country, and variant aie not set");
      assertEquals("@De@DefaultLocaYe can only be used with language tag if languagee country, and variant aie not set@De", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0453()  throws Throwable  {
      int int0 = 8;
      String string0 = StringUtils.center("Mx>`HvP", 8, "Mx>`HvP");
      assertEquals("Mx>`HvPM", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substringBeforeLast("Expected exception %s was not thrown.", (String) null);
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Expected exception %s was not thrown.", "Expected exception %s was not thrown.");
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Expected exception %s was not thrown."));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Expected exception %s was not thrown."));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "Expected exception %s was not thrown.", (-1), 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0454()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.REJECT_EXTENDED_RANGES, locale_FilteringMode0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertTrue(linkedList0.contains(object0));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = linkedList1.add(object1);
      assertTrue(boolean1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(object1, object0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      assertTrue(linkedList1.contains(object1));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)13;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)13;
      String string1 = StringUtils.join(shortArray0, 'H');
      assertEquals("13H13H13", string1);
      assertEquals(3, shortArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)13, (short)13, (short)13}, shortArray0);
      
      String string2 = StringUtils.unwrap("9t^=N", 'u');
      assertEquals("9t^=N", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "9t^=N", (int) (short)13);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.valueOf(charArray0);
      assertEquals("", string3);
      assertEquals(0, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      
      String string4 = StringUtils.stripToNull("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match:", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Extension context \"", charSequenceArray0[4]);
      assertEquals(19, int0);
      assertEquals(9, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-59);
      try { 
        StringUtils.toString(byteArray0, "9t^=N");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0455()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'h');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0456()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0457()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", "{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EmX";
      stringArray0[1] = "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[2] = "EmX";
      stringArray0[3] = "{!#`&dyF~ZTr;dw";
      stringArray0[4] = "{!#`&dyF~ZTr;dw";
      stringArray0[5] = "{!#`&dyF~ZTr;dw";
      String string2 = StringUtils.replaceEachRepeatedly("EmX", (String[]) null, stringArray0);
      assertEquals("EmX", string2);
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeFirst("", "', is neither of type Map.Entry nor an Array");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "{!#`&dyF~ZTr;dw";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[3] = (CharSequence) "EmX";
      charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "EmX";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceEachRepeatedly("{!#`&dyF~ZTr;dw", (String[]) null, stringArray0);
      assertEquals("{!#`&dyF~ZTr;dw", string4);
      assertEquals(6, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class1);
      assertSame(class1, class0);
      assertNotNull(enumSet0);
      assertEquals(5, enumSet0.size());
      
      String string5 = StringUtils.abbreviateMiddle("EmX", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 1286);
      assertEquals("EmX", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.reverse("k5mv8D");
      assertEquals("D8vm5k", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.removeEnd("EmX", "i");
      assertEquals("EmX", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.replaceAll("Minimum abbreviation width with offset is %d", "EmX", "{!#`&dyF~ZTr;dw");
      assertEquals("Minimum abbreviation width with offset is %d", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0458()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "T^B]dc%A|jH>L&G";
      stringArray0[0] = "T^B]dc%A|jH>L&G";
      stringArray0[1] = "Backupk5mv8Dkp;-=3h@VG<h";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("T^B]dc%A|jH>L&G", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'J';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "T^B]dc%A|jH>L&G", charArray0);
      assertFalse(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'/', 'J'}, charArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "T^B]dc%A|jH>L&G", (CharSequence) "T^B]dc%A|jH>L&G");
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byte byte0 = (byte)73;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)47;
      try { 
        StringUtils.toString(byteArray0, "Backupk5mv8Dkp;-=3h@VG<h");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0459()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "i!.K:", (CharSequence) "i!.K:");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0460()  throws Throwable  {
      String string0 = StringUtils.truncate("b%?Vo@@L&#v]z&e(6%", 12);
      assertEquals("b%?Vo@@L&#v]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "b%?Vo@@L&#v]", "");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "b%?Vo@@L&#v]z&e(6%";
      charSequenceArray0[1] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[2] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[3] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[4] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[5] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[6] = (CharSequence) "b%?Vo@@L&#v]z&e(6%";
      charSequenceArray0[7] = (CharSequence) "b%?Vo@@L&#v]";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[7], charArray0);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.center("offset cannot be negative", (-1), '`');
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[4], (CharSequence) "offset cannot be negative", (-1));
      assertEquals((-1), int1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.replaceFirst((String) null, "CartesianProductTest can not have a non-empty display name", "LSp^wct.naH");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0461()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) stack0, "MimI]b0tL*V><1", (-1759), (-1759));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = ';';
      charArray0[4] = '\\';
      charArray0[5] = ';';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'(', '\\', '\\', ';', '\\', ';'}, charArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('('));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains('('));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      boolean boolean0 = linkedList0.add((Object) locale_FilteringMode0);
      assertTrue(boolean0);
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains('('));
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("Display name 'ZOd.hhpPw");
      assertEquals("display name 'ZOd.hhpPw", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int1 = StringUtils.countMatches((CharSequence) "display name 'ZOd.hhpPw", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.defaultIfBlank(", '", ",3S9&1eDoX5]");
      assertEquals(", '", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "MimI]b0tL*V><1";
      charSequenceArray0[1] = (CharSequence) ", '";
      charSequenceArray0[2] = (CharSequence) "Display name 'ZOd.hhpPw";
      charSequenceArray0[3] = (CharSequence) "MimI]b0tL*V><1";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "MimI]b0tL*V><1", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0462()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0463()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "q<DPM1tLV`u'Q#v", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0464()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      
      Locale locale2 = (Locale)locale1.clone();
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotNull(locale2);
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("GBR", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("GB", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en_GB", locale2.toString());
      
      String string1 = locale1.getDisplayVariant(locale0);
      assertEquals("", string1);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotNull(string1);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en_GB", locale1.toString());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertTrue(locale0.equals((Object)locale2));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("", "Arguments cannot both be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.defaultIfBlank("", (String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0465()  throws Throwable  {
      String string0 = StringUtils.remove("\r", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("\r"));
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeIgnoreCase("\r", "\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.uncapitalize("!!,Db~UH");
      assertEquals("!!,Db~UH", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("!!,Db~UH", "!!,Db~UH");
      assertEquals("!!,Db~UH", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0466()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "F$,]=*{eheoQ}p^";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("F$,]=*{eheoQ}p^", stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0467()  throws Throwable  {
      String string0 = StringUtils.center("$XA~x0(", (-3362), "$XA~x0(");
      assertEquals("$XA~x0(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("$XA~x0(");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("$XA~x0(", (-3362));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("cSv39JB_jwX4G{p", 3416, 3416);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'g';
      charArray0[2] = 'n';
      charArray0[3] = '(';
      charArray0[4] = 'g';
      charArray0[5] = 'o';
      charArray0[6] = '(';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "cSv39JB_jwX4G{p", charArray0);
      assertFalse(boolean1);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'2', 'g', 'n', '(', 'g', 'o', '('}, charArray0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "$XA~x0(", charArray0);
      assertFalse(boolean2);
      assertEquals(7, charArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'2', 'g', 'n', '(', 'g', 'o', '('}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "$XA~x0(";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "$XA~x0(";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean3 = StringUtils.containsAny((CharSequence) "$XA~x0(", charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0468()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.leftPad("org.junitpioneer.jupiter.params.FloatRange", 65536, "\" should have a parent context.");
  }

  @Test(timeout = 4000)
  public void test0469()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1y^";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1y^", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char char0 = 'R';
      char char1 = '2';
      char char2 = 'o';
      // Undeclared exception!
      StringUtils.leftPad("Strings must not be null", 32767, "oy<1y^");
  }

  @Test(timeout = 4000)
  public void test0470()  throws Throwable  {
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("\n", (-1339));
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removePattern("\n", "\n");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("Display name '", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      stringArray0[1] = "QLS4~w[&6 VqZs";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("8M`!VwI<J)*@-PkS", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "\n");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.stripToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "QLS4~w[&6 VqZs", (CharSequence) "\n");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'B';
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int3);
      assertEquals(2, charArray0.length);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertArrayEquals(new char[] {'2', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0471()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", (String) null);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeStart("\r", (String) null);
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0472()  throws Throwable  {
      String string0 = StringUtils.chomp("\n");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0473()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Don' clear/set the ame entrw more than once.", " ");
      assertEquals(4, int0);
      
      String string0 = StringUtils.chomp(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0474()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.trim("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp(" ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", " ", 32);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.stripEnd("9yWR<?[SnY4", "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("9yWR<?[SnY4", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.countMatches((CharSequence) " ", 'R');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0475()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string1 = StringUtils.join(iterator0, 'h');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.replace("+<k5$Sol:+7x.^6FL", "-ZqjW?", "-ZqjW?", 5);
      assertEquals("+<k5$Sol:+7x.^6FL", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Iterator<Locale.FilteringMode> iterator1 = serviceLoader0.iterator();
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.left("", 5);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringAfterLast("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("+<k5$Sol:+7x.^6FL");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.startsWithAny("r_>", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.overlay("+<k5$Sol:+7x.^6FL", "+<k5$Sol:+7x.^6FL", (-1128), 112);
      assertEquals("+<k5$Sol:+7x.^6FL", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      int int1 = StringUtils.lastOrdinalIndexOf("+<k5$Sol:+7x.^6FL", "+<k5$Sol:+7x.^6FL", 112);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.stripAccents("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0476()  throws Throwable  {
      String string0 = "RLi\\xe9";
      String string1 = StringUtils.leftPad("RLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RLixe9", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "RLixe9");
      assertNull(string2);
      
      String string3 = "";
      String string4 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "RLixe9";
      String string5 = "j";
      String string6 = StringUtils.lowerCase("j");
      assertEquals("j", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = StringUtils.rightPad("g", (-1));
      assertEquals("g", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.replaceEachRepeatedly("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string8);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("@DefaultLocale can only be used with language tag if language, country, and variant are not set", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0477()  throws Throwable  {
      String string0 = StringUtils.remove("maxWith cannot be negative", "=&6s");
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("Minimum abbreviation width is %d", 'r', 'e');
      assertEquals("Minimum abbeeviation width is %d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("?", "Object varargs must not be null");
      assertEquals("?", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("?");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "r.)f", 8192);
      assertNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("', '", "?", "DefaultTimeZone");
      assertEquals("', '", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat((String) null, 8192);
      assertNull(string4);
      
      String string5 = StringUtils.right("org.apache.commons.lang3.Charsets", 17);
      assertEquals("ns.lang3.Charsets", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.join((Object[]) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0478()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.repeat("q:%BF", 3695);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase("blank_blank_blank_2014");
      assertEquals("BLANK_BLANK_BLANK_2014", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripEnd("y:Arcn$8Blf5G>Tm", "h@VG<h");
      assertEquals("y:Arcn$8Blf5G>Tm", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "y:Arcn$8Blf5G>Tm", 28);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.abbreviateMiddle("q:%BF", "'7uCq U+{PIbY'.", (-1));
      assertEquals("q:%BF", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = "\\u";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-Cj)C['wY0 H)Ef,h";
      stringArray0[1] = "-Cj)C['wY0 H)Ef,h";
      stringArray0[2] = "blank_blank_blank_2014";
      stringArray0[3] = "i?_#jw";
      stringArray0[4] = string1;
      stringArray0[5] = "i?_#jw";
      stringArray0[3] = "y:Arcn$8Blf5G>Tm";
      stringArray0[7] = "h@VG<h";
      String string6 = StringUtils.replaceEach(string5, stringArray0, stringArray0);
      assertEquals("\\u", string6);
      assertEquals(8, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string7 = StringUtils.repeat("-Cj)C['wY0 H)Ef,h", (-1340));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      
      // Undeclared exception!
      StringUtils.normalizeSpace(stringArray0[4]);
  }

  @Test(timeout = 4000)
  public void test0479()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = stack0.removeElement(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      boolean boolean2 = stack0.add("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      
      boolean boolean3 = stack0.add("Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'I');
      assertEquals("IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[, Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.contains(""));
      assertFalse(stack0.contains(string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", "IDisplay name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*Display name '(m-_Y8\"XT;<-T7ymA$SWuw<k{W2*7ymA$SWuw<k{W2*", 3);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.removeStart("org.apache.commons.lang3.StringUtils", "`{");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0480()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative", "yiMi_k*4`veWP");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0481()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.stripEnd("i?_#jw", "maxWith cannot be negative");
      assertEquals("i?_#jw", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "i?_#jw", 32767);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviateMiddle("VDk!ij%NQ0eij/8", "i?_#jw", (-1));
      assertEquals("VDk!ij%NQ0eij/8", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-Cj)C['wY0 H)Ef,h";
      stringArray0[1] = "Method `";
      stringArray0[2] = "i?_#jw";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = string0;
      stringArray0[5] = "?";
      stringArray0[6] = "The character ";
      stringArray0[7] = "?";
      String string4 = StringUtils.replaceEach("VDk!ij%NQ0eij/8", stringArray0, stringArray0);
      assertEquals("VDk!ij%NQ0eij/8", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.repeat("...", (-1363));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.normalizeSpace("...");
      assertEquals("...", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "VDk!ij%NQ0eij/8", (CharSequence) "Don't clear/set the same entry more than once.");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.trimToEmpty("i?_#jw");
      assertEquals("i?_#jw", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.removeEnd("Method `", "Could not resolve parameter of type %s.");
      assertEquals("Method `", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0482()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '?', 9784, 9784);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0483()  throws Throwable  {
      String string0 = "r_>";
      String string1 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0484()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("y*6|jxF3^kxHr@bUPRD");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.joinWith("y*6|jxF3^kxHr@bUPRD", stringArray0);
      assertEquals(13, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0485()  throws Throwable  {
      String string0 = StringUtils.swapCase("2xAb5m");
      assertEquals("2XaB5M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("$Could not resolve parameter of type %s.", 48);
      assertEquals("$Could not resolve parameter of type %s.        ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "$Could not resolve parameter of type %s.        ";
      charSequenceArray0[1] = (CharSequence) "2XaB5M";
      charSequenceArray0[2] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[3] = (CharSequence) " is not in the range '0' - '9'";
      charSequenceArray0[4] = (CharSequence) " is not in the range '0' - '9'";
      String string2 = StringUtils.rightPad(" is not in the range '0' - '9'", (-4063));
      assertEquals(" is not in the range '0' - '9'", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) " is not in the range '0' - '9'";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("$Could not resolve parameter of type %s.        ", charSequence0);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      
      String string3 = StringUtils.removePattern("t9", "jsFN=c4 5RO,VVS';K");
      assertEquals("t9", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.appendIfMissing("$Could not resolve parameter of type %s.", " is not in the range '0' - '9'", charSequenceArray0);
      assertEquals("$Could not resolve parameter of type %s. is not in the range '0' - '9'", string4);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substringBeforeLast("}]4|cv", "t9");
      assertEquals("}]4|cv", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.uncapitalize("2XaB5M");
      assertEquals("2XaB5M", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "t9", charSequenceArray0[3]);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "2XaB5M", "YCk0ZC");
      assertFalse(boolean0);
      
      String string7 = StringUtils.joinWith("$Could not resolve parameter of type %s.        ", charSequenceArray0);
      assertEquals("$Could not resolve parameter of type %s.        $Could not resolve parameter of type %s.        2XaB5M$Could not resolve parameter of type %s.         is not in the range '0' - '9'$Could not resolve parameter of type %s.         is not in the range '0' - '9'$Could not resolve parameter of type %s.         is not in the range '0' - '9'$Could not resolve parameter of type %s.         is not in the range '0' - '9'", string7);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "$Could not resolve parameter of type %s.        $Could not resolve parameter of type %s.        2XaB5M$Could not resolve parameter of type %s.         is not in the range '0' - '9'$Could not resolve parameter of type %s.         is not in the range '0' - '9'$Could not resolve parameter of type %s.         is not in the range '0' - '9'$Could not resolve parameter of type %s.         is not in the range '0' - '9'", (CharSequence) "$", 128);
      assertEquals(180, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0486()  throws Throwable  {
      String string0 = StringUtils.substring("K", 49);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "K", 76);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeStartIgnoreCase("K", "");
      assertEquals("K", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("K");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceAll("", "", "S-tP");
      assertEquals("S-tP", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("K"));
      
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>(linkedHashSet0);
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertFalse(linkedHashSet0.contains("K"));
      assertFalse(linkedHashSet1.contains("K"));
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet0, "");
      assertEquals("", string3);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertNotNull(string3);
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("K"));
  }

  @Test(timeout = 4000)
  public void test0487()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertEquals("Objectvarargsmustnotbenull", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0488()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Strings must not be nullStrings must not be nullEsf%~yYKjU8nMKW8");
      assertEquals("strings must not be nullStrings must not be nullEsf%~yYKjU8nMKW8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0489()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.junitpioneer.jupiter.StdIoExtension", 'C', 'C');
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "org.junitpioneer.jupiter.StdIoExtension";
      objectArray0[1] = (Object) "org.junitpioneer.jupiter.StdIoExtension";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "org.junitpioneer.jupiter.StdIoExtension";
      String string1 = StringUtils.join(objectArray0, "AG>)", 32, 26);
      assertEquals("", string1);
      assertEquals(5, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string2 = locale1.getDisplayVariant(locale0);
      assertEquals("", string2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      boolean boolean1 = locale1.hasExtensions();
      assertFalse(boolean1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertFalse(boolean1 == boolean0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string3 = StringUtils.lowerCase("J@5^rzD%P).sFi?_#jw", locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("GB", locale1.getCountry());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      String string4 = StringUtils.uncapitalize("GT$doR");
      assertEquals("gT$doR", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split("]", " ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.defaultIfBlank("p{InCombiningDiacriticalMarks}+", "fU_7SZu1o7hGV]fU_7SZu1o7hGV]");
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("]", "org.junitpioneer.jupiter.StdIoExtension", stringArray0);
      assertEquals("]", string6);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0490()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0491()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 4146, '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.overlay("", "+<k5$Sol:+7x.^6FL", 0, 4146);
      assertEquals("+<k5$Sol:+7x.^6FL", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringAfterLast((String) null, "r.params.IntRange");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("v#^XQT");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("+<k5$Sol:+7x.^6FL");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0492()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 10, 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 10, 321);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      
      String string2 = StringUtils.replace("A,rnU;pVK", "", "");
      assertEquals("A,rnU;pVK", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.substring("", (int) 'q');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "A,rnU;pVK", (CharSequence) "A,rnU;pVK", 10);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = "Y";
      String string5 = StringUtils.getDigits("A,rnU;pVK");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = StringUtils.normalizeSpace("...\n");
      assertEquals("...", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("oy>-rQ!ljz>*|ED", (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0493()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MIN_VALUE, 1495);
      assertEquals("", string1);
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.join(objectArray0, '~');
      assertEquals("~", string3);
      assertEquals(2, objectArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "a`");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase((String) null, "...", "RUfrY:U5");
      assertNull(string4);
      
      String string5 = StringUtils.leftPad((String) null, (-119), '~');
      assertNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("Search and Replace array lengths don't match: ", "~", false);
      assertEquals((-11), int0);
  }

  @Test(timeout = 4000)
  public void test0494()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "ie", (-1), 8192);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 153);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0495()  throws Throwable  {
      String string0 = StringUtils.wrap("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", (-388));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "A(NXT<6PFz";
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.substringBetween("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[7] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[8] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string2 = StringUtils.prependIfMissingIgnoreCase("A(NXT<6PFz", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("A(NXT<6PFz", string2);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      stringArray0[2] = "A(NXT<6PFz";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[6]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string4 = StringUtils.uncapitalize("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string5);
      assertEquals(3, stringArray0.length);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.overlay((String) null, (String) null, (-388), (-1));
      assertNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertEquals(3, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string8 = StringUtils.center("A(NXT<6PFz", 0, "A(NXT<6PFz");
      assertEquals("A(NXT<6PFz", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      
      String string9 = StringUtils.substringBetween("\n", " LBUeM`/Wi&I?");
      assertNull(string9);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (-1), 574);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0496()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.replaceOnceIgnoreCase("\r", "\u0004$o@WoI?e@4estH", "n<Df]w:?MdJINR+}");
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string1 = StringUtils.join(longArray0, 'h');
      assertEquals("0", string1);
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L}, longArray0);
      
      charSequenceArray0[1] = (CharSequence) "0";
      String string2 = StringUtils.substringBeforeLast("Supplied value must be a valid byte literal between -128 and 127: [", "\u0004$o@WoI?e@4estH");
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      String string3 = StringUtils.rightPad("\r", 953, "n<Df]w:?MdJINR+}");
      assertEquals("\rn<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[3] = (CharSequence) "\rn<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?MdJINR+}n<Df]w:?";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals("0", charSequence0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("0", "\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Supplied value must be a valid byte literal between -128 and 127: [");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("\r", 'E');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0497()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n", ')');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0498()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("", "sGM%da?RJOl");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("", 'X');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null, 124);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "sGM%da?RJOl";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootUpperCase("kAPO/");
      assertEquals("KAPO/", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("yFC7", "No instructins to disable", 0);
      assertEquals("yFC7", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.reverse("gC!Q. 73");
      assertEquals("37 .Q!Cg", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("yFC7");
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {121, 70, 67, 55}, intArray0);
      
      String string7 = StringUtils.wrap("clone", '0');
      assertEquals("0clone0", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[6]);
      assertFalse(boolean1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0499()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0500()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.junitpioneer.vintage.TimeoutExtension", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "\r";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'C');
      assertEquals("Corg.junitpioneer.jupiter.params.ShortRangeC\r", string4);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "org.junitpioneer.jupiter.params.ShortRange");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "\r", "");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.stripEnd("-qtzCCnZLZOgm:*Q<", "-qtzCCnZLZOgm:*Q<");
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      
      int int0 = StringUtils.compareIgnoreCase("E#t&F", "Array element ", false);
      assertEquals(4, int0);
      
      String string7 = StringUtils.repeat("OL", 43);
      assertEquals("OLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOLOL", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0501()  throws Throwable  {
      String string0 = StringUtils.join((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0502()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(106);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(106));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = linkedHashSet0.add(object1);
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object1));
      
      Stream<Object> stream0 = linkedHashSet0.stream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object1));
      
      boolean boolean2 = linkedHashSet0.add(object1);
      assertFalse(boolean2);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object1));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object1));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.7;
      doubleArray0[1] = (double) 106;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 106;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 'f';
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) 106;
      String string0 = StringUtils.join(doubleArray0, '\\', 0, 0);
      assertEquals("", string0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.7, 106.0, (-1.0), 106.0, 0.0, 102.0, 0.0, (-1.0), 106.0}, doubleArray0, 0.01);
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      String string1 = StringUtils.join((Object[]) null, ",qyApuZ:5");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0503()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "g");
      assertEquals("or.apache.commons.lan3.StrinUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("or.apache.commons.lan3.StrinUtils", 'T', 'R');
      assertEquals("or.apache.commons.lan3.StrinUtils", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart((String) null, "g");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("g");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("or.apache.commons.lan3.StrinUtils", "or.apache.commons.lan3.StrinUtils", 17);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals(36, int0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("g");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, "9IMs6/W oje*ne", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.repeat("C^wrJ|he(<Zz{v<", 10);
      assertEquals("C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitByCharacterType("org.apache.commons.lang3.StringUtils");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.normalizeSpace("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      int[] intArray0 = StringUtils.toCodePoints("C^wrJ|he(<Zz{v<");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
      
      String string6 = StringUtils.repeat('Q', (-895));
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0504()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.trim("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase(" ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", " ", 32);
      assertEquals((-1), int0);
      
      char char0 = '*';
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[1] = "<WT\"TLW?-iZ9?";
      stringArray0[1] = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[4] = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      String string2 = StringUtils.replaceEach("2Y5QzS: ", stringArray0, stringArray0);
      assertEquals("2Y5QzS: ", string2);
      assertEquals(5, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(stringArray0[3], stringArray0[3], locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0505()  throws Throwable  {
      String string0 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "\r");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("U", "U", "{[0-9]+}", 118);
      assertEquals("{[0-9]+}", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("g", "{[0-9]+}");
      assertEquals("g", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "8M`!VwI<J)*@-PkS", (char[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.reverseDelimited("8M`!VwI<J)*@-PkS", 'A');
      assertEquals("8M`!VwI<J)*@-PkS", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join((char[]) null, 'A', 3528, (-3760));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0506()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("mcM*(I)gtE|t,IFL)I", "mcM*(I)gtE|t,IFL)I", locale0);
      assertEquals(52, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0507()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, 'Z');
      assertEquals("", string0);
      assertEquals(0, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0508()  throws Throwable  {
      String string0 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "\r");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.removeIgnoreCase(string1, "Comparator should not be null.");
      assertEquals("\\u", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast((String) null, "\r");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("gg", "5Av]dPs3o>H.+Uv;");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.chomp("", "tv-UMxcH");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      
      String string7 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 999);
      assertEqualsp{InCombiningDiacriticalMarks}+", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      boolean boolean1 = StringUtils.isNotEmpty("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string8 = StringUtils.unwrap("gg", '(');
      assertEquals("gg", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      
      boolean boolean2 = StringUtils.isNotEmpty("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(locale0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) vector0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(vector0.contains(locale0));
      assertFalse(list0.contains(locale0));
      
      int int0 = StringUtils.getFuzzyDistance("p{InCombiningDiacriticalMarks}+", "org.apache.commons.lang3.StringUtils", locale0);
      assertEquals(2, int0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0509()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1Sy^V2n";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1Sy^V2n", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultTimeZone", "u(NxXP");
      assertEquals(4, int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("u(NxXP", stringArray0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.right("g0jShM}UM+zB\"F", 4);
      assertEquals("zB\"F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.join((Object[]) stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string4);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'a';
      charArray0[2] = 'V';
      charArray0[3] = 'r';
      charArray0[4] = '@';
      charArray0[5] = '*';
      String string5 = StringUtils.join(charArray0, '@', 666, 4);
      assertEquals("", string5);
      assertEquals(6, charArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertArrayEquals(new char[] {'6', 'a', 'V', 'r', '@', '*'}, charArray0);
      
      String string6 = StringUtils.replaceEach("<WT\"TLW?-iZ9?", stringArray0, stringArray0);
      assertEquals("<WT\"TLW?-iZ9?", string6);
      assertEquals(4, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      int int1 = StringUtils.getFuzzyDistance("u(NxXP", "u(NxXP", locale0);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test0510()  throws Throwable  {
      String string0 = StringUtils.center("$XA~x0(", (-3362), "$XA~x0(");
      assertEquals("$XA~x0(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("$XA~x0(");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("*:X$%R?Z", "$XA~x0(");
      assertEquals("$XA~x0(", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$XA~x0(";
      stringArray0[1] = "-VsFlA$2Yh|Wg:R^]";
      stringArray0[2] = "$XA~x0(";
      stringArray0[3] = "$XA~x0(";
      stringArray0[4] = "+|!";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("$XA~x0(", string2);
      assertEquals(8, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "$XA~x0(", (String) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("$XA~x0(", stringArray0);
      assertTrue(boolean1);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("+|!", "$XA~x0(");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0511()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[3] = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g0jSh}UM+zB\"F";
      String string0 = StringUtils.strip("g0jSh}UM+zB\"F", "g0jSh}UM+zB\"F");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Fk*P LBUeM`/Wi&I?", "g0jSh}UM+zB\"F");
      assertEquals("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?g0jSh}UM+zB\"F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("g0jSh}UM+zB\"F", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.stripStart("", "=l><+-SLB91_'ztntm");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("g0jSh}UM+zB\"F", string6);
      assertEquals(1, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0512()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty("Could not resolve parameter of type %s.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToNull("Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Could not resolve parameter of type %s.";
      stringArray0[1] = "Could not resolve parameter of type %s.";
      stringArray0[2] = "Could not resolve parameter of type %s.";
      stringArray0[3] = "Could not resolve parameter of type %s.";
      stringArray0[4] = "C6.)V>nFF4{|\rZCoC";
      stringArray0[5] = "Could not resolve parameter of type %s.";
      stringArray0[6] = "Could not resolve parameter of type %s.";
      stringArray0[7] = "Could not resolve parameter of type %s.";
      stringArray0[8] = "Could not resolve parameter of type %s.";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("C", string3);
      assertEquals(9, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.joinWith("Strings must not be null", stringArray0);
      assertEquals("Could not resolve parameter of type %s.Strings must not be nullCould not resolve parameter of type %s.Strings must not be nullCould not resolve parameter of type %s.Strings must not be nullCould not resolve parameter of type %s.Strings must not be nullC6.)V>nFF4{|\rZCoCStrings must not be nullCould not resolve parameter of type %s.Strings must not be nullCould not resolve parameter of type %s.Strings must not be nullCould not resolve parameter of type %s.Strings must not be nullCould not resolve parameter of type %s.", string4);
      assertEquals(9, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripEnd("Strings must not be null", "C6.)V>nFF4{|\rZCoC");
      assertEquals("Strings must not be null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0513()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0514()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add(stream0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean3 = linkedHashSet0.add((Object) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      assertEquals("fU_7SZu1o7hGV]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean4 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains("fU_7SZu1o7hGV]"));
      
      ListIterator<Object> listIterator0 = stack0.listIterator(0);
      assertNotNull(listIterator0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains("fU_7SZu1o7hGV]"));
      
      String string3 = StringUtils.replacePattern("fU_7SZu1o7hGV]", "fU_7SZu1o7hGV]", "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.upperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.rightPad("erkL", (-3626), 'l');
      assertEquals("erkL", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("fU_7SZu1o7hGV]");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.trimToNull("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "erkL");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      
      String string7 = StringUtils.toRootUpperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(12, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.abbreviateMiddle("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "fU_7SZu1o7hGV]", (-3626));
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.reverse("erkL");
      assertEquals("Lkre", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("erkL", 2891, (-3626));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0515()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("", 'H', 'H');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("E#t&F", ";", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[7]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int1 = StringUtils.compare("org.junitpioneer.", (String) null, true);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("", "Iu)", true);
      assertEquals((-3), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0516()  throws Throwable  {
      String string0 = StringUtils.substringAfter("!7r3P3C]_<eu", 101);
      assertEquals("u", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0517()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[3] = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g0jSh}UM+zB\"F";
      String string0 = StringUtils.strip("g0jSh}UM+zB\"F", "g0jSh}UM+zB\"F");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter("!9]I+<I'/ZPJt/c", 116);
      assertEquals("/c", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.truncate("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", 116);
      assertEquals("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAllUpperCase("!9]I+<I'/ZPJt/c");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Fk*P LBUeM`/Wi&I?g0jSh}UM+zB\"F", "p{InCombiningDiacriticalMarks}+", true);
      assertEquals((-10), int0);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "!9]I+<I'/ZPJt/c", 4307, 4307);
      assertEquals("", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.strip("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", " LBUeM`/Wi&I?");
      assertEquals("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0518()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0519()  throws Throwable  {
      String string0 = StringUtils.substringBetween(";", ";", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0520()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "A|Wc;,,9", (CharSequence) "gg");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test0521()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "l2U5y+CN/a%~ZR", (-1527), (-1527));
      assertEquals("", string0);
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l2U5y+CN/a%~ZR";
      stringArray0[1] = "l2U5y+CN/a%~ZR";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("l2U5y+CN/a%~ZR", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", "l2U5y+CN/a%~ZR");
      assertEquals("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.valueOf((char[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("k5mv8Dkp;-=3h@VG<h", "Backup");
      assertEquals("Backupk5mv8Dkp;-=3h@VG<hBackup", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsWhitespace("Could not resolve parameter of type %s.");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Backupk5mv8Dkp;-=3h@VG<hBackup", (CharSequence) "l2U5y+CN/a%~ZR");
      assertEquals(28, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("N_g7z");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.removeIgnoreCase("", "/-~E%El.K&hqSMVO");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.endsWithAny("", stringArray1);
      assertFalse(boolean2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0522()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 4146, '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'g';
      charArray0[2] = '<';
      charArray0[3] = '-';
      charArray0[4] = 'P';
      charArray0[5] = '$';
      charArray0[6] = 'Z';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'G', 'g', '<', '-', 'P', '$', 'Z'}, charArray0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeStart("4Byli", "4Byli");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 4146);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0523()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = "\\u";
      String string3 = StringUtils.removeIgnoreCase(string2, "offset cannot be negative");
      assertEquals("\\u", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substringBeforeLast("c~A[jieYg", string2);
      assertEquals("c~A[jieYg", string4);
      assertNotNull(string4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substringAfterLast("Search and Replace array lengths don't match: ", "Threshold must not be negative");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.defaultString("{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dw", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.chomp("", "Search and Replace array lengths don't match: ");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.leftPad("", (-2356));
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNotEmpty("Threshold must not be negative");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string9 = StringUtils.unwrap("Method `", '>');
      assertEquals("Method `", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      
      boolean boolean2 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string10 = StringUtils.left("Method `", (-1304));
      assertEquals("", string10);
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0524()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add((Object) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      assertEquals("fU_7SZu1o7hGV]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "P27td#b<8");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(2891));
      
      ListIterator<Object> listIterator0 = stack0.listIterator(0);
      assertNotNull(listIterator0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(2891));
      
      String string3 = StringUtils.upperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rightPad("erkL", (-3626), 'l');
      assertEquals("erkL", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean4 = linkedHashSet0.add(locale_FilteringMode0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(2891));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("fU_7SZu1o7hGV]");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.trimToNull("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'l';
      longArray0[2] = (-1328L);
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 0;
      String string6 = StringUtils.join(longArray0, 'l', 2891, 0);
      assertEquals("", string6);
      assertEquals(5, longArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new long[] {0L, 108L, (-1328L), 108L, 0L}, longArray0);
      
      int int1 = StringUtils.compare("fU_7SZu1o7hGV]", (String) null, false);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("FU_7SZU1O7HGV]", (String) null, true);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.strip("fU_7SZu1o7hGV]", "erkL");
      assertEquals("fU_7SZu1o7hGV]", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0525()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("\r", "' matches '.&5CPg&9$\"3Jhh2+", "v3CZ$");
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("K", 8192, 't');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("X", (String) null, true);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test0526()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("A,rnU;pVK", "[D5:UM3*k");
      assertEquals("A,rnU;pVK", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 25);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("A,rnU;pVK", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      int int2 = StringUtils.indexOf((CharSequence) null, (-623), (-2882));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0527()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.stripEnd(string0, "?");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "i?_#jw", 32767);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviateMiddle("VDk!ij%NQ0eij/8", "", (-1));
      assertEquals("VDk!ij%NQ0eij/8", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-Cj)C['wY0 H)Ef,h";
      stringArray0[1] = "Method `";
      stringArray0[2] = "i?_#jw";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[4] = string0;
      stringArray0[5] = "?";
      stringArray0[6] = "The character ";
      stringArray0[7] = "i?_#jw";
      String string4 = StringUtils.replaceEach("VDk!ij%NQ0eij/8", stringArray0, stringArray0);
      assertEquals("VDk!ij%NQ0eij/8", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.repeat("...", (-1340));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      
      String string6 = StringUtils.normalizeSpace("...");
      assertEquals("...", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "VDk!ij%NQ0eij/8", (CharSequence) "Don't clear/set the same entry more than once.");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.trimToEmpty("");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string8);
      assertEquals(8, stringArray0.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0528()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate("3RYo", 993);
      assertEquals("3RYo", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 38);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripToEmpty("3RYo");
      assertEquals("3RYo", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "3RYoO");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0529()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, '%', 1069, (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains('%'));
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0530()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'D');
      assertNull(string0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test0531()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], charSequenceArray0[3], 10);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[6]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'Z';
      charArray0[1] = 'G';
      charArray0[2] = '-';
      charArray0[3] = 'g';
      charArray0[4] = '<';
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      charArray1[1] = 'G';
      String string2 = StringUtils.valueOf(charArray1);
      assertEquals("<G", string2);
      assertNotSame(charArray1, charArray0);
      assertEquals(2, charArray1.length);
      assertNotNull(string2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'<', 'G'}, charArray1);
      
      String string3 = StringUtils.stripToNull(".!No$S@9&h(9)RIX!");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      try { 
        StringUtils.toString(byteArray0, "...\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0532()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("\n", (-1339));
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, "\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.substringAfter("QLS4~w[&6 VqZs", (-1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference("Display name '", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      stringArray0[1] = "QLS4~w[&6 VqZs";
      stringArray0[2] = "\n";
      stringArray0[1] = "DefaultTimeZone";
      stringArray0[4] = "E#t&F";
      stringArray0[5] = "QLS4~w[&6 VqZs";
      stringArray0[6] = "Display name '";
      stringArray0[7] = "7()p3g\"OX1>)r`X$Ex";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("8M`!VwI<J)*@-PkS", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "QLS4~w[&6 VqZs", "MLOvayBH*NLkbl|m");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "\n", (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.deleteWhitespace("8M`!VwI<J)*@-PkS");
      assertEquals("8M`!VwI<J)*@-PkS", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1339);
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 76;
      doubleArray0[2] = 3.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-1339);
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-1);
      String string6 = StringUtils.join(doubleArray0, 'U', 76, 76);
      assertEquals("", string6);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertArrayEquals(new double[] {(-1339.0), 76.0, 3.0, 76.0, 0.0, 1.0, (-1339.0), 1.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0533()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("$N<y2,g=^~i}");
      assertEquals("$N<y2,g=^~i}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0534()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32767);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(32767));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(object0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean1 = linkedHashSet0.add(object2);
      assertTrue(boolean1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object2));
      assertFalse(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object2));
      assertFalse(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object2));
      assertFalse(linkedHashSet0.contains(object0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", (-12), (-3080));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(object2));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "java.lang.Object@6689c6de");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[1] = "";
      stringArray0[3] = "fU_7SZu1o7hGV]";
      stringArray0[6] = "fU_7SZu1o7hGV]";
      stringArray0[5] = "";
      stringArray0[6] = "java.lang.Object@6689c6de";
      stringArray0[7] = stringArray0[0];
      stringArray0[8] = null;
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertEquals(9, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart(".)", "fU_7SZu1o7hGV]");
      assertEquals(".)", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string4);
      assertEquals(9, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0535()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 57, 2804);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertEquals("", charSequence0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence1 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence1);
      assertNotNull(charSequence1);
      assertTrue(charSequence1.equals((Object)string1));
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertTrue(charSequence1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("", 'Y');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0536()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("lH");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "lH", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0537()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '4');
      assertEquals("0.040.0", string0);
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("oy<1Sy^V2n");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.substringAfter("0.040.0", (-361));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("&7TeM;PL$M#FbRD", 48);
      assertEquals("&7TeM;PL$M#FbRD", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", (-2455));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.startsWithAny("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", stringArray1);
      assertFalse(boolean0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.replaceIgnoreCase("YU_A\"2+Iw'a{3", "&:o_*br;D>#\"VY{tR3$", "oy<1Sy^V2n");
      assertEquals("YU_A\"2+Iw'a{3", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "900.\"at1(\thF@", (CharSequence) "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.remove("", '4');
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "oy<1Sy^V2n", (CharSequence[]) stringArray1);
      assertEquals(0, int0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0538()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("iB,-Cf|=Isp5Nbgb");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("iB,-Cf|=Isp5Nbgb", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "iB,-Cf|=Isp5Nbgb", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0539()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "$I", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0540()  throws Throwable  {
      String string0 = StringUtils.unwrap("`9:EeWjpg_sqQ8{", '`');
      assertEquals("`9:EeWjpg_sqQ8{", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "`9:EeWjpg_sqQ8{", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0541()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string4 = StringUtils.replaceAll((String) null, (String) null, "");
      assertNull(string4);
      
      String string5 = StringUtils.replace("f\"", "", "");
      assertEquals("f\"", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "f\"";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "f\"";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string6 = StringUtils.abbreviateMiddle("5BE0 ", "", 1780);
      assertEquals("5BE0 ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0542()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 10, 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 10, 321);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      
      String string2 = StringUtils.replace("A,rnU;pVK", "", "");
      assertEquals("A,rnU;pVK", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '\\');
      assertEquals("", string3);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("-qtzCCnZLZOgm:*Q<", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("", (String) null, "A,rnU;pVK");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.leftPad("maxWith cannot be negative", 10, '\\');
      assertEquals("maxWith cannot be negative", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      int int2 = StringUtils.compareIgnoreCase("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", ",qyApuZ:5", false);
      assertEquals(53, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0543()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0544()  throws Throwable  {
      String string0 = StringUtils.substringAfter("c0bewB", "c0bewB");
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0545()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d64v'Q6mto@Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("a*;F3f", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("a*;F3f", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "a*;F3f", 1064);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2197);
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, 'P');
      assertEquals("", string3);
      assertEquals(0, longArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.toRootUpperCase("{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&DYF~ZTR;DW", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "{!#`&DYF~ZTR;DW";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      String string5 = StringUtils.join(objectArray0, "");
      assertEquals("{!#`&DYF~ZTR;DWorg.junitpioneer.jupiter.params.ShortRange", string5);
      assertEquals(3, objectArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'K');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.join((int[]) null, 'G');
      assertNull(string6);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'P';
      doubleArray0[1] = (double) 1064;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'P';
      String string7 = StringUtils.repeat("", (-1684));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.removePattern(";o[g<ZB|7uo", "");
      assertEquals(";o[g<ZB|7uo", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.junitpioneer.jupiter.params.ShortRange", (CharSequence) "", 337);
      assertEquals(42, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0546()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 10);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0547()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      ByteBuffer byteBuffer0 = charset0.encode("(MIl>&H");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      
      byte[] byteArray0 = StringUtils.getBytes("(MIl>&H", charset0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)77, (byte)73, (byte)108, (byte)62, (byte)127, (byte)38, (byte)72}, byteArray0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      String string0 = StringUtils.center((String) null, 22, "");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "...\n", (-1), 34);
      assertNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'q'}, charArray0);
      
      String string2 = StringUtils.toRootLowerCase("T.<.");
      assertEquals("t.<.", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0548()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Cloneable type ", ",qyApuZ:5", ",qyApuZ:5");
      assertEquals("Cloneable type ", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale(",qyApuZ:5");
      assertNotNull(locale0);
      assertEquals(",qyapuz:5", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(",qyapuz:5", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.lowerCase(",qyApuZ:5", locale0);
      assertEquals(",qyapuz:5", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(",qyapuz:5", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(",qyapuz:5", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.lowerCase("wJ~G oIn=\"a,LNv");
      assertEquals("wj~g oin=\"a,lnv", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string3 = StringUtils.unwrap("wj~g oin=\"a,lnv", 'E');
      assertEquals("wj~g oin=\"a,lnv", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      charSequenceArray0[0] = (CharSequence) "wj~g oin=\"a,lnv";
      charSequenceArray0[1] = (CharSequence) ",qyapuz:5";
      charSequenceArray0[2] = (CharSequence) ".Q7h&Il`h;";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ".Q7h&Il`h;", 0, 4897);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBefore("mJN7CNfvP", "wj~g oin=\"a,lnv");
      assertEquals("mJN7CNfvP", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      int int2 = StringUtils.indexOf((CharSequence) ",qyApuZ:5", 481);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0549()  throws Throwable  {
      String string0 = StringUtils.rightPad("-DLf", 4146, '$');
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(string0, 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.overlay("-DLf", "+1G *H?VShaP<atK", 49, 0);
      assertEquals("+1G *H?VShaP<atK", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "+1G *H?VShaP<atK", (CharSequence) "+1G *H?VShaP<atK");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0550()  throws Throwable  {
      String string0 = StringUtils.overlay(" vs ", "/5M@~mT", (-82), (-1535));
      assertEquals("/5M@~mT vs ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "/5M@~mT vs ", (CharSequence) "/5M@~mT");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test0551()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertTrue(boolean0);
      
      String string1 = StringUtils.overlay("org.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.ObjectUtils", 13, (-16));
      assertEquals("org.apache.commons.lang3.ObjectUtilsmmons.lang3.ObjectUtils", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.7;
      String string2 = StringUtils.join(doubleArray0, 'f', 13, 13);
      assertEquals("", string2);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new double[] {0.7}, doubleArray0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      String string3 = StringUtils.join(objectArray0, "");
      assertEquals(3, objectArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0552()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string1 = null;
      String string2 = StringUtils.removeFirst("H", (String) null);
      assertEquals("H", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", (CharSequence) null, (-2526));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-2526)));
      
      boolean boolean0 = arrayList0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-2526)));
      
      boolean boolean1 = arrayList0.add((Object) serviceLoader0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-2526)));
      
      ArrayList<Object> arrayList1 = new ArrayList<Object>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains((-2526)));
      
      // Undeclared exception!
      try { 
        arrayList1.listIterator(322);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 322
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0553()  throws Throwable  {
      Vector<Object> vector0 = new Stack<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("r\"NRFiIm7", (-1438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0554()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 4146, '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string1));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string1));
      
      String string3 = StringUtils.join(iterator0, '$');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string1));
      
      String string4 = "+<k5$Sol:+7x.^6FL";
      String string5 = StringUtils.replace("", "", "^:W#lEys1u`Xl2ou7", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator1 = serviceLoader0.iterator();
      assertNotNull(iterator1);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string6 = StringUtils.left("^:W#lEys1u`Xl2ou7", 8);
      assertEquals("^:W#lEys", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      int int0 = StringUtils.indexOf((CharSequence) "-ZqjW?", (CharSequence) "");
      assertEquals(0, int0);
      
      String string7 = StringUtils.substringAfterLast((String) null, "r.params.IntRange");
      assertNull(string7);
      
      boolean boolean0 = StringUtils.isAlphaSpace("v#^XQT");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("-ZqjW?");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("...\n", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0555()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "g");
      assertEquals("or.apache.commons.lan3.StrinUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("or.apache.commons.lan3.StrinUtils", 'T', 'R');
      assertEquals("or.apache.commons.lan3.StrinUtils", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart((String) null, "g");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("g");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("or.apache.commons.lan3.StrinUtils", "or.apache.commons.lan3.StrinUtils", 17);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals(36, int0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("g");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, "9IMs6/W oje*ne", (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.repeat("C^wrJ|he(<Zz{v<", 10);
      assertEquals("C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<C^wrJ|he(<Zz{v<", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.right("or.apache.commons.lan3.StrinUtils", 36);
      assertEquals("or.apache.commons.lan3.StrinUtils", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.join((Object[]) stringArray0);
      assertEquals("", string6);
      assertEquals(2, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0556()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string1 = StringUtils.capitalize(" ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, 'e');
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripStart("A,rnU;pVK", "v#^XQT");
      assertEquals("A,rnU;pVK", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 16;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      floatArray0[5] = 16.0F;
      int[] intArray1 = StringUtils.toCodePoints("A,rnU;pVK");
      assertNotSame(intArray1, intArray0);
      assertEquals(10, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {65, 44, 114, 127, 110, 85, 59, 112, 86, 75}, intArray1);
      
      String string4 = StringUtils.wrap((String) null, '8');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isWhitespace(" ");
      assertTrue(boolean0);
      
      String string5 = StringUtils.removePattern("0.0O3.0", "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("0.0O3.0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", "&:o_*br;D>#\"VY{tR3$", 1265, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0557()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '|', 256, 256);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0558()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      String string1 = StringUtils.repeat("BI(5R90_;y4wjfvm", 42);
      assertEquals("BI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvmBI(5R90_;y4wjfvm", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("?");
      assertEquals("?", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((double[]) null, '#', 42, 42);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween((String) null, "?", (String) null);
      assertNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'u');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0559()  throws Throwable  {
      String string0 = StringUtils.truncate("b%?Vo@@L&#v]z&e(6%", 12);
      assertEquals("b%?Vo@@L&#v]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "b%?Vo@@L&#v]", "b%?Vo@@L&#v]z&e(6%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0560()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("\r", "\r", "\r", 0);
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\r", stringArray1);
      assertFalse(boolean0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0561()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.join(doubleArray0, '>');
      assertEquals("-1304.0>1.5>-1304.0>-1304.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-1304.0), 1.5, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      String string2 = StringUtils.join((Iterator<?>) null, '>');
      assertNull(string2);
      
      String string3 = StringUtils.replace("dR1a07Vry%A{1H", "-ZqjW?", "+<k5$Sol:+7x.^6FL", 0);
      assertEquals("dR1a07Vry%A{1H", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      serviceLoader0.forEach(consumer0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string4 = StringUtils.left("", (-1304));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "-1304.0>1.5>-1304.0>-1304.0", (CharSequence) "-1304.0>1.5>-1304.0>-1304.0");
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringAfterLast("1`", ">;'S");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("v#^XQT");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.truncate("-1304.0>1.5>-1304.0>-1304.0", 0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("dR1a07Vry%A{1H");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.chop("-ZqjW?");
      assertEquals("-ZqjW", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0562()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32767);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-3080)));
      
      boolean boolean0 = linkedHashSet0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-3080)));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = linkedHashSet0.add(object1);
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-3080)));
      assertTrue(linkedHashSet0.contains(object1));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-3080)));
      assertTrue(linkedHashSet0.contains(object1));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-3080)));
      assertTrue(linkedHashSet0.contains(object1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      Spliterator<Object> spliterator0 = linkedHashSet0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-1)));
      assertTrue(linkedHashSet0.contains(object1));
      
      String string1 = StringUtils.mid((String) null, (-1), (-3080));
      assertNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase((String) null, "java.lang.Object@183c0a01");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains((-1)));
      
      String string3 = StringUtils.stripToNull(".)");
      assertEquals(".)", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "java.lang.Object@183c0a01");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "fU_7SZu1o7hGV]";
      stringArray0[4] = "fU_7SZu1o7hGV]";
      stringArray0[5] = ".)";
      stringArray0[6] = ".)";
      stringArray0[7] = "java.lang.Object@183c0a01";
      stringArray0[8] = null;
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("fU_7SZu1o7hGV]", string4);
      assertEquals(9, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string5);
      
      boolean boolean3 = StringUtils.endsWithAny("java.lang.Object@183c0a01", stringArray0);
      assertTrue(boolean3);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0563()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "jPjv";
      boolean boolean0 = StringUtils.endsWithAny("jPjv", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0564()  throws Throwable  {
      String string0 = ".A-ZjLy\\lvBDex";
      String string1 = StringUtils.removePattern(".A-ZjLylvBDex", ".A-ZjLylvBDex");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance(string0, string1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0565()  throws Throwable  {
      String string0 = StringUtils.removePattern("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertEquals("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0566()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 459.3239F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("459.3239#0.0#459.3239#459.3239#0.0#0.0", string0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {459.3239F, 0.0F, 459.3239F, 459.3239F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("R-=4w!~V0Vo", (-361));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("900.\"at1(\thF@", 48);
      assertEquals("900.\"at1(\thF@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfter("900.\"at1(\thF@", 4);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithAny("R-=4w!~V0Vo", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.replaceIgnoreCase("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "org.apache.commons.lang3.StringUtils", "");
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "R-=4w!~V0Vo", (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.remove("org.junitpioneer.jupiter.ReportEntryExtension", ':');
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      String string6 = "GIBS$VsU[HEsbe";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", "GIBS$VsU[HEsbe");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 13
         // GIBS$VsU[HEsbe
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0567()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) null, 'o', 65, 65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0568()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MIN_VALUE, 1495);
      assertEquals("", string1);
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("r.params.IntRange").when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals("r.params.IntRange", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, "\r", "\n\n");
      assertNull(string3);
      
      String string4 = StringUtils.repeat("Ooy,;M^/R\"H", 1495);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.right("The type must not be null", 32767);
      assertEquals("The type must not be null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0569()  throws Throwable  {
      String string0 = StringUtils.center("Mx>`HvP", 0, "Mx>`HvP");
      assertEquals("Mx>`HvP", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Mx>`HvP", 0, 0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "g0jSh}UM+zB\"F";
      stringArray0[1] = "g0jSh}UM+zB\"F";
      stringArray0[2] = "g0jSh}UM+zB\"F";
      stringArray0[3] = "Mx>`HvP";
      stringArray0[4] = "Mx>`HvP";
      stringArray0[5] = "Mx>`HvP";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("g0jSh}UM+zB\"F", string1);
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("kS,yP%fL\"2bzi>r", (String) null);
      assertEquals("kS,yP%fL\"2bzi>r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("]K|8Q%g&K>J<F");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      String string3 = StringUtils.valueOf(charArray0);
      assertEquals("\\", string3);
      assertEquals(1, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      String string4 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.IntRange", "8M`!VwI<J)*@-PkS");
      assertEquals("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Mx>`HvP", (CharSequence) "kS,yP%fL\"2bzi>r");
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("Mx>`HvP", "Mx>`HvP", 0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.wrapIfMissing("kS,yP%fL\"2bzi>r", 'F');
      assertEquals("FkS,yP%fL\"2bzi>rF", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      int int2 = StringUtils.compare("g0jSh}UM+zB\"F", "Search and Replace array lengths don't match: ");
      assertEquals(20, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean2 = StringUtils.isNumericSpace("FkS,yP%fL\"2bzi>rF");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0570()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "9IMs6/W\\ oje*ne";
      stringArray0[1] = "9IMs6/W oje*ne";
      String string1 = "g0jShM}UM+zB\"F";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      String string2 = "bpffo(K";
      Object object0 = new Object();
      assertNotNull(object0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("g0jShM}UM+zB\"F"));
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("g0jShM}UM+zB\"F"));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = linkedHashSet0.add(object1);
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains("g0jShM}UM+zB\"F"));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains("g0jShM}UM+zB\"F"));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean2 = linkedHashSet0.add(object2);
      assertTrue(boolean2);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object1));
      assertFalse(linkedHashSet0.contains("g0jShM}UM+zB\"F"));
      
      String string3 = "fU_7SZu1o7hGV]";
      String string4 = "r.params.IntRange";
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "r.params.IntRange");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedHashMap$LinkedHashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test0571()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string0 = StringUtils.substringAfter("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", 4);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double double0 = StringUtils.getJaroWinklerDistance("p{InCombiningDiacriticalMarks}+", "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]");
      assertEquals(0.43, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0572()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0573()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("fI!ftpZQ/#", "$ke3(*xU");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0574()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      String string0 = StringUtils.center("g0jShM}UM+zB\"F", (-373));
      assertEquals("g0jShM}UM+zB\"F", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("oy<1Sy^V2n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim("oy<1Sy^V2n");
      assertEquals("oy<1Sy^V2n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToNull("org.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS");
      assertEquals("org.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEndIgnoreCase("org.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS", "g0jShM}UM+zB\"F");
      assertEquals("org.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      double double0 = StringUtils.getJaroWinklerDistance("oy<1Sy^V2n", "9IMs6/W oje*ne");
      assertEquals(0.39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0575()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("(r");
      assertEquals("(r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0576()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be null", "Strings must not be null");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0577()  throws Throwable  {
      String string0 = StringUtils.remove("]u3dcj-", "Minimum abbreviation width with offset is %d");
      assertEquals("]u3dcj-", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("]u3dcj-", "]u3dcj-");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.defaultString("]u3dcj-", "', '");
      assertEquals("]u3dcj-", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("]u3dcj-", "d6", ":`(Mxzgf'hFkAWod");
      assertNull(stringArray0);
      
      String string2 = StringUtils.substring("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", 23, (-137));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double double1 = StringUtils.getJaroWinklerDistance("d6", "]u3dcj-");
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      String string3 = StringUtils.substring("or.apache.commons.lan3.StrinUtils", (-137));
      assertEquals("or.apache.commons.lan3.StrinUtils", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("or.apache.commons.lan3.StrinUtils", "', '");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rotate("16.0W16.0W16.0W16.0W16.0W0.0", (-137));
      assertEquals("0.016.0W16.0W16.0W16.0W16.0W", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.defaultString("No instructins to disable");
      assertEquals("No instructins to disable", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.appendIfMissing("org.junitpioneer.jupiter.CartesianProductTestExtension", "No instructins to disable", (CharSequence[]) null);
      assertEquals("org.junitpioneer.jupiter.CartesianProductTestExtensionNo instructins to disable", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.normalizeSpace("org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.substringAfterLast("org.apache.commons.lang3.ArrayUtils", 1458);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      
      int int0 = StringUtils.compare("d6", "n/G$I7e6]Z57ib`");
      assertEquals((-10), int0);
      
      String string9 = StringUtils.leftPad("]u3dcj-", (-137), '=');
      assertEquals("]u3dcj-", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      
      String string10 = StringUtils.difference("9IMs6/W oje*ne", "d6");
      assertEquals("d6", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      
      String string11 = StringUtils.trimToEmpty("d6");
      assertEquals("d6", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("fU_7SZu1o7hGV]fU_7SZu1o7hGV]", 'g');
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) '=';
      longArray0[1] = (long) '=';
      longArray0[2] = (long) (-10);
      String string12 = StringUtils.join(longArray0, 'g');
      assertEquals("61g61g-10", string12);
      assertEquals(3, longArray0.length);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string10));
      assertArrayEquals(new long[] {61L, 61L, (-10L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0578()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("S|A~uIl", " ", (CharSequence[]) null);
      assertEquals("S|A~uIl ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0579()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("9IMs6/W oje*ne"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("9IMs6/W oje*ne"));
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("9IMs6/W oje*ne"));
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "r.params.IntRange");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("9IMs6/W oje*ne"));
      assertTrue(linkedHashSet0.contains(object0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "bpffo(K", (CharSequence) "r.params.IntRange", 652);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeIgnoreCase("\u0004$o@WoI?e@4estH", "ylD");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Supplied value must be a valid byte literal between -128 and 127: [", "\u0004$o@WoI?e@4estH", 1497);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "r.params.IntRange", (-1));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string2 = StringUtils.center("9IMs6/W oje*ne", 313, '\'');
      assertEquals("'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''9IMs6/W oje*ne''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int3 = StringUtils.ordinalIndexOf("r.params.IntRange", "g0jShM}UM+zB\"F", 730);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0580()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, 29);
      assertNull(string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 29;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 29;
      doubleArray0[3] = (double) 29;
      doubleArray0[8] = (double) 29;
      doubleArray0[5] = (double) 29;
      doubleArray0[6] = (double) 29;
      doubleArray0[7] = (double) 29;
      doubleArray0[8] = (double) 29;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertEquals("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0", string1);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0, 29.0, 0.0, 29.0, 29.0, 29.0, 29.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.getDigits("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0");
      assertEquals("29029029029000290290290290", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("", "Backup", 45);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.unwrap("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 'p');
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Su", "...");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringAfter((String) null, 256);
      assertNull(string5);
      
      String string6 = StringUtils.difference("29029029029000290290290290", "...");
      assertEquals("...", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      String[] stringArray0 = new String[0];
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string7);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("...", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("29029029029000290290290290", "", true);
      assertEquals(26, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string8 = StringUtils.rightPad("...", 45, 'p');
      assertEquals("...pppppppppppppppppppppppppppppppppppppppppp", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "...pppppppppppppppppppppppppppppppppppppppppp", charArray0);
      assertFalse(boolean1);
      assertEquals(0, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0581()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "fX*Yq-*Y+`a9i-2=(e ", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0582()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.junitpioneer.jupiter.StdIoExtension", 'C', 'C');
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[1] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[2] = "bpffo(K";
      stringArray0[3] = "bpffo(K";
      stringArray0[4] = "xyr";
      stringArray0[5] = "org.junitpioneer.jupiter.StdIoExtension";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string1);
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("Expected exception %s was not thrown.", "The String must not be empty");
      assertEquals("Expected exception %s was not thrown.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("f3FA=obm/!=*", 13);
      assertEquals("f3FA=obm/!=* ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isMixedCase("org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean0);
      
      String string4 = StringUtils.strip("Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("org.junitpioneer.jupiter.StdIoExtension");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0583()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], charSequenceArray0[3], 10);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[6]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'G';
      charArray0[2] = '-';
      charArray0[3] = 'g';
      charArray0[4] = '<';
      charArray0[5] = 'D';
      charArray0[6] = 'P';
      charArray0[7] = '{';
      charArray0[8] = '?';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "\n", charArray0);
      assertTrue(boolean2);
      assertEquals(9, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'Z', 'G', '-', 'g', '<', 'D', 'P', '{', '?'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0584()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1Sy^V2n";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1Sy^V2n", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (char[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("u(NxXP");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0585()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "g2", (CharSequence) "=vp!-/L-<ms9\"i.sa'x", 4);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.chop("=vp!-/L-<ms9\"i.sa'x");
      assertEquals("=vp!-/L-<ms9\"i.sa'", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0586()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)10;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'h', 41, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0587()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-106L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      String string1 = StringUtils.join(longArray0, 'Y');
      assertEquals("0Y-1Y-106Y0Y-1Y0", string1);
      assertEquals(6, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, (-1L), (-106L), 0L, (-1L), 0L}, longArray0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, 'h');
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.replace("+<k5$Sol:+7x.^6FL", "-ZqjW?", "-ZqjW?", 5);
      assertEquals("+<k5$Sol:+7x.^6FL", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.left("", 5);
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-636);
      shortArray0[1] = (short) (-1160);
      shortArray0[2] = (short) (-2101);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Y', (int) (short) (-2101), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2101
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0588()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1892;
      shortArray0[1] = (short)102;
      shortArray0[2] = (short)35;
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringAfterLast((String) null, "jtj|]f8:nDC6F0");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("jtj|]f8:nDC6F0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.remove((String) null, 'F');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0589()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0590()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[3] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.join(doubleArray0, '>');
      assertEquals("-1304.0>0.0>-1304.0>-1304.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-1304.0), 0.0, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "-1304.0>0.0>-1304.0>-1304.0";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "e%*x@tr^";
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Spliterator<Locale.FilteringMode> spliterator0 = serviceLoader0.spliterator();
      assertNotNull(spliterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, '>');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.replace("Search and Replace array lengths don't match: ", "A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", "D,+t&rCE*D", 922);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.left("~fo{r87Z*:e{G&{G", 3609);
      assertEquals("~fo{r87Z*:e{G&{G", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "D,+t&rCE*D");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfterLast("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", "S${,5J1PG-V");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAlphaSpace("~fo{r87Z*:e{G&{G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0591()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.join(doubleArray0, '>');
      assertEquals("-1304.0>1.5>-1304.0>-1304.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-1304.0), 1.5, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "-1304.0>1.5>-1304.0>-1304.0";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "e%*x@tr^";
      String string2 = StringUtils.swapCase("Search and Replace array lengths don't match: ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      
      String string3 = StringUtils.appendIfMissing("e%*x@tr^", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("e%*x@tr^", string3);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains((-1304)));
      
      String string4 = StringUtils.stripToNull("16.0W16.0W16.0W16.0W16.0W0.0");
      assertEquals("16.0W16.0W16.0W16.0W16.0W0.0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string5 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", ", ", (String) null, (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[1]);
      assertFalse(boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1304);
      longArray0[1] = (long) (-1304);
      String string6 = StringUtils.join(longArray0, '\'');
      assertEquals("-1304'-1304", string6);
      assertEquals(2, longArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertArrayEquals(new long[] {(-1304L), (-1304L)}, longArray0);
  }

  @Test(timeout = 4000)
  public void test0592()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripToEmpty("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.left("", (-328));
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0593()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0594()  throws Throwable  {
      String string0 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0595()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "Minimum abbreviation width with offset is %d", 57, 2804);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      String string1 = StringUtils.toRootLowerCase("Locale must not be null");
      assertEquals("locale must not be null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence charSequence1 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0596()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.repeat("Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", 1777);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, 'Y');
      assertEquals("YYYY", string1);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", (CharSequence) "YYYY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0597()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "<GZk3", (String) null, 118);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart((String) null, "8M`!VwI<J)*@-PkS");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 910;
      intArray0[1] = (int) 'V';
      intArray0[2] = (int) 'V';
      intArray0[3] = 910;
      intArray0[4] = 910;
      intArray0[5] = 910;
      intArray0[6] = 223;
      intArray0[7] = (int) 'V';
      String string3 = StringUtils.join(intArray0, 'V', 1853, 910);
      assertEquals("", string3);
      assertEquals(8, intArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new int[] {910, 86, 86, 910, 910, 910, 223, 86}, intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0598()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0599()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("comparator", "comparator");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0600()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("a*;F3f", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("a*;F3f", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "a*;F3f", 1064);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2197);
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, 'P');
      assertEquals("", string3);
      assertEquals(0, longArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.toRootUpperCase("{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&DYF~ZTR;DW", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "[`~d.4v'Q6mto)Bj";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      String string5 = StringUtils.join(objectArray0, "");
      assertEquals("[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange", string5);
      assertEquals(3, objectArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'K');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.join((int[]) null, 'G');
      assertNull(string6);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'P';
      doubleArray0[1] = (double) 1064;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'P';
      doubleArray0[5] = (double) (-1);
      String string7 = StringUtils.join(doubleArray0, 'K');
      assertEquals("80.0K1064.0K80.0K-1.0K80.0K-1.0", string7);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertArrayEquals(new double[] {80.0, 1064.0, 80.0, (-1.0), 80.0, (-1.0)}, doubleArray0, 0.01);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[1] = (CharSequence) "[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "a*;F3f";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "a*;F3f";
      charSequenceArray0[5] = (CharSequence) "a*;F3f";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals("[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange", charSequence0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string7));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      CharSequence charSequence1 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange");
      assertEquals("[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange", charSequence1);
      assertNotNull(charSequence1);
      assertTrue(charSequence1.equals((Object)charSequence0));
      assertFalse(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string7));
      assertFalse(charSequence1.equals((Object)string2));
      assertFalse(charSequence1.equals((Object)string3));
      assertTrue(charSequence1.equals((Object)string5));
      assertFalse(charSequence1.equals((Object)string4));
      assertFalse(charSequence1.equals((Object)string1));
      
      charSequenceArray0[6] = (CharSequence) "[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange";
      StringWriter stringWriter0 = new StringWriter(1064);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      charSequenceArray0[7] = (CharSequence) stringBuffer0;
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0601()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.stripEnd(string0, "?");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "maxWith cannot be negative", (CharSequence) "i?_#jw", 32767);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("I5^I6/MN&KVdLPI");
      assertEquals("56", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.truncate("Threshold must not be negative", 52, 5);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.toRootLowerCase("I<+02");
      assertEquals("i<+02", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0602()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(106);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(106));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".Q";
      stringArray0[1] = "...\n";
      stringArray0[2] = "'.";
      stringArray0[3] = "f.1yg*o";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(".Q", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("f.1yg*o", (-256));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("y.]y", 8, 106);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("", 3416);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'R';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'u', 'R'}, charArray0);
      
      boolean boolean1 = StringUtils.equalsAny("", stringArray0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("'.", "", 3416);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0603()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string1 = StringUtils.stripStart("A,rnU;pVK", " ");
      assertEquals("A,rnU;pVK", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 16;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      floatArray0[5] = 16.0F;
      boolean boolean0 = StringUtils.endsWithAny("A,rnU;pVK", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringAfter("A,rnU;pVK", " ");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0604()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0605()  throws Throwable  {
      String string0 = StringUtils.strip("Never disable parameterized test method itself");
      assertEquals("Never disable parameterized test method itself", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("Never disable parameterized test method itself");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("Illegal range. Equal from and to will produce an empty range.", "", "Never disable parameterized test method itself");
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.endsWithAny("Illegal range. Equal from and to will produce an empty range.", stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0606()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "!{/W:2=0&f", (char[]) null);
      assertEquals((-1), int0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string1 = StringUtils.chomp(")p9S o!");
      assertEquals(")p9S o!", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test0607()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, 1878, 1878);
      assertEquals("", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 1878;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "kJJGDSa5{-EV`b";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("kJJGDSa5{-EV`b", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBeforeLast("gYHsG+Mts", "Could not resolve parameter of type %s.");
      assertEquals("gYHsG+Mts", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.valueOf((char[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("$", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.$Could not resolve parameter of type %s.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "kJJGDSa5{-EV`b", (CharSequence) "kJJGDSa5{-EV`b");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(34, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.removeIgnoreCase(";", "C9>d c1y,AT");
      assertEquals(";", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0608()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      int int0 = StringUtils.compareIgnoreCase("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "Search and Replace array lengths don't match: ");
      assertEquals((-51), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1304));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("]hJ,r:+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "");
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains((-1304)));
      
      boolean boolean0 = linkedList0.add((Object) "Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains((-1304)));
      assertTrue(linkedList0.contains("Search and Replace array lengths don't match: "));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      linkedList0.addFirst(object1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains((-1304)));
      assertTrue(linkedList0.contains(object1));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '!', 9, 173);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 173
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0609()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, '.', (-3414), (int) '.');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3414
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0610()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, 'n');
      assertEquals("", string0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissing("", (CharSequence) null, charSequenceArray0);
      assertEquals("", string2);
      assertEquals(6, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBeforeLast("Wu+?Nt&d+", "");
      assertEquals("Wu+?Nt&d+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.containsOnly(charSequence0, "Fxt");
      assertFalse(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0611()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfAny((CharSequence) "Array element ", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0612()  throws Throwable  {
      String string0 = StringUtils.truncate("b%?Vo@@L&#v]z&e(6%", 12);
      assertEquals("b%?Vo@@L&#v]", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "b%?Vo@@L&#v]", "");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "b%?Vo@@L&#v]z&e(6%";
      charSequenceArray0[1] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[2] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[3] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[4] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[5] = (CharSequence) "b%?Vo@@L&#v]";
      charSequenceArray0[7] = (CharSequence) "b%?Vo@@L&#v]";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.center("offset cannot be negative", (-1), '`');
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[4], (CharSequence) "offset cannot be negative", (-1));
      assertEquals((-1), int1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.replaceFirst((String) null, "CartesianProductTest can not have a non-empty display name", "LSp^wct.naH");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0613()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("", 3692, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0614()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      int int0 = 127;
      String string0 = StringUtils.join(objectArray0, "/aV/[.;N", 595, 127);
      assertEquals("", string0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("/aV/[.;N", supplier0);
      assertEquals("/aV/[.;N", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "yg^(*?2E7rt0$89";
      String string3 = StringUtils.rightPad("yg^(*?2E7rt0$89", 595, "");
      assertEquals("yg^(*?2E7rt0$89                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = "8M`!Vw\\I<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", "yg^(*?2E7rt0$89", "/aV/[.;N");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 4
         // yg^(*?2E7rt0$89
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0615()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[1] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[2] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[3] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[4] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 2375);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.toRootUpperCase("\"kTDsY[YAyA`[8h[");
      assertEquals("\"KTDSY[YAYA`[8H[", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.StringUtils", "No instructins to disable");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("No instructins to disable");
      assertEquals("NO INSTRUCTINS TO DISABLE", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.center("a`", 3991, 'c');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) string2, charSequenceArray0[3], (-1));
      assertEquals((-1), int2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.getDigits("hdV9Po5V6,e/_0>");
      assertEquals("9560", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.normalizeSpace("\"kTDsY[YAyA`[8h[");
      assertEquals("\"kTDsY[YAyA`[8h[", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("\"kTDsY[YAyA`[8h[", (-2234), 64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0616()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsIgnoreCase("g0jShM}UM+zB\"F", charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("u(NxXP", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("DefaultTimeZone", "Y9");
      assertEquals("Y9", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y9";
      stringArray0[1] = "DefaultTimeZone";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Y9", string3);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultTimeZone", "");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Y9", (CharSequence) "u(NxXP");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = '2';
      charArray0[5] = 'H';
      charArray0[6] = 'U';
      charArray0[7] = '2';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "u(NxXP", charArray0);
      assertEquals(0, int2);
      assertEquals(8, charArray0.length);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', '2', 'H', 'U', '2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0617()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\r", "\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0618()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0619()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0620()  throws Throwable  {
      String string0 = StringUtils.substringAfter("#|E", "EsEmV");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0621()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("]7eL6Ty`'4", "", "i/`@gwude/PY;y", 53);
      assertEquals("]7eL6Ty`'4", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((short[]) null, 'h', 0, 99);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfter("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK", "Search and Replace array lengths don't match: ");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.rotate((String) null, (-1304));
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = null;
      String string6 = StringUtils.prependIfMissing("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", (CharSequence[]) null);
      assertEquals("Search and Replace array lengths don't match: ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      
      String string7 = StringUtils.stripEnd((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNull(string7);
      
      String[] stringArray0 = null;
      String string8 = StringUtils.replaceEachRepeatedly("\n", (String[]) null, (String[]) null);
      assertEquals("\n", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("", "Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 45
         // Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }
         //                                              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0622()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add((Object) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      assertEquals("fU_7SZu1o7hGV]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "P27td#b<8");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean3 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string3 = StringUtils.stripStart("A,rnU;pVK", "fU_7SZu1o7hGV]");
      assertEquals("A,rnU;pVK", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string4 = StringUtils.join(floatArray0, ']');
      assertEquals("0.0", string4);
      assertEquals(1, floatArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String string5 = StringUtils.wrapIfMissing("fU_7SZu1o7hGV]", "fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("fU_7SZu1o7hGV]", "A,rnU;pVK", 192);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.repeat('G', 876);
      assertEqualsstring6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      StringUtils.lastIndexOfIgnoreCase((CharSequenceharSequence) "fU_7SZu1o7hGV]");
      StringUtils.splitByWholeSeparator("Minimum abbreviation width is %d", "fU_7SZu1o7hGV]", (-569));
  }

  @Test(timeout = 4000)
  public void test0623()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("K", 'o');
      assertEquals("K", string0);
      assertNotNull(string0);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string1 = StringUtils.removeFirst("K", "");
      assertEquals("K", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "K", (CharSequence) "K");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0624()  throws Throwable  {
      String string0 = StringUtils.replaceAll("^na1>ubi=WH", "16.0W16.0W16.0W16.0W16.0W0.0", "16.0W16.0W16.0W16.0W16.0W0.0");
      assertEquals("^na1>ubi=WH", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.repeat((String) null, "^na1>ubi=WH", (-321));
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "^na1>ubi=WH", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween("', '", "', '");
      assertNull(string3);
      
      String string4 = StringUtils.substring("^na1>ubi=WH", (-321));
      assertEquals("^na1>ubi=WH", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.left("Minimum abbreviation width with offset is %d", (-321));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("16.0W16.0W16.0W16.0W16.0W0.0", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0625()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0626()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add(".A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[.A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A]", stack0.toString());
      assertTrue(stack0.contains(".A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[.A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A]", stack0.toString());
      assertTrue(stack0.contains(".A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A"));
      
      String string0 = StringUtils.join(iterator0, 'Q');
      assertEquals(".A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A", string0);
      assertNotNull(string0);
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[.A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A]", stack0.toString());
      assertTrue(stack0.contains(".A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A"));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ".A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A", ".A-ZjLylvBDex.A-ZjLylvBDex.A-ZjLylvBDex.A");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0627()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", "{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Minimum abbreviation width with offset is %d"));
      
      boolean boolean0 = linkedList0.add((Object) serviceLoader0);
      assertTrue(boolean0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Minimum abbreviation width with offset is %d"));
      
      String string2 = StringUtils.join((Iterable<?>) linkedList0, 'a');
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("Minimum abbreviation width with offset is %d"));
  }

  @Test(timeout = 4000)
  public void test0628()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 104);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0629()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "org.junitpioneer.jupiter.StdIoExtension");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.junitpioneer.jupiter.StdIoExtension", "org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace(" uF0bt'p7");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0630()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "-1234.4836444196O3.0");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.repeat((String) null, (-2));
      assertNull(string1);
      
      String string2 = StringUtils.right(":FT*}$zQ(_cbi:FT*}$zQ(_cbi", (-1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0631()  throws Throwable  {
      String string0 = StringUtils.right("org.junitpioneer.jupiter.CartesianValueArgumentsProvider", (-728));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0632()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("x");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0633()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "g");
      assertEquals("or.apache.commons.lan3.StrinUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("or.apache.commons.lan3.StrinUtils", 'T', 'R');
      assertEquals("or.apache.commons.lan3.StrinUtils", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart((String) null, "g");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("g");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("or.apache.commons.lan3.StrinUtils", "or.apache.commons.lan3.StrinUtils", 17);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals(36, int0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("g");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.toRootUpperCase("org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("ORG.JUNITPIONEER.JUPITER.SYSTEMPROPERTYEXTENSION", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("g", "ORG.JUNITPIONEER.JUPITER.SYSTEMPROPERTYEXTENSION");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.upperCase("E#t&F");
      assertEquals("E#T&F", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.join((Object[]) stringArray1, 'C');
      assertEquals("C", string5);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.strip("HWR4ZB~", " R8\"D)09gwu");
      assertEquals("HWR4ZB~", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", 16);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0634()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("{", " ");
      assertEquals("{", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0635()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Cannot clear and set the following entries at the same time: ");
      assertEquals("Cannot clear and set the following entries at the same time:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0636()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0637()  throws Throwable  {
      int int0 = 2967;
      String string0 = StringUtils.substring("'.", 2967, 2967);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("maxWith cannot be negative");
      assertEquals("MAXWITH CANNOT BE NEGATIVE", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "Strings must not be null";
      String string3 = StringUtils.removeAll("'.", "Strings must not be null");
      assertEquals("'.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.endsWith("'.", "MAXWITH CANNOT BE NEGATIVE");
      assertFalse(boolean0);
      
      String string4 = StringUtils.normalizeSpace("Strings must not be null");
      assertEquals("Strings must not be null", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.upperCase("'.");
      assertEquals("'.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      
      String string6 = "hK,pz0k~};";
      String string7 = "";
      String[] stringArray0 = StringUtils.split("hK,pz0k~};", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string8 = StringUtils.wrap("", 'Q');
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNotEmpty("'.");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string9 = StringUtils.removeFirst("'.", "Strings must not be null");
      assertEquals("'.", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      
      int int1 = StringUtils.compareIgnoreCase("Strings must not be null", "");
      assertEquals(24, int1);
      assertFalse(int1 == int0);
      
      try { 
        StringUtils.getBytes("", "'.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0638()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32767);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(32767));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add((Object) null);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(32767));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean1 = linkedHashSet0.add(object2);
      assertTrue(boolean1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(32767));
      assertTrue(linkedHashSet0.contains(object2));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(32767));
      assertTrue(linkedHashSet0.contains(object2));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(32767));
      assertTrue(linkedHashSet0.contains(object2));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.mid((String) null, (-1), (-3080));
      assertNull(string1);
      
      String string2 = StringUtils.removeIgnoreCase((String) null, "java.lang.Object@611f0e47");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(32767));
      
      String string3 = StringUtils.stripToNull(".)");
      assertEquals(".)", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "java.lang.Object@611f0e47");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "fU_7SZu1o7hGV]";
      stringArray0[4] = "fU_7SZu1o7hGV]";
      stringArray0[5] = ".)";
      stringArray0[6] = ".)";
      stringArray0[7] = "java.lang.Object@611f0e47";
      stringArray0[8] = null;
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("fU_7SZu1o7hGV]", string4);
      assertEquals(9, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0639()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(32767);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains((-3080)));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add((Object) null);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains((-3080)));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      boolean boolean1 = linkedHashSet0.add(object2);
      assertTrue(boolean1);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object2));
      assertFalse(linkedHashSet0.contains(object1));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object2));
      assertFalse(linkedHashSet0.contains(object1));
      
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object2));
      assertFalse(linkedHashSet0.contains(object1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", (-12), (-3080));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(object1));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "java.lang.Object@79d9a8a6");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[1] = "";
      stringArray0[3] = "fU_7SZu1o7hGV]";
      stringArray0[6] = "fU_7SZu1o7hGV]";
      stringArray0[5] = "";
      stringArray0[6] = "java.lang.Object@79d9a8a6";
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("\n");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0640()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "A(NXT<6PFz";
      String string1 = StringUtils.prependIfMissingIgnoreCase(" ", "A(NXT<6PFz", charSequenceArray0);
      assertEquals("A(NXT<6PFz ", string1);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.swapCase(" ");
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("StdIo_System_In", " ", "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n");
      assertEquals("StdIo_System_In", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.leftPad("vS'h#c:5MVOpl?", 8192, 'C');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "N", true);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0641()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, 29);
      assertNull(string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 29;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 29;
      doubleArray0[3] = (double) 29;
      doubleArray0[8] = (double) 29;
      doubleArray0[5] = (double) 29;
      doubleArray0[6] = (double) 29;
      doubleArray0[7] = (double) 29;
      doubleArray0[8] = (double) 29;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertEquals("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0", string1);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0, 29.0, 0.0, 29.0, 29.0, 29.0, 29.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.getDigits("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0");
      assertEquals("29029029029000290290290290", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("", "Backup", 45);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripToNull("-1234.4836444196O3.0");
      assertEquals("-1234.4836444196O3.0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "29029029029000290290290290");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "-1234.4836444196O3.0", (char[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0642()  throws Throwable  {
      String string0 = StringUtils.capitalize("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width with offset is %d", charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0643()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.join(doubleArray0, '>');
      assertEquals("-1304.0>1.5>-1304.0>-1304.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-1304.0), 1.5, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "-1304.0>1.5>-1304.0>-1304.0";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "e%*x@tr^";
      String string2 = StringUtils.swapCase("Search and Replace array lengths don't match: ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissing("e%*x@tr^", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("e%*x@tr^", string3);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringBeforeLast(">A26SI8Xdd-6y&i*%G2", "e%*x@tr^");
      assertEquals(">A26SI8Xdd-6y&i*%G2", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ", ", (CharSequence) ">A26SI8Xdd-6y&i*%G2");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[2], ">A26SI8Xdd-6y&i*%G2");
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string5 = StringUtils.defaultIfBlank("-1304.0>1.5>-1304.0>-1304.0", "&1$E~m#i<?i/74*FS@");
      assertEquals("-1304.0>1.5>-1304.0>-1304.0", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 15, ">A26SI8Xdd-6y&i*%G2");
      assertEquals("Search and Replace array lengths don't match: ", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0644()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("vhl@;{Iv", "vhl@;{Iv");
      assertEquals("vhl@;{Iv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0645()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", "", (-1333));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charSequenceArray0[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string4 = StringUtils.replacePattern("", "org.junitpioneer.jupiter.params.ShortRange", "-qtzCCnZLZOgm:*Q<");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      
      String string5 = StringUtils.replaceChars("maxWith cannot be negative", "v<In'#EsieV3w7BT", "BBOk@p");
      assertEquals("maxWth cakkot b kgatB", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.join((long[]) null, 'o', (-2987), (-2987));
      assertNull(string6);
      
      boolean boolean2 = StringUtils.endsWith("BBOk@p", "v<In'#EsieV3w7BT");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.compare("oXrz{t$Mw(`I", "v<In'#EsieV3w7BT");
      assertEquals((-7), int0);
      
      String string7 = StringUtils.substringAfterLast("v<In'#EsieV3w7BT", (-7));
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0646()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string1 = StringUtils.join(iterator0, 'h');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.replace("+<k5$Sol:+7x.^6FL", "-ZqjW?", "-ZqjW?", 5);
      assertEquals("+<k5$Sol:+7x.^6FL", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      Iterator<Locale.FilteringMode> iterator1 = serviceLoader0.iterator();
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.left("", 5);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringAfterLast("v#^XQT", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("+<k5$Sol:+7x.^6FL");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace("v#^XQT");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0647()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints(".A-ZjLylvBDex");
      assertEquals(14, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test0648()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'o', 1, 1);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0649()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-1886), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0650()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.reverseDelimited("", 'P');
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.appendIfMissing("org.apache.commons.lang3.StringUtils", "", charSequenceArray0);
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0651()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Never disable parameterized test method itself", "o", (-759));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("o", stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0652()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "S%", "S%");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0653()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw", (-1));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals(1, int0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0654()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0655()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[1] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[2] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[3] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[4] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 2375);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.toRootUpperCase("\"kTDsY[YAyA`[8h[");
      assertEquals("\"KTDSY[YAYA`[8H[", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.StringUtils", "No instructins to disable");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("No instructins to disable");
      assertEquals("NO INSTRUCTINS TO DISABLE", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(2, stringArray0.length);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.rightPad("\"kTDsY[YAyA`[8h[", (-1), "NO INSTRUCTINS TO DISABLE");
      assertEquals("\"kTDsY[YAyA`[8h[", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replacePattern("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", "No instructins to disable", "org.junitpioneer.jupiter.params.Range");
      assertEquals("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceChars("s9$", ":SH-,JG<UuI4.", "8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange");
      assertEquals("s9$", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.join((long[]) null, ')', (-1), 76);
      assertNull(string5);
      
      boolean boolean2 = StringUtils.endsWith(charSequenceArray0[3], "s9$");
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0656()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 459.3239F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("459.3239#0.0#459.3239#459.3239#0.0#0.0", string0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {459.3239F, 0.0F, 459.3239F, 459.3239F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("R-=4w!~V0Vo", (-361));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("900.\"at1(\thF@", 48);
      assertEquals("900.\"at1(\thF@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("900.\"at1(\thF@", 4);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.startsWithAny("R-=4w!~V0Vo", stringArray0);
      assertFalse(boolean0);
      assertEquals(0, stringArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", supplier0);
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceIgnoreCase("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "org.apache.commons.lang3.StringUtils", "");
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "R-=4w!~V0Vo", (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.remove("org.junitpioneer.jupiter.ReportEntryExtension", ':');
      assertEquals("org.junitpioneer.jupiter.ReportEntryExtension", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0657()  throws Throwable  {
      String string0 = StringUtils.remove(" doesn't match any regular expression.", 'P');
      assertEquals(" doesn't match any regular expression.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0658()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "oy<1Sy^V2n";
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      String string1 = "g0jShM}UM+zB\"F";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("9IMs6/W oje*ne", "gg", 1119, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0659()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0660()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, "", 0, (-1759));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[4];
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      charArray0[0] = 'C';
      charArray0[1] = '(';
      charArray0[2] = ';';
      charArray0[3] = '\\';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'C', '(', ';', '\\'}, charArray0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedList0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains((-1759)));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList1.add(object0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains((-1759)));
      assertTrue(linkedList1.contains(object0));
      
      ListIterator<Object> listIterator0 = linkedList1.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList1.contains((-1759)));
      assertTrue(linkedList1.contains(object0));
      
      boolean boolean2 = linkedList1.add((Object) listIterator0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList1.contains((-1759)));
      assertTrue(linkedList1.contains(object0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int2);
      assertEquals(4, charArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new char[] {'C', '(', ';', '\\'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0661()  throws Throwable  {
      char[] charArray0 = new char[8];
      String string0 = StringUtils.join((Iterator<?>) null, '\'');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0662()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.mid(", Length: ", 322, 76);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeIgnoreCase("M^A0GoWuZ-fnS(", "The Array must not be null");
      assertEquals("M^A0GoWuZ-fnS(", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace("M^A0GoWuZ-fnS(");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.substringBeforeLast("' contains '", "xsHXk");
      assertEquals("' contains '", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "xsHXk");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0663()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-2882);
      floatArray0[1] = (float) (-2882);
      floatArray0[0] = (float) (-2882);
      floatArray0[3] = (float) '{';
      floatArray0[4] = (float) (-2882);
      String string1 = StringUtils.join(floatArray0, '{', (-2882), (-2882));
      assertEquals("", string1);
      assertEquals(5, floatArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new float[] {(-2882.0F), (-2882.0F), 0.0F, 123.0F, (-2882.0F)}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeStartIgnoreCase("5!)) vs ", "_Y8f");
      assertEquals("5!)) vs ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("5!)) vs ");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("_Y8f");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, "org.junitpioneer.jupiter.AbstractEntryBasedExtension", 2043);
      assertNull(string3);
      
      String string4 = StringUtils.stripStart("org.junitpioneer.jupiter.AbstractEntryBasedExtension", "~%bgRZc3");
      assertEquals("org.junitpioneer.jupiter.AbstractEntryBasedExtension", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("_Y8f");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "~%bgRZc3", (char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.trimToEmpty("_Y8f");
      assertEquals("_Y8f", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string6);
      assertEquals(6, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean3 = StringUtils.isNumericSpace("5!)) vs ");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test0664()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("\n", (-1339));
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, "\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.substringAfter("QLS4~w[&6 VqZs", (-1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("Display name '", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      stringArray0[1] = "QLS4~w[&6 VqZs";
      stringArray0[2] = "\n";
      stringArray0[3] = "DefaultTimeZone";
      stringArray0[4] = "E#t&F";
      stringArray0[5] = "QLS4~w[&6 VqZs";
      stringArray0[6] = "Display name '";
      stringArray0[7] = "7()p3g\"OX1>)r`X$Ex";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("8M`!VwI<J)*@-PkS", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "QLS4~w[&6 VqZs", "MLOvayBH*NLkbl|m");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "\n", (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.removeStart("\n", "...");
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1339);
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 76;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-1339);
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'U', (-1339), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1339
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0665()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Displayname ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0666()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("", 'H', 'H');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("E#t&F", ";", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[7]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.toRootUpperCase("E#t&F");
      assertEquals("E#T&F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase(charSequenceArray0[8], charSequenceArray0[7]);
      assertTrue(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string4 = StringUtils.upperCase("test-template-invocation");
      assertEquals("TEST-TEMPLATE-INVOCATION", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'H');
      assertEquals("E#t&F", string5);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test0667()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.wrap("Minimum abbreviation width with offset is %d", "{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "{!#`&dyF~ZTr;dwMinimum abbreviation width with offset is %d{!#`&dyF~ZTr;dw";
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.removeIgnoreCase((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString(" {G~)6QIfU%d@:vmN");
      assertEquals(" {G~)6QIfU%d@:vmN", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.chomp("{!#`&dyF~ZTr;dw", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.leftPad("ExceptionWasThrown", 999);
      assertEqualsxceptionWasThrown", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNotEmpty(" {G~)6QIfU%d@:vmN");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string8 = StringUtils.unwrap("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 'U');
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test0668()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0669()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Ol@C4gR1y7", ".A-ZjLylvBDex");
      assertEquals(".A-ZjLylvBDexOl@C4gR1y7.A-ZjLylvBDex", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0670()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      String string0 = StringUtils.join((float[]) null, '\'', (-3237), (-3237));
      assertNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("3F", "");
      assertEquals("3F", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("A4][r@]n~aPPz@");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("A4][r@]n~aPPz@");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)988;
      shortArray0[1] = (short)988;
      String string2 = StringUtils.join(shortArray0, '\'');
      assertEquals("988'988", string2);
      assertEquals(2, shortArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new short[] {(short)988, (short)988}, shortArray0);
      
      String string3 = StringUtils.substringBetween("@C0&C", "X", "3F");
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.stripStart("3F", "3F");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0671()  throws Throwable  {
      String string0 = StringUtils.wrap("pM+", 'l');
      assertEquals("lpM+l", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0672()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0673()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'Z');
      assertEquals("", string0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0674()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid((String) null, 33, 65);
      assertNull(string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean1 = linkedList0.add(" must return `CartesianProductTest.Sets`");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(" must return `CartesianProductTest.Sets`"));
      assertFalse(linkedList0.contains(""));
      
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains(" must return `CartesianProductTest.Sets`"));
      
      boolean boolean2 = linkedList0.removeAll(vector0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(linkedList0.contains(" must return `CartesianProductTest.Sets`"));
      assertFalse(linkedList0.contains(""));
      assertFalse(vector0.contains(" must return `CartesianProductTest.Sets`"));
      
      String string2 = StringUtils.join((List<?>) linkedList0, 'u', 33, 33);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(" must return `CartesianProductTest.Sets`"));
      assertFalse(linkedList0.contains(string2));
      
      String string3 = StringUtils.rightPad((String) null, 65, "p{InCombiningDiacriticalMarks}+");
      assertNull(string3);
      
      String string4 = StringUtils.chop("org.junitpioneer.");
      assertEquals("org.junitpioneer", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "org.junitpioneer.", 65, 30);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 6, 326);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.join((Object[]) null, '>', 42, (-408));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0675()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string4 = null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, 0, 262);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0676()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.lowerCase(stringArray0[0]);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0677()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join((Iterable<?>) null, (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string3 = StringUtils.repeat((String) null, 12);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0678()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 1, 1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringAfterLast("", (-4459));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.upperCase("...");
      assertEquals("...", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.abbreviateMiddle("maxWith cannot be negative", "t8Nxsy/g", 4);
      assertEquals("maxWith cannot be negative", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.reverse("Search and Replace array lengths don't match: ");
      assertEquals(" :hctam t'nod shtgnel yarra ecalpeR dna hcraeS", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-4459);
      intArray0[1] = 4;
      intArray0[2] = 1;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 4;
      intArray0[6] = (-4459);
      intArray0[7] = 4;
      intArray0[8] = (-4459);
      String string6 = StringUtils.join(intArray0, 'M', 4, 4);
      assertEquals("", string6);
      assertEquals(9, intArray0.length);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertArrayEquals(new int[] {(-4459), 4, 1, 4, 4, 4, (-4459), 4, (-4459)}, intArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.FilteringMode> priorityQueue0 = new PriorityQueue<Locale.FilteringMode>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Locale.FilteringMode> priorityQueue1 = new PriorityQueue<Locale.FilteringMode>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      String string7 = StringUtils.join((Iterable<?>) priorityQueue1, "...");
      assertEquals("", string7);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertNotNull(string7);
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
  }

  @Test(timeout = 4000)
  public void test0679()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("gr");
      assertEquals("gr", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("gr", "gr", 97);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0680()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string1 = StringUtils.chomp("\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "\r";
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], charSequenceArray0[3], 10);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[6]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0681()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 1078, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0682()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.rotate("c^:eX><", 0);
      assertEquals("c^:eX><", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "c^:eX><";
      String string6 = StringUtils.prependIfMissing((String) null, "", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd((String) null, "");
      assertNull(string7);
      
      String string8 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string8);
      
      String string9 = StringUtils.removeFirst("", "");
      assertEquals("", string9);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string10 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string10);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(5, enumSet0.size());
      
      String string11 = StringUtils.abbreviateMiddle("Cannot clear and set the following entries at the same time: ", "", 206);
      assertEquals("Cannot clear and set the following entries at the same time: ", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string9));
      
      String string12 = StringUtils.reverse("c^:eX><");
      assertEquals("<>Xe:^c", string12);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0683()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "gg");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("gg");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("gg", "", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(";", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.toRootUpperCase("E#t&F");
      assertEquals("E#T&F", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("E#T&F", "");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.upperCase("gg");
      assertEquals("GG", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, enumSet0.size());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("gg"));
      
      Iterator<String> iterator1 = stack0.iterator();
      assertNotNull(iterator1);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("gg"));
      
      String string3 = StringUtils.join(iterator1, "offset cannot be negative");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("gg"));
      
      String string4 = StringUtils.center("GG", 911, 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiGGiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0684()  throws Throwable  {
      String string0 = StringUtils.center("<GZk3", 206, '|');
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||<GZk3|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||<GZk3|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", '|');
      assertEquals("<GZk3", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0685()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0686()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "9IMs6/W\\ oje*ne";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      stringArray0[3] = "bpffo(K";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("9IMs6/W oje*ne", string1);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("bpffo(K", 3416);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 0;
      String string3 = "cSv39JB_jwX4G{p";
      String string4 = StringUtils.mid("cSv39JB_jwX4G{p", 0, 2);
      assertEquals("cS", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'u';
      String string5 = StringUtils.replace("g0jShM}UM+zB\"F", "", "MX~H=?4");
      assertEquals("g0jShM}UM+zB\"F", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("g0jShM}UM+zB\"F", (CharSequence) null, stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string6);
      assertEquals(4, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "9IMs6/W oje*ne", (CharSequence) null, 122);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0687()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "-_hrT.D}1nS4a4cJt9";
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "-_hrT.D}1nS4a4cJt9", charSequenceArray0[0], (-4878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0688()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-1959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0689()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("ay)M<? jJ`", (String) null, (String) null);
      assertEquals("ay)M<? jJ`", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("ay)M<? jJ`");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("ay)M<? jJ`");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.compare((String) null, (String) null, true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replacePattern(">4m", "Report entry contains unresolved variable(s): { key=\"%s\" value=\"%s\" }", (String) null);
      assertEquals(">4m", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring("offset cannot be negative", 0);
      assertEquals("offset cannot be negative", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "dfeRI";
      // Undeclared exception!
      try { 
        Charset.forName("dfeRI");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // dfeRI
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0690()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("\r", "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0691()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, 'E');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0692()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'L', (-464), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -464
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0693()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("\r", "^@G1U-EW=|JI;XS");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0694()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '4');
      assertEquals("", string0);
      assertEquals(0, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " vs ", " vs ");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.join((double[]) null, 'l', 3447, 16);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0695()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsIgnoreCase("g0jShM}UM+zB\"F", charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfter("u(NxXP", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("DefaultTimeZone", "Y9");
      assertEquals("Y9", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Y9";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Y9", string3);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "7()p3g\"OX1>)r`X$Ex", "k6oxuS5Hy<kL");
      assertEquals(17, int0);
      
      String[] stringArray1 = StringUtils.split("E#t&F", "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.", (-4787));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.removeStart("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'H';
      doubleArray0[1] = (double) (-4787);
      doubleArray0[2] = 0.7;
      doubleArray0[3] = (double) 'U';
      doubleArray0[4] = (double) 17;
      doubleArray0[5] = (double) (-4787);
      String string5 = StringUtils.join(doubleArray0, 'H', (-660), (-4787));
      assertEquals("", string5);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new double[] {72.0, (-4787.0), 0.7, 85.0, 17.0, (-4787.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0696()  throws Throwable  {
      String string0 = StringUtils.removeStart("^Tm7Ak\"qtppo`Q^k", "^Tm7Ak\"qtppo`Q^k");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0697()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("\n", (-1339));
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", ">Wa{=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, "\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.substringAfter("QLS4~w[&6 VqZs", (-1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("Display name '", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      stringArray0[1] = "QLS4~w[&6 VqZs";
      stringArray0[2] = "\n";
      stringArray0[3] = "DefaultTimeZone";
      stringArray0[4] = "E#t&F";
      stringArray0[5] = "QLS4~w[&6 VqZs";
      stringArray0[6] = "Display name '";
      stringArray0[7] = "7()p3g\"OX1>)r`X$Ex";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("8M`!VwI<J)*@-PkS", string4);
      assertEquals(8, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "QLS4~w[&6 VqZs", "MLOvayBH*NLkbl|m");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "\n", (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.removeStart("\n", "...");
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1339);
      doubleArray0[1] = (double) 76;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 76;
      doubleArray0[4] = 3.0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) (-1339);
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'U', (-1339), 76);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1339
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0698()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string1 = StringUtils.capitalize(", ");
      assertEquals(", ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, 'e');
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) ", ", (CharSequence) " ");
      assertEquals(1, int0);
      
      String string3 = StringUtils.stripStart("A,rnU;pVK", "v#^XQT");
      assertEquals("A,rnU;pVK", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 16;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      floatArray0[5] = 0.0F;
      String string4 = StringUtils.join(floatArray0, 'W');
      assertEquals("16.0W16.0W16.0W16.0W16.0W0.0", string4);
      assertEquals(6, floatArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new float[] {16.0F, 16.0F, 16.0F, 16.0F, 16.0F, 0.0F}, floatArray0, 0.01F);
      
      String string5 = StringUtils.wrapIfMissing("A,rnU;pVK", "16.0W16.0W16.0W16.0W16.0W0.0");
      assertEquals("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", "16.0W16.0W16.0W16.0W16.0W0.0", 16);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0699()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", "", (-1333));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charSequenceArray0[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charSequenceArray0[1];
      String string4 = StringUtils.join(objectArray0, 'C');
      assertEquals(3, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("Minimum abbreviation width is %d", 4449, 'C');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("E#t&F", "Array element ", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test0700()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0701()  throws Throwable  {
      String string0 = StringUtils.stripStart("d`CpLfR2a{eHxIM=", "");
      assertEquals("d`CpLfR2a{eHxIM=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0702()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeFirst("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string1 = StringUtils.repeat("", (String) null, 3240);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0703()  throws Throwable  {
      String string0 = StringUtils.center("$XA~x0(", (-3362), "$XA~x0(");
      assertEquals("$XA~x0(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("$XA~x0(");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "$XA~x0(", (-1675));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "$XA~x0(", (CharSequence) "$XA~x0(", 726);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.removeEndIgnoreCase("$XA~x0(", "$XA~x0(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "$XA~x0(";
      objectArray0[1] = (Object) "$XA~x0(";
      objectArray0[2] = (Object) "$XA~x0(";
      objectArray0[3] = (Object) "$XA~x0(";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "$XA~x0(";
      objectArray0[6] = (Object) "$XA~x0(";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("-1234.4836444196O3.0", "", charSequenceArray0);
      assertEquals("-1234.4836444196O3.0", string2);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "-1234.4836444196O3.0", (CharSequence) "$XA~x0(", 2);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.right("", 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0704()  throws Throwable  {
      String string0 = StringUtils.truncate("BY%Z{u0_LXf@rJP", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.leftPad("6'?SwzFO*7e&/", 76, "\r");
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r6'?SwzFO*7e&/", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0705()  throws Throwable  {
      String string0 = StringUtils.repeat("&n?/uMC:IGA;X", "&n?/uMC:IGA;X", 958);
      assertNotNull(string0);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "&n?/uMC:IGA;X");
  }

  @Test(timeout = 4000)
  public void test0706()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ")", (CharSequence) "", 4);
      assertEquals(1, int0);
      
      String string2 = StringUtils.chop("");
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test0707()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.trim("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace("zD\"FtF", "{!#`&dyF~ZTr;dw", "org.junitpioneer.jupiter.params.Range");
      assertEquals("zD\"FtF", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("zD\"FtF", "}>", 13);
      assertEquals("zD\"FtF", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E#t&F";
      stringArray0[1] = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[2] = "c4}QkvZ2Y_33','Z%";
      String string3 = StringUtils.replaceEach("zD\"FtF", stringArray0, stringArray0);
      assertEquals("zD\"FtF", string3);
      assertEquals(4, stringArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat("zD\"FtF", (-992));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.repeat("F1oYU>u*{f", (String) null, (-992));
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", (CharSequence) "", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0708()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(106);
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(106));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = linkedHashSet0.add(object1);
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      assertTrue(linkedHashSet0.contains(object0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.mid("java.lang.Object@4f1a928ffU_7SZu1o7hGV]java.lang.Object@4992a796", 106, (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "P27td#b<8";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "...", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[5], charSequenceArray0[5], (-1));
      assertEquals((-1), int3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      String string3 = StringUtils.center("Backup", 56, '\'');
      assertEquals("'''''''''''''''''''''''''Backup'''''''''''''''''''''''''", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0709()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase("a*;F3f", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("a*;F3f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "a*;F3f", 1064);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2197);
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, 'P');
      assertEquals("", string4);
      assertEquals(0, longArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertArrayEquals(new long[] {}, longArray0);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      String string5 = StringUtils.toRootUpperCase("{!#`&dyF~ZTr;dw");
      assertEquals("{!#`&DYF~ZTR;DW", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "[`~d.4v'Q6mto)Bj";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "org.junitpioneer.jupiter.params.ShortRange";
      String string6 = StringUtils.join(objectArray0, "");
      assertEquals("[`~d.4v'Q6mto)Bjorg.junitpioneer.jupiter.params.ShortRange", string6);
      assertEquals(3, objectArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'K');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.join((int[]) null, 'G');
      assertNull(string7);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'P';
      doubleArray0[1] = (double) 1064;
      doubleArray0[2] = (double) 'P';
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'P';
      doubleArray0[5] = (double) (-1);
      String string8 = StringUtils.join(doubleArray0, 'K');
      assertEquals("80.0K1064.0K80.0K-1.0K80.0K-1.0", string8);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertArrayEquals(new double[] {80.0, 1064.0, 80.0, (-1.0), 80.0, (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0710()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "Backup", "H!");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0711()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ue^4Amc:kTW$ =L{}dGX;`", (CharSequence) " ", 675);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test0712()  throws Throwable  {
      String string0 = StringUtils.repeat("i[", 3668);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, "i[", 3668);
      assertEquals(3668, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals(7336, int0);
      assertEquals(3668, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0713()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Ex27jM*'}x", stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("Ex27jM*'}x", stringArray0);
      assertEquals((-1), int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0714()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1Sy^V2n";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1Sy^V2n", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultTimeZone", "u(NxXP");
      assertEquals(4, int0);
      
      String string3 = StringUtils.stripToNull("H.`;1");
      assertEquals("H.`;1", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "g0jShM}UM+zB\"F", (CharSequence) "DefaultTimeZone");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "g0jShM}UM+zB\"F", charArray0);
      assertEquals(0, int2);
      assertEquals(1, charArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {'U'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0715()  throws Throwable  {
      String string0 = StringUtils.chop("[");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0716()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("Un[CX[:}#*}Az1", "3RYoO", "...");
      assertEquals("Un[CX[:}#*}Az1", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeEnd(":FT*}$zQ(_cbi", ":FT*}$zQ(_cbi");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "...", (CharSequence) "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)24;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)24;
      try { 
        StringUtils.toString(byteArray0, "=oc/l`'Kx");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0717()  throws Throwable  {
      String string0 = StringUtils.right((String) null, 108);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.getIfBlank((String) null, (Supplier<String>) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0718()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.right((String) null, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0719()  throws Throwable  {
      String string0 = StringUtils.substringBefore("g2", "=vp!-/L-<ms9\"i.sa'x");
      assertEquals("g2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0720()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("G|7)a`Y5^", "`H|TxG$r<|4SlfH", 0);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.swapCase("G|7)a`Y5^");
      assertEquals("g|7)A`y5^", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("`H|TxG$r<|4SlfH", "Locale must not be nullorg.junitpioneer.jupiter.StdIoExtension");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0721()  throws Throwable  {
      String string0 = StringUtils.substringBefore("=vp!-/L-<ms9\"i.sa'x", "=vp!-/L-<ms9\"i.sa'x");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0722()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("A(NXT<6PFz", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("A(NXT<6PFz", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0723()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0724()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 459.3239F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("459.3239#0.0#459.3239#459.3239#0.0#0.0", string0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {459.3239F, 0.0F, 459.3239F, 459.3239F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("R-=4w!~V0Vo", (-361));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("900.\"at1(\thF@", 48);
      assertEquals("900.\"at1(\thF@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 4, 1009);
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceOnceIgnoreCase("Search and Replace array lengths don't match: ", "900.\"at1(\thF@", "459.3239#0.0#459.3239#459.3239#0.0#0.0");
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "900.\"at1(\thF@";
      charSequenceArray0[2] = (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.upperCase("E#t&F");
      assertEquals("E#T&F", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      charSequenceArray0[5] = (CharSequence) "E#T&F";
      String string6 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals("Search and Replace array lengths don't match: 900.\"at1(\thF@@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.E#T&F", string6);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match: 900.\"at1(\thF@@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.E#T&F";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray1 = StringUtils.split("R-=4w!~V0Vo", '#');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("900.\"at1(\thF@", stringArray0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0725()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("\r", "\r", "\r");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\r", stringArray0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0726()  throws Throwable  {
      String string0 = StringUtils.getDigits("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) "3RYoO");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("Report entries can't have blank key or value: { key=\"%s\", value=\"%s\" }", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0727()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{L8Gab?VK(x?", "\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("\r", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0728()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "\r";
      charSequenceArray0[8] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("\r", 'H', 'H');
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("\r", "\r");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("E#t&F", ";", 32);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllLowerCase(charSequenceArray0[3]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.toRootLowerCase("\r");
      assertEquals("\r", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "test-template-invocation", (char[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0729()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, 'C', 'C');
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0730()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0731()  throws Throwable  {
      String string0 = StringUtils.repeat('H', (-4));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)503;
      shortArray0[1] = (short)170;
      shortArray0[2] = (short)0;
      String string3 = StringUtils.join(shortArray0, 'H', (int) (short)503, 22);
      assertEquals("", string3);
      assertEquals(3, shortArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertArrayEquals(new short[] {(short)503, (short)170, (short)0}, shortArray0);
      
      String string4 = StringUtils.join((float[]) null, '\'', 22, (-3237));
      assertNull(string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("TrMJTIU*Hv>@#/dO<", (String) null);
      assertEquals("TrMJTIU*Hv>@#/dO<", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.join(shortArray0, 'H');
      assertEquals("503H170H0", string6);
      assertEquals(3, shortArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertArrayEquals(new short[] {(short)503, (short)170, (short)0}, shortArray0);
      
      String string7 = StringUtils.substringBetween("%j3N?a", "TrMJTIU*Hv>@#/dO<", "");
      assertNull(string7);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\'';
      boolean boolean2 = StringUtils.containsOnly(charSequenceArray0[3], charArray0);
      assertTrue(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'\''}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0732()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'C', 'x');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string1 = StringUtils.replaceEachRepeatedly("Up", stringArray0, stringArray0);
      assertEquals("Up", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "Up");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringAfter(".3N9M%vmKR-DD%^!A", 4906);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.startsWithAny("DefaultTimeZone", stringArray0);
      assertFalse(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("Nv", supplier0);
      assertEquals("Nv", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceIgnoreCase((String) null, "Search and Replace array lengths don't match: ", "8AXBcAm2h}B'}'i1hU(");
      assertNull(string4);
      
      boolean boolean3 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test0733()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[1] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[2] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[3] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[4] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      String string0 = StringUtils.replace("", "\"kTDsY[YAyA`[8h[", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[7] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[8] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      String string1 = StringUtils.prependIfMissingIgnoreCase("\"kTDsY[YAyA`[8h[", "\"kTDsY[YAyA`[8h[", charSequenceArray0);
      assertEquals("\"kTDsY[YAyA`[8h[", string1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[3]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string2 = StringUtils.overlay("\"kTDsY[YAyA`[8h[", "", 9, 3941);
      assertEquals("\"kTDsY[YA", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0734()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '^');
      assertNull(string0);
      
      String string1 = StringUtils.strip((String) null, (String) null);
      assertNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      String string2 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("", string2);
      assertEquals(1, byteArray0.length);
      assertNotNull(string2);
      assertArrayEquals(new byte[] {(byte)127}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0735()  throws Throwable  {
      String string0 = StringUtils.substringAfter("wx", "wx");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0736()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0737()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEndIgnoreCase("a*;F3f", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("a*;F3f", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "a*;F3f", 1064);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.deleteWhitespace("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2197);
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)75;
      shortArray0[3] = (short)66;
      shortArray0[4] = (short)849;
      shortArray0[5] = (short)160;
      shortArray0[6] = (short) (-3307);
      shortArray0[7] = (short)49;
      shortArray0[8] = (short)537;
      String string4 = StringUtils.join(shortArray0, '');
      assertEquals("-2197-17566849160-330749537", string4);
      assertEquals(9, shortArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new short[] {(short) (-2197), (short) (-1), (short)75, (short)66, (short)849, (short)160, (short) (-3307), (short)49, (short)537}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test0738()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "\n";
      stringArray0[4] = "";
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.upperCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.abbreviateMiddle("", "LV#[%EwbS%\"Ilo;B", 64);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.reverse("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0739()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Array element ");
      assertEquals("Array element", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0740()  throws Throwable  {
      String string0 = StringUtils.center("", 13, "");
      assertEquals("             ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0741()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i[?b9a");
      assertEquals("i[?b9a", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0742()  throws Throwable  {
      String string0 = StringUtils.chomp("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n");
      assertEquals("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n";
      charSequenceArray0[1] = (CharSequence) "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0743()  throws Throwable  {
      String string0 = StringUtils.center(" is not in the range '0' - '9'", 101, " is not in the range '0' - '9'");
      assertEquals(" is not in the range '0' - '9' is n is not in the range '0' - '9' is not in the range '0' - '9' is no", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0744()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      String string1 = StringUtils.prependIfMissingIgnoreCase(" ", "A(NXT<6PFz", charSequenceArray0);
      assertEquals(" ", string1);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " ", "A(NXT<6PFz");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0745()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "{[0-9]+}", (String) null, 118);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart((String) null, "8M`!VwI<J)*@-PkS");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("{[0-9]+}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("-1234.4836444196O3.0", "{[0-9]+}", stringArray0);
      assertEquals("{[0-9]+}-1234.4836444196O3.0", string4);
      assertEquals(1, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{[0-9]+}-1234.4836444196O3.0", (CharSequence) "-1234.4836444196O3.0", 118);
      assertEquals(8, int0);
      
      String string5 = StringUtils.right((String) null, 14);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0746()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("offset cannot be negative", "\r", (CharSequence[]) null);
      assertEquals("\roffset cannot be negative", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\roffset cannot be negative", "\r");
      assertEquals(0.68, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0747()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("L", "wy7)J4 %5|BK-");
      assertEquals("L", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("L");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {76}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0748()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.join(doubleArray0, 'O');
      assertEquals("-1234.4836444196O3.0", string0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-1234.4836444196), 3.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.getDigits("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("-1234.4836444196O3.0", "-1234.4836444196O3.0", 49);
      assertEquals("-1234.4836444196O3.0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("", 'U');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-1234.4836444196O3.0";
      stringArray0[1] = "";
      stringArray0[2] = "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      stringArray0[3] = "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "...";
      stringArray0[7] = "-1234.4836444196O3.0";
      stringArray0[8] = "\";";
      boolean boolean0 = StringUtils.containsIgnoreCase("", "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("-1234.4836444196O3.0", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.replaceOnceIgnoreCase((String) null, "Comparator should not be null.", "$PLdI\"8!eLbkXL\"");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "-1234.4836444196O3.0";
      charSequenceArray0[2] = (CharSequence) "-1234.4836444196O3.0";
      String string5 = StringUtils.CR;
      assertEquals("\r", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "-1234.4836444196O3.0";
      String string6 = StringUtils.prependIfMissing("", "-1234.4836444196O3.0", charSequenceArray0);
      assertEquals("", string6);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAlpha("-1234.4836444196O3.0");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0749()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      stringArray0[3] = "bpffo(K";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("9IMs6/W oje*ne", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("bpffo(K", 3416);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("cSv39JB_jwX4G{p", 0, 2);
      assertEquals("cS", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'u';
      charArray0[2] = '(';
      charArray0[3] = 'R';
      charArray0[4] = 'c';
      charArray0[5] = 'n';
      charArray0[6] = '2';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "9IMs6/W oje*ne", charArray0);
      assertFalse(boolean0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'g', 'u', '(', 'R', 'c', 'n', '2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0750()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The character ", "The character ", "Comparator should not be null.");
      assertEquals("Compaoataa mtp", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("Compaoataa mtp");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.mid((String) null, 3416, 3416);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test0751()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add(stream0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean3 = linkedHashSet0.add((Object) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      assertTrue(linkedHashSet0.contains(object0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      assertEquals("fU_7SZu1o7hGV]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean4 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(object0));
      
      ListIterator<Object> listIterator0 = stack0.listIterator(0);
      assertNotNull(listIterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains(object0));
      
      String string3 = StringUtils.replacePattern("fU_7SZu1o7hGV]", "fU_7SZu1o7hGV]", "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.upperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.rightPad("erkL", (-3626), 'l');
      assertEquals("erkL", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("fU_7SZu1o7hGV]");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.trimToNull("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "erkL");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      
      String string7 = StringUtils.toRootUpperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.replaceIgnoreCase("fU_7SZu1o7hGV]", "A]/Xcr3g&Y[|t0`!,}", (String) null, (-3626));
      assertEquals("fU_7SZu1o7hGV]", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      
      boolean boolean6 = StringUtils.isEmpty("FU_7SZU1O7HGV]");
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0752()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 10);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0753()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0754()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "", "Va)Ru^Yb~[bN6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceAll("Minimum abbreviation width isN%d", "uO|KKUQj}cVP", (String) null);
      assertEquals("Minimum abbreviation width isN%d", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.right("Minimum abbreviation width isN%d", 12);
      assertEquals(" width isN%d", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrap("Minimum abbreviation width isN%d", '(');
      assertEquals("(Minimum abbreviation width isN%d(", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Minimum abbreviation width isN%d");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0755()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = StringUtils.repeat("eA6;hsRAJgk67}0v,", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("eA6;hsRAJgk67}0v,", 1);
      assertEquals(",", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0756()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd(" ", " ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase(" ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf(" ", "", 3);
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test0757()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Illegal range. There's no way to get from %s to %s with a step of %s.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0758()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string2 = StringUtils.chomp("\r");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "\r";
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], charSequenceArray0[3], (-1553));
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[6]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("dd.NmC:XK<nze-^o$A", "\r", "", (-1553));
      assertEquals("dd.NmC:XK<nze-^o$A", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string4 = StringUtils.removeEndIgnoreCase(" ", "\r");
      assertEquals(" ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((List<?>) null, '!', (-1553), (-311));
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test0759()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0760()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.repeat('\"', (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0761()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0762()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.trim("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace("zD\"FtF", "{!#`&dyF~ZTr;dw", "org.junitpioneer.jupiter.params.Range");
      assertEquals("zD\"FtF", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.Range";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("zD\"FtF", "}>", 13);
      assertEquals("zD\"FtF", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "E#t&F";
      stringArray0[1] = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[2] = "c4}QkvZ2Y_33','Z%";
      String string3 = StringUtils.replaceEach("zD\"FtF", stringArray0, stringArray0);
      assertEquals("zD\"FtF", string3);
      assertEquals(4, stringArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat("zD\"FtF", (-992));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isNumeric("}>");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0763()  throws Throwable  {
      String string0 = StringUtils.unwrap(", Length: 0", '!');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0764()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1y^";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1y^", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("$YBAZ@ 7V0`\"", '5');
      assertEquals("$YBAZ@ 7V0`\"", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsIgnoreCase("...", "oy<1y^");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substringAfter("QW.HB.5qK`Z", 11);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.difference("Su", "Cannot clear and set the following entries at the same time: ");
      assertEquals("Cannot clear and set the following entries at the same time: ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string6);
      assertEquals(4, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot clear and set the following entries at the same time: ", "C;1h5[2");
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("", (String) null, false);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "g0jShM}UM+zB\"F", true);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0765()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, 29);
      assertNull(string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 29;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 29;
      doubleArray0[3] = (double) 29;
      doubleArray0[8] = (double) 29;
      doubleArray0[5] = (double) 29;
      doubleArray0[6] = (double) 29;
      doubleArray0[7] = (double) 29;
      doubleArray0[8] = (double) 29;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertEquals("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0", string1);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0, 29.0, 0.0, 29.0, 29.0, 29.0, 29.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.getDigits("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0");
      assertEquals("29029029029000290290290290", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("", "Backup", 45);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.unwrap("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 'p');
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Su", "...");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringAfter("E#t&F", 256);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.difference("29029029029000290290290290", "...");
      assertEquals("...", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      String[] stringArray0 = new String[0];
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string7);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("...", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.compareIgnoreCase("29029029029000290290290290", "G%d]UBw,", true);
      assertEquals((-53), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test0766()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "g0jShM}UM+zB\"F";
      String string0 = StringUtils.replaceOnceIgnoreCase("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", stringArray0[1], "8M`!VwI<J)*@-PkS");
      assertEquals("A,rnU;pVK16.0W16.0W16.0W16.0W16.0W0.0", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("122.0,122.0,1.0,1.0,1.0,122.0,0.0*IS*yHolc{GGaa,6OT", "Strings must not be null");
      assertEquals("122.0,122.0,1.0,1.0,1.0,122.0,0.0*IS*yHolc{GGaa,6OT", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat((String) null, (-1583));
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "122.0,122.0,1.0,1.0,1.0,122.0,0.0*IS*yHolc{GGaa,6OT", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(4, stringArray0.length);
      
      int int1 = StringUtils.compare("?M&E4R'7X9ES{{3lb", (String) null);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.join((float[]) null, 'Q', 779, (-1583));
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("g0jShM}UM+zB\"F", "ZUiO");
      assertEquals("g0jShM}UM+zB\"F", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0767()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0768()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("]K|8Q%g&K>J<F", (String) null);
      assertEquals("]K|8Q%g&K>J<F", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("', is neither of type Map.Entry nor an Array");
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAlphanumeric("', is neither of type Map.Entry nor an Array");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'v';
      charArray0[1] = 'g';
      charArray0[2] = '\\';
      charArray0[3] = '$';
      charArray0[4] = 'A';
      String string3 = StringUtils.valueOf(charArray0);
      assertEquals("vg\\$A", string3);
      assertEquals(5, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'v', 'g', '\\', '$', 'A'}, charArray0);
      
      boolean boolean1 = StringUtils.containsWhitespace("]K|8Q%g&K>J<F");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "g0jSh}UM+zB\"F", (CharSequence) "', is neither of type Map.Entry nor an Array");
      assertEquals(42, int0);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean2);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0769()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      String string0 = "arameter of type %s.";
      try { 
        StringUtils.toString(byteArray0, "arameter of type %s.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0770()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, 29);
      assertNull(string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 29;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) 29;
      doubleArray0[3] = (double) 29;
      doubleArray0[8] = (double) 29;
      doubleArray0[5] = (double) 29;
      doubleArray0[6] = (double) 29;
      doubleArray0[7] = (double) 29;
      doubleArray0[8] = (double) 29;
      String string1 = StringUtils.join(doubleArray0, 'p');
      assertEquals("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0", string1);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string1);
      assertArrayEquals(new double[] {29.0, 29.0, 29.0, 29.0, 0.0, 29.0, 29.0, 29.0, 29.0}, doubleArray0, 0.01);
      
      String string2 = StringUtils.getDigits("29.0p29.0p29.0p29.0p0.0p29.0p29.0p29.0p29.0");
      assertEquals("29029029029000290290290290", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.abbreviate("B", "Backup", 45);
      assertEquals("B", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("", string4);
      assertEquals(0, byteArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0771()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("EdN!");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0772()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("\r|6~{^MalYa^]", "\r|6~{^MalYa^]", "\r|6~{^MalYa^]");
      assertEquals("\r|6~{^MalYa^]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0773()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      String string0 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce(":FT*}$zQ(_cbi", "3RYo", "3RYo");
      assertEquals(":FT*}$zQ(_cbi", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) ":FT*}$zQ(_cbi", (CharSequence) ":FT*}$zQ(_cbi");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)24;
      try { 
        StringUtils.toString(byteArray0, ":FT*}$zQ(_cbi");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0774()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("Expected exception %s was not thrown.", (-2343), 26);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0775()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1558));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0776()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0777()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0778()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "D");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0779()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("K");
      assertEquals("K", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(" ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("S/YaQ<yH m*Lhh.))", " ");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rotate("\r", (-2212));
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0780()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", "2{1o[9AvM;");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0781()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.0F;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("g]\"<]#y6r", "g]\"<]#y6r", (-1069));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("u+fa6v~n", 26, 'V');
      assertEquals("VVVVVVVVVu+fa6v~nVVVVVVVVV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase("u+fa6v~n", (String) null, "bW", 118);
      assertEquals("u+fa6v~n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("g]\"<]#y6r", "u+fa6v~n");
      assertEquals("g]\"<]#y6r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("bW");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "{[0-9]+}", (char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.reverseDelimited("bW", 'V');
      assertEquals("bW", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0782()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw", "d", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0783()  throws Throwable  {
      String string0 = "],r|be&^W`4[[";
      // Undeclared exception!
      try { 
        StringUtils.lowerCase("],r|be&^W`4[[", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test0784()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", "DefaultLocale");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0785()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-106L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      String string1 = StringUtils.join(longArray0, 'Y');
      assertEquals("0Y-1Y-106Y0Y-1Y0", string1);
      assertEquals(6, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, (-1L), (-106L), 0L, (-1L), 0L}, longArray0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, 'h');
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string3 = StringUtils.replace("+<k5$Sol:+7x.^6FL", "-ZqjW?", "-ZqjW?", 5);
      assertEquals("+<k5$Sol:+7x.^6FL", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.left("", 5);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringAfterLast("v#^XQT", "");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("+<k5$Sol:+7x.^6FL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0786()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "{!#`&dyF~ZTr;dw";
      stringArray0[2] = "bpffo(K";
      stringArray0[4] = "Minimum abbreviation width with offset is %d";
      stringArray0[5] = "{!#`&dyF~ZTr;dw";
      stringArray0[6] = "Minimum abbreviation width with offset is %d";
      stringArray0[7] = "bpffo(K";
      stringArray0[8] = "bpffo(K";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("{!#`&dyF~ZTr;dw", string1);
      assertEquals(9, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      charArray0[4] = 'l';
      charArray0[5] = 'l';
      charArray0[6] = 'l';
      charArray0[7] = 'l';
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertFalse(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0787()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.join(doubleArray0, '7');
      assertEquals("-1304.071.57-1304.07-1304.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-1304.0), 1.5, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "-1304.071.57-1304.07-1304.0";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "52^eC!>,Q'`gK:";
      String string2 = StringUtils.swapCase("Search and Replace array lengths don't match: ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissing("52^eC!>,Q'`gK:", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("52^eC!>,Q'`gK:", string3);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.capitalize("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int0 = StringUtils.indexOf((CharSequence) ", ", (CharSequence) "52^eC!>,Q'`gK:");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfterLast("v#^XQT", "Search and Replace array lengths don't match: ");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.stripStart("52^eC!>,Q'`gK:", "3g`3*&YwL/X D");
      assertEquals("52^eC!>,Q'`gK:", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1304);
      floatArray0[2] = (float) (-1304);
      floatArray0[3] = (float) (-1304);
      String string7 = StringUtils.join(floatArray0, '7');
      assertEquals("-1.07-1304.07-1304.07-1304.0", string7);
      assertEquals(4, floatArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertArrayEquals(new float[] {(-1.0F), (-1304.0F), (-1304.0F), (-1304.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0788()  throws Throwable  {
      String string0 = StringUtils.capitalize("org.junitpioneer.vintage.ExpectedEceptionExtension");
      assertEquals("Org.junitpioneer.vintage.ExpectedEceptionExtension", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0789()  throws Throwable  {
      String string0 = StringUtils.capitalize(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0790()  throws Throwable  {
      String[] stringArray0 = new String[3];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) '7';
      doubleArray0[1] = (double) '7';
      doubleArray0[2] = (double) '7';
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) '7';
      doubleArray0[7] = (-327.82383441897);
      doubleArray0[8] = 1.5;
      String string0 = StringUtils.join(doubleArray0, '?');
      assertEquals("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", string0);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {55.0, 55.0, 55.0, 1.5, 1.5, 0.0, 55.0, (-327.82383441897), 1.5}, doubleArray0, 0.01);
      
      String string1 = StringUtils.swapCase("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5");
      assertEquals("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissing("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", stringArray0);
      assertEquals("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", string2);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.capitalize("line.separator");
      assertEquals("Line.separator", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", (CharSequence) "Line.separator");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfterLast("55.0?55.0?55.0?1.5?1.5?0.0?55.0?-327.82383441897?1.5", "gg");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.stripStart("Locale must not be null", (String) null);
      assertEquals("Locale must not be null", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.join((float[]) null, 'S');
      assertNull(string6);
      
      String string7 = StringUtils.stripToEmpty("...");
      assertEquals("...", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0791()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("$I", stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0792()  throws Throwable  {
      String string0 = StringUtils.removeEnd("cbewB", "cbewB");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("cbewB", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0793()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0794()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 10, 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 10, 321);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(10, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      String string2 = StringUtils.join((List<?>) null, "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 3379, 0);
      assertNull(string2);
      
      String string3 = StringUtils.remove((String) null, '#');
      assertNull(string3);
      
      String string4 = StringUtils.repeat("?", 27);
      assertEquals("???????????????????????????", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.upperCase("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("@STDIO DEFINED NO INPUT, SO SYSTEM.IN IS STILL IN PLACE AND NO STDIN PARAMETER CAN BE PROVIDED. IF YOU WANT TO DEFINE EMPTY INPUT, USE `@STDIO(\"\")`.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.replaceOnceIgnoreCase(")(EAGWztXVsK6zfF8BP", "@STDIO DEFINED NO INPUT, SO SYSTEM.IN IS STILL IN PLACE AND NO STDIN PARAMETER CAN BE PROVIDED. IF YOU WANT TO DEFINE EMPTY INPUT, USE `@STDIO(\"\")`.", "!b?E`%xnj;bW1");
      assertEquals(")(EAGWztXVsK6zfF8BP", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "???????????????????????????";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("?", "gg", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0795()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("' matches '", "+6");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceAll("blank_blank_blank_2014", "16.0W16.0W16.0W16.0W16.0W0.0", "blank_blank_blank_2014");
      assertEquals("blank_blank_blank_2014", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "blank_blank_blank_2014";
      charSequenceArray0[3] = (CharSequence) "16.0W16.0W16.0W16.0W16.0W0.0";
      charSequenceArray0[4] = (CharSequence) "16.0W16.0W16.0W16.0W16.0W0.0";
      charSequenceArray0[5] = (CharSequence) "...";
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.wrapIfMissing("Locale must not be null", '7');
      assertEquals("7Locale must not be null7", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.replaceChars("blank_blank_blank_2014", "", "' matches '");
      assertEquals("blank_blank_blank_2014", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("...", "blank_blank_blank_2014", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0796()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      String string0 = StringUtils.swapCase("c/p}7x]R/)'\"<z(1D");
      assertEquals("C/P}7X]r/)'\"<Z(1d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-4));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "g0jShM}UM+zB\"F";
      charSequenceArray0[1] = (CharSequence) "C/P}7X]r/)'\"<Z(1d";
      charSequenceArray0[2] = (CharSequence) "c/p}7x]R/)'\"<z(1D";
      charSequenceArray0[3] = (CharSequence) "bpffo(K";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "bpffo(K";
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissing("c/p}7x]R/)'\"<z(1D", "bpffo(K", charSequenceArray0);
      assertEquals("c/p}7x]R/)'\"<z(1D", string2);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("g0jShM}UM+zB\"F", "8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange");
      assertEquals("g0jShM}UM+zB\"F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "g0jShM}UM+zB\"F", (CharSequence) "g0jShM}UM+zB\"F");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[6], "h,>jr");
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "oy<1Sy^V2n", (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("oy<1Sy^V2n", string4);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0797()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0798()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'C', 'x');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "Up");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isNumericSpace("Up");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isNumeric("Up");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0799()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0800()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals(33, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, charSequenceArray0[3], 33);
      assertEquals((-1), int2);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      linkedList0.addFirst(object0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      String string2 = StringUtils.join((List<?>) linkedList0, '+', 33, (-2282));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(object0));
      assertFalse(linkedList0.contains((-2282)));
      
      String[] stringArray0 = StringUtils.substringsBetween("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "", "offset cannot be negative");
      assertNull(stringArray0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "");
      assertEquals(91, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test0801()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0802()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals(33, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, charSequenceArray0[3], 33);
      assertEquals((-1), int2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("]hJ,r:+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("Illegal range. Equal from and to will produce an empty range.", "u%{j`");
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`."));
      
      boolean boolean1 = linkedList0.add((Object) "u%{j`");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`."));
      assertTrue(linkedList0.contains("u%{j`"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      linkedList0.addFirst(object0);
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`."));
      assertTrue(linkedList0.contains(object0));
      
      String string2 = StringUtils.join((List<?>) linkedList0, '+', 33, (-2282));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(2, linkedList0.size());
      assertFalse(linkedList0.contains("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`."));
      assertTrue(linkedList0.contains(object0));
      
      String[] stringArray1 = StringUtils.substringsBetween("{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "", "offset cannot be negative");
      assertNull(stringArray1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "Illegal range. Equal from and to will produce an empty range.", (CharSequence) "");
      assertEquals(61, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0803()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      int int0 = StringUtils.indexOfAny((CharSequence) " vs ", " vs ");
      assertEquals(0, int0);
      
      String string0 = StringUtils.join((double[]) null, 'l', 3447, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0804()  throws Throwable  {
      String string0 = StringUtils.unwrap(">Aborting to protect against StackOverflowError - output of one loop is the input of another", "Object varargs must not be null");
      assertEquals(">Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap(">Aborting to protect against StackOverflowError - output of one loop is the input of another", "Object varargs must not be null");
      assertEquals(">Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha(">Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0805()  throws Throwable  {
      String string0 = StringUtils.substring("_q'&;>C-:3nStrings must not be nullStrings must not be null", (-2328));
      assertEquals("_q'&;>C-:3nStrings must not be nullStrings must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("_q'&;>C-:3nStrings must not be nullStrings must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0806()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "{[0-9]+}", (String) null, 118);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart((String) null, "8M`!VwI<J)*@-PkS");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("{[0-9]+}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", (char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.reverseDelimited("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV", 'V');
      assertEquals("<GZk3", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "This extension uses reflection to mutate JDK-internal state, which is fragile. Check the Javadoc or documentation for more details.";
      stringArray1[1] = "VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV<GZk3VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV";
      stringArray1[2] = null;
      stringArray1[3] = "<GZk3";
      String string4 = StringUtils.replaceEach((String) null, stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNull(string4);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int[] intArray0 = new int[0];
      String string5 = StringUtils.join(intArray0, '<');
      assertEquals("", string5);
      assertEquals(0, intArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new int[] {}, intArray0);
      
      String string6 = StringUtils.abbreviate("", 1174);
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test0807()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\r", "\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(1, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "\r", (-1374));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0808()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0809()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Don't clear/set the same entry more than once.", " ");
      assertEquals(5, int0);
      
      String string0 = StringUtils.mid((String) null, 5, 5);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0810()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0811()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) "Stringsmustnotbenull", 1279);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0812()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0813()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("-,T[)K897;Rp#P_AD ", "-,T[)K897;Rp#P_AD ", "-,T[)K897;Rp#P_AD ");
      assertEquals("-,T[)K897;Rp#P_AD ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "y+", (CharSequence) "-,T[)K897;Rp#P_AD ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0814()  throws Throwable  {
      String string0 = StringUtils.abbreviate("test-template-invocation", ",qyApuZ:5", 2804, 57);
      assertEquals("test-template-invocation", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "test-template-invocation", charArray0);
      assertEquals(0, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'q'}, charArray0);
      
      String string1 = StringUtils.toRootLowerCase("test-template-invocation");
      assertEquals("test-template-invocation", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "test-template-invocation", (CharSequence) "test-template-invocation");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0815()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      boolean boolean2 = linkedHashSet0.add(locale_FilteringMode0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean3 = linkedHashSet0.add((Object) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      assertEquals("fU_7SZu1o7hGV]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "P27td#b<8");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean4 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("fU_7SZu1o7hGV]"));
      
      String string3 = StringUtils.stripToNull("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "java.lang.Object@78fa9208fU_7SZu1o7hGV]AUTOSELECT_FILTERINGfU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0816()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "S|A~uIl", (CharSequence) "S|A~uIl");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0817()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0818()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0819()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", (String) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0820()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      stringArray0[3] = "bpffo(K";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("oy<1Sy^V2n", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("H+ZFtk ", "]K|8Q%g&K>J<F");
      assertEquals("H+ZFtk ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("mHY{(7k7hC&OprhGT", 13);
      assertEquals("mHY{(7k7hC&OprhGT", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase("9IMs6/W oje*ne");
      assertTrue(boolean0);
      
      String string3 = StringUtils.strip("...");
      assertEquals("...", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumeric("9IMs6/W oje*ne");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0821()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase(".A-1ZjLylvBDex");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0822()  throws Throwable  {
      String string0 = StringUtils.replaceChars("[O#vWyxm|]I<WuCNFJ2", "[O#vWyxm|]I<WuCNFJ2", "acM,D'&6-(|-1_?H");
      assertEquals("acM,D'&6-(|-D_?H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0823()  throws Throwable  {
      String string0 = StringUtils.capitalize("maUWith Dannot be nega5ive");
      assertEquals("MaUWith Dannot be nega5ive", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("maUWith Dannot be nega5ive", "MaUWith Dannot be nega5ive", "MaUWith Dannot be nega5ive");
      assertEquals("maUWith Dannot be nega5ive", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0824()  throws Throwable  {
      String string0 = StringUtils.chop("3J/0R~;vM`");
      assertEquals("3J/0R~;vM", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "3J/0R~;vM`", 0, 0);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("Object varargs must not be null", "maxWith cannot be negative");
      assertEquals("Object varargs must not be null", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.rightPad("3J/0R~;vM", 65536, (String) null);
  }

  @Test(timeout = 4000)
  public void test0825()  throws Throwable  {
      String string0 = StringUtils.rightPad("/gr", (-570), "/gr");
      assertEquals("/gr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0826()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 10, 10);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 10, 321);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      String string2 = StringUtils.join((List<?>) null, "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 3379, 0);
      assertNull(string2);
      
      String string3 = StringUtils.remove((String) null, '#');
      assertNull(string3);
      
      String string4 = StringUtils.repeat("?", 27);
      assertEquals("???????????????????????????", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.upperCase("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("@STDIO DEFINED NO INPUT, SO SYSTEM.IN IS STILL IN PLACE AND NO STDIN PARAMETER CAN BE PROVIDED. IF YOU WANT TO DEFINE EMPTY INPUT, USE `@STDIO(\"\")`.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.replaceOnceIgnoreCase(")(EAGWztXVsK6zfF8BP", "@STDIO DEFINED NO INPUT, SO SYSTEM.IN IS STILL IN PLACE AND NO STDIN PARAMETER CAN BE PROVIDED. IF YOU WANT TO DEFINE EMPTY INPUT, USE `@STDIO(\"\")`.", "!b?E`%xnj;bW1");
      assertEquals(")(EAGWztXVsK6zfF8BP", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "???????????????????????????";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int2);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string7 = StringUtils.rightPad("|\"b1oEp6dKN", (-890), "org.junitpioneer.jupiter.params.Range");
      assertEquals("|\"b1oEp6dKN", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.replacePattern("|\"b1oEp6dKN", (String) null, (String) null);
      assertEquals("|\"b1oEp6dKN", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      
      String string9 = StringUtils.replaceChars("|\"b1oEp6dKN", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "VFiO?");
      assertEquals("|1E6OKN", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      
      String string10 = StringUtils.join((long[]) null, '#', 115, 115);
      assertNull(string10);
      
      boolean boolean0 = StringUtils.endsWith(charSequenceArray0[1], "@STDIO DEFINED NO INPUT, SO SYSTEM.IN IS STILL IN PLACE AND NO STDIN PARAMETER CAN BE PROVIDED. IF YOU WANT TO DEFINE EMPTY INPUT, USE `@STDIO(\"\")`.");
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0827()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(")>e Krhu=;9?c", ")>e Krhu=;9?c", ")>e Krhu=;9?c");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'
         // )>e Krhu=;9?c
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test0828()  throws Throwable  {
      String string0 = StringUtils.removeEnd(";ara9_bhMyCf(V;ara9_bhMyCf(V", "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals(";ara9_bhMyCf(V;ara9_bhMyCf(V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0829()  throws Throwable  {
      String string0 = StringUtils.chomp("Ex27jM*'}x", "Ex27jM*'}x");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0830()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("16.0W16.0W16.0W16.0W16.0W0.0A,rnU;pVK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0831()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("*S8uI*lY+(gSG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0832()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0833()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, 262, 262);
      assertEquals("", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      
      String string2 = locale1.getDisplayVariant(locale0);
      assertEquals("", string2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string2);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertSame(locale0, locale1);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      String string3 = StringUtils.lowerCase("*ifdfX?X", locale1);
      assertEquals("*ifdfx?x", string3);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      
      String string4 = StringUtils.uncapitalize("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.split("", "Arguments cannot both be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.defaultIfBlank("", "");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0834()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.junitpioneer.jupiter.StdIoExtension", 'C', 'C');
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("org.junitpioneer.jupiter.StdIoExtension", "[TsTuInUF'");
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.mid("org.junitpioneer.jupiter.StdIoExtension", 0, 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rotate("", 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripStart("Minimum abbreviation width with offset is %d", ".&|y}>`;DnF}B(");
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0835()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("Don't clear/set the same entry more than once.", "Don't clear/set the same entry more than once.", 76);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0836()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("UN[ ", "gg");
      assertEquals("UN[ ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0837()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 112;
      String string0 = StringUtils.join(intArray0, '\\');
      assertEquals("112", string0);
      assertEquals(1, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {112}, intArray0);
      
      boolean boolean0 = StringUtils.isNumeric("112");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      String string1 = StringUtils.join(charArray0, '\\', 364, 364);
      assertEquals("", string1);
      assertEquals(5, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', '\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0838()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0839()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (String) null, 29);
      assertNull(string0);
      
      String string1 = StringUtils.trim("\n");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("", "dk{Vl{s", "c4}QkvZ2Y_33','Z%");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "dk{Vl{s";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("D_>.>o.,@Y'L5EQjc*l", "", (-992));
      assertEquals("D_>.>o.,@Y'L5EQjc*l", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Don't clear/set the same entry more than once.";
      stringArray0[1] = "E#t&F";
      stringArray0[2] = "Don't clear/set the same entry more than once.";
      String string4 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.repeat("Strings must not be null", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0840()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, "3RYoO");
      assertNull(string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-2035));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0841()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'I');
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray1);
      
      String string3 = StringUtils.center("", 223);
      assertEquals("                                                                                                                                                                                                                               ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.center("", (-1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.chop("Locale must not be null");
      assertEquals("Locale must not be nul", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0842()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.equalsAny(".<8YZmmZ,.4i=M2YU", stringArray0);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0843()  throws Throwable  {
      String string0 = StringUtils.difference("kW ~/|H#NxXct", (String) null);
      assertEquals("kW ~/|H#NxXct", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0844()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.containsIgnoreCase(stringArray0[1], stringArray0[1]);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.substringBeforeLast(";1`t8&)H9", ";1`t8&)H9");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny(stringArray0[1], stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("org.junitpioneer.jupiter.StdIoExtension");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0845()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0846()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The character ", "", "Comparator should not be null.");
      assertEquals("The character ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("The character ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1697.8F);
      floatArray0[1] = (-158.28F);
      String string1 = StringUtils.join(floatArray0, '{', (-2882), (-2882));
      assertEquals("", string1);
      assertEquals(2, floatArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {(-1697.8F), (-158.28F)}, floatArray0, 0.01F);
      
      String string2 = StringUtils.removeStartIgnoreCase("The character ", "The character ");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The character ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("The character ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1845;
      shortArray0[2] = (short)160;
      String string3 = StringUtils.substringAfter("UhHx=*7`!7EW(%F2", 7);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.difference("CartesianProductTest can only take exactly one type of arguments source", (String) null);
      assertEquals("CartesianProductTest can only take exactly one type of arguments source", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("The", string5);
      assertEquals(4, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "CartesianProductTest can only take exactly one type of arguments source");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase((CharSequence) null, "The");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.defaultIfEmpty("Strings must not be null", "$l]K,GrV.Oo+Y");
      assertEquals("Strings must not be null", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0847()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("[LhkZs4", "[LhkZs4");
      assertEquals("[LhkZs4", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0848()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      stringArray0[3] = "bpffo(K";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("oy<1Sy^V2n", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'l';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "9IMs6/W oje*ne", charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'l'}, charArray0);
      
      String string1 = StringUtils.removeStartIgnoreCase("x", "bpffo(K");
      assertEquals("x", string1);
  }

  @Test(timeout = 4000)
  public void test0849()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MAX_VALUE, 4209);
      assertEquals("", string1);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      String string2 = StringUtils.center("", (-846), (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.upperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceOnceIgnoreCase("...", "", "%lx(");
      assertEquals("...", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(6, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", Integer.MAX_VALUE, 4209);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.remove(" annotation, but there were ", "");
      assertEquals(" annotation, but there were ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string6 = StringUtils.join((Iterable<?>) serviceLoader0, '*');
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
  }

  @Test(timeout = 4000)
  public void test0850()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, 'W');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains('W'));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0851()  throws Throwable  {
      String string0 = StringUtils.chomp("Displayname ");
      assertEquals("Displayname ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((int[]) null, 'u', (-1), 593);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test0852()  throws Throwable  {
      String string0 = "[`~d.4v'Q6mto)Bj";
      String string1 = StringUtils.join((int[]) null, '&', 2208, 0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 1889, 696);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        Charset.forName("[`~d.4v'Q6mto)Bj");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [`~d.4v'Q6mto)Bj
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test0853()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("K}*,mojE[bz5", (Supplier<String>) null);
      assertEquals("K}*,mojE[bz5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0854()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", 639);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("DKpa^-ZUd97P");
      assertEquals("DKpa^-ZUd97P", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "DKpa^-ZUd97P");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "%|{j]<3iP", "%|{j]<3iP");
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "v<In'#EsieV3w7BT", (Supplier<CharSequence>) null);
      assertEquals("v<In'#EsieV3w7BT", charSequence0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "v<In'#EsieV3w7BT";
      charSequenceArray0[1] = (CharSequence) "-qtzCCnZLZOgm:*Q<";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "v<In'#EsieV3w7BT";
      String string4 = StringUtils.join(objectArray0, '%');
      assertEquals("v<In'#EsieV3w7BT", string4);
      assertEquals(1, objectArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("org.junitpioneer.jupiter.params.ShortRange", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("-qtzCCnZLZOgm:*Q<", "dC", "...");
      assertEquals("-qtzCCnZLZOgm:*Q<", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0855()  throws Throwable  {
      String string0 = StringUtils.abbreviate("V(T|:fPq4NZjR']LD~", "V(T|:fPq4NZjR']LD~", (-3551), 25);
      assertEquals("V(T|:fPq4NZjR']LD~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0856()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '9', 1110, 1110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0857()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("mtJlUzU^8y#n7t?|", "x_!%i!kS<Xs@tN_AO", (String) null);
      assertEquals("mtJlUzU^8y#n7t?|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0858()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'U');
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU<GZk3UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase((String) null, "{[0-9]+}", (String) null, 100);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart((String) null, "8M`!VwI<J)*@-PkS");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("{[0-9]+}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{[0-9]+}", "No instructins to disable", 2375);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      boolean boolean2 = StringUtils.isAlphanumeric("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU<GZk3UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.toRootUpperCase("8M`!VwI<J)*@-PkS");
      assertEquals("8M`!VWI<J)*@-PKS", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase((CharSequence) null, "{[0-9]+}");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string4 = StringUtils.upperCase("E=19-k[?o3:a|");
      assertEquals("E=19-K[?O3:A|", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray1.length);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string5 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", ".:OmyaxdPEL", (-1));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.reverse((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test0859()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", ";", 32);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[7]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase(charSequenceArray0[8], charSequenceArray0[7]);
      assertTrue(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string4 = StringUtils.upperCase("test-template-invocation");
      assertEquals("TEST-TEMPLATE-INVOCATION", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.abbreviateMiddle("E#t&F", "TEST-TEMPLATE-INVOCATION", 0);
      assertEquals("E#t&F", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.reverse("test-template-invocation");
      assertEquals("noitacovni-etalpmet-tset", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0860()  throws Throwable  {
      String string0 = StringUtils.reverse("maxWith cannot be negative");
      assertEquals("evitagen eb tonnac htiWxam", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0861()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.join(doubleArray0, 'O');
      assertEquals("-1234.4836444196O3.0", string0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-1234.4836444196), 3.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.getDigits("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("-1234.4836444196O3.0", "-1234.4836444196O3.0", 49);
      assertEquals("-1234.4836444196O3.0", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("", 'U');
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-1234.4836444196O3.0";
      stringArray0[1] = "";
      stringArray0[2] = "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      stringArray0[3] = "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "...";
      stringArray0[7] = "-1234.4836444196O3.0";
      stringArray0[8] = "\";";
      String string4 = StringUtils.replaceEachRepeatedly("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", stringArray0, stringArray0);
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string4);
      assertEquals(9, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringAfter((String) null, 49);
      assertNull(string5);
      
      String string6 = StringUtils.difference("-1234.4836444196O3.0", "Threshold must not be negative");
      assertEquals("Threshold must not be negative", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("-1234.4836444196O3.0", string7);
      assertEquals(9, stringArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\";", "Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0862()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "F$,]=*{eheoQ}p^";
      boolean boolean0 = StringUtils.startsWithAny("F$,]=*{eheoQ}p^", stringArray0);
      assertTrue(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0863()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("\r");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\r", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0864()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 3666);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0865()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'u';
      charArray0[1] = '}';
      charArray0[2] = '`';
      charArray0[3] = 'i';
      charArray0[4] = 'a';
      String string0 = StringUtils.join(charArray0, 'i');
      assertEquals("\u0000i}i`iiia", string0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'\u0000', '}', '`', 'i', 'a'}, charArray0);
      
      int int0 = StringUtils.compare("\u0000i}i`iiia", "Y", true);
      assertEquals((-89), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Y", (CharSequence) "\u0000i}i`iiia", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Y", 0, 921);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\u0000i}i`iiia";
      charSequenceArray0[1] = (CharSequence) "\u0000i}i`iiia";
      charSequenceArray0[2] = (CharSequence) "\u0000i}i`iiia";
      boolean boolean0 = StringUtils.equalsAny("\u0000i}i`iiia", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("\"Js", "\"Js", "...");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0866()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 459.3239F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("459.3239#0.0#459.3239#459.3239#0.0#0.0", string0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {459.3239F, 0.0F, 459.3239F, 459.3239F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("R-=4w!~V0Vo", (-361));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("900.\"at1(\thF@", 48);
      assertEquals("900.\"at1(\thF@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("459.3239#0.0#459.3239#459.3239#0.0#0.0");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("900.\"at1(\thF@", "900.\"at1(\thF@", false);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'C';
      charArray0[2] = '#';
      charArray0[3] = '#';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '#';
      String string3 = StringUtils.join(charArray0, 'C');
      assertEquals("#CCC#C#C#C#C#", string3);
      assertEquals(7, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'#', 'C', '#', '#', '#', '#', '#'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0867()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("3RYo", ';');
      assertEquals(";3RYo;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0868()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "\"{$*$!0WvFI)p>z5S<@\"{$*$!0WvFI)p>z5S<@lH", (-46), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -46
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0869()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, "", 0, (-1759));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = ';';
      charArray0[3] = 'i';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'C', 'C', ';', 'i'}, charArray0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList1.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0));
      assertTrue(linkedList1.contains(object0));
      
      ListIterator<Object> listIterator0 = linkedList1.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList1.contains(0));
      assertTrue(linkedList1.contains(object0));
      
      boolean boolean1 = linkedList1.add((Object) listIterator0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList1.contains(0));
      assertTrue(linkedList1.contains(object0));
      
      String string1 = StringUtils.stripAccents("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "I!aVj*?DXg", (-1759), 1370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1759
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0870()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("iB,-Cf|=Isp5Nbgb");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("iB,-Cf|=Isp5Nbgb", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "iB,-Cf|=Isp5Nbgb", 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0871()  throws Throwable  {
      String string0 = StringUtils.center("$XA~x0(", (-3362), "$XA~x0(");
      assertEquals("$XA~x0(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("$XA~x0(");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "$XA~x0(", (-1675));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "$XA~x0(", (CharSequence) "$XA~x0(", 726);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.removeEndIgnoreCase("$XA~x0(", "$XA~x0(");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "$XA~x0(";
      objectArray0[1] = (Object) "$XA~x0(";
      objectArray0[2] = (Object) "$XA~x0(";
      objectArray0[3] = (Object) "$XA~x0(";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "$XA~x0(";
      objectArray0[6] = (Object) "$XA~x0(";
      objectArray0[7] = (Object) "$XA~x0(";
      objectArray0[8] = (Object) "";
      String string2 = StringUtils.join(objectArray0, '(', 2476, 2101);
      assertEquals("", string2);
      assertEquals(9, objectArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0872()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3714);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("maWith cannot be negatie", 3714, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("ML]L\"(?$i3.9#", "No instructins to disablefU_7SZu1o7hGV]");
      assertEquals("ML]L\"(?$i3.9#", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.wrap("?", 'T');
      assertEquals("T?T", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("?");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "ML]L\"(?$i3.9#", (CharSequence) "\n");
      assertEquals(13, int0);
      
      boolean boolean1 = StringUtils.isEmpty("No instructins to disablefU_7SZu1o7hGV]");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.capitalize(string0);
      assertNotNull(string5);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("ML]L\"(?$i3.9#");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string6 = StringUtils.chomp("\n");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0873()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0874()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "b%?Vo@@L&#v]z&e(6%";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("b%?Vo@@L&#v]z&e(6%");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("b", string0);
      assertEquals(14, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty("offset cannot be negative");
      assertEquals("offset cannot be negative", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'j', (-2667), (-2667));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test0875()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("A(NXT<6PFz");
      assertEquals("A(NXT<6PFZ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "A(NXT<6PFZ";
      charSequenceArray0[1] = (CharSequence) "A(NXT<6PFz";
      String string2 = StringUtils.chomp("", "A(NXT<6PFz");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "A(NXT<6PFz";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "A(NXT<6PFz";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.wrapIfMissing(" ", ' ');
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0876()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd(" ", " ");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string2 = StringUtils.chomp("\r\n");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0877()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("[EOJa6@OvG", 'y');
      assertEquals("y[EOJa6@OvGy", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0878()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "org.junitpioneer.jupiter.params.ShortRange");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("", "", (-1333));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:*Q<");
      assertEquals("v<In'#EsieV3w7BT", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Don't clear/set the same entry more than once.";
      stringArray0[1] = "v<In'#EsieV3w7BT";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "v<In'#EsieV3w7BT";
      stringArray0[5] = "-qtzCCnZLZOgm:*Q<";
      String string6 = StringUtils.replaceEach("Don't clear/set the same entry more than once.", stringArray0, stringArray0);
      assertEquals("Don't clear/set the same entry more than once.", string6);
      assertEquals(6, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.repeat("...", 2120);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test0879()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "' contains '";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("' contains '", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0880()  throws Throwable  {
      String string0 = StringUtils.repeat("w2;&YP", 65);
      assertEquals("w2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YPw2;&YP", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0881()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, 262, 262);
      assertEquals("", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 262;
      longArray0[1] = (long) 262;
      longArray0[2] = (long) 262;
      longArray0[3] = (long) 262;
      longArray0[4] = (long) 262;
      longArray0[5] = (long) 262;
      String string2 = StringUtils.replace((String) null, "-qtzCCnZLZOgm:*Q<", "v<In'#EsieV3w7BT");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "v<In'#EsieV3w7BT";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.abbreviateMiddle("v&", "maxWith cannot be negative", 0);
      assertEquals("v&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0882()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, (String) null, 99, 99);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0883()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "F$,]=*{eheoQ}p^";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0884()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0885()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Don't clear/set the same entry more than once.", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0886()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("9rray elemext<", "9rray elemext<", "9rray elemext<");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0887()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString(string0, "ExceptionWasThrown");
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("kS-E712u_O5Z", string1, "{");
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceAll((String) null, " l_", "?");
      assertNull(string2);
      
      String string3 = StringUtils.truncate("", 7);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0888()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '}';
      charArray0[2] = '`';
      charArray0[3] = 'i';
      charArray0[4] = 'a';
      String string0 = StringUtils.join(charArray0, 'i');
      assertEquals("ui}i`iiia", string0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'u', '}', '`', 'i', 'a'}, charArray0);
      
      int int0 = StringUtils.compare("ui}i`iiia", "Y", true);
      assertEquals(28, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Y", (CharSequence) "ui}i`iiia", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Y", 0, 921);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "ui}i`iiia";
      charSequenceArray0[1] = (CharSequence) "ui}i`iiia";
      charSequenceArray0[2] = (CharSequence) "ui}i`iiia";
      boolean boolean0 = StringUtils.equalsAny("ui}i`iiia", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("\"Js", "\"Js", "...");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0889()  throws Throwable  {
      String string0 = StringUtils.center(" doesn't contain any substring.", 3);
      assertEquals(" doesn't contain any substring.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0890()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("g3I>}", "?^,;Cp2%N");
      assertEquals("g3I>}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0891()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'E', (-2643), 305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2643
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0892()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      String string0 = StringUtils.swapCase("$");
      assertEquals("$", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad(" is not in the range '0' - '9'", 48);
      assertEquals(" is not in the range '0' - '9'                  ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "$";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("$", charSequence0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      
      String string2 = StringUtils.removePattern("$", " is not in the range '0' - '9'                  ");
      assertEquals("$", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.appendIfMissing("$", "$", charSequenceArray0);
      assertEquals("$", string3);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringBeforeLast("$", " is not in the range '0' - '9'");
      assertEquals("$", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.uncapitalize(":FT*}$zQ(_cbi:FT*}$zQ(_cbi");
      assertEquals(":FT*}$zQ(_cbi:FT*}$zQ(_cbi", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":FT*}$zQ(_cbi:FT*}$zQ(_cbi", (CharSequence) " is not in the range '0' - '9'");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "$", "$");
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "$", (CharSequence) ":FT*}$zQ(_cbi:FT*}$zQ(_cbi", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test0893()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "+", "org.junitpioneer.jupiter.params.Range");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0894()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 16);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace(" ", "tnixpPL`_vmTj!Pi)S", " ");
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "StdIo_S";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      String string2 = StringUtils.appendIfMissing(" ", "StdIo_S", charSequenceArray0);
      assertEquals(" ", string2);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBeforeLast("", " ");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart("7A9{$", "-1234.4836444196O3.0");
      assertEquals("7A9{$", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "-1234.4836444196O3.0");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " uF0bt'p7", " ");
      assertFalse(boolean0);
      
      String string5 = StringUtils.repeat("yT6itS`5", "-1234.4836444196O3.0", 49);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test0895()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "c0bewB", "c0bewB");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0896()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-106L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      String string1 = StringUtils.join(longArray0, 'Y');
      assertEquals("0Y-1Y-106Y0Y-1Y0", string1);
      assertEquals(6, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, (-1L), (-106L), 0L, (-1L), 0L}, longArray0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, 'h');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-109);
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "r_>");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "0Y-1Y-106Y0Y-1Y0", "B(zKHV,~L8P#SLir23-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0897()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("D;O3&mw^vJFB_+;OdGG", "Qk[_Xc\";.+", (-2388));
      assertEquals("D;O3&mw^vJFB_+;OdGG", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("D;O3&mw^vJFB_+;OdGG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0898()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Minimum abbreviation width with offset is %d", "j-~Qs\"@6HQTe", 16);
      assertEquals("Mij-~Qs\"@6HQTed", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0899()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean2 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replace(" is not in the range '0' - '9'", "\r", "\r");
      assertEquals(" is not in the range '0' - '9'", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean3 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string2 = StringUtils.abbreviateMiddle("c4}QkvZ2Y_33','Z%", "\r", 13);
      assertEquals("c4}Qkv\r3','Z%", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "c4}QkvZ2Y_33','Z%";
      stringArray0[1] = "Z+a/In";
      String string3 = StringUtils.replaceEach("Z+a/In", stringArray0, stringArray0);
      assertEquals("Z+a/In", string3);
      assertEquals(2, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.repeat("'NGxGi", (-992));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.repeat("Dc_/xmP8yaRtxY[m", "0.040.0", 48);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.substringBefore("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", "F1oYU>u*{f");
      assertEquals("Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "{!#`&dyF~ZTr;dw", (CharSequence) "Method `%s` must register values for each parameter exactly once. Expected [%d] parameter sets, but got [%d]", (-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0900()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("Iy:*W[*)r,RH'UMx", 'M');
      assertEquals("xMIy:*W[*)r,RH'U", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0901()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[`~d.4v'Q6mto)Bj", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", "", (-1333));
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.trim("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replace("v<In'#EsieV3w7BT", "", "-qtzCCnZLZOgm:*Q<");
      assertEquals("v<In'#EsieV3w7BT", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.junitpioneer.jupiter.params.ShortRange";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) charSequenceArray0[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) charSequenceArray0[1];
      String string4 = StringUtils.join(objectArray0, 'C');
      assertEquals(3, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("", "", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0902()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate("c!T17F-<subZ=zw{", "o", 122, 8);
      assertEquals("oubZ=zw{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0903()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[0] = (-1.0F);
      floatArray0[2] = 459.3239F;
      String string0 = StringUtils.uncapitalize("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("\" should have a parent context.", "E#t&F", 343, 22);
      assertEquals("E#t&Fa parent context.", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("\" should have a parent context.", "\" should have a parent context.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0904()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(":`I7bh*.,#GX", " ]@I", 101, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0905()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 570);
      assertNull(string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test0906()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, '!');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, '!');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0907()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) '#';
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) '#';
      floatArray0[7] = 667.85F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("0.0#0.0#0.0#35.0#0.0#0.0#35.0#667.85", string0);
      assertEquals(8, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 35.0F, 0.0F, 0.0F, 35.0F, 667.85F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '#');
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("", 2601);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate((String) null, 2235);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase(".?yxz)0", "vdm-'tmkpYd[PpHh", true);
      assertEquals((-72), int0);
  }

  @Test(timeout = 4000)
  public void test0908()  throws Throwable  {
      String string0 = StringUtils.right("i7,]U,f#8X@-~", 795);
      assertEquals("i7,]U,f#8X@-~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "i7,]U,f#8X@-~", "i7,]U,f#8X@-~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0909()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0910()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = '}';
      charArray0[2] = '`';
      charArray0[3] = 'i';
      charArray0[4] = 'a';
      String string0 = StringUtils.join(charArray0, 'i');
      assertEquals("ui}i`iiia", string0);
      assertEquals(5, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'u', '}', '`', 'i', 'a'}, charArray0);
      
      int int0 = StringUtils.compare("ui}i`iiia", "Y", true);
      assertEquals(28, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Y", (CharSequence) "ui}i`iiia", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Y", 0, 921);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "ui}i`iiia";
      charSequenceArray0[1] = (CharSequence) "ui}i`iiia";
      charSequenceArray0[2] = (CharSequence) "ui}i`iiia";
      int int3 = StringUtils.compareIgnoreCase("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "Y", true);
      assertEquals((-57), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test0911()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "[O#vWyxm|]I<WuCNFJ2");
      assertEquals("", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("[O#vWyxm|]I<WuCNFJ2");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("[O#vWyxm|]I<WuCNFJ2", "");
      assertEquals(19, int0);
      
      boolean boolean1 = StringUtils.isNumeric("[O#vWyxm|]I<WuCNFJ2");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0912()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0913()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0914()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      ByteBuffer byteBuffer0 = charset0.encode("(MIl>&H");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(8, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.capacity());
      
      byte[] byteArray0 = StringUtils.getBytes("(MIl>&H", charset0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)77, (byte)73, (byte)108, (byte)62, (byte)127, (byte)38, (byte)72}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      String string0 = StringUtils.replaceFirst("(MIl>&H", "OwTz3;Htub![Y&?R _K", (String) null);
      assertEquals("(MIl>&H", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("(MIl>&H", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 3458.8381F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-283.70517F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.0F);
      String string2 = StringUtils.join(floatArray0, '$');
      assertEquals("-1.0$1.0$0.0$3458.8381$-1.0$-283.70517$0.0$-1.0", string2);
      assertEquals(8, floatArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 0.0F, 3458.8381F, (-1.0F), (-283.70517F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test0915()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("L", (-1869), (-1869));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0916()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("g0jShM}UM+zB\"F", "g0jShM}UM+zB\"F");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringAfter("czZT%*S.Q3ldu.NIQ=", 99);
      assertEquals("zZT%*S.Q3ldu.NIQ=", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("g0jShM}UM+zB\"F", "g0jShM}UM+zB\"F");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "g0jShM}UM+zB\"F";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      stringArray0[2] = "czZT%*S.Q3ldu.NIQ=";
      stringArray0[3] = "u(NxXP";
      stringArray0[4] = "czZT%*S.Q3ldu.NIQ=";
      stringArray0[5] = "czZT%*S.Q3ldu.NIQ=";
      stringArray0[6] = "czZT%*S.Q3ldu.NIQ=";
      stringArray0[7] = "g0jShM}UM+zB\"F";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(8, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.leftPad("u(NxXP", 666, "\r");
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\ru(NxXP", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'o';
      charArray0[2] = 'o';
      charArray0[3] = 'R';
      charArray0[4] = 'R';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = 'R';
      charArray0[8] = 'R';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "czZT%*S.Q3ldu.NIQ=", charArray0);
      assertFalse(boolean1);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'R', 'o', 'o', 'R', 'R', 'o', 'o', 'R', 'R'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test0917()  throws Throwable  {
      String string0 = StringUtils.stripAccents(".A-ZjLylvBDex");
      assertEquals(".A-ZjLylvBDex", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) ".A-ZjLylvBDex", (CharSequence) ".A-ZjLylvBDex");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0918()  throws Throwable  {
      String string0 = StringUtils.leftPad("RxLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RxLixe9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "RxLixe9");
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "RxLixe9";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "RxLixe9";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "RxLixe9";
      String string4 = StringUtils.appendIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", charSequenceArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      
      String string5 = StringUtils.leftPad((String) null, 0);
      assertNull(string5);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=A\"#5*vRmnLEXD[l!^%";
      stringArray0[1] = "RxLixe9";
      stringArray0[2] = "";
      stringArray0[3] = "RxLixe9";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      String string6 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("=A\"#5*vRmnLEXD[l!^%", string6);
      assertEquals(8, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals("RxLixe9RxLixe9Aborting to protect against StackOverflowError - output of one loop is the input of anotherRxLixe9", string7);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.difference("7HVou\"U)^l6>,^", "");
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test0919()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("Search and Replace array lengths don't match: ", 0);
      assertEquals("Search and Replace array lengths don't match: ", string1);
  }

  @Test(timeout = 4000)
  public void test0920()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "=vp!-/L-<ms9\"i.sa'x", (CharSequence) "g2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0921()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      stringArray0[3] = "bpffo(K";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("oy<1Sy^V2n", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "9IMs6/W oje*ne", charArray0);
      assertTrue(boolean0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'j'}, charArray0);
      
      String string1 = StringUtils.replaceChars("oy<1Sy^V2n", 'v', 'D');
      assertEquals("oy<1Sy^V2n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("9IMs6/W oje*ne");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0922()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      stringArray0[3] = "bpffo(K";
      String string0 = StringUtils.replaceEach("oy<1Sy^V2n", stringArray0, stringArray0);
      assertEquals("oy<1Sy^V2n", string0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0923()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      String string1 = StringUtils.replaceEach(" ", stringArray0, stringArray0);
      assertEquals(" ", string1);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", " ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0924()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], charSequenceArray0[3], 10);
      assertEquals((-1), int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[6]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("\n", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'G';
      charArray0[2] = '-';
      charArray0[3] = 'g';
      charArray0[4] = '<';
      String string2 = StringUtils.difference("-VsFlA$2Yh|Wg:R^]", "*:X$%R?Z");
      assertEquals("*:X$%R?Z", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      stringArray0[3] = "*:X$%R?Z";
      stringArray0[4] = "\n";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("*:X$%R?Z", string3);
      assertEquals(5, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "*:X$%R?Z", "^Z6");
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("\n", stringArray0);
      assertTrue(boolean2);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("*:X$%R?Z");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0925()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      String string1 = StringUtils.valueOf(charArray0);
      assertEquals(">6f", string1);
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'>', '6', 'f'}, charArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">6f", "Could not resolve parameter of type %s.");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("U>=cGpO,^YkdhV#NPYY", 2967, ">6f");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getDigits("Could not resolve parameter of type %s.");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.leftPad("U>=cGpO,^YkdhV#NPYY", 1458);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.substringAfter("", 1458);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertTrue(boolean1);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'>', '6', 'f'}, charArray0);
      
      String string6 = StringUtils.replace((String) null, "", "", (-844));
      assertNull(string6);
      
      String string7 = StringUtils.defaultIfEmpty("9IMs6/W oje*ne", "9IMs6/W oje*ne");
      assertEquals("9IMs6/W oje*ne", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0926()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0927()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "g2", "org.junitpioneer.jupiter.DefaultLgcaleExtension");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0928()  throws Throwable  {
      String string0 = StringUtils.replace("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("Could not resolve parameter of type %s.", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "Could not resolve parameter of type %s.");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '6';
      charArray0[2] = 'f';
      String string1 = StringUtils.removeStartIgnoreCase("Could not resolve parameter of type %s.", "Could not resolve parameter of type %s.");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "Could not resolve parameter of type %s.");
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad("U>=cGpO,^YkdhV#NPYY", 2967, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.getDigits("Could not resolve parameter of type %s.");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int1 = StringUtils.indexOf((CharSequence) "Could not resolve parameter of type %s.", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.leftPad("U>=cGpO,^YkdhV#NPYY", 1458);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.substringAfter("", 1458);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(string2, '6');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0929()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.substringAfter("lj6ZH", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.CharUtils";
      stringArray0[1] = "";
      stringArray0[2] = "Gw=<E6u[4";
      stringArray0[3] = "org.apache.commons.lang3.CharUtils";
      stringArray0[4] = "Gw=<E6u[4";
      stringArray0[5] = "{!#`&dyF~ZTr;dw@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      stringArray0[6] = "";
      String string2 = StringUtils.abbreviate("org.apache.commons.lang3.CharUtils", "", 2713);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.CharUtils", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0930()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("T87nKAh FH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0931()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'I');
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray1);
      
      String string3 = StringUtils.center("", 223);
      assertEquals("                                                                                                                                                                                                                               ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.center("", (-1));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.wrap("", "");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(""));
      
      String string6 = StringUtils.substringAfter("", 0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.difference("...", "org.junitpioneer.vintage.TimeoutExtension");
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      String string8 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("<GZk3", string8);
      assertEquals(1, stringArray0.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      
      int int2 = StringUtils.indexOfAny((CharSequence) "                                                                                                                                                                                                                               ", "");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0932()  throws Throwable  {
      String string0 = "RLi\\xe9";
      String string1 = StringUtils.leftPad("RLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RLixe9", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "RLixe9");
      assertNull(string2);
      
      String string3 = "";
      String string4 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "RLixe9";
      String string5 = "j";
      String string6 = StringUtils.lowerCase("j");
      assertEquals("j", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.rightPad("g", (-1));
      assertEquals("g", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string8 = StringUtils.replaceEachRepeatedly("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray1);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string8);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("...", 52, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0933()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '4');
      assertEquals("0.040.0", string0);
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("oy<1Sy^V2n");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.firstNonBlank(stringArray1);
      assertEquals("oy", string1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(string1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "oy<1Sy^V2n", " vs ");
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("oy", "oy<1Sy^V2n");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string2 = StringUtils.removeStart("StdIo_Std_In", "0.040.0");
      assertEquals("StdIo_Std_In", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((double[]) null, 'U', (-722), (-181));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0934()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string1 = StringUtils.chomp("\r");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\r";
      String string2 = StringUtils.repeat(';', 12);
      assertEquals(";;;;;;;;;;;;", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[7] = (CharSequence) ";;;;;;;;;;;;";
      String string3 = StringUtils.wrapIfMissing("Exactly one type of input must be provided in the @", ';');
      assertEquals(";Exactly one type of input must be provided in the @;", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[8] = (CharSequence) ";Exactly one type of input must be provided in the @;";
      boolean boolean2 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0935()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("iB,-Cf|=Isp5Nbgb");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("i", string0);
      assertEquals(9, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0936()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0937()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("i", "Ne3pmp&#g", "bk");
      assertEquals("i", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "i";
      charSequenceArray0[1] = (CharSequence) "i";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("bk", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0938()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", 190);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0939()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "oy<1Sy^V2n";
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oy<1Sy^V2n", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultTimeZone", "u(NxXP");
      assertEquals(4, int0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("u(NxXP", stringArray0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("g0jShM}UM+zB\"F");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(13, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0940()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", "\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test0941()  throws Throwable  {
      String string0 = StringUtils.difference("97Ce2~P(", "11DmRz<O");
      assertEquals("11DmRz<O", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0942()  throws Throwable  {
      char[] charArray0 = new char[2];
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      char char0 = '[';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '[', 50, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 50
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0943()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "3RYoO", (CharSequence) "3RYoO");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '1';
      charArray0[2] = ':';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'd', 10, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0944()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsAny("A|Wc;,,9", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0945()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate("3RYo", 993);
      assertEquals("3RYo", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((List<?>) null, '6', 124, 124);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test0946()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("i!.c:", 1980);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0947()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 1639, 1639);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.substringAfterLast("", (-4459));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.abbreviate("X4y|,tMBbu.<;2r$eTU", "", 1639, 56);
      assertEquals("X4y|,tMBbu.<;2r$eTU", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      charSequenceArray0[5] = (CharSequence) "X4y|,tMBbu.<;2r$eTU";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0948()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'a', 65, 65);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test0949()  throws Throwable  {
      String string0 = StringUtils.stripEnd("gg", "*-I+[8M> ?n");
      assertEquals("gg", string0);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("*-I+[8M> ?n"));
      
      Stream<Object> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("*-I+[8M> ?n"));
      
      boolean boolean0 = linkedList0.offerFirst("*-I+[8M> ?n");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("gg"));
      assertTrue(linkedList0.contains("*-I+[8M> ?n"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertEquals(5, locale_FilteringModeArray0.length);
      assertNotNull(locale_FilteringModeArray0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      
      boolean boolean1 = linkedList0.removeFirstOccurrence(locale_FilteringMode0);
      assertFalse(boolean1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("gg"));
      assertTrue(linkedList0.contains("*-I+[8M> ?n"));
      
      String string1 = StringUtils.join((List<?>) linkedList0, 'M', 1493, 1493);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("gg"));
      assertTrue(linkedList0.contains("*-I+[8M> ?n"));
      
      String string2 = StringUtils.wrap("*-I+[8M> ?n", (String) null);
      assertEquals("*-I+[8M> ?n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("gg", 3416);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.mid("", 1493, 0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0950()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("$SOc0JtjU2-n>D");
      assertFalse(boolean0);
      
      String string0 = StringUtils.rightPad("org.junitpioneer.jupiter.params.ByteRange", 2352, 'b');
      assertNotNull(string0);
      
      String string1 = StringUtils.mid("$SOc0JtjU2-n>D", 13, 32767);
      assertEquals("D", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0951()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0952()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("c0bewB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0953()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string1 = StringUtils.join(doubleArray0, '7');
      assertEquals("-1304.071.57-1304.07-1304.0", string1);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {(-1304.0), 1.5, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "-1304.071.57-1304.07-1304.0";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "52^eC!>,Q'`gK:";
      String string2 = StringUtils.swapCase("Search and Replace array lengths don't match: ");
      assertEquals("sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[4] = (CharSequence) "sEARCH AND rEPLACE ARRAY LENGTHS DON'T MATCH: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("Search and Replace array lengths don't match: ", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      
      String string3 = StringUtils.appendIfMissing("52^eC!>,Q'`gK:", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("52^eC!>,Q'`gK:", string3);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.replace(", ", "ym", "+<k5$Sol:+7x.^6FL", 5);
      assertEquals(", ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = StringUtils.indexOf((CharSequence) ", ", (CharSequence) "52^eC!>,Q'`gK:");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfterLast("v#^XQT", "Search and Replace array lengths don't match: ");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.stripStart("52^eC!>,Q'`gK:", "3g`3*&YwL/X D");
      assertEquals("52^eC!>,Q'`gK:", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1304);
      floatArray0[2] = (float) (-1304);
      floatArray0[3] = (float) (-1304);
      String string7 = StringUtils.join(floatArray0, '7');
      assertEquals("-1.07-1304.07-1304.07-1304.0", string7);
      assertEquals(4, floatArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertArrayEquals(new float[] {(-1.0F), (-1304.0F), (-1304.0F), (-1304.0F)}, floatArray0, 0.01F);
      
      boolean boolean0 = StringUtils.isAlphaSpace("ym");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test0954()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.remove((String) null, (String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string3 = StringUtils.getDigits("Strings must not be null");
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test0955()  throws Throwable  {
      String string0 = "CartesianProductTest can not have a non-empty display name";
      String string1 = StringUtils.deleteWhitespace("CartesianProductTest can not have a non-empty display name");
      assertEquals("CartesianProductTestcannothaveanon-emptydisplayname", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("CartesianProductTestcannothaveanon-emptydisplayname");
      assertFalse(boolean0);
      
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      StringUtils.repeat("\n", 32767);
  }

  @Test(timeout = 4000)
  public void test0956()  throws Throwable  {
      String string0 = StringUtils.repeat("YHBB'", (-2386));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0957()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[12];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[6] = (CharSequence) " ";
      String string1 = StringUtils.remove(" ", (String) null);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[7] = (CharSequence) " ";
  }

  @Test(timeout = 4000)
  public void test0958()  throws Throwable  {
      String string0 = StringUtils.repeat("r", 321);
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0959()  throws Throwable  {
      String string0 = StringUtils.remove(".1xapZOJZl,& S.", ".1xapZOJZl,& S.");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0960()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "g");
      assertEquals("or.apache.commons.lan3.StrinUtils", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("g"));
      
      String string1 = StringUtils.join((Iterable<?>) linkedList0, ';');
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("g"));
  }

  @Test(timeout = 4000)
  public void test0961()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0962()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("[O#vWyxm|]I<WuCNFJ2", "[O#vWyxm|]I<WuCNFJ2", "[O#vWyxm|]I<WuCNFJ2");
      assertEquals("[O#vWyxm|]I<WuCNFJ2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0963()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "z", "org.junitpioneer.jupiter.ReportEntryExtension");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertEquals(0, stringArray0.length);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Wm$K?!?vt5", "org.junitpioneer.jupiter.ReportEntryExtension", (-14));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0964()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, (String) null, 31);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 31, 31);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0965()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.unwrap("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test0966()  throws Throwable  {
      String string0 = StringUtils.wrap("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", (-388));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[3] = (CharSequence) "A(NXT<6PFz";
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[5] = (CharSequence) "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      charSequenceArray0[6] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[7] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[8] = (CharSequence) "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.prependIfMissingIgnoreCase("A(NXT<6PFz", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals("A(NXT<6PFz", string1);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      stringArray0[1] = "Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ";
      stringArray0[2] = "A(NXT<6PFz";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertEquals(3, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[6]);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string3 = StringUtils.deleteWhitespace("Search and Replace array lengths don't match: ");
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string4);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.overlay((String) null, (String) null, (-388), (-1));
      assertNull(string5);
      
      String string6 = StringUtils.removeStartIgnoreCase("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", (String) null);
      assertEquals("Search and Replace array lengths don't match: Search and Replace array lengths don't match: Search and Replace array lengths don't match: ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertEquals(3, stringArray0.length);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.center("A(NXT<6PFz", 0, "A(NXT<6PFz");
      assertEquals("A(NXT<6PFz", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      
      String string8 = StringUtils.substringBetween("\n", " LBUeM`/Wi&I?");
      assertNull(string8);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, (-1), 574);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test0967()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(6, stringArray0.length);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0968()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, '?');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0969()  throws Throwable  {
      String string0 = StringUtils.rotate("offset cannot be negative", (-1961));
      assertEquals("ot be negativeoffset cann", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      boolean boolean0 = StringUtils.startsWithAny("ot be negativeoffset cann", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("ot be negativeoffset cann", "offset cannot be negative", charSequenceArray0);
      assertEquals("offset cannot be negativeot be negativeoffset cann", string1);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.strip("Invalid exceptionStatus", "offset cannot be negativeot be negativeoffset cann");
      assertEquals("Invalid exceptionStatu", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.defaultString("Invalid exceptionStatus");
      assertEquals("Invalid exceptionStatus", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.lastOrdinalIndexOf("Invalid exceptionStatus", "Invalid exceptionStatu", (-1961));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.center("ot be negativeoffset cann", (-1), ',');
      assertEquals("ot be negativeoffset cann", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = '\\';
      charArray0[8] = ',';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '', (-785), 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -785
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0970()  throws Throwable  {
      String string0 = StringUtils.substringAfter("ZHr]yNNE/iB>$\"S*Op", "ZHr]yNNE/iB>$\"S*Op");
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("ZHr]yNNE/iB>$\"S*Op"));
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator(3719);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3719
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test0971()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0972()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
      assertEquals(5, stringArray0.length);
      
      String string0 = StringUtils.join((short[]) null, '2', 40, 40);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0973()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "Gl\"le_b");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0974()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test0975()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'U');
      assertEquals("UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU<GZk3UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("\n");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)160;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)1706;
      shortArray0[3] = (short)76;
      String string2 = StringUtils.join(shortArray0, 'U', Integer.MAX_VALUE, 73);
      assertEquals("", string2);
      assertEquals(4, shortArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertArrayEquals(new short[] {(short)160, (short)54, (short)1706, (short)76}, shortArray0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", (int) (short)76, (int) (short)1706);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test0976()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0977()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0978()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "", (-5237));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((short[]) null, 'I', 0, 0);
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("", "7");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.rotate("c^:eX><", 0);
      assertEquals("c^:eX><", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      charSequenceArray0[5] = (CharSequence) "c^:eX><";
      String string6 = StringUtils.prependIfMissing((String) null, "", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertNull(string6);
      
      String string7 = StringUtils.join((short[]) null, 'I');
      assertNull(string7);
      
      String string8 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string8);
      
      String string9 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string9);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string10 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string10);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.allOf(class0);
      assertNotNull(enumSet0);
      assertEquals(5, enumSet0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(5, enumSet0.size());
      
      String string11 = StringUtils.join(iterator0, "offset cannot be negative");
      assertEquals("AUTOSELECT_FILTERINGoffset cannot be negativeEXTENDED_FILTERINGoffset cannot be negativeIGNORE_EXTENDED_RANGESoffset cannot be negativeMAP_EXTENDED_RANGESoffset cannot be negativeREJECT_EXTENDED_RANGES", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertEquals(5, enumSet0.size());
      
      String string12 = StringUtils.center("yk 5.arw.", 0, 'i');
      assertEquals("yk 5.arw.", string12);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string11));
  }

  @Test(timeout = 4000)
  public void test0979()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.chop("Display name '");
      assertEquals("Display name ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("t3#@i07\"EeVDK'", (String) null, "Un[CX[:}#*}Az1");
      assertEquals("t3#@i07\"EeVDK'", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "ZOd.hhpPw", (CharSequence) stringArray0[0]);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.isBlank("Display name '");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean2);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test0980()  throws Throwable  {
      String string0 = StringUtils.leftPad("RxLixe9", (-1), "@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertEquals("RxLixe9", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "RxLixe9");
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.replace("", (String) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "RxLixe9";
      String string4 = StringUtils.rightPad("g", (-1));
      assertEquals("g", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g";
      String string5 = StringUtils.join((byte[]) null, '\'', 436, (-1));
      assertNull(string5);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "g");
      assertFalse(boolean0);
      
      String string6 = StringUtils.mid("-2", 52, (-1));
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = StringUtils.stripEnd("", "");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-1), 9);
      assertEquals("", string8);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) "", 117);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType(" vs ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test0981()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string0 = "";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)53;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '\\', (-1), (int) (byte)55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test0982()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'A');
      assertEquals("", string0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0983()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      String string0 = StringUtils.join(byteArray0, 'O');
      assertEquals("0O0", string0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0984()  throws Throwable  {
      String string0 = StringUtils.removeAll("r_>", "r_>");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (-1L);
      longArray0[2] = (-106L);
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      String string1 = StringUtils.join(longArray0, 'Y');
      assertEquals("0Y-1Y-106Y0Y-1Y0", string1);
      assertEquals(6, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, (-1L), (-106L), 0L, (-1L), 0L}, longArray0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      String string2 = StringUtils.join(iterator0, 'h');
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)53;
      String string3 = StringUtils.join(byteArray0, '\\', (int) (byte) (-36), (int) (byte) (-109));
      assertEquals("", string3);
      assertEquals(8, byteArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte) (-36), (byte) (-109), (byte)55, (byte)54, (byte)66, (byte)0, (byte)53}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test0985()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "...");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("...", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test0986()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("@", "@", (CharSequence[]) null);
      assertEquals("@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("@");
      assertEquals("@", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string2 = StringUtils.wrap(" LBUeM`/Wi&I?", 'd');
      assertEquals("d LBUeM`/Wi&I?d", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("l&\ngm9eajw`,+U)", "", 4146);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("@", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootUpperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.upperCase(" LBUeM`/Wi&I?");
      assertEquals(" LBUEM`/WI&I?", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.reverse("l&\ngm9eajw`,+U)");
      assertEquals(")U+,`wjae9mg\n&l", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      int[] intArray0 = StringUtils.toCodePoints("u");
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {117}, intArray0);
      
      String string6 = StringUtils.wrap("l&\ngm9eajw`,+U)", 'S');
      assertEquals("Sl&\ngm9eajw`,+U)S", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean1 = StringUtils.isWhitespace(")U+,`wjae9mgn&l");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test0987()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '\'';
      charArray0[4] = '\'';
      charArray0[5] = 'V';
      charArray0[6] = 'V';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("V''''VV", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'V', '\'', '\'', '\'', '\'', 'V', 'V'}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'V', '\'', '\'', '\'', '\'', 'V', 'V'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultString("+|PbhF=+", "+|PbhF=+");
      assertEquals("+|PbhF=+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Object[]) null, 'V');
      assertNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("+|PbhF=+", "<GZk3");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = StringUtils.substringBetween("org.apache.commons.lang3.ObjectUtils", "Gg?XZwV;", "No instructions to disable");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test0988()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "c0bewB");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test0989()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(11, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test0990()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[1] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[2] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[3] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[4] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 2375);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("\"kTDsY[YAyA`[8h[", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string0 = StringUtils.toRootUpperCase("\"kTDsY[YAyA`[8h[");
      assertEquals("\"KTDSY[YAYA`[8H[", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.StringUtils", "No instructins to disable");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.upperCase("No instructins to disable");
      assertEquals("NO INSTRUCTINS TO DISABLE", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.abbreviateMiddle("\"KTDSY[YAYA`[8H[", "No instructins to disable", (-669));
      assertEquals("\"KTDSY[YAYA`[8H[", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.reverse("org.apache.commons.lang3.StringUtils");
      assertEquals("slitUgnirtS.3gnal.snommoc.ehcapa.gro", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("\"kTDsY[YAyA`[8h["));
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("\"kTDsY[YAyA`[8h["));
      
      String string4 = StringUtils.join(iterator0, '3');
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("\"kTDsY[YAyA`[8h["));
  }

  @Test(timeout = 4000)
  public void test0991()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test0992()  throws Throwable  {
      String string0 = StringUtils.repeat('f', (-1251));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1251));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test0993()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Minimum abbreviation idth with offsetis d");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("Minimum abbreviation idth with offsetis d", stringArray0);
      assertEquals(40, int0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0994()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("?X);MjcG0^z\"?", "?X);MjcG0^z\"?", 36);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test0995()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("", (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertTrue(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", ";", 32);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAlphanumeric(charSequenceArray0[7]);
      assertFalse(boolean2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase(charSequenceArray0[8], charSequenceArray0[7]);
      assertTrue(boolean3);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string4 = StringUtils.upperCase("test-template-invocation");
      assertEquals("TEST-TEMPLATE-INVOCATION", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray1);
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'C');
      assertEquals("", string5);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test0996()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.toRootUpperCase("Locale must not be null");
      assertEquals("LOCALE MUST NOT BE NULL", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[1], charBuffer0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      
      String string2 = StringUtils.upperCase("lpAmh?!K)^-b;(zp+L");
      assertEquals("LPAMH?!K)^-B;(ZP+L", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Locale must not be null";
      stringArray0[1] = "LOCALE MUST NOT BE NULL";
      stringArray0[2] = "\n";
      stringArray0[3] = "Threshold must not be negative";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.abbreviateMiddle("Locale must not be null", "Locale must not be null", 0);
      assertEquals("Locale must not be null", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.reverse("LV#[%EwbS%\"Ilo;B");
      assertEquals("B;olI\"%SbwE%[#VL", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int[] intArray0 = new int[0];
      String string5 = StringUtils.join(intArray0, 'H');
      assertEquals("", string5);
      assertEquals(0, intArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test0997()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("$I");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("$I", stringArray0);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0998()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("L", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test0999()  throws Throwable  {
      String string0 = StringUtils.chop("offset cannot be negative");
      assertEquals("offset cannot be negativ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1000()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeAll("?", "?");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '?' near index 0
         // ?
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1001()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("<GZk3", "<GZk3", (-556), (-556));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1002()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[1] = (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      charSequenceArray0[2] = (CharSequence) "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.";
      String string0 = StringUtils.prependIfMissing("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", charSequenceArray0);
      assertEquals("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", string0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string0);
      
      int int0 = (-2628);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("5oGB97-Y0kpfV", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.", (-2628), (-2628));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 149
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1003()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "~q+ldY bzYA(=>$bzf", (CharSequence) "comparator");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1004()  throws Throwable  {
      String string0 = "(m-_Y8\"XT;<-T";
      String string1 = StringUtils.unwrap("(m-_Y8\"XT;<-T", '(');
      assertEquals("(m-_Y8\"XT;<-T", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains(locale0));
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("(m-_Y8\"XT;<-T", "(m-_Y8\"XT;<-T");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // (m-_Y8\"XT;<-T
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1005()  throws Throwable  {
      String string0 = StringUtils.rightPad("Search and Replace array lengths don't match: ", (-1304));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[2] = (CharSequence) "e%*x@tr^";
      charSequenceArray0[3] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[4] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[5] = (CharSequence) "e%*x@tr^";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("ag9", '4', '=');
      assertEquals("ag9", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart("e%*x@tr^", "Search and Replace array lengths don't match: ");
      assertEquals("%*x@tr^", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap(" ", '4');
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "E#t&F", 32);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAllLowerCase("%*x@tr^");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.toRootLowerCase("e%*x@tr^");
      assertEquals("e%*x@tr^", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean3 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], " ");
      assertFalse(boolean3);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      boolean boolean4 = StringUtils.containsOnly((CharSequence) "Search and Replace array lengths don't match: ", (char[]) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("e%*x@tr^");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) " ", 19);
      assertEquals(18, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1006()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("3RYoO", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substringAfter("Gw=<E6u[4", 6);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.difference("", "org.apache.commons.lang3.CharUtils");
      assertEquals("org.apache.commons.lang3.CharUtils", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = new String[0];
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string4);
      
      String string5 = StringUtils.abbreviate((String) null, "rN7gNy_:+ux", Integer.MIN_VALUE);
      assertNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1007()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MAX_VALUE, 4209);
      assertEquals("", string1);
      assertEquals(3, objectArray0.length);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      String string2 = StringUtils.center("", (-846), (String) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceOnceIgnoreCase("T.<.", "", "%lx(");
      assertEquals("T.<.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(6, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", Integer.MAX_VALUE, 4209);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.substringBefore("T.<.", "R?I#I}/G<$KaQ^B%*w");
      assertEquals("T.<.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int2 = StringUtils.indexOf((CharSequence) "", (-2531));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test1008()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'Q';
      charArray0[2] = 'z';
      charArray0[3] = 'Q';
      charArray0[4] = 'z';
      charArray0[5] = '\'';
      charArray0[6] = ':';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("2QzQz':", string0);
      assertEquals(7, charArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'2', 'Q', 'z', 'Q', 'z', '\'', ':'}, charArray0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "2QzQz':", charArray0);
      assertEquals((-1), int0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'2', 'Q', 'z', 'Q', 'z', '\'', ':'}, charArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "2QzQz':";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "2QzQz':";
      charSequenceArray0[3] = (CharSequence) "2QzQz':";
      charSequenceArray0[4] = (CharSequence) "2QzQz':";
      charSequenceArray0[5] = (CharSequence) "2QzQz':";
      String string1 = StringUtils.substringBefore("1u#*tO+", (String) null);
      assertEquals("1u#*tO+", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOf(charSequence0, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1009()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Xjlyv");
      assertEquals("xjlyv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1010()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, '6');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1011()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "g");
      assertEquals("or.apache.commons.lan3.StrinUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("or.apache.commons.lan3.StrinUtils", 'T', 'R');
      assertEquals("or.apache.commons.lan3.StrinUtils", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripStart((String) null, "g");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("g");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("or.apache.commons.lan3.StrinUtils", "or.apache.commons.lan3.StrinUtils", 17);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", stringArray0);
      assertEquals(36, int0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("g");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.toRootUpperCase("org.junitpioneer.jupiter.SystemPropertyExtension");
      assertEquals("ORG.JUNITPIONEER.JUPITER.SYSTEMPROPERTYEXTENSION", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("g", "ORG.JUNITPIONEER.JUPITER.SYSTEMPROPERTYEXTENSION");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.upperCase("E#t&F");
      assertEquals("E#T&F", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.join((Object[]) stringArray0, 'C');
      assertEquals("C", string5);
      assertEquals(2, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.strip("HWR4ZB~", " R8\"D)09gwu");
      assertEquals("HWR4ZB~", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'T';
      doubleArray0[1] = (double) 'R';
      doubleArray0[2] = (double) 'R';
      doubleArray0[3] = (double) 'C';
      doubleArray0[4] = (double) 'R';
      doubleArray0[5] = (double) 'T';
      String string7 = StringUtils.join(doubleArray0, '5');
      assertEquals("84.0582.0582.0567.0582.0584.0", string7);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertArrayEquals(new double[] {84.0, 82.0, 82.0, 67.0, 82.0, 84.0}, doubleArray0, 0.01);
      
      boolean boolean3 = StringUtils.containsIgnoreCase(" R8\"D)09gwu", "g");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-215.0);
      doubleArray1[1] = (double) 'C';
      doubleArray1[2] = (double) 17;
      String string8 = StringUtils.join(doubleArray1, 'R');
      assertEquals("-215.0R67.0R17.0", string8);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      assertNotNull(string8);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertArrayEquals(new double[] {(-215.0), 67.0, 17.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1012()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      boolean boolean0 = StringUtils.containsIgnoreCase("ve", "ve");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1013()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1014()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string1 = StringUtils.capitalize(", ");
      assertEquals(", ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(" ", 0, 'e');
      assertEquals(" ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart("A,rnU;pVK", "v#^XQT");
      assertEquals("A,rnU;pVK", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.left("A,rnU;pVK", 16);
      assertEquals("A,rnU;pVK", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.replaceIgnoreCase("Threshold must not be negative", "org.apache.commons.lang3.ObjectUtils$Null", "A,rnU;pVK", 16);
      assertEquals("Threshold must not be negative", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("org.apache.commons.lang3.ObjectUtils$Null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "v#^XQT", (char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.reverseDelimited("TVA5}hx2<5TP)sxR", 'n');
      assertEquals("TVA5}hx2<5TP)sxR", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.substringBefore("sD|>p.D(dY*K", "sD|>p.D(dY*K");
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "A,rnU;pVK";
      charSequenceArray0[1] = (CharSequence) "sD|>p.D(dY*K";
      charSequenceArray0[2] = (CharSequence) "TVA5}hx2<5TP)sxR";
      String string8 = StringUtils.prependIfMissingIgnoreCase("org.apache.commons.lang3.ObjectUtils$Null", ", ", charSequenceArray0);
      assertEquals(", org.apache.commons.lang3.ObjectUtils$Null", string8);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1015()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("@mdo#%@*ULlh/dhk*", "@mdo#%@*ULlh/dhk*");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CHINA;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Vector<Locale> vector1 = new Vector<Locale>();
      assertNotNull(vector1);
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains(locale1));
      
      Locale locale2 = Locale.lookup(vector0, vector1);
      assertNull(locale2);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.size());
      assertFalse(vector1.contains(locale1));
      
      Locale locale3 = locale0.stripExtensions();
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale3, locale1);
      assertSame(locale3, locale0);
      assertNotNull(locale3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale1));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("", locale3.getLanguage());
      assertEquals("", locale3.getISO3Language());
      assertEquals("", locale3.getCountry());
      assertEquals("", locale3.getISO3Country());
      
      String string2 = locale0.getDisplayCountry(locale1);
      assertEquals("", string2);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale3);
      assertNotNull(string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale3));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      
      String string3 = StringUtils.upperCase((String) null, locale0);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale1);
      assertNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "@mdo#%@*ULlh/dhk*", (-329));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("gmHg_\\I|", "", true);
      assertEquals(8, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.rightPad(">tE_wD3'Stjkf", (-2574), '*');
      assertEquals(">tE_wD3'Stjkf", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.difference((String) null, "OFO>;a|iaUzQA");
      assertEquals("OFO>;a|iaUzQA", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1016()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1017()  throws Throwable  {
      String string0 = StringUtils.getDigits("Strings must not be nullStrings must not be nullEsf%~yYKjU8nMKW8");
      assertEquals("88", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1018()  throws Throwable  {
      String string0 = StringUtils.swapCase(" annotation, but there were ");
      assertEquals(" ANNOTATION, BUT THERE WERE ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1019()  throws Throwable  {
      String string0 = StringUtils.stripStart(";", "bWX}_@s");
      assertEquals(";", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("', is neither of type MapEnr nor an Array", "', is neither of type MapEnr nor an Array", 14);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("", "', is neither of type MapEnr nor an Array", stringArray0);
      assertEquals("", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1021()  throws Throwable  {
      String string0 = StringUtils.swapCase(" ue^4Amc:kTW+ =L{}dGX;`");
      assertEquals(" UE^4aMC:Ktw+ =l{}Dgx;`", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1022()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[3] = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g0jSh}UM+zB\"F";
      String string0 = StringUtils.strip("g0jSh}UM+zB\"F", "g0jSh}UM+zB\"F");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Fk*P LBUeM`/Wi&I?", "g0jSh}UM+zB\"F");
      assertEquals("g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?g0jSh}UM+zB\"F", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?g0jSh}UM+zB\"F", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1023()  throws Throwable  {
      String string0 = StringUtils.center("Mx>`HvP", 0, "Mx>`HvP");
      assertEquals("Mx>`HvP", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Mx>`HvP", 0, 0);
      assertEquals((-1), int0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "g0jSh}UM+zB\"F";
      stringArray0[1] = "g0jSh}UM+zB\"F";
      stringArray0[2] = "g0jSh}UM+zB\"F";
      stringArray0[3] = "Mx>`HvP";
      stringArray0[4] = "Mx>`HvP";
      stringArray0[5] = "Mx>`HvP";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("g0jSh}UM+zB\"F", string1);
      assertEquals(6, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBeforeLast("kS,yP%fL\"2bzi>r", (String) null);
      assertEquals("kS,yP%fL\"2bzi>r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumeric("]K|8Q%g&K>J<F");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      String string3 = StringUtils.valueOf(charArray0);
      assertEquals("\\", string3);
      assertEquals(1, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      String string4 = StringUtils.wrapIfMissing("org.junitpioneer.jupiter.params.IntRange", "8M`!VwI<J)*@-PkS");
      assertEquals("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace("8M`!VwI<J)*@-PkSorg.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Mx>`HvP", (CharSequence) "kS,yP%fL\"2bzi>r");
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("g0jSh}UM+zB\"F");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("Cannot clear and set the following entries at the same time: ", "org.junitpioneer.jupiter.params.IntRange8M`!VwI<J)*@-PkS", 0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      int int2 = StringUtils.length("Mx>`HvP");
      assertEquals(7, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase(",=", "g0jSh}UM+zB\"F", stringArray0);
      assertEquals(",=g0jSh}UM+zB\"F", string5);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(6, stringArray0.length);
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      int int3 = StringUtils.lastOrdinalIndexOf(",=g0jSh}UM+zB\"F", "kS,yP%fL\"2bzi>r", 48);
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test1024()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '>';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.7;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = (double) '>';
      doubleArray0[5] = 1.5;
      String string2 = StringUtils.swapCase("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "e%*x@tr^";
      String string3 = StringUtils.rightPad("b<x5+", (-247));
      assertEquals("b<x5+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "b<x5+";
      charSequenceArray0[3] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("e%*x@tr^", charSequence0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      
      String string4 = StringUtils.appendIfMissing("lSsBg&&e_,]", "", charSequenceArray0);
      assertEquals("lSsBg&&e_,]", string4);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBeforeLast("", "{!#`&dyF~ZTr;dw");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "b<x5+");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", ", "");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", charSequenceArray0[3], 0);
      assertEquals(0, int1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1025()  throws Throwable  {
      String string0 = StringUtils.leftPad("StdIo_System_In", 0, ')');
      assertEquals("StdIo_System_In", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "StdIo_System_In");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripStart("A,r`/nU;pV", "n6%]/a0g\"-M-~DLf");
      assertEquals("A,r`/nU;pV", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("StdIo_System_In", "n6%]/a0g\"-M-~DLf", (-1016));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1026()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("@", "@", (CharSequence[]) null);
      assertEquals("@", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("@");
      assertEquals("@", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string2 = StringUtils.appendIfMissing("?dtu<", "?dtu<", (CharSequence[]) null);
      assertEquals("?dtu<", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "@");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfterLast("@", "@");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripStart("@", "p{InCombiningDiacriticalMarks}+");
      assertEquals("@", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      String string6 = StringUtils.join((float[]) null, '$');
      assertNull(string6);
      
      String string7 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1027()  throws Throwable  {
      String string0 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw", "Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.join(doubleArray0, '9');
      assertEquals("-1234.483644419693.0", string0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-1234.4836444196), 3.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.swapCase("1U<Fb%,8qjx]&s");
      assertEquals("1u<fB%,8QJX]&S", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "1U<Fb%,8qjx]&s";
      charSequenceArray0[1] = (CharSequence) "1U<Fb%,8qjx]&s";
      charSequenceArray0[2] = (CharSequence) "1u<fB%,8QJX]&S";
      charSequenceArray0[3] = (CharSequence) "1u<fB%,8QJX]&S";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("1U<Fb%,8qjx]&s", charSequence0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("1u<fB%,8QJX]&S", charSequenceArray0[1], charSequenceArray0);
      assertEquals("1u<fB%,8QJX]&S", string2);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.capitalize("N");
      assertEquals("N", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) ", ", charSequenceArray0[2]);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.substringAfterLast("yQ]}L@f2a:c}MI/po", "1u<fB%,8QJX]&S");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.stripStart("Fk*P LBUeM`/Wi&I?", "");
      assertEquals("Fk*P LBUeM`/Wi&I?", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      
      float[] floatArray0 = new float[0];
      String string6 = StringUtils.join(floatArray0, 'h');
      assertEquals("", string6);
      assertEquals(0, floatArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      CharSequence charSequence1 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals("1U<Fb%,8qjx]&s", charSequence1);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(charSequence1);
      assertFalse(charSequence1.equals((Object)string3));
      assertFalse(charSequence1.equals((Object)string1));
      assertFalse(charSequence1.equals((Object)string5));
      assertFalse(charSequence1.equals((Object)string0));
      assertFalse(charSequence1.equals((Object)string4));
      assertFalse(charSequence1.equals((Object)string6));
      assertFalse(charSequence1.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isAsciiPrintable("1U<Fb%,8qjx]&s");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1029()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("\r");
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfBlank("\r", "\r");
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1030()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("\r", "4bQeTI`j{/\"^8#^");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 7
         // 4bQeTI`j{/\"^8#^
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test1031()  throws Throwable  {
      String string0 = StringUtils.removeStart("No instructions to disable", "No instructions to disable");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("j_jv");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("No instructions to disable", 2);
      assertEquals("No", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test1032()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-3080));
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      String string0 = StringUtils.rightPad((String) null, 16, '$');
      assertNull(string0);
      
      String string1 = StringUtils.left((String) null, 36);
      assertNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      Class<Locale.FilteringMode> class1 = Locale.FilteringMode.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ServiceLoader<Locale.FilteringMode> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertNotNull(serviceLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader1.toString());
      
      Iterator<Locale.FilteringMode> iterator0 = serviceLoader1.iterator();
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertNotNull(iterator0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader1.toString());
      
      String string2 = StringUtils.overlay((String) null, "'.", (-3080), 8);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast("Y>/)o}%c+3[Z", "The type must not be null");
      assertEquals("", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("v#^XQT");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfter("+<k5$Sol:+7x.^6FL", "q{");
      assertEquals("", string4);
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1033()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 459.3239F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("459.3239#0.0#459.3239#459.3239#0.0#0.0", string0);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {459.3239F, 0.0F, 459.3239F, 459.3239F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("R-=4w!~V0Vo", (-361));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.truncate("900.\"at1(\thF@", 48);
      assertEquals("900.\"at1(\thF@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.join(iterator0, "org.junitpioneer.");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.left(".*{[0-9]+}.*", (-361));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.substringAfter("#<\"1>59n:DK692bqw", 3);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.difference("0~vVwC??=QcD`bS", " vs ");
      assertEquals(" vs ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string7);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "\";");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1034()  throws Throwable  {
      String string0 = StringUtils.left("?", 3720);
      assertEquals("?", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
  }

  @Test(timeout = 4000)
  public void test1035()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "";
      String string2 = StringUtils.rightPad("", 4146, '$');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.left("", 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.removeFirst("", "");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int0 = (-2526);
      int int1 = StringUtils.lastOrdinalIndexOf(string0, string2, int0);
      assertEquals((-1), int1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.trim(string1);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      boolean boolean0 = arrayList0.add((Object) string5);
      assertTrue(boolean0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.contains(""));
      
      boolean boolean1 = arrayList0.add((Object) string2);
      assertTrue(boolean1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string5));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(0));
      assertTrue(arrayList0.contains(""));
      
      int int2 = (-2604);
      // Undeclared exception!
      try { 
        arrayList0.listIterator(int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2604
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.substringAfter(" vs 5!))", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference(" vs 5!))", "u(NxXP");
      assertEquals("u(NxXP", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.leftPad("u(NxXP", (-596), "");
      assertEquals("u(NxXP", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      charArray0[4] = '5';
      charArray0[5] = '2';
      charArray0[6] = 'R';
      charArray0[7] = '2';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'R', 'R', 'o', '2', '5', '2', 'R', '2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test1037()  throws Throwable  {
      String string0 = StringUtils.leftPad("RPy,JfC|/vBQ`+L7", (-667), "RPy,JfC|/vBQ`+L7");
      assertEquals("RPy,JfC|/vBQ`+L7", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1038()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[4] = (-3.1042604F);
      floatArray0[2] = (-3.1042604F);
      String string0 = StringUtils.uncapitalize("\" should have a parent context.");
      assertEquals("\" should have a parent context.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("\" should have a parent context.", "\" should have a parent context.");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 574, 574);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1039()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The character ", "", "Comparator should not be null.");
      assertEquals("The character ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("The character ");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1697.8F);
      floatArray0[1] = (-158.28F);
      String string1 = StringUtils.rotate("", 2660);
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getDigits("x] d@Q)E.SVj");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("The character ", "Test '%s' was supposed to run no longer than %d ms.");
      assertEquals("The character ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.stripEnd("Could not resolve parameter of type %s.", "Fk*P LBUeM`/Wi&I?Ol!f40^i%!|#ARl\r");
      assertEquals("Could not resolve parameter of type %s.", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.lowerCase("0.040.0");
      assertEquals("0.040.0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.removeFirst("The character ", "9M!R3C/+ORr-R5e4");
      assertEquals("The character ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.replaceEachRepeatedly("*>QSbh", (String[]) null, (String[]) null);
      assertEquals("*>QSbh", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<Locale.FilteringMode> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      String string8 = StringUtils.join((List<?>) linkedList0, "maxWith cannot be negative", 109, 109);
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test1040()  throws Throwable  {
      String string0 = StringUtils.substringBetween(">", "\"`*)", ">");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1041()  throws Throwable  {
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("E#t&F", (String) null);
      assertEquals("E#t&F", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center("mHY{(7k7hC&OprhGT", 13);
      assertEquals("mHY{(7k7hC&OprhGT", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1042()  throws Throwable  {
      int[] intArray0 = StringUtils.toCodePoints("/&eR");
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {47, 38, 101, 82}, intArray0);
      
      String string0 = StringUtils.unwrap("on", (String) null);
      assertEquals("on", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1043()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "8M`!VwI<J)*@-PkS";
      String string0 = StringUtils.leftPad("8M`!VwI<J)*@-PkS", 76, "8M`!VwI<J)*@-PkS");
      assertEquals("8M`!VwI<J)*@-PkS8M`!VwI<J)*@-PkS8M`!VwI<J)*@-PkS8M`!VwI<J)*@8M`!VwI<J)*@-PkS", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'B';
  }

  @Test(timeout = 4000)
  public void test1044()  throws Throwable  {
      String string0 = StringUtils.leftPad("@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.", 9986, "@DefaultLocale not configured correctly. When not using a language tag, specify eitherlanguage, or language and country, or language and country and variant.");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1045()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals("", string0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1046()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("lH", "bWX}_@s|{8}S=iegg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 3, '`');
      assertNull(string1);
      
      String string2 = StringUtils.unwrap("bWX}_@s|{8}S=iegg", '`');
      assertEquals("bWX}_@s|{8}S=iegg", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1047()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The String must not be empty", "The String must not be empty");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1048()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1049()  throws Throwable  {
      String string0 = StringUtils.leftPad("', has a length less than 2", 2);
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1050()  throws Throwable  {
      String string0 = StringUtils.substringBetween("/=w)9`!egUy.31iVe", "/=w)9`!egUy.31iVe", "/=w)9`!egUy.31iVe");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1051()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1052()  throws Throwable  {
      String string0 = StringUtils.unwrap("'.", "'.");
      assertEquals("'.", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1053()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("g$U).lboyJs>");
      assertEquals("g$U).lboyJs>", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("g$U).lboyJs>", "Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("g$U).lboyJs>", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumeric("g$U).lboyJs>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.rightPad("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", 4);
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", "Ol!f40^i%!|#ARl");
      assertEquals("Ol!f40^i%!|#ARlFk*P LBUeM`/Wi&I?", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replaceOnce("g$U).lboyJs>", (String) null, "Minimum abbreviation width is %d");
      assertEquals("g$U).lboyJs>", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.appendIfMissing("Minimum abbreviation width is %d", "g$U).lboyJs>", (CharSequence[]) null);
      assertEquals("Minimum abbreviation width is %dg$U).lboyJs>", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string7 = StringUtils.abbreviate("g$U).lboyJs>", 4);
      assertEquals("g...", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.leftPad(":tt_jh81q'z=a<}tK5", 4, "g$U).lboyJs>");
      assertEquals(":tt_jh81q'z=a<}tK5", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ":tt_jh81q'z=a<}tK5", 4, 13);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.defaultString("org.junitpioneer.jupiter.params.IntRange");
      assertEquals("org.junitpioneer.jupiter.params.IntRange", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      
      boolean boolean2 = StringUtils.isAllLowerCase("g$U).lboyJs>");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, ":tt_jh81q'z=a<}tK5");
      assertNull(stringArray0);
      
      String string10 = StringUtils.join((Object[]) null, 'n', 4, 13);
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test1054()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 1920);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1055()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1056()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ">t", " vs ");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) ">t", (CharSequence) ">t", Integer.MAX_VALUE);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1057()  throws Throwable  {
      String string0 = StringUtils.prependIfMissingIgnoreCase("\r", "\r", (CharSequence[]) null);
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "\r");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1058()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", (CharSequence) "The String must not be empty", 1157);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1059()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Don't clear/set the same entry more than once.", " ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1060()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1061()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", "\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1062()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "_x%GT/";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.center("", (-2937));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "_x%GT/", (-2937));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width with offset is %d", "3(:K[");
      assertTrue(boolean0);
      
      String string1 = StringUtils.toRootUpperCase("Method `CartesianProductTest.Sets ");
      assertEquals("METHOD `CARTESIANPRODUCTTEST.SETS ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1063()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'P');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1064()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(".A-ZjLylvBDex", '[');
      assertEquals(".A-ZjLylvBDex", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1065()  throws Throwable  {
      String string0 = StringUtils.substringAfter("m#/6bs8|X", 381);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1066()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1067()  throws Throwable  {
      String string0 = StringUtils.wrap("maxWith cannot be negative", '7');
      assertEquals("7maxWith cannot be negative7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("2=R)pe)jHI");
      assertEquals("2=R)pe)jH", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("2=R)pe)jHI", '7');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1068()  throws Throwable  {
      String string0 = StringUtils.trim("EI");
      assertEquals("EI", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("EI");
      assertEquals("EI", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.normalizeSpace("EI");
      assertEquals("EI", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.toRootLowerCase("+Uyq$TxjymdlU");
      assertEquals("+uyq$txjymdlu", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.isMixedCase("EI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1069()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.stripStart("offset cannot be nega-ie<GkG", "maxWith cannot be negative");
      assertEquals("ffset cannot be nega-ie<GkG", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("ffset cannot be nega-ie<GkG");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceEach("ffset cannot be nega-ie<GkG", stringArray0, (String[]) null);
      assertEquals("ffset cannot be nega-ie<GkG", string1);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1070()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MAX_VALUE, 4209);
      assertNotNull(string1);
      assertEquals("", string1);
      assertEquals(3, objectArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = "Illegal range. Equal from and to will produce an empty range.";
      stringArray0[4] = "";
      stringArray0[5] = "org.junitpioneer.jupiter.StdIoExtension";
      String string2 = StringUtils.replaceEach("org.junitpioneer.jupiter.StdIoExtension", stringArray0, (String[]) null);
      assertEquals("org.junitpioneer.jupiter.StdIoExtension", string2);
      assertEquals(6, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("org.junitpioneer.jupiter.StdIoExtension", 4209, Integer.MAX_VALUE);
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test1071()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1072()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 4146, '$');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string3);
      assertEquals(5, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(101);
      assertNotNull(charBuffer0);
      assertEquals(101, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(101, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(101, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(101, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      boolean boolean0 = StringUtils.containsIgnoreCase(stringArray0[1], charBuffer0);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      assertEquals(101, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(101, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(101, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(101, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      
      String string4 = StringUtils.join((double[]) null, '*');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1073()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      String string1 = StringUtils.leftPad(" ", 0, 'e');
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOf((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      String string2 = StringUtils.stripStart("A,rnU;pVK", " ");
      assertEquals("A,rnU;pVK", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 16;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) 16;
      String string3 = StringUtils.difference(" ", (String) null);
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.trimToEmpty(" ");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'g');
      assertNull(stringArray0);
      
      String string5 = StringUtils.join((long[]) null, '5');
      assertNull(string5);
      
      String string6 = StringUtils.removeStart(", ", "fg,~^_ =Fo5J#");
      assertEquals(", ", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test1074()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("3RYoO", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.trim((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.chomp(" ");
      assertEquals(" ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substring((String) null, 0);
      assertNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 32);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.LF;
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.stripEnd("\n\n", "y1;Y<F7+Gz");
      assertEquals("\n\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      
      int int1 = StringUtils.countMatches((CharSequence) "9yWR<?[SnY4", 'R');
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test1075()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      String string0 = StringUtils.join(doubleArray0, 'q');
      assertEquals("0.0q0.0", string0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = StringUtils.split("0.0q0.0");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1077()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", 'Y');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1078()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.join(stringArray0);
      assertEquals("", string0);
      assertEquals(6, stringArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1079()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add(stream0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean3 = linkedHashSet0.add((Object) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      assertTrue(linkedHashSet0.contains(object0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.upperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.join((double[]) null, 'J', 0, 5);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("fU_7SZu1o7hGV]", "Could not resolve parameter of type %s.$", "0.0O3.0");
      assertNull(string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "fU_7SZu1o7hGV]", '8');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean4 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      String string5 = StringUtils.join(iterator0, "yy pw jQ");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("Could not resolve parameter of type %s.$"));
      assertTrue(linkedHashSet0.contains(object0));
  }

  @Test(timeout = 4000)
  public void test1080()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'e');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1081()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("~hE~XUGu<U;Ej1eY");
      assertEquals("~hE~XUGu<U;Ej1eY", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1082()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = StringUtils.lowerCase("Array element ", locale0);
      assertEquals("array element ", string0);
      assertNotNull(string0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      boolean boolean0 = StringUtils.isBlank("array element ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1083()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-1172));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1084()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1085()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-19));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1086()  throws Throwable  {
      float[] floatArray0 = new float[2];
      String string0 = StringUtils.join(floatArray0, '&');
      assertEquals("0.0&0.0", string0);
      assertEquals(2, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.defaultString("0.0&0.0", "0.0&0.0");
      assertEquals("0.0&0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("0.0&0.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1087()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.join(floatArray0, '&');
      assertEquals("0.0", string0);
      assertEquals(1, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      String string1 = StringUtils.defaultString("0.0", "0.0");
      assertEquals("0.0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("0.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1088()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2936.9956F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2238.7F);
      floatArray0[3] = 2211.9023F;
      floatArray0[4] = (-820.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 344.0F;
      floatArray0[7] = 4621.6255F;
      floatArray0[8] = 0.0F;
      String string0 = StringUtils.join(floatArray0, 'Y');
      assertEquals("2936.9956Y0.0Y-2238.7Y2211.9023Y-820.0Y0.0Y344.0Y4621.6255Y0.0", string0);
      assertEquals(9, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {2936.9956F, 0.0F, (-2238.7F), 2211.9023F, (-820.0F), 0.0F, 344.0F, 4621.6255F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1089()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1090()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "g");
      assertEquals("or.apache.commons.lan3.StrinUtils", string0);
      assertNotNull(string0);
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("g"));
      
      int int0 = StringUtils.countMatches((CharSequence) "3(:K[", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultIfBlank("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "3(:K[";
      charSequenceArray0[2] = (CharSequence) "3(:K[";
      charSequenceArray0[3] = (CharSequence) "g";
      charSequenceArray0[4] = (CharSequence) "g";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[6] = (CharSequence) "3(:K[";
      charSequenceArray0[7] = (CharSequence) "g";
      charSequenceArray0[8] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "g", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1091()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.abbreviate("", 10, 10);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("", 10, 321);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(10);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(10, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      assertEquals(10, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '#';
      charArray0[2] = '4';
      charArray0[3] = 'H';
      charArray0[4] = '%';
      CharBuffer charBuffer1 = charBuffer0.put(charArray0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(5, charArray0.length);
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'i', '#', '4', 'H', '%'}, charArray0);
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(10, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(5, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(5, charBuffer1.position());
      assertEquals(5, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(10, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(10, charBuffer1.limit());
      assertEquals(5, charBuffer1.remaining());
      
      char[] charArray1 = null;
      Buffer buffer0 = charBuffer0.limit(10);
      assertSame(charBuffer0, charBuffer1);
      assertNotNull(buffer0);
      assertEquals(5, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(10, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(5, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertTrue(buffer0.hasRemaining());
      assertEquals(10, buffer0.limit());
      assertFalse(buffer0.isDirect());
      assertTrue(buffer0.hasArray());
      assertEquals(10, buffer0.capacity());
      assertEquals(5, buffer0.remaining());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.isReadOnly());
      assertEquals(5, buffer0.position());
      
      // Undeclared exception!
      try { 
        charBuffer0.get((char[]) null, 10, 322);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1092()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 459.3239F;
      floatArray0[4] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertEquals("0.0#-1.0#459.3239#459.3239#0.0", string0);
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 459.3239F, 459.3239F, 0.0F}, floatArray0, 0.01F);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("R-=4w!~V0Vo");
      assertFalse(boolean0);
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("", "oAn");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test1093()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("g", "g", "g");
      assertEquals("g", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("g", "g");
      assertEquals("g", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = (-998);
      Vector<Locale.FilteringMode> vector0 = null;
      try {
        vector0 = new Vector<Locale.FilteringMode>((-998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -998
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test1094()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(")o$+f\"*s+5vwgv|>Wv", ")o$+f\"*s+5vwgv|>Wv");
      assertEquals(")o$+f\"*s+5vwgv|>Wv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1095()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("(MIl>&H");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      
      byte[] byteArray0 = StringUtils.getBytes("(MIl>&H", charset0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)40, (byte)77, (byte)73, (byte)108, (byte)62, (byte)127, (byte)38, (byte)72}, byteArray0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      String string0 = StringUtils.center((String) null, 22, "");
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("%lx(", "OwTz3;Htub![Y&?R _K", "");
      assertEquals("%lx(", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      Locale locale0 = new Locale(".Q7h&Il`h;");
      assertNotNull(locale0);
      assertEquals(".q7h&il`h;", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".q7h&il`h;", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.lowerCase("#khQaiRzL;dJO@", locale0);
      assertEquals("#khqairzl;djo@", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(".q7h&il`h;", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".q7h&il`h;", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      charSequenceArray0[1] = (CharSequence) "#khqairzl;djo@";
      String string3 = StringUtils.lowerCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "%lx(";
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(5, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "T.<.", 4897, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBefore("-1234.4836444196O3.0", "%lx(");
      assertEquals("-1234.4836444196O3.0", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      int int2 = StringUtils.indexOf((CharSequence) "T.<.", 22);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test1096()  throws Throwable  {
      String string0 = StringUtils.center("jPjv", (-953), "jPjv");
      assertEquals("jPjv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1097()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = "\n";
      String string2 = StringUtils.join(objectArray0, "\n");
      assertEquals("", string2);
      assertEquals(0, objectArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 1438, "\n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.stripToEmpty(string3);
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 1438, 1438);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1098()  throws Throwable  {
      String string0 = StringUtils.trimToNull("The String mus not be empty");
      assertEquals("The String mus not be empty", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "The String mus not be empty", 3, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1099()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, (String) null, 3544, 4167);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 4167
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1100()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("gOo9_", "");
      assertEquals("gOo9_", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1101()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1102()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfter("' matches '", "+6");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1980);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("16.0W16.0W16.0W16.0W16.0W0.0", "\r", false);
      assertEquals(36, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.trimToNull("gUF6)81 ");
      assertEquals("gUF6)81", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int2 = StringUtils.indexOf((CharSequence) null, 24, (-1073741822));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.capitalize("fU_7SZu1o7hGV]No instructins to disable");
      assertEquals("FU_7SZu1o7hGV]No instructins to disable", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.substringBefore("Minimum abbreviation width is %d", "u>\"%)t;LW3ww");
      assertEquals("Minimum abbreviation width is %d", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1103()  throws Throwable  {
      int int0 = 0;
      String string0 = StringUtils.center("Mx>`HvP", 0, "Mx>`HvP");
      assertEquals("Mx>`HvP", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "Mx>`HvP", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.substringBeforeLast("Expected exception %s was not thrown.", (String) null);
      assertEquals("Expected exception %s was not thrown.", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Expected exception %s was not thrown.", "Expected exception %s was not thrown.");
      assertTrue(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      boolean boolean1 = linkedList0.add((Object) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "Expected exception %s was not thrown.", (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1104()  throws Throwable  {
      String string0 = StringUtils.replace("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("", 16, 16);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1105()  throws Throwable  {
      String string0 = StringUtils.abbreviate("xpB6Cfo]c:,R?ij", "", 3674, 3674);
      assertEquals("xpB6Cfo]c:,R?ij", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1106()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[1] = (CharSequence) "\r";
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      charSequenceArray0[5] = (CharSequence) "\r";
      charSequenceArray0[6] = (CharSequence) "\r";
      charSequenceArray0[7] = (CharSequence) "\r";
      charSequenceArray0[8] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceChars("\r", 'H', 'H');
      assertEquals("\r", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(charSequenceArray0[4]);
      assertFalse(boolean1);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.center("\n", 56, 'f');
      assertEquals("fffffffffffffffffffffffffff\nffffffffffffffffffffffffffff", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.rotate("StdIoExtension is active but neither System.out or System.in are getting redirected.,qyApuZ:5", 126);
      assertEquals(" are getting redirected.,qyApuZ:5StdIoExtension is active but neither System.out or System.in", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" are getting redirected.,qyApuZ:5StdIoExtension is active but neither System.out or System.in", "Ks(Z X='");
      assertEquals(16, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.capitalize("Ks(Z X='");
      assertEquals("Ks(Z X='", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1107()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "q<DPM1tLV`u'Q#v");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1108()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.join(objectArray0, "\n");
      assertEquals("", string1);
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("p{InCombiningDiacriticalMarks}+", 1438, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceIgnoreCase("\n", "\n", "$d*f0z7JWXuo's?~)d", 100);
      assertEquals("$d*f0z7JWXuo's?~)d", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripStart(string2, "");
      assertNotNull(string4);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.wrap((String) null, 'x');
      assertNull(string5);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "$d*f0z7JWXuo's?~)d", 100);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("$d*f0z7JWXuo's?~)d");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.toRootUpperCase("\n");
      assertEquals("\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string7 = StringUtils.upperCase("\n");
      assertEquals("\n", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string8 = StringUtils.abbreviateMiddle((String) null, string2, 1438);
      assertNull(string8);
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      
      String string9 = StringUtils.reverse(string4);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string7));
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string10 = StringUtils.wrap("p{InCombiningDiacriticalMarks}+", '8');
      assertEquals("8p{InCombiningDiacriticalMarks}+8", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test1109()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1304);
      doubleArray0[1] = 1.5;
      doubleArray0[2] = (double) (-1304);
      doubleArray0[3] = (double) (-1304);
      String string0 = StringUtils.join(doubleArray0, '7');
      assertEquals("-1304.071.57-1304.07-1304.0", string0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-1304.0), 1.5, (-1304.0), (-1304.0)}, doubleArray0, 0.01);
      
      charSequenceArray0[1] = (CharSequence) "-1304.071.57-1304.07-1304.0";
      charSequenceArray0[3] = (CharSequence) "52^eC!>,Q'`gK:";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("-1304.071.57-1304.07-1304.0", charSequence0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      
      String string1 = StringUtils.appendIfMissing("52^eC!>,Q'`gK:", "-1304.071.57-1304.07-1304.0", charSequenceArray0);
      assertEquals("52^eC!>,Q'`gK:", string1);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.capitalize("-1304.071.57-1304.07-1304.0");
      assertEquals("-1304.071.57-1304.07-1304.0", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf((CharSequence) ", ", (CharSequence) "52^eC!>,Q'`gK:");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripStart("52^eC!>,Q'`gK:", "3g`3*&YwL/X D");
      assertEquals("52^eC!>,Q'`gK:", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1304);
      floatArray0[2] = (float) (-1304);
      floatArray0[3] = (float) (-1304);
      String string4 = StringUtils.join(floatArray0, '7');
      assertEquals("-1.07-1304.07-1304.07-1304.0", string4);
      assertEquals(4, floatArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertArrayEquals(new float[] {(-1.0F), (-1304.0F), (-1304.0F), (-1304.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test1110()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "g");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("g");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring((String) null, 101, 321);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("/||]j$SSh8#5kK", "g", "&x?)/^A");
      assertEquals("/||]j$SSh8#5kK", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("...");
      assertEquals("...", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isAllUpperCase("g");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1111()  throws Throwable  {
      String string0 = StringUtils.rotate("5Ho=", (-878));
      assertEquals("o=5H", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1112()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replace("\r", (String) null, "v3CZ$");
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.replaceOnceIgnoreCase((String) null, "", "");
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("K", 8192, 't');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      int int0 = StringUtils.compareIgnoreCase("X", (String) null, true);
      assertEquals(1, int0);
      
      String string5 = StringUtils.removeEnd((String) null, "Locale must not be null");
      assertNull(string5);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test1113()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1892;
      shortArray0[1] = (short)102;
      shortArray0[2] = (short)35;
      String string0 = StringUtils.join(shortArray0, 'M', 4005, 2682);
      assertEquals("", string0);
      assertEquals(3, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)1892, (short)102, (short)35}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test1114()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1115()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1116()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.wrap(stringArray0[0], '\f');
      assertEquals(1, stringArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1117()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      boolean boolean0 = StringUtils.endsWithAny("ve", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(11, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1118()  throws Throwable  {
      String string0 = StringUtils.rotate("c0bewB", 3483);
      assertEquals("ewBc0b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1119()  throws Throwable  {
      int int0 = 2967;
      String string0 = StringUtils.substring("'.", 2967, 2967);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootUpperCase("maxWith cannot be negative");
      assertEquals("MAXWITH CANNOT BE NEGATIVE", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = "";
      String string3 = StringUtils.removeAll("'.", "");
      assertEquals("'.", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.endsWith("'.", "MAXWITH CANNOT BE NEGATIVE");
      assertFalse(boolean0);
      
      String string4 = StringUtils.normalizeSpace("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.upperCase("'.");
      assertEquals("'.", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = "hK,pz0k~};";
      String string7 = "";
      String[] stringArray0 = StringUtils.split("hK,pz0k~};", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string8 = StringUtils.wrap("", 'Q');
      assertEquals("", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNotEmpty("'.");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string9 = StringUtils.removeFirst("'.", "");
      assertEquals("'.", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      
      int int1 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      try { 
        StringUtils.getBytes("", "'.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1120()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      try { 
        StringUtils.getBytes(" ", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1121()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array");
      assertEquals(45, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1122()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("inimum abbreviation width wit of2set is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1123()  throws Throwable  {
      String string0 = StringUtils.replaceAll("Locale must not be null", "Locale must not be null", "Locale must not be null");
      assertEquals("Locale must not be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1124()  throws Throwable  {
      String string0 = StringUtils.replaceAll("SYq} uh9!`fr*C/}v", "", "Gtf8'`5!>3pg*Gh");
      assertEquals("Gtf8'`5!>3pg*GhSGtf8'`5!>3pg*GhYGtf8'`5!>3pg*GhqGtf8'`5!>3pg*Gh}Gtf8'`5!>3pg*Gh Gtf8'`5!>3pg*GhuGtf8'`5!>3pg*GhhGtf8'`5!>3pg*Gh9Gtf8'`5!>3pg*Gh!Gtf8'`5!>3pg*Gh`Gtf8'`5!>3pg*GhfGtf8'`5!>3pg*GhrGtf8'`5!>3pg*Gh*Gtf8'`5!>3pg*GhCGtf8'`5!>3pg*GhGtf8'`5!>3pg*Gh/Gtf8'`5!>3pg*Gh}Gtf8'`5!>3pg*GhvGtf8'`5!>3pg*Gh", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Gtf8'`5!>3pg*Gh";
      charSequenceArray0[2] = (CharSequence) "SYq} uh9!`fr*C/}v";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Gtf8'`5!>3pg*Gh";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1125()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.junitpioneer.jupiter.params.DoubleRange", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlpha("org.junitpioneer.jupiter.params.DoubleRange");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1126()  throws Throwable  {
      String string0 = StringUtils.substringAfter("/>A/y{oXnU~C1", "' matches '");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("' matches '");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[1] = (CharSequence) "' matches '";
      charSequenceArray0[2] = (CharSequence) "/>A/y{oXnU~C1";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "' matches '";
      charSequenceArray0[5] = (CharSequence) "";
      char char0 = '\\';
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("' matches '"));
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains("' matches '"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("( Gi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.( Gi
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test1127()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "";
      int int0 = (-1759);
      String string1 = StringUtils.join((List<?>) linkedList0, "", 0, (-1759));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = '(';
      charArray0[2] = ';';
      charArray0[3] = '\\';
      int int1 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int1);
      assertEquals(4, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'C', '(', ';', '\\'}, charArray0);
      
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList1.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.contains(0));
      assertTrue(linkedList1.contains(object0));
      
      ListIterator<Object> listIterator0 = linkedList1.listIterator();
      assertNotNull(listIterator0);
      assertEquals(1, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList1.contains(0));
      assertTrue(linkedList1.contains(object0));
      
      boolean boolean1 = linkedList1.add((Object) listIterator0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertFalse(linkedList1.contains(0));
      assertTrue(linkedList1.contains(object0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, '1');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test1128()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = stack0.add("ijpkorg.apache.commons.lang3.StringUtils");
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertEquals("[ijpkorg.apache.commons.lang3.StringUtils]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("ijpkorg.apache.commons.lang3.StringUtils"));
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, 'Q');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test1129()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceEach("org.junitpioneer.vintage.TimeoutExtension", (String[]) null, (String[]) null);
      assertEquals("org.junitpioneer.vintage.TimeoutExtension", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test1130()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("l7DVL51R", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1131()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap("{!#`&dyF~ZTr;dw", (String) null);
      assertEquals("{!#`&dyF~ZTr;dw", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("naAJ(b.>", (String) null);
      assertEquals("naAJ(b.>", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      ServiceLoader<Locale.FilteringMode> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("{!#`&dyF~ZTr;dw"));
      
      boolean boolean0 = linkedList0.add((Object) serviceLoader0);
      assertTrue(boolean0);
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", serviceLoader0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("{!#`&dyF~ZTr;dw"));
      
      String string3 = StringUtils.join((Iterable<?>) linkedList0, 'a');
      assertEquals("java.util.ServiceLoader[java.util.Locale$FilteringMode]", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("{!#`&dyF~ZTr;dw"));
  }

  @Test(timeout = 4000)
  public void test1132()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("org.apache.commons.lang3.Charsets", stringArray0);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1133()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1134()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "e4mX]CG^", 27);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("v%m");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1135()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oy<1Sy^V2n";
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "9IMs6/W oje*ne";
      String string0 = StringUtils.removeIgnoreCase("E#t&F", "E#t&F");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("9IMs6/W oje*ne", "9IMs6/W oje*ne");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("E#t&F", "zm");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString("V");
      assertEquals("V", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1136()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1137()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1138()  throws Throwable  {
      String string0 = StringUtils.wrap("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %d", (CharSequence) "Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %d");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1139()  throws Throwable  {
      String string0 = StringUtils.truncate(")aw%AXCc<gj", 13, 37);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '1');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1140()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) null;
      objectArray0[1] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, Integer.MIN_VALUE, 1495);
      assertEquals("", string1);
      assertEquals(2, objectArray0.length);
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.center("a`", Integer.MIN_VALUE, 'c');
      assertEquals("a`", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "a`", (CharSequence) "a`", (-119));
      assertEquals(0, int0);
      
      String string4 = StringUtils.getDigits("Y");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      String string5 = StringUtils.normalizeSpace("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("maxWith cannot be negative", Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1141()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chop("3RYoO");
      assertEquals("3RYo", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "3RYo", (CharSequence) "3RYoO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1142()  throws Throwable  {
      String string0 = StringUtils.center("_j<ly5o2=Z", 8192, (String) null);
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace(string0);
      assertEquals("_j<ly5o2=Z", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = string0;
      stringArray0[2] = "_j<ly5o2=Z";
      stringArray0[3] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[0]);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test1143()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "3~~Hrzq*}/f,&>=&";
      objectArray0[1] = (Object) "3~~Hrzq*}/f,&>=&";
      objectArray0[2] = (Object) "3~~Hrzq*}/f,&>=&";
      objectArray0[3] = (Object) "3~~Hrzq*}/f,&>=&";
      objectArray0[4] = (Object) "3~~Hrzq*}/f,&>=&";
      objectArray0[5] = (Object) "3~~Hrzq*}/f,&>=&";
      objectArray0[6] = (Object) "3~~Hrzq*}/f,&>=&";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "3~~Hrzq*}/f,&>=&";
      String string0 = StringUtils.join(objectArray0, "3~~Hrzq*}/f,&>=&", Integer.MIN_VALUE, 12);
      assertEquals("", string0);
      assertEquals(9, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("\r", "\n\n", "The character ");
      assertEquals("\r", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.repeat("r.params.IntRange", 1495);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\r", "r.params.IntRange");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("3~~Hrzq*}/f,&>=&", "3~~Hrzq*}/f,&>=&");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1144()  throws Throwable  {
      String string0 = StringUtils.truncate("", 22);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1145()  throws Throwable  {
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceAll("\n", "\n", "\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n", (-941));
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.getDigits("\n");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.normalizeSpace("\n");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.truncate((String) null, 350, 8154);
      assertNull(string4);
      
      String string5 = StringUtils.toRootLowerCase("\n");
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test1146()  throws Throwable  {
      String string0 = StringUtils.getDigits("Minimm abbreviation width withoffset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1147()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("eF9");
      assertEquals("ef9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1148()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = 'V';
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)128;
      shortArray0[2] = (short)116;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)9;
      shortArray0[6] = (short) (-742);
      String string0 = StringUtils.join(shortArray0, 'N', 400, 400);
      assertEquals("", string0);
      assertEquals(7, shortArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)128, (short)0, (short)116, (short)0, (short)9, (short)0, (short) (-742)}, shortArray0);
      
      String string1 = StringUtils.join((Object[]) null, "h", (int) (short)0, (int) (short)116);
      assertNull(string1);
      
      String string2 = StringUtils.replace((String) null, (String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.toRootLowerCase((String) null);
      assertNull(string3);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isBlank("h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1149()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "\n");
      assertEquals("", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1150()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1234.4836444196);
      doubleArray0[1] = 3.0;
      String string0 = StringUtils.join(doubleArray0, 'O');
      assertEquals("-1234.4836444196O3.0", string0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new double[] {(-1234.4836444196), 3.0}, doubleArray0, 0.01);
      
      String string1 = StringUtils.getDigits("Report entry can not have variables in the key: { key=\"%s\" value=\"%s\" }");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.abbreviate("-1234.4836444196O3.0", "-1234.4836444196O3.0", 49);
      assertEquals("-1234.4836444196O3.0", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.unwrap("", 'U');
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      
      String string4 = StringUtils.remove("", 'O');
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string5 = StringUtils.left("", 49);
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.substringBefore("", "");
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.lowerCase("j");
      assertEquals("j", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.rightPad("", 49);
      assertEquals("                                                 ", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string9 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string9);
      assertEquals(3, stringArray0.length);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      
      String string10 = StringUtils.abbreviate("", 49, 49);
      assertEquals("", string10);
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string3));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "-1234.4836444196O3.0");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string11 = StringUtils.join((Object[]) stringArray0, "J;.45@qN");
      assertEquals("J;.45@qNJ;.45@qN", string11);
      assertEquals(3, stringArray0.length);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string7));
      
      String string12 = StringUtils.getDigits("J;.45@qN");
      assertEquals("45", string12);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string11));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string4));
      
      String string13 = StringUtils.replaceIgnoreCase("-1234.4836444196O3.0", "", "");
      assertEquals("-1234.4836444196O3.0", string13);
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string9));
      assertTrue(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string3));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string5));
      assertTrue(string13.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "-1234.4836444196O3.0", (CharSequence) "j");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "-1234.4836444196O3.0";
      charSequenceArray0[3] = (CharSequence) "j";
      boolean boolean3 = StringUtils.startsWithAny("-1234.4836444196O3.0", charSequenceArray0);
      assertTrue(boolean3);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test1151()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("\n", (-1339));
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("\n", (-1339));
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", 76);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", ">Wa{=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.center("\n", (-1339), 'c');
      assertEquals("\n", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\n", (CharSequence) ">Wa{=");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.stripAccents("x(L:.7^~sv");
      assertEquals("x(L:.7^~sv", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split("\n", 'c');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.length("\n");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean3);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string4 = StringUtils.join((int[]) null, '{', 3087, 4);
      assertNull(string4);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "\n", 36);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test1152()  throws Throwable  {
      String string0 = StringUtils.getIfEmpty("M)U5jJt|", (Supplier<String>) null);
      assertEquals("M)U5jJt|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1153()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      String string0 = StringUtils.join(objectArray0, "/aV/[.;N", 595, 127);
      assertEquals("", string0);
      assertEquals(5, objectArray0.length);
      assertNotNull(string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("/aV/[.;N", supplier0);
      assertEquals("/aV/[.;N", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center("a`", (-119), 'c');
      assertEquals("a`", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "a`", (CharSequence) "", 127);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("a`");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.normalizeSpace("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.truncate("/aV/[.;N", 1271, 1399);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.toRootLowerCase("E-8$M40tqw1a79");
      assertEquals("e-8$m40tqw1a79", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test1154()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      String string1 = StringUtils.join(objectArray0, (String) null, 262, 262);
      assertEquals("", string1);
      assertEquals(7, objectArray0.length);
      assertNotNull(string1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 262;
      longArray0[1] = (long) 262;
      longArray0[2] = (long) 262;
      longArray0[3] = (long) 262;
      longArray0[4] = (long) 262;
      longArray0[5] = (long) 262;
      String string2 = StringUtils.join(longArray0, 'P');
      assertEquals("262P262P262P262P262P262", string2);
      assertEquals(6, longArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {262L, 262L, 262L, 262L, 262L, 262L}, longArray0);
      
      boolean boolean0 = StringUtils.isEmpty("262P262P262P262P262P262");
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.join(objectArray0, "");
      assertEquals("", string4);
      assertEquals(7, objectArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'P');
      assertEquals(0, int0);
      
      String string5 = StringUtils.join((int[]) null, 'P');
      assertNull(string5);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-63.212311842045);
      doubleArray0[1] = (double) 262L;
      doubleArray0[2] = (double) 262L;
      doubleArray0[3] = (double) 'P';
      doubleArray0[4] = (double) 262L;
      doubleArray0[5] = (double) 262;
      doubleArray0[6] = (double) 262L;
      doubleArray0[7] = (double) 'P';
      doubleArray0[8] = (double) 262L;
      String string6 = StringUtils.join(doubleArray0, 'P');
      assertEquals("-63.212311842045P262.0P262.0P80.0P262.0P262.0P262.0P80.0P262.0", string6);
      assertEquals(9, doubleArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new double[] {(-63.212311842045), 262.0, 262.0, 80.0, 262.0, 262.0, 262.0, 80.0, 262.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1155()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[1]);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test1156()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "_x%GT/";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.center("", (-2937));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "_x%GT/", (-2937));
      assertEquals((-1), int0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(""));
      
      String string1 = StringUtils.join((Iterable<?>) arrayDeque0, '0');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(""));
  }

  @Test(timeout = 4000)
  public void test1157()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("|A~Il", "|A~Il");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1158()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("BUeM`/Wi&I?\n", "BUeM`/Wi&I?\n", charSequenceArray0);
      assertEquals("BUeM`/Wi&I?\n", string0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1159()  throws Throwable  {
      String string0 = StringUtils.stripEnd("p5.O", "Search and Re");
      assertEquals("p5.O", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1160()  throws Throwable  {
      String string0 = StringUtils.defaultString("]{j,6r@?}o");
      assertEquals("]{j,6r@?}o", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "]{j,6r@?}o";
      charSequenceArray0[1] = (CharSequence) "]{j,6r@?}o";
      charSequenceArray0[2] = (CharSequence) "]{j,6r@?}o";
      String string1 = StringUtils.appendIfMissing("]{j,6r@?}o", "]{j,6r@?}o", charSequenceArray0);
      assertEquals("]{j,6r@?}o", string1);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]{j,6r@?}o";
      stringArray0[1] = "]{j,6r@?}o";
      stringArray0[2] = "]{j,6r@?}o";
      stringArray0[3] = "]{j,6r@?}o";
      stringArray0[4] = "]{j,6r@?}o";
      stringArray0[5] = "]{j,6r@?}o";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test1161()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 1639, 1639);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.stripEnd("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.remove("3g[yE8~z<S3x0<Oz~W", "");
      assertEquals("3g[yE8~z<S3x0<Oz~W", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      charSequenceArray0[5] = (CharSequence) "3g[yE8~z<S3x0<Oz~W";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1162()  throws Throwable  {
      String string0 = StringUtils.stripEnd("\r", "\r");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1163()  throws Throwable  {
      String string0 = StringUtils.stripToNull("5Ho");
      assertEquals("5Ho", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1164()  throws Throwable  {
      String string0 = "org.junitpioneer.jupiter.params.LongRange";
      String string1 = "*-I+[8M> ?n";
      String string2 = StringUtils.stripEnd("org.junitpioneer.jupiter.params.LongRange", "*-I+[8M> ?n");
      assertEquals("org.junitpioneer.jupiter.params.LongRange", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.params.LongRange"));
      
      Stream<Object> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.params.LongRange"));
      
      char char0 = 'M';
      boolean boolean0 = linkedList0.offerFirst("*-I+[8M> ?n");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains("org.junitpioneer.jupiter.params.LongRange"));
      assertTrue(linkedList0.contains("*-I+[8M> ?n"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      Locale.FilteringMode[] locale_FilteringModeArray0 = Locale.FilteringMode.values();
      assertEquals(5, locale_FilteringModeArray0.length);
      assertNotNull(locale_FilteringModeArray0);
      
      // Undeclared exception!
      try { 
        Locale.FilteringMode.valueOf("*-I+[8M> ?n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.FilteringMode.*-I+[8M> ?n
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test1165()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1166()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "/=w)9`!egUy.31iVe", 98);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1167()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1168()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 3674, 3674);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1169()  throws Throwable  {
      String string0 = StringUtils.substringAfter("gg", "gg");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceIgnoreCase("[`~d.4v'Q6mto)Bj", "", "\u0001");
      assertEquals("[`~d.4v'Q6mto)Bj", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1170()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1171()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.exception.CloneFailedExceptionorg.apache.commons.lang3.exception.CloneFailedException", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedExceptionorg.apache.commons.lang3.exception.CloneFailedException");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1172()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("9wmy*8qto)+2", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1173()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1174()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another>", "xu_I16DcZ L", (-394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 12
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1175()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("_", (-1759));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1176()  throws Throwable  {
      String string0 = StringUtils.abbreviate("jPjv", "jPjv", 74);
      assertEquals("jPjv", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1177()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("E#t&F", "E#t&F", (-3218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1178()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add((Object) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      assertEquals("fU_7SZu1o7hGV]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "P27td#b<8");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean3 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(2891));
      
      String string3 = StringUtils.stripToNull("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test1179()  throws Throwable  {
      String string0 = StringUtils.replace("Wie)R+[:", "EMC<F;G#p#f", "Wie)R+[:");
      assertEquals("Wie)R+[:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1180()  throws Throwable  {
      String string0 = StringUtils.repeat("?", 3695);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("?");
      assertEquals("?", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      String string2 = StringUtils.replaceOnceIgnoreCase("i?_#jw", "?", "8xsd^{cp$EZR3<F");
      assertEquals("i8xsd^{cp$EZR3<F_#jw", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "i8xsd^{cp$EZR3<F_#jw";
      charSequenceArray0[2] = (CharSequence) "?";
      charSequenceArray0[3] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[6] = (CharSequence) "?";
      charSequenceArray0[7] = (CharSequence) "?";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test1181()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("uaJ0Lt3", "\u0001", "\u0001");
      assertEquals("uaJ0Lt3", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1182()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean1 = linkedHashSet0.add(object0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean2 = linkedHashSet0.add(stream0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      boolean boolean3 = linkedHashSet0.add((Object) null);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      assertEquals("fU_7SZu1o7hGV]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "P27td#b<8");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean4 = StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(0));
      
      ListIterator<Object> listIterator0 = stack0.listIterator(0);
      assertNotNull(listIterator0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(0));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, ' ');
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(stack0.contains(0));
      
      String string4 = StringUtils.upperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.rightPad("erkL", (-3626), 'l');
      assertEquals("erkL", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("fU_7SZu1o7hGV]");
      assertEquals(12, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.trimToNull("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "P27td#b<8", "erkL");
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      
      String string7 = StringUtils.toRootUpperCase("fU_7SZu1o7hGV]");
      assertEquals("FU_7SZU1O7HGV]", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      
      String string9 = StringUtils.replaceIgnoreCase("fU_7SZu1o7hGV]", "A]/Xcr3g&Y[|t0`!,}", (String) null, (-3626));
      assertEquals("fU_7SZu1o7hGV]", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test1183()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "J!M", (CharSequence) "J!M", (-1770));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1184()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("org.junitpioneer.jupiter.CartesianValueArgumentsProviderorg.junitpioneer.jupiter.CartesianValueArgumentsProvider");
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("org.junitpioneer.jupiter.CartesianValueArgumentsProviderorg.junitpioneer.jupiter.CartesianValueArgumentsProvider"));
      
      boolean boolean1 = arrayList0.add("Minimum abbreviation width with offset is %ds'Gni/56P<");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("org.junitpioneer.jupiter.CartesianValueArgumentsProviderorg.junitpioneer.jupiter.CartesianValueArgumentsProvider"));
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "Object varargs must not be null");
      assertEquals("org.junitpioneer.jupiter.CartesianValueArgumentsProviderorg.junitpioneer.jupiter.CartesianValueArgumentsProviderObject varargs must not be nullMinimum abbreviation width with offset is %ds'Gni/56P<", string0);
      assertNotNull(string0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.contains("org.junitpioneer.jupiter.CartesianValueArgumentsProviderorg.junitpioneer.jupiter.CartesianValueArgumentsProvider"));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.junitpioneer.jupiter.CartesianValueArgumentsProviderorg.junitpioneer.jupiter.CartesianValueArgumentsProviderObject varargs must not be nullMinimum abbreviation width with offset is %ds'Gni/56P<", (CharSequence) "Object varargs must not be null");
      assertEquals(166, int0);
  }

  @Test(timeout = 4000)
  public void test1185()  throws Throwable  {
      String string0 = StringUtils.mid("org.apache.commons.lang3.exception.CloneFailedExceptionorg.apache.commons.lang3.exception.CloneFailedException", 75, 75);
      assertEquals("ang3.exception.CloneFailedException", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("ang3.exception.CloneFailedException", "ang3.exception.CloneFailedException", (-2143));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1186()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "_x%GT/";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.center("", (-2937));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "_x%GT/", (-2937));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((long[]) null, 'q', 53, (-2937));
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("", "Dwx8|rUEp");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeAll("oC6~!M&Bv&c", "@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      assertEquals("oC6~!M&Bv&c", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test1187()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '(');
      assertEquals("", string0);
      assertEquals(0, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1188()  throws Throwable  {
      String string0 = StringUtils.stripStart("org.junitpioneer.jupiter.DefaultLocaleExtension", "wlTBQ2YzMGy:B");
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "gg", 32);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(";", stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.toRootUpperCase("org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("ORG.JUNITPIONEER.JUPITER.REPORTENTRYEXTENSION", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(";", "org.junitpioneer.jupiter.DefaultLocaleExtension");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.abbreviateMiddle("org.junitpioneer.jupiter.DefaultLocaleExtension", "org.junitpioneer.jupiter.DefaultLocaleExtension", 12);
      assertEquals("org.junitpioneer.jupiter.DefaultLocaleExtension", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      String string4 = StringUtils.reverse("org.junitpioneer.jupiter.ReportEntryExtension");
      assertEquals("noisnetxEyrtnEtropeR.retipuj.reenoiptinuj.gro", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1189()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(106);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(106));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(106));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = linkedHashSet0.add(object1);
      assertTrue(boolean1);
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(106));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(106));
      
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      assertNotNull(string0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains("fU_7SZu1o7hGV]"));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "fU_7SZu1o7hGV]", 9);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.mid("java.lang.Object@5a0e1a2ffU_7SZu1o7hGV]java.lang.Object@483ba760", 106, (-1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains((-1)));
      
      String string3 = StringUtils.stripToNull("j+hm<NfUQ$SAj:");
      assertEquals("j+hm<NfUQ$SAj:", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "P27td#b<8", (CharSequence) "java.lang.Object@5a0e1a2ffU_7SZu1o7hGV]java.lang.Object@483ba760");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test1190()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "g0jShM}UM+zB\"F";
      boolean boolean0 = StringUtils.containsIgnoreCase("oyt'<1Sy^V2n", "g0jShM}UM+zB\"F");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("u(NxXP", 666);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("Y9", "g0jShM}UM+zB\"F");
      assertEquals("g0jShM}UM+zB\"F", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("g0jShM}UM+zB\"F", string2);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "DefaultTimeZone", "u(NxXP");
      assertEquals(4, int0);
      
      String string3 = StringUtils.stripToNull("H.`;1");
      assertEquals("H.`;1", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.join((Iterator<?>) null, '1');
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, (String) null, (-1316), 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1316
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1191()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("@DefaultLocale can only be used with language tag if language, country, and variant are not set", "Search and Replace array lengths don't match: ");
      assertEquals("@DefaultLocale can only be used with language tag if language, country, and variant are not set", string0);
      assertNotNull(string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertFalse(boolean0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.join((Iterable<?>) enumSet0, "Search and Replace array lengths don't match: ");
      assertEquals("FORMAT", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      boolean boolean1 = StringUtils.isEmpty("FORMAT");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1192()  throws Throwable  {
      String string0 = StringUtils.mid("", 106, 69);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1193()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("", "", 46);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.toRootLowerCase("', has a length less than 2");
      assertEquals("', has a length less than 2", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("', has a length less than 2", "Fk*P LBUeM`/Wi&I?");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = locale0.getExtension('d');
      assertNull(string4);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      String string5 = StringUtils.center("", 0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "Fk*P LBUeM`/Wi&I?", 0);
      assertEquals((-1), int2);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string6 = StringUtils.mid("p{InCombiningDiacriticalMarks}+", 46, (-1));
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      
      String string7 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      
      boolean boolean0 = StringUtils.containsWhitespace("', has a length less than 2");
      assertTrue(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(0));
      
      String string8 = StringUtils.stripToNull("-1234.4836444196O3.0");
      assertEquals("-1234.4836444196O3.0", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string9 = StringUtils.replaceIgnoreCase("]", "", "Fk*P LBUeM`/Wi&I?", 46);
      assertEquals("]", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test1194()  throws Throwable  {
      long[] longArray0 = new long[2];
      String string0 = StringUtils.join(longArray0, 'M');
      assertEquals("0M0", string0);
      assertEquals(2, longArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test1195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.center("<GZk3", 223, 'I');
      assertEquals("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string1);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.ordinalIndexOf("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray1);
      
      String string3 = StringUtils.center("", 223);
      assertEquals("                                                                                                                                                                                                                               ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "                                                                                                                                                                                                                               ", (CharSequence) "<GZk3", 3465);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.mid((String) null, 5, 3465);
      assertNull(string4);
      
      String string5 = StringUtils.removeIgnoreCase("-1234.4836444196O3.0", "[=rpg");
      assertEquals("-1234.4836444196O3.0", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("<GZk3"));
      
      String string6 = StringUtils.stripToNull("");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string7 = StringUtils.replaceIgnoreCase("", "Locale must not be null", (String) null, 0);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1196()  throws Throwable  {
      String string0 = StringUtils.upperCase("ag2");
      assertEquals("AG2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1197()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) " ", 8192);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1198()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, 'l');
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(arrayList0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test1199()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1200()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, "");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1201()  throws Throwable  {
      StringUtils.isAlphanumericSpace("Q");
      // Undeclared exception!
      StringUtils.rightPad("Q", 65536, 'V');
  }

  @Test(timeout = 4000)
  public void test1202()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("c0bewB", "c0bewB", "c0bewB");
      assertEquals("c0bewB", string0);
  }

  @Test(timeout = 4000)
  public void test1203()  throws Throwable  {
      String string0 = StringUtils.mid("", (-20), (-20));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1204()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("Ex27jM*'}x", "Ex27jM*'}x");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1205()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("1w.h^vC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1206()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = 151;
      StringUtils.replace(" in an array of ", " in an array of ", " in an array of ", 151);
      charSequenceArray0[0] = (CharSequence) " in an array of ";
      charSequenceArray0[1] = (CharSequence) " in an array of ";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      StringUtils.join((Object[]) charSequenceArray0, "1.$#P");
      charSequenceArray0[4] = (CharSequence) " in an array of 1.$#P in an array of 1.$#P1.$#P1.$#P1.$#P1.$#P1.$#P";
      StringUtils.truncate((String) null, 151, 151);
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = null;
      StringUtils.removeIgnoreCase("`Zn=3)K", (String) null);
      charSequenceArray0[7] = (CharSequence) "`Zn=3)K";
      StringUtils.prependIfMissingIgnoreCase(".A-ZjLylvBDex", "Array element ", charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "`Zn=3)K", 321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1207()  throws Throwable  {
      String string0 = StringUtils.replace("Locale must not be null", "Locale must not be null", "Locale must not be null");
      assertEquals("Locale must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test1208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("{^?#2G'tS");
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1209()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      linkedHashSet0.parallelStream();
      linkedHashSet0.add(object0);
      linkedHashSet0.add((Object) null);
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      String string0 = StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "fU_7SZu1o7hGV]", (CharSequence) "fU_7SZu1o7hGV]", 0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      String string2 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "P27td#b<8");
      assertTrue(string2.equals((Object)string1));
      
      StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      Stack<Object> stack0 = new Stack<Object>();
      ListIterator<Object> listIterator0 = stack0.listIterator(0);
      StringUtils.join((Iterator<?>) listIterator0, ' ');
      StringUtils.upperCase("fU_7SZu1o7hGV]");
      String string3 = StringUtils.rightPad("erkL", (-3626), 'l');
      assertEquals("erkL", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("fU_7SZu1o7hGV]");
      assertEquals(12, stringArray0.length);
      
      String string4 = StringUtils.trimToNull("fU_7SZu1o7hGV]");
      assertNotNull(string4);
      assertEquals("fU_7SZu1o7hGV]", string4);
      assertFalse(string4.equals((Object)string0));
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'l';
      longArray0[2] = (-1328L);
      longArray0[3] = (long) 'l';
      longArray0[4] = (long) 0;
      StringUtils.join(longArray0, 'l', 2891, 0);
      String string5 = StringUtils.defaultString("Dwx8|rUEp", "erkL");
      assertEquals("Dwx8|rUEp", string5);
      
      String string6 = StringUtils.removeAll("", "fU_7SZu1o7hGV]");
      assertFalse(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1210()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      linkedHashSet0.add((Object) null);
      Object object0 = new Object();
      linkedHashSet0.add(object0);
      Stream<Object> stream0 = linkedHashSet0.parallelStream();
      linkedHashSet0.add(object0);
      linkedHashSet0.add((Object) null);
      linkedHashSet0.add(stream0);
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      StringUtils.join(iterator0, "fU_7SZu1o7hGV]");
      String string0 = StringUtils.mid("fU_7SZu1o7hGV]", 0, 2891);
      String string1 = StringUtils.removeIgnoreCase("fU_7SZu1o7hGV]", "P27td#b<8");
      assertTrue(string1.equals((Object)string0));
      
      StringUtils.containsWhitespace("fU_7SZu1o7hGV]");
      Stack<Object> stack0 = new Stack<Object>();
      String string2 = StringUtils.stripToNull("fU_7SZu1o7hGV]");
      assertEquals("fU_7SZu1o7hGV]", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("...", 32);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test1211()  throws Throwable  {
      String string0 = StringUtils.removeFirst("t", "t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1212()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1213()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1214()  throws Throwable  {
      String string0 = StringUtils.CR;
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("\r", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1215()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = StringUtils.getBytes("Illegal range. Equal from and to will produce an empty range.", charset0);
      assertEquals(61, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test1216()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("(MIl>&H");
      StringUtils.getBytes("(MIl>&H", charset0);
      StringUtils.replaceFirst("(MIl>&H", "OwTz3;Htub![Y&?R _K", (String) null);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.equalsAnyIgnoreCase("(MIl>&H", charSequenceArray0);
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1217()  throws Throwable  {
      StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw");
      String string0 = "Illegal range. There's no way to get from %s to %s with a step of %s.";
      String[] stringArray0 = StringUtils.split("Illegal range. There's no way to get from %s to %s with a step of %s.");
      String string1 = " ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Aborting to protect against StackOverflowError - output of one loop is the input of another{!#`&dyF~ZTr;dwMinimum abbreviation widh with offset is %d{!#`&dyF~ZTr;dw", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1218()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String[] stringArray0 = new String[5];
      stringArray0[4] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "u-e^4Amc:kTW$ =L{}dGX;`";
      stringArray0[3] = " ";
      stringArray0[4] = "u-e^4Amc:kTW$ =L{}dGX;`";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("u-e^4Amc:kTW$ =L{}dGX;`", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1219()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("\u0004$o@WoI?e@4estH");
      String string0 = StringUtils.getDigits("\u0004$o@WoI?e@4estH");
      assertEquals("4", string0);
      
      String string1 = StringUtils.replaceEach(" 1ka{qT{D2_qF?/", stringArray0, stringArray0);
      assertEquals(" 1ka{qT{D2_qF?/", string1);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1220()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("-_hrT.D}1nS4a4cJt9", (String[]) null, (String[]) null);
      assertEquals("-_hrT.D}1nS4a4cJt9", string0);
  }

  @Test(timeout = 4000)
  public void test1221()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Search and Replace array lengths don't match: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1222()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.replaceEachRepeatedly("4:qhP7[V", stringArray0, stringArray0);
      assertEquals("4:qhP7[V", string0);
      
      boolean boolean0 = StringUtils.isBlank("4:qhP7[V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1223()  throws Throwable  {
      StringUtils.replaceChars("org.junitpioneer.jupiter.StdIoExtension", 'C', 'C');
      StringUtils.isAsciiPrintable("org.junitpioneer.jupiter.StdIoExtension");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.junitpioneer.jupiter.StdIoExtension";
      stringArray0[1] = "org.junitpioneer.jupiter.StdIoExtension";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("org.junitpioneer.jupiter.StdIoExtension", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1224()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("g2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1225()  throws Throwable  {
      String string0 = StringUtils.wrap("V^&,`1L]N+|\n$", 'I');
      assertEquals("IV^&,`1L]N+|\n$I", string0);
      
      String string1 = StringUtils.overlay("IV^&,`1L]N+|\n$I", "IV^&,`1L]N+|\n$I", 19, 19);
      assertNotNull(string1);
      assertEquals("IV^&,`1L]N+|\n$IIV^&,`1L]N+|\n$I", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("IV^&,`1L]N+|\n$IIV^&,`1L]N+|\n$I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1226()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1227()  throws Throwable  {
      String string0 = StringUtils.overlay("aj]Z_F", "aj]Z_F", 1, 1);
      assertNotNull(string0);
      assertEquals("aaj]Z_Fj]Z_F", string0);
      
      boolean boolean0 = StringUtils.isAlpha("aaj]Z_Fj]Z_F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1228()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, 'i');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1229()  throws Throwable  {
      StringUtils.getDigits((String) null);
      String string0 = StringUtils.stripStart((String) null, "gg");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("gg");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("gg", "", 32);
      int int0 = StringUtils.lastIndexOfAny(";", stringArray0);
      assertEquals((-1), int0);
      
      StringUtils.isAlphanumeric((CharSequence) null);
      String string1 = StringUtils.toRootUpperCase("E#t&F");
      assertNotNull(string1);
      
      StringUtils.equalsIgnoreCase("E#T&F", "");
      String string2 = StringUtils.upperCase("gg");
      assertEquals("GG", string2);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle("E#t&F", "GG", (-437));
      assertEquals("E#t&F", string3);
      
      String string4 = StringUtils.reverse("");
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test1230()  throws Throwable  {
      String string0 = StringUtils.appendIfMissing("", "", (CharSequence[]) null);
      String string1 = StringUtils.rightPad("", 4146, '$');
      StringUtils.length("");
      StringUtils.ordinalIndexOf("", "", 0);
      String string2 = StringUtils.toRootLowerCase("");
      assertNotNull(string2);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Cannot clear and set the following entries at the same time: ");
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.center((String) null, 745);
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Cannot clear and set the following entries at the same time: ", 5437);
      assertEquals((-1), int0);
      
      StringUtils.mid("", 998, Integer.MIN_VALUE);
      String string4 = StringUtils.removeIgnoreCase("", "org.apache.commons.lang3.StringUtils");
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      
      StringUtils.containsWhitespace("");
      Stack<Object> stack0 = new Stack<Object>();
      String string5 = StringUtils.stripToNull("");
      assertNull(string5);
      
      StringUtils.isAlphanumericSpace((CharSequence) null);
      String string6 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "", 4146);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
  }

  @Test(timeout = 4000)
  public void test1231()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", (String) null);
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1232()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("qwjM5");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1233()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-1600));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1234()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("MYL-#[{.Z`H~639", "MYL-#[{.Z`H~639");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1235()  throws Throwable  {
      String string0 = StringUtils.strip("Never disable parameterized test method itself");
      assertEquals("Never disable parameterized test method itself", string0);
      
      String[] stringArray0 = StringUtils.split("Never disable parameterized test method itself");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase("Illegal range. Equal from and to will produce an empty range.", "", "D#}Co)4r+s)e+0c\"3nS");
      assertEquals("Illegal range. Equal from and to will produce an empty range.", string1);
  }

  @Test(timeout = 4000)
  public void test1236()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "\n";
      stringArray0[4] = "";
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWithAny("\n", stringArray0);
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", 3705);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrap("\n", "");
      assertEquals("\n", string1);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1237()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getExtensionKeys();
      Locale locale1 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant(locale1);
      locale0.hasExtensions();
      String string1 = StringUtils.lowerCase(",SpZ^cesFfb", locale0);
      assertEquals(",spz^cesffb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("!MON85Wv;^d8}/vJL78");
      assertEquals("!MON85Wv;^d8}/vJL78", string2);
      
      String[] stringArray0 = StringUtils.split("", "Minimum abbreviation width is %d");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.defaultIfBlank("", "maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string3);
  }

  @Test(timeout = 4000)
  public void test1238()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("\r|6~{^MalYa^", (CharSequence) null, 1640);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1239()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1240()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      StringUtils.toRootLowerCase((String) null);
      charSequenceArray0[0] = (CharSequence) null;
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string1 = StringUtils.unwrap("^\"5^w%L;z0:&X=X,", 'c');
      assertEquals("^\"5^w%L;z0:&X=X,", string1);
      
      charSequenceArray0[2] = (CharSequence) "^\"5^w%L;z0:&X=X,";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1241()  throws Throwable  {
      String string0 = StringUtils.CR;
      String string1 = StringUtils.leftPad("\r", 53, "\r");
      assertNotNull(string1);
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string1);
  }

  @Test(timeout = 4000)
  public void test1242()  throws Throwable  {
      String string0 = StringUtils.center("A|Wc;,,9&:lq%*V'", 2657);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1243()  throws Throwable  {
      String string0 = StringUtils.repeat('e', (int) 'e');
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", string0);
  }

  @Test(timeout = 4000)
  public void test1244()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1245()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1246()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "\r");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test1247()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 645);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1248()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 10);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1249()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1250()  throws Throwable  {
      String string0 = StringUtils.rightPad("i!.c:", (-1318));
      assertEquals("i!.c:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1251()  throws Throwable  {
      String string0 = null;
      StringUtils.splitByWholeSeparator("<GZk3", (String) null, 223);
      StringUtils.center("<GZk3", 223, 'I');
      StringUtils.lowerCase((String) null, (Locale) null);
      StringUtils.length((CharSequence) null);
      StringUtils.ordinalIndexOf("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII<GZk3IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII", (CharSequence) null, 0);
      StringUtils.toRootLowerCase((String) null);
      StringUtils.splitByWholeSeparator((String) null, "");
      StringUtils.center("", 223);
      StringUtils.center("", (-1));
      StringUtils.wrap("", "");
      String string1 = "tpZPJ&0WZ9VFej{>p";
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      CharBuffer charBuffer0 = null;
      charset0.aliases();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1252()  throws Throwable  {
      String string0 = StringUtils.wrap("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1253()  throws Throwable  {
      StringUtils.uncapitalize("Nn=V9V\"E[");
      String string0 = null;
      Locale locale0 = Locale.GERMAN;
      locale0.getUnicodeLocaleAttributes();
      StringUtils.lowerCase((String) null, locale0);
      StringUtils.isNumericSpace((CharSequence) null);
      // Undeclared exception!
      try { 
        Charset.forName("6exd->@c`N6/8");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 6exd->@c`N6/8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test1254()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 127);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1255()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      StringUtils.join(objectArray0, (String) null, Integer.MAX_VALUE, 4209);
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      StringUtils.repeat("Z~", (-846));
      String string1 = StringUtils.upperCase("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("...", "", "%lx(");
      assertEquals("...", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      int int1 = StringUtils.lastIndexOf((CharSequence) "", Integer.MAX_VALUE, 4209);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.remove(" annotation, but there were ", "");
      assertEquals(" annotation, but there were ", string3);
  }

  @Test(timeout = 4000)
  public void test1256()  throws Throwable  {
      int int0 = StringUtils.compare("9", "Minimum abbreviation width is %d");
      assertEquals((-20), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "9", (-1));
      assertEquals((-1), int1);
      
      String string0 = StringUtils.overlay("9", "Minimum abbreviation width is %d", 76, 57);
      assertEquals("9Minimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.wrapIfMissing("g]\"<]#y6r", (String) null);
      assertNotNull(string1);
      assertEquals("g]\"<]#y6r", string1);
  }

  @Test(timeout = 4000)
  public void test1257()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "V", 8, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1258()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("No instructins to disable", "d");
      assertEquals("isable", string0);
  }

  @Test(timeout = 4000)
  public void test1259()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("The String must not be empty", "The String must not be empty");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1260()  throws Throwable  {
      String string0 = StringUtils.removeAll("7YsJl}4wWRBZ1sVPYt|", "7YsJl}4wWRBZ1sVPYt|");
      assertEquals("|", string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("]Hd@K.A:T54");
      String string1 = StringUtils.join((List<?>) arrayList0, ".qlznB@J?%d7", 11, 11);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" STm8pmX9", "A|Vw(qCT5@%");
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test1261()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      String string0 = StringUtils.join((List<?>) arrayList0, (String) null, (-2084), (-2084));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1262()  throws Throwable  {
      int int0 = 5435;
      int[] intArray0 = new int[0];
      char char0 = 'U';
      int int1 = 8192;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'U', 5435, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5435
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1263()  throws Throwable  {
      String string0 = StringUtils.overlay("", "", 1639, 1639);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertTrue(string1.equals((Object)string0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1639;
      intArray0[1] = 1639;
      intArray0[2] = 1639;
      intArray0[3] = 1639;
      intArray0[4] = 1639;
      intArray0[5] = 1639;
      String string2 = StringUtils.join(intArray0, 'W', 1639, 16);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1264()  throws Throwable  {
      int[] intArray0 = new int[10];
      String string0 = StringUtils.join(intArray0, 'e');
      assertNotNull(string0);
      assertEquals("0e0e0e0e0e0e0e0e0e0", string0);
  }

  @Test(timeout = 4000)
  public void test1265()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-351);
      intArray0[1] = (-2671);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      char char0 = '&';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '&', (-2671), (-306));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2671
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1266()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.join((Object[]) charSequenceArray0, ".A-1ZjLylvBDex");
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1267()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "9IMs6/W oje*ne";
      stringArray0[2] = "g0jShM}UM+zB\"F";
      stringArray0[3] = "bpffo(K";
      StringUtils.firstNonEmpty(stringArray0);
      int int0 = 15;
      StringUtils.lastIndexOf((CharSequence) "g0jShM}UM+zB\"F", (CharSequence) "9IMs6/W oje*ne", 15);
      StringUtils.removeEndIgnoreCase("9IMs6/W oje*ne", "9IMs6/W oje*ne");
      String string0 = "-1234.4836444196O3.0";
      StringUtils.prependIfMissingIgnoreCase("16.0W16.0W16.0W16.0W16.0W0.0", "16.0W16.0W16.0W16.0W16.0W0.0", stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "9IMs6/W oje*ne", (-555));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1268()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = StringUtils.join(objectArray0, "Threshold must not be negative");
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "java.lang.Object@4b113478Threshold must not be negativejava.lang.Object@1ccb1d2cThreshold must not be negativejava.lang.Object@2e2baaeThreshold must not be negativejava.lang.Object@317744b2Threshold must not be negativejava.lang.Object@73070410Threshold must not be negativejava.lang.Object@37614521Threshold must not be negativejava.lang.Object@2041aea9Threshold must not be negativejava.lang.Object@2b983cc7Threshold must not be negativejava.lang.Object@60749a20", (CharSequence) "Threshold must not be negative", 56);
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test1269()  throws Throwable  {
      String string0 = StringUtils.repeat('H', 0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.substringAfter("u(NxXP", 0);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("u(NxXP", 322);
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviate("X4y|,tMBbu.<;2r$eTU", "", 2021, 0);
      assertEquals("X4y|,tMBbu.<;2r$eTU", string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[0], charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1270()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[1] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[2] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[3] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[4] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      StringUtils.replace("", "\"kTDsY[YAyA`[8h[", "");
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[7] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      charSequenceArray0[8] = (CharSequence) "\"kTDsY[YAyA`[8h[";
      StringUtils.prependIfMissingIgnoreCase("\"kTDsY[YAyA`[8h[", "\"kTDsY[YAyA`[8h[", charSequenceArray0);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[8], (CharSequence) "\"kTDsY[YAyA`[8h[", (-355));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1271()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      StringUtils.repeat("?", 27);
      StringUtils.upperCase("@StdIo defined no input, so System.in is still in place and no StdIn parameter can be provided. If you want to define empty input, use `@StdIo(\"\")`.");
      StringUtils.join((double[]) null, 'i', 321, 27);
      StringUtils.substringBetween("Could not resolve parameter of type %s.$", "???????????????????????????", "");
      int int0 = StringUtils.countMatches((CharSequence) null, '8');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1272()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '.');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1273()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1274()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String[] stringArray0 = new String[1];
      stringArray0[0] = "g0jSh}UM+zB\"F";
      StringUtils.strip("g0jSh}UM+zB\"F", "g0jSh}UM+zB\"F");
      StringUtils.substringBeforeLast((String) null, (String) null);
      StringUtils.isAlphanumeric((CharSequence) null);
      StringUtils.valueOf((char[]) null);
      StringUtils.wrapIfMissing("Fk*P LBUeM`/Wi&I?", "g0jSh}UM+zB\"F");
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.stripStart("", "=l><+-SLB91_'ztntm");
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.trimToNull("g0jSh}UM+zB\"F");
      String string0 = StringUtils.join((char[]) null, '');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1275()  throws Throwable  {
      StringUtils.abbreviateMiddle("\r", "\r", 3);
      StringUtils.splitByCharacterType("Object varargs must not be null");
      StringUtils.overlay("uO|KKUQj}cVPtv-UMxcH vs ", "Object varargs must not be null", (-1109), 3);
      StringUtils.splitPreserveAllTokens("\r", "org.apache.commons.lang3.StringUtils");
      StringUtils.remove("G(a(AU9Qf", 'a');
      StringUtils.isBlank("org.apache.commons.lang3.StringUtils");
      StringUtils.chomp((String) null);
      StringUtils.isAsciiPrintable((CharSequence) null);
      StringUtils.isEmpty("G(a(AU9Qf");
      StringUtils.abbreviate((String) null, "_}~<?MMsdD5-0`T/BV", (-1109), 2612);
      StringUtils.equals((CharSequence) "Object varargs must not be nullKKUQj}cVPtv-UMxcH vs ", (CharSequence) "Object varargs must not be nullKKUQj}cVPtv-UMxcH vs ");
      StringUtils.replaceOnce("uO|KKUQj}cVPtv-UMxcH vs ", "g0jSh}UM+zB\"F", "vG<((");
      StringUtils.indexOf((CharSequence) "uO|KKUQj}cVPtv-UMxcH vs ", (CharSequence) null, 2612);
      StringUtils.substringAfterLast("_}~<?MMsdD5-0`T/BV", (String) null);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "uO|KKUQj}cVPtv-UMxcH vs ", (CharSequence) "G(a(AU9Qf", (-1109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1276()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("%PT/_|U", "%PT/_|U", 9986);
      assertEquals("%PT/_|U", string0);
  }

  @Test(timeout = 4000)
  public void test1277()  throws Throwable  {
      String string0 = StringUtils.defaultString("(DsOSz");
      assertEquals("(DsOSz", string0);
  }

  @Test(timeout = 4000)
  public void test1278()  throws Throwable  {
      String string0 = StringUtils.abbreviate("+", "+", 3674, 3674);
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test1279()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = StringUtils.join(doubleArray0, 'q');
      assertNotNull(string0);
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test1280()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("aa", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1281()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.prependIfMissing(" ", " ", (CharSequence[]) null);
      assertEquals(" ", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1282()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      String string1 = StringUtils.removeAll(" ", " ");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test1283()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String string0 = StringUtils.remove(stringArray0[0], 'b');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1284()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1418, 1418);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1285()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1286()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      StringUtils.remove("", 'j');
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      charSequenceArray1[0] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      StringUtils.abbreviate(" vs ", (-244), 1885);
      charSequenceArray1[2] = (CharSequence) " vs ";
      StringUtils.prependIfMissing("{}", "", charSequenceArray1);
      charSequenceArray0[1] = (CharSequence) "{}";
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      charArray0[8] = 'j';
      StringUtils.join(charArray0, 'j');
      charSequenceArray0[2] = (CharSequence) "jjjjjjjjjjjjjjjjj";
      StringUtils.removeAll(" vs ", "");
      charSequenceArray0[3] = (CharSequence) " vs ";
      StringUtils.defaultString("Locale must not be null", "");
      charSequenceArray0[4] = (CharSequence) "Locale must not be null";
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short)5;
      shortArray0[2] = (short)0;
      StringUtils.join(shortArray0, 'u');
      charSequenceArray0[5] = (CharSequence) "12u5u0";
      StringWriter stringWriter0 = new StringWriter();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 'j';
      doubleArray0[2] = (double) 'j';
      doubleArray0[3] = (double) 'j';
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)12;
      char char0 = 'l';
      StringUtils.join(doubleArray0, 'l', 0, 0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", (int) (short)0, 4417);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test1287()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Strings must not be nullStrings must not be nullEsf%~yYKjU8nMKW8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1288()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1289()  throws Throwable  {
      StringUtils.substringBetween("", (String) null);
      StringUtils.reverseDelimited("=Q\"?[Oj", 'Y');
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("pZ:d^L8b9K?,47", "|KWQ] ");
      StringUtils.indexOfDifference((CharSequence) "=Q\"?[Oj", (CharSequence) "=Q\"?[Oj");
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, 'v');
      StringUtils.reverseDelimited("=Q\"?[Oj", 'Y');
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.replaceEach("=Q\"?[Oj", stringArray0, stringArray0);
      String string0 = StringUtils.replaceChars((String) null, "{60>A~{2}>{N", "pZ:d^L8b9K?,47");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1290()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("Ojct varargs must not be null", "", "");
      assertEquals("Ojct varargs must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test1291()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "A(NXT<6PFz";
      String string1 = StringUtils.prependIfMissingIgnoreCase(" ", "A(NXT<6PFz", charSequenceArray0);
      assertEquals("A(NXT<6PFz ", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "ZOd.hhpPw", (CharSequence) "ZOd.hhpPw");
      assertTrue(boolean0);
      
      StringUtils.isBlank(charSequenceArray0[0]);
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      String string2 = StringUtils.stripStart("saqygo", "g0jSh}UM+zB\"FFk*P LBUeM`/Wi&I?\n");
      assertEquals("saqygo", string2);
      
      boolean boolean2 = StringUtils.isWhitespace("saqygo");
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.contains((CharSequence) " ", 20);
      boolean boolean4 = StringUtils.isAlpha("saqygo");
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test1292()  throws Throwable  {
      String string0 = StringUtils.replaceChars("A|Wc;,,9", "A|Wc;,,9", "A|Wc;,,9");
      assertEquals("A|Wc;,,9", string0);
  }

  @Test(timeout = 4000)
  public void test1293()  throws Throwable  {
      char[] charArray0 = new char[7];
      String string0 = StringUtils.join(charArray0, '\u0000');
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test1294()  throws Throwable  {
      short[] shortArray0 = new short[11];
      String string0 = StringUtils.join(shortArray0, '6');
      assertEquals("060606060606060606060", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1295()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("@DefaultLocale can only be used with language tag if language, country, and variant are not set");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1296()  throws Throwable  {
      String string0 = StringUtils.CR;
      StringUtils.join((int[]) null, 'W', 487, Integer.MAX_VALUE);
      StringUtils.stripAccents((String) null);
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test1297()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'p', (-875), (-875));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1298()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("<GZk3");
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1299()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1300()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test1301()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1302()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 459.3239F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      String string0 = StringUtils.join(floatArray0, '#');
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '#');
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("R-=4w!~V0Vo", 2601);
      assertEquals("", string1);
      
      String string2 = StringUtils.truncate("0.0#-1.0#459.3239#0.0#0.0", 48);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("ztB@X}jzy0Ze\"_#a,<", "ztB@X}jzy0Ze\"_#a,<", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1303()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The character ", "", "Comparator should not be null.");
      assertEquals("The character ", string0);
      
      boolean boolean0 = StringUtils.isAlpha("The character ");
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1697.8F);
      floatArray0[1] = (-158.28F);
      StringUtils.join(floatArray0, '{', (-2882), (-2882));
      String string1 = StringUtils.removeStartIgnoreCase("The character ", "The character ");
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The character ");
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("The character ");
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)1845;
      shortArray0[2] = (short)160;
      shortArray0[3] = (short) (-971);
      shortArray0[4] = (short) (-1171);
      String string2 = StringUtils.join(shortArray0, '{');
      assertEquals("0{1845{160{-971{-1171", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test1304()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("18ccX;,hcD,]0n", "18ccX;,hcD,]0n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1305()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1306()  throws Throwable  {
      String string0 = StringUtils.stripStart("/=w)9`!egUy.31iVe", "/=w)9`!egUy.31iVe");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "/=w)9`!egUy.31iVe");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1307()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("+", "+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1308()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1309()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1310()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("<ofdh%/` ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1311()  throws Throwable  {
      StringUtils.replaceChars("{~^-=_v}\";-O", 'r', '0');
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      // Undeclared exception!
      try { 
        arrayList0.listIterator(1215);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1215
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1312()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", '\"', '\"');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
  }
}
